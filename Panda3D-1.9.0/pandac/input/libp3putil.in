1422499911
2 3
10 libp3putil 4 xqRv 12 panda3d.core 
877
932 5 clear 0 4 1811 68 PointerToBase< ReferenceCountedVector< unsigned short int > >::clear 0 1 13 0
89
inline void ::PointerToBase< ReferenceCountedVector< unsigned short int > >::clear(void);

933 6 output 0 4 1811 69 PointerToBase< ReferenceCountedVector< unsigned short int > >::output 0 1 14 0
97
void ::PointerToBase< ReferenceCountedVector< unsigned short int > >::output(ostream &out) const;

934 19 ~PointerToArrayBase 0 4 1810 61 PointerToArrayBase< unsigned short int >::~PointerToArrayBase 0 0 0
77
inline ::PointerToArrayBase< unsigned short int >::~PointerToArrayBase(void);

935 19 ConstPointerToArray 0 4 1809 62 ConstPointerToArray< unsigned short int >::ConstPointerToArray 0 3 1 2 3 0
355
inline ::ConstPointerToArray< unsigned short int >::ConstPointerToArray(PointerToArray< unsigned short int > const &copy);
inline ::ConstPointerToArray< unsigned short int >::ConstPointerToArray(ConstPointerToArray< unsigned short int > const &copy);
inline ::ConstPointerToArray< unsigned short int >::ConstPointerToArray(_object *self, _object *source);

936 4 size 0 4 1809 47 ConstPointerToArray< unsigned short int >::size 0 1 4 0
82
inline unsigned int ::ConstPointerToArray< unsigned short int >::size(void) const;

937 11 get_element 0 4 1809 54 ConstPointerToArray< unsigned short int >::get_element 0 1 5 0
112
inline unsigned short int const &::ConstPointerToArray< unsigned short int >::get_element(unsigned int n) const;

938 11 __getitem__ 0 4 1809 54 ConstPointerToArray< unsigned short int >::__getitem__ 0 1 6 0
112
inline unsigned short int const &::ConstPointerToArray< unsigned short int >::__getitem__(unsigned int n) const;

939 8 get_data 0 4 1809 51 ConstPointerToArray< unsigned short int >::get_data 0 1 7 0
94
inline basic_string< char > ::ConstPointerToArray< unsigned short int >::get_data(void) const;

940 11 get_subdata 0 4 1809 54 ConstPointerToArray< unsigned short int >::get_subdata 0 1 8 0
127
inline basic_string< char > ::ConstPointerToArray< unsigned short int >::get_subdata(unsigned int n, unsigned int count) const;

941 13 get_ref_count 0 4 1809 56 ConstPointerToArray< unsigned short int >::get_ref_count 0 1 9 0
82
inline int ::ConstPointerToArray< unsigned short int >::get_ref_count(void) const;

942 18 get_node_ref_count 0 4 1809 61 ConstPointerToArray< unsigned short int >::get_node_ref_count 0 1 10 0
87
inline int ::ConstPointerToArray< unsigned short int >::get_node_ref_count(void) const;

943 13 __getbuffer__ 0 4 1809 56 ConstPointerToArray< unsigned short int >::__getbuffer__ 0 1 11 0
112
int ::ConstPointerToArray< unsigned short int >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

944 17 __releasebuffer__ 0 4 1809 60 ConstPointerToArray< unsigned short int >::__releasebuffer__ 0 1 12 0
106
void ::ConstPointerToArray< unsigned short int >::__releasebuffer__(_object *self, Py_buffer *view) const;

945 20 ~ConstPointerToArray 0 4 1809 63 ConstPointerToArray< unsigned short int >::~ConstPointerToArray 0 0 0
72
::ConstPointerToArray< unsigned short int >::~ConstPointerToArray(void);

946 13 DoubleBitMask 0 4 1813 59 DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask 0 2 15 16 0
203
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask(void);
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask(DoubleBitMask< BitMask< unsigned int, 32 > > const &copy);

947 10 operator = 0 4 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator = 0 1 17 0
170
inline DoubleBitMask< BitMask< unsigned int, 32 > > &::DoubleBitMask< BitMask< unsigned int, 32 > >::operator =(DoubleBitMask< BitMask< unsigned int, 32 > > const &copy);

948 6 all_on 0 4 1813 52 DoubleBitMask< BitMask< unsigned int, 32 > >::all_on 0 1 18 0
120
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::all_on(void);

949 7 all_off 0 4 1813 53 DoubleBitMask< BitMask< unsigned int, 32 > >::all_off 0 1 19 0
121
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::all_off(void);

950 8 lower_on 0 4 1813 54 DoubleBitMask< BitMask< unsigned int, 32 > >::lower_on 0 1 20 0
129
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::lower_on(int on_bits);

951 3 bit 0 4 1813 49 DoubleBitMask< BitMask< unsigned int, 32 > >::bit 0 1 21 0
122
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::bit(int index);

952 5 range 0 4 1813 51 DoubleBitMask< BitMask< unsigned int, 32 > >::range 0 1 22 0
136
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::range(int low_bit, int size);

953 14 ~DoubleBitMask 0 4 1813 60 DoubleBitMask< BitMask< unsigned int, 32 > >::~DoubleBitMask 0 0 0
76
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::~DoubleBitMask(void);

954 16 has_max_num_bits 0 4 1813 62 DoubleBitMask< BitMask< unsigned int, 32 > >::has_max_num_bits 0 1 23 0
90
static inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_max_num_bits(void);

955 16 get_max_num_bits 0 4 1813 62 DoubleBitMask< BitMask< unsigned int, 32 > >::get_max_num_bits 0 1 24 0
89
static inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_max_num_bits(void);

956 12 get_num_bits 0 4 1813 58 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_bits 0 1 25 0
85
static inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_bits(void);

957 7 get_bit 0 4 1813 53 DoubleBitMask< BitMask< unsigned int, 32 > >::get_bit 0 1 26 0
85
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_bit(int index) const;

958 7 set_bit 0 4 1813 53 DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit 0 1 27 0
79
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit(int index);

959 9 clear_bit 0 4 1813 55 DoubleBitMask< BitMask< unsigned int, 32 > >::clear_bit 0 1 28 0
81
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear_bit(int index);

960 10 set_bit_to 0 4 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit_to 0 1 29 0
94
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit_to(int index, bool value);

961 7 is_zero 0 4 1813 53 DoubleBitMask< BitMask< unsigned int, 32 > >::is_zero 0 1 30 0
80
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::is_zero(void) const;

962 9 is_all_on 0 4 1813 55 DoubleBitMask< BitMask< unsigned int, 32 > >::is_all_on 0 1 31 0
82
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::is_all_on(void) const;

963 7 extract 0 4 1813 53 DoubleBitMask< BitMask< unsigned int, 32 > >::extract 0 1 32 0
105
inline unsigned int ::DoubleBitMask< BitMask< unsigned int, 32 > >::extract(int low_bit, int size) const;

964 5 store 0 4 1813 51 DoubleBitMask< BitMask< unsigned int, 32 > >::store 0 1 33 0
109
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::store(unsigned int value, int low_bit, int size);

965 10 has_any_of 0 4 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::has_any_of 0 1 34 0
100
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_any_of(int low_bit, int size) const;

966 10 has_all_of 0 4 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::has_all_of 0 1 35 0
100
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_all_of(int low_bit, int size) const;

967 9 set_range 0 4 1813 55 DoubleBitMask< BitMask< unsigned int, 32 > >::set_range 0 1 36 0
93
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_range(int low_bit, int size);

968 11 clear_range 0 4 1813 57 DoubleBitMask< BitMask< unsigned int, 32 > >::clear_range 0 1 37 0
95
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear_range(int low_bit, int size);

969 12 set_range_to 0 4 1813 58 DoubleBitMask< BitMask< unsigned int, 32 > >::set_range_to 0 1 38 0
108
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_range_to(bool value, int low_bit, int size);

970 15 get_num_on_bits 0 4 1813 61 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_on_bits 0 1 39 0
87
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_on_bits(void) const;

971 16 get_num_off_bits 0 4 1813 62 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_off_bits 0 1 40 0
88
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_off_bits(void) const;

972 17 get_lowest_on_bit 0 4 1813 63 DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_on_bit 0 1 41 0
89
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_on_bit(void) const;

973 18 get_lowest_off_bit 0 4 1813 64 DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_off_bit 0 1 42 0
90
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_off_bit(void) const;

974 18 get_highest_on_bit 0 4 1813 64 DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_on_bit 0 1 43 0
90
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_on_bit(void) const;

975 19 get_highest_off_bit 0 4 1813 65 DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_off_bit 0 1 44 0
91
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_off_bit(void) const;

976 29 get_next_higher_different_bit 0 4 1813 75 DoubleBitMask< BitMask< unsigned int, 32 > >::get_next_higher_different_bit 0 1 45 0
108
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_next_higher_different_bit(int low_bit) const;

977 15 invert_in_place 0 4 1813 61 DoubleBitMask< BitMask< unsigned int, 32 > >::invert_in_place 0 1 46 0
82
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::invert_in_place(void);

978 18 has_bits_in_common 0 4 1813 64 DoubleBitMask< BitMask< unsigned int, 32 > >::has_bits_in_common 0 1 47 0
144
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_bits_in_common(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

979 5 clear 0 4 1813 51 DoubleBitMask< BitMask< unsigned int, 32 > >::clear 0 1 48 0
72
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear(void);

980 6 output 0 4 1813 52 DoubleBitMask< BitMask< unsigned int, 32 > >::output 0 1 49 0
80
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output(ostream &out) const;

981 13 output_binary 0 4 1813 59 DoubleBitMask< BitMask< unsigned int, 32 > >::output_binary 0 2 50 51 0
111
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output_binary(ostream &out, int spaces_every = (4)) const;

982 10 output_hex 0 4 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::output_hex 0 2 52 53 0
108
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output_hex(ostream &out, int spaces_every = (4)) const;

983 5 write 0 4 1813 51 DoubleBitMask< BitMask< unsigned int, 32 > >::write 0 2 54 55 0
103
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::write(ostream &out, int indent_level = (0)) const;

984 11 operator == 0 4 1813 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator == 0 1 56 0
137
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ==(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

985 11 operator != 0 4 1813 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator != 0 1 57 0
137
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator !=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

986 10 operator < 0 4 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator < 0 1 58 0
136
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

987 10 compare_to 0 4 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::compare_to 0 1 59 0
135
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::compare_to(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

988 10 operator & 0 4 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator & 0 1 60 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator &(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

989 10 operator | 0 4 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator | 0 1 61 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator |(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

990 10 operator ^ 0 4 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^ 0 1 62 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

991 10 operator ~ 0 68 1813 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ~ 0 1 63 0
123
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ~(void) const;

992 11 operator << 0 4 1813 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator << 0 1 64 0
129
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<(int shift) const;

993 11 operator >> 0 4 1813 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator >> 0 1 65 0
129
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>(int shift) const;

994 11 operator &= 0 4 1813 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator &= 0 1 66 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator &=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

995 11 operator |= 0 4 1813 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator |= 0 1 67 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator |=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

996 11 operator ^= 0 4 1813 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^= 0 1 68 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

997 12 operator <<= 0 4 1813 58 DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<= 0 1 69 0
84
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<=(int shift);

998 12 operator >>= 0 4 1813 58 DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>= 0 1 70 0
84
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>=(int shift);

999 14 get_class_type 0 4 1813 60 DoubleBitMask< BitMask< unsigned int, 32 > >::get_class_type 0 1 71 0
87
static TypeHandle ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_class_type(void);

1000 13 DoubleBitMask 0 4 1814 76 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask 0 2 72 73 0
254
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask(void);
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &copy);

1001 10 operator = 0 4 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator = 0 1 74 0
221
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > &::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator =(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &copy);

1002 6 all_on 0 4 1814 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_on 0 1 75 0
154
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_on(void);

1003 7 all_off 0 4 1814 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_off 0 1 76 0
155
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_off(void);

1004 8 lower_on 0 4 1814 71 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::lower_on 0 1 77 0
163
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::lower_on(int on_bits);

1005 3 bit 0 4 1814 66 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::bit 0 1 78 0
156
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::bit(int index);

1006 5 range 0 4 1814 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::range 0 1 79 0
170
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::range(int low_bit, int size);

1007 14 ~DoubleBitMask 0 4 1814 77 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::~DoubleBitMask 0 0 0
93
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::~DoubleBitMask(void);

1008 16 has_max_num_bits 0 4 1814 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_max_num_bits 0 1 80 0
107
static inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_max_num_bits(void);

1009 16 get_max_num_bits 0 4 1814 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_max_num_bits 0 1 81 0
106
static inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_max_num_bits(void);

1010 12 get_num_bits 0 4 1814 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_bits 0 1 82 0
102
static inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_bits(void);

1011 7 get_bit 0 4 1814 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_bit 0 1 83 0
102
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_bit(int index) const;

1012 7 set_bit 0 4 1814 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit 0 1 84 0
96
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit(int index);

1013 9 clear_bit 0 4 1814 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_bit 0 1 85 0
98
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_bit(int index);

1014 10 set_bit_to 0 4 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit_to 0 1 86 0
111
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit_to(int index, bool value);

1015 7 is_zero 0 4 1814 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_zero 0 1 87 0
97
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_zero(void) const;

1016 9 is_all_on 0 4 1814 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_all_on 0 1 88 0
99
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_all_on(void) const;

1017 7 extract 0 4 1814 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::extract 0 1 89 0
122
inline unsigned int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::extract(int low_bit, int size) const;

1018 5 store 0 4 1814 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::store 0 1 90 0
126
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::store(unsigned int value, int low_bit, int size);

1019 10 has_any_of 0 4 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_any_of 0 1 91 0
117
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_any_of(int low_bit, int size) const;

1020 10 has_all_of 0 4 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_all_of 0 1 92 0
117
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_all_of(int low_bit, int size) const;

1021 9 set_range 0 4 1814 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range 0 1 93 0
110
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range(int low_bit, int size);

1022 11 clear_range 0 4 1814 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_range 0 1 94 0
112
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_range(int low_bit, int size);

1023 12 set_range_to 0 4 1814 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range_to 0 1 95 0
125
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range_to(bool value, int low_bit, int size);

1024 15 get_num_on_bits 0 4 1814 78 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_on_bits 0 1 96 0
104
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_on_bits(void) const;

1025 16 get_num_off_bits 0 4 1814 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_off_bits 0 1 97 0
105
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_off_bits(void) const;

1026 17 get_lowest_on_bit 0 4 1814 80 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_on_bit 0 1 98 0
106
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_on_bit(void) const;

1027 18 get_lowest_off_bit 0 4 1814 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_off_bit 0 1 99 0
107
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_off_bit(void) const;

1028 18 get_highest_on_bit 0 4 1814 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_on_bit 0 1 100 0
107
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_on_bit(void) const;

1029 19 get_highest_off_bit 0 4 1814 82 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_off_bit 0 1 101 0
108
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_off_bit(void) const;

1030 29 get_next_higher_different_bit 0 4 1814 92 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_next_higher_different_bit 0 1 102 0
125
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_next_higher_different_bit(int low_bit) const;

1031 15 invert_in_place 0 4 1814 78 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::invert_in_place 0 1 103 0
99
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::invert_in_place(void);

1032 18 has_bits_in_common 0 4 1814 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_bits_in_common 0 1 104 0
178
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_bits_in_common(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

1033 5 clear 0 4 1814 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear 0 1 105 0
89
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear(void);

1034 6 output 0 4 1814 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output 0 1 106 0
97
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output(ostream &out) const;

1035 13 output_binary 0 4 1814 76 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_binary 0 2 107 108 0
128
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_binary(ostream &out, int spaces_every = (4)) const;

1036 10 output_hex 0 4 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_hex 0 2 109 110 0
125
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_hex(ostream &out, int spaces_every = (4)) const;

1037 5 write 0 4 1814 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::write 0 2 111 112 0
120
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::write(ostream &out, int indent_level = (0)) const;

1038 11 operator == 0 4 1814 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator == 0 1 113 0
171
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ==(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

1039 11 operator != 0 4 1814 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator != 0 1 114 0
171
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator !=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

1040 10 operator < 0 4 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator < 0 1 115 0
170
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

1041 10 compare_to 0 4 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::compare_to 0 1 116 0
169
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::compare_to(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

1042 10 operator & 0 4 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator & 0 1 117 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

1043 10 operator | 0 4 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator | 0 1 118 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

1044 10 operator ^ 0 4 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^ 0 1 119 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

1045 10 operator ~ 0 68 1814 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ~ 0 1 120 0
157
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ~(void) const;

1046 11 operator << 0 4 1814 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator << 0 1 121 0
163
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<(int shift) const;

1047 11 operator >> 0 4 1814 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >> 0 1 122 0
163
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>(int shift) const;

1048 11 operator &= 0 4 1814 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &= 0 1 123 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

1049 11 operator |= 0 4 1814 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |= 0 1 124 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

1050 11 operator ^= 0 4 1814 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^= 0 1 125 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

1051 12 operator <<= 0 4 1814 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<= 0 1 126 0
101
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<=(int shift);

1052 12 operator >>= 0 4 1814 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>= 0 1 127 0
101
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>=(int shift);

1053 14 get_class_type 0 4 1814 77 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_class_type 0 1 128 0
104
static TypeHandle ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_class_type(void);

1054 14 PointerToArray 0 4 1815 52 PointerToArray< unsigned short int >::PointerToArray 0 4 129 130 131 132 0
343
inline ::PointerToArray< unsigned short int >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((unsigned short int const *)(0)))));
inline ::PointerToArray< unsigned short int >::PointerToArray(PointerToArray< unsigned short int > const &copy);
::PointerToArray< unsigned short int >::PointerToArray(_object *self, _object *source);

1055 11 empty_array 0 4 1815 49 PointerToArray< unsigned short int >::empty_array 0 2 133 134 0
199
static inline PointerToArray< unsigned short int > ::PointerToArray< unsigned short int >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((unsigned short int const *)(0)))));

1056 4 size 0 4 1815 42 PointerToArray< unsigned short int >::size 0 1 135 0
77
inline unsigned int ::PointerToArray< unsigned short int >::size(void) const;

1057 9 push_back 0 4 1815 47 PointerToArray< unsigned short int >::push_back 0 1 136 0
91
inline void ::PointerToArray< unsigned short int >::push_back(unsigned short int const &x);

1058 8 pop_back 0 4 1815 46 PointerToArray< unsigned short int >::pop_back 0 1 137 0
67
inline void ::PointerToArray< unsigned short int >::pop_back(void);

1059 11 get_element 0 4 1815 49 PointerToArray< unsigned short int >::get_element 0 1 138 0
107
inline unsigned short int const &::PointerToArray< unsigned short int >::get_element(unsigned int n) const;

1060 11 set_element 0 4 1815 49 PointerToArray< unsigned short int >::set_element 0 1 139 0
113
inline void ::PointerToArray< unsigned short int >::set_element(unsigned int n, unsigned short int const &value);

1061 11 __getitem__ 0 4 1815 49 PointerToArray< unsigned short int >::__getitem__ 0 1 140 0
107
inline unsigned short int const &::PointerToArray< unsigned short int >::__getitem__(unsigned int n) const;

1062 11 __setitem__ 0 4 1815 49 PointerToArray< unsigned short int >::__setitem__ 0 1 141 0
113
inline void ::PointerToArray< unsigned short int >::__setitem__(unsigned int n, unsigned short int const &value);

1063 8 get_data 0 4 1815 46 PointerToArray< unsigned short int >::get_data 0 1 142 0
89
inline basic_string< char > ::PointerToArray< unsigned short int >::get_data(void) const;

1064 8 set_data 0 4 1815 46 PointerToArray< unsigned short int >::set_data 0 1 143 0
95
inline void ::PointerToArray< unsigned short int >::set_data(basic_string< char > const &data);

1065 11 get_subdata 0 4 1815 49 PointerToArray< unsigned short int >::get_subdata 0 1 144 0
122
inline basic_string< char > ::PointerToArray< unsigned short int >::get_subdata(unsigned int n, unsigned int count) const;

1066 11 set_subdata 0 4 1815 49 PointerToArray< unsigned short int >::set_subdata 0 1 145 0
134
inline void ::PointerToArray< unsigned short int >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1067 13 get_ref_count 0 4 1815 51 PointerToArray< unsigned short int >::get_ref_count 0 1 146 0
77
inline int ::PointerToArray< unsigned short int >::get_ref_count(void) const;

1068 18 get_node_ref_count 0 4 1815 56 PointerToArray< unsigned short int >::get_node_ref_count 0 1 147 0
82
inline int ::PointerToArray< unsigned short int >::get_node_ref_count(void) const;

1069 13 __getbuffer__ 0 4 1815 51 PointerToArray< unsigned short int >::__getbuffer__ 0 1 148 0
101
int ::PointerToArray< unsigned short int >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1070 17 __releasebuffer__ 0 4 1815 55 PointerToArray< unsigned short int >::__releasebuffer__ 0 1 149 0
101
void ::PointerToArray< unsigned short int >::__releasebuffer__(_object *self, Py_buffer *view) const;

1071 15 ~PointerToArray 0 4 1815 53 PointerToArray< unsigned short int >::~PointerToArray 0 0 0
62
::PointerToArray< unsigned short int >::~PointerToArray(void);

1072 14 ~AnimInterface 0 6 1817 29 AnimInterface::~AnimInterface 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual AnimInterface::~AnimInterface(void);

1073 4 play 0 4 1817 19 AnimInterface::play 0 2 150 151 1032
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the entire animation from beginning to end and
//               stops.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the animation from the frame "from" to and
//               including the frame "to", at which point the
//               animation is stopped.  Both "from" and "to" frame
//               numbers may be outside the range (0,
//               get_num_frames()) and the animation will follow the
//               range correctly, reporting numbers modulo
//               get_num_frames().  For instance, play(0,
//               get_num_frames() * 2) will play the animation twice
//               and then stop.
////////////////////////////////////////////////////////////////////
95
inline void AnimInterface::play(void);
inline void AnimInterface::play(double from, double to);

1074 4 loop 0 4 1817 19 AnimInterface::loop 0 2 152 153 898
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Starts the entire animation looping.  If restart is
//               true, the animation is restarted from the beginning;
//               otherwise, it continues from the current frame.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", indefinitely.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
////////////////////////////////////////////////////////////////////
117
inline void AnimInterface::loop(bool restart);
inline void AnimInterface::loop(bool restart, double from, double to);

1075 8 pingpong 0 4 1817 23 AnimInterface::pingpong 0 2 154 155 886
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Starts the entire animation bouncing back and forth
//               between its first frame and last frame.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", and then back in the
//               opposite direction, indefinitely.
////////////////////////////////////////////////////////////////////
125
inline void AnimInterface::pingpong(bool restart);
inline void AnimInterface::pingpong(bool restart, double from, double to);

1076 4 stop 0 4 1817 19 AnimInterface::stop 0 1 156 369
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::stop
//       Access: Published
//  Description: Stops a currently playing or looping animation right
//               where it is.  The animation remains posed at the
//               current frame.
////////////////////////////////////////////////////////////////////
38
inline void AnimInterface::stop(void);

1077 4 pose 0 4 1817 19 AnimInterface::pose 0 1 157 297
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pose
//       Access: Published
//  Description: Sets the animation to the indicated frame and holds
//               it there.
////////////////////////////////////////////////////////////////////
46
inline void AnimInterface::pose(double frame);

1078 13 set_play_rate 0 4 1817 28 AnimInterface::set_play_rate 0 1 158 519
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::set_play_rate
//       Access: Published
//  Description: Changes the rate at which the animation plays.  1.0
//               is the normal speed, 2.0 is twice normal speed, and
//               0.5 is half normal speed.  0.0 is legal to pause the
//               animation, and a negative value will play the
//               animation backwards.
////////////////////////////////////////////////////////////////////
59
inline void AnimInterface::set_play_rate(double play_rate);

1079 13 get_play_rate 0 4 1817 28 AnimInterface::get_play_rate 0 1 159 313
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_play_rate
//       Access: Published
//  Description: Returns the rate at which the animation plays.  See
//               set_play_rate().
////////////////////////////////////////////////////////////////////
55
inline double AnimInterface::get_play_rate(void) const;

1080 14 get_frame_rate 0 4 1817 29 AnimInterface::get_frame_rate 0 1 160 514
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame_rate
//       Access: Published
//  Description: Returns the native frame rate of the animation.  This
//               is the number of frames per second that will elapse
//               when the play_rate is set to 1.0.  It is a fixed
//               property of the animation and may not be adjusted by
//               the user.
////////////////////////////////////////////////////////////////////
56
inline double AnimInterface::get_frame_rate(void) const;

1081 14 get_num_frames 0 6 1817 29 AnimInterface::get_num_frames 0 1 161 581
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
////////////////////////////////////////////////////////////////////
54
virtual int AnimInterface::get_num_frames(void) const;

1082 9 get_frame 0 4 1817 24 AnimInterface::get_frame 0 1 162 359
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//               This number will be in the range 0 <= f <
//               get_num_frames().
////////////////////////////////////////////////////////////////////
48
inline int AnimInterface::get_frame(void) const;

1083 14 get_next_frame 0 4 1817 29 AnimInterface::get_next_frame 0 1 163 638
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_next_frame
//       Access: Published
//  Description: Returns the current integer frame number + 1,
//               constrained to the range 0 <= f < get_num_frames().
//
//               If the play mode is PM_play, this will clamp to the
//               same value as get_frame() at the end of the
//               animation.  If the play mode is any other value, this
//               will wrap around to frame 0 at the end of the
//               animation.
////////////////////////////////////////////////////////////////////
53
inline int AnimInterface::get_next_frame(void) const;

1084 8 get_frac 0 4 1817 23 AnimInterface::get_frac 0 1 164 598
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frac
//       Access: Published
//  Description: Returns the fractional part of the current frame.
//               Normally, this is in the range 0.0 <= f < 1.0, but in
//               the one special case of an animation playing to its
//               end frame and stopping, it might exactly equal 1.0.
//
//               It will always be true that get_full_frame() +
//               get_frac() == get_full_fframe().
////////////////////////////////////////////////////////////////////
50
inline double AnimInterface::get_frac(void) const;

1085 14 get_full_frame 0 4 1817 29 AnimInterface::get_full_frame 0 1 165 693
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_fframe(), this
//               return value will never exceed the value passed to
//               to_frame in the play() method.
////////////////////////////////////////////////////////////////////
53
inline int AnimInterface::get_full_frame(void) const;

1086 15 get_full_fframe 0 4 1817 30 AnimInterface::get_full_fframe 0 1 166 841
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_fframe
//       Access: Published
//  Description: Returns the current floating-point frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_frame(), this
//               return value may equal (to_frame + 1.0), when the
//               animation has played to its natural end.  However, in
//               this case the return value of get_full_frame() will
//               be to_frame, not (to_frame + 1).
////////////////////////////////////////////////////////////////////
57
inline double AnimInterface::get_full_fframe(void) const;

1087 10 is_playing 0 4 1817 25 AnimInterface::is_playing 0 1 167 466
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::is_playing
//       Access: Published
//  Description: Returns true if the animation is currently playing,
//               false if it is stopped (e.g. because stop() or pose()
//               was called, or because it reached the end of the
//               animation after play() was called).
////////////////////////////////////////////////////////////////////
50
inline bool AnimInterface::is_playing(void) const;

1088 6 output 0 6 1817 21 AnimInterface::output 0 1 168 230
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
55
virtual void AnimInterface::output(ostream &out) const;

1089 14 get_class_type 0 4 1817 29 AnimInterface::get_class_type 0 1 169 0
54
static TypeHandle AnimInterface::get_class_type(void);

1090 9 UpdateSeq 0 4 1819 20 UpdateSeq::UpdateSeq 0 2 170 171 502
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Default Constructor
//       Access: Published
//  Description: Creates an UpdateSeq in the 'initial' state.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
inline UpdateSeq::UpdateSeq(void);
inline UpdateSeq::UpdateSeq(UpdateSeq const &copy);

1091 7 initial 0 4 1819 18 UpdateSeq::initial 0 1 172 290
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::initial (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'initial' state.
////////////////////////////////////////////////////////////////////
49
static inline UpdateSeq UpdateSeq::initial(void);

1092 3 old 0 4 1819 14 UpdateSeq::old 0 1 173 282
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::old (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'old' state.
////////////////////////////////////////////////////////////////////
45
static inline UpdateSeq UpdateSeq::old(void);

1093 5 fresh 0 4 1819 16 UpdateSeq::fresh 0 1 174 286
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::fresh (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'fresh' state.
////////////////////////////////////////////////////////////////////
47
static inline UpdateSeq UpdateSeq::fresh(void);

1094 10 operator = 0 4 1819 21 UpdateSeq::operator = 0 1 175 234
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline UpdateSeq &UpdateSeq::operator =(UpdateSeq const &copy);

1095 5 clear 0 4 1819 16 UpdateSeq::clear 0 1 176 260
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::clear
//       Access: Published
//  Description: Resets the UpdateSeq to the 'initial' state.
////////////////////////////////////////////////////////////////////
35
inline void UpdateSeq::clear(void);

1096 10 is_initial 0 4 1819 21 UpdateSeq::is_initial 0 1 177 294
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_initial
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'initial'
//               state.
////////////////////////////////////////////////////////////////////
46
inline bool UpdateSeq::is_initial(void) const;

1097 6 is_old 0 4 1819 17 UpdateSeq::is_old 0 1 178 269
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_old
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'old' state.
////////////////////////////////////////////////////////////////////
42
inline bool UpdateSeq::is_old(void) const;

1098 8 is_fresh 0 4 1819 19 UpdateSeq::is_fresh 0 1 179 290
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_fresh
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'fresh'
//               state.
////////////////////////////////////////////////////////////////////
44
inline bool UpdateSeq::is_fresh(void) const;

1099 10 is_special 0 4 1819 21 UpdateSeq::is_special 0 1 180 328
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_special
//       Access: Published
//  Description: Returns true if the UpdateSeq is in any special
//               states, i.e. 'initial', 'old', or 'fresh'.
////////////////////////////////////////////////////////////////////
46
inline bool UpdateSeq::is_special(void) const;

1100 11 operator == 0 4 1819 22 UpdateSeq::operator == 0 1 181 0
65
inline bool UpdateSeq::operator ==(UpdateSeq const &other) const;

1101 11 operator != 0 4 1819 22 UpdateSeq::operator != 0 1 182 0
65
inline bool UpdateSeq::operator !=(UpdateSeq const &other) const;

1102 10 operator < 0 4 1819 21 UpdateSeq::operator < 0 1 183 0
64
inline bool UpdateSeq::operator <(UpdateSeq const &other) const;

1103 11 operator <= 0 4 1819 22 UpdateSeq::operator <= 0 1 184 0
65
inline bool UpdateSeq::operator <=(UpdateSeq const &other) const;

1104 10 operator > 0 4 1819 21 UpdateSeq::operator > 0 1 185 0
64
inline bool UpdateSeq::operator >(UpdateSeq const &other) const;

1105 11 operator >= 0 4 1819 22 UpdateSeq::operator >= 0 1 186 0
65
inline bool UpdateSeq::operator >=(UpdateSeq const &other) const;

1106 11 operator ++ 0 68 1819 22 UpdateSeq::operator ++ 0 1 187 0
46
inline UpdateSeq UpdateSeq::operator ++(void);

1107 11 operator ++ 0 4 1819 22 UpdateSeq::operator ++ 0 1 188 0
46
inline UpdateSeq UpdateSeq::operator ++(int );

1108 7 get_seq 0 4 1819 18 UpdateSeq::get_seq 0 1 189 328
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::get_seq
//       Access: Published
//  Description: Returns the internal integer value associated with
//               the UpdateSeq.  Useful for debugging only.
////////////////////////////////////////////////////////////////////
47
inline long int UpdateSeq::get_seq(void) const;

1109 6 output 0 4 1819 17 UpdateSeq::output 0 1 190 216
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void UpdateSeq::output(ostream &out) const;

1110 10 ~UpdateSeq 0 4 1819 21 UpdateSeq::~UpdateSeq 0 0 0
28
UpdateSeq::~UpdateSeq(void);

1111 17 mark_bam_modified 0 4 1820 32 TypedWritable::mark_bam_modified 0 1 191 653
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::mark_bam_modified
//       Access: Public
//  Description: Increments the bam_modified counter, so that this
//               object will be invalidated and retransmitted on any
//               open bam streams.  This should normally not need to
//               be called by user code; it should be called
//               internally when the object has been changed in a way
//               that legitimately requires its retransmission to any
//               connected clients.
////////////////////////////////////////////////////////////////////
51
inline void TypedWritable::mark_bam_modified(void);

1112 16 get_bam_modified 0 4 1820 31 TypedWritable::get_bam_modified 0 1 192 388
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::get_bam_modified
//       Access: Public
//  Description: Returns the current bam_modified counter.  This
//               counter is normally incremented automatically
//               whenever the object is modified.
////////////////////////////////////////////////////////////////////
61
inline UpdateSeq TypedWritable::get_bam_modified(void) const;

1113 10 __reduce__ 0 4 1820 25 TypedWritable::__reduce__ 0 1 193 0
56
_object *TypedWritable::__reduce__(_object *self) const;

1114 18 __reduce_persist__ 0 4 1820 33 TypedWritable::__reduce_persist__ 0 1 194 0
82
_object *TypedWritable::__reduce_persist__(_object *self, _object *pickler) const;

1115 20 encode_to_bam_stream 0 4 1820 35 TypedWritable::encode_to_bam_stream 0 3 195 196 197 1528
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
////////////////////////////////////////////////////////////////////
187
inline basic_string< char > TypedWritable::encode_to_bam_stream(void) const;
bool TypedWritable::encode_to_bam_stream(basic_string< char > &data, BamWriter *writer = ((void *)(0))) const;

1116 26 decode_raw_from_bam_stream 0 4 1820 41 TypedWritable::decode_raw_from_bam_stream 0 0 1476
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::decode_raw_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts the single
//               object on that string.  Returns true on success,
//               false on on error.
//
//               This variant sets the TypedWritable and
//               ReferenceCount pointers separately; both are pointers
//               to the same object.  The reference count is not
//               incremented; it is the caller's responsibility to
//               manage the reference count.
//
//               Note that this method cannot be used to retrieve
//               objects that do not inherit from ReferenceCount,
//               because these objects cannot persist beyond the
//               lifetime of the BamReader that reads them.  To
//               retrieve these objects from a bam stream, you must
//               construct a BamReader directly.
//
//               If you happen to know that the particular object in
//               question inherits from TypedWritableReferenceCount or
//               PandaNode, consider calling the variant of
//               decode_from_bam_stream() defined for those methods,
//               which presents a simpler interface.
////////////////////////////////////////////////////////////////////
170
static bool TypedWritable::decode_raw_from_bam_stream(TypedWritable *&ptr, ReferenceCount *&ref_ptr, basic_string< char > const &data, BamReader *reader = ((void *)(0)));

1117 14 get_class_type 0 4 1820 29 TypedWritable::get_class_type 0 1 198 0
54
static TypeHandle TypedWritable::get_class_type(void);

1118 23 upcast_to_TypedWritable 0 12 1822 52 TypedWritableReferenceCount::upcast_to_TypedWritable 0 1 202 56
upcast from TypedWritableReferenceCount to TypedWritable
74
TypedWritable *TypedWritableReferenceCount::upcast_to_TypedWritable(void);

1119 39 downcast_to_TypedWritableReferenceCount 0 12 1820 54 TypedWritable::downcast_to_TypedWritableReferenceCount 0 1 203 58
downcast from TypedWritable to TypedWritableReferenceCount
90
TypedWritableReferenceCount *TypedWritable::downcast_to_TypedWritableReferenceCount(void);

1120 24 upcast_to_ReferenceCount 0 12 1822 53 TypedWritableReferenceCount::upcast_to_ReferenceCount 0 1 204 57
upcast from TypedWritableReferenceCount to ReferenceCount
76
ReferenceCount *TypedWritableReferenceCount::upcast_to_ReferenceCount(void);

1121 39 downcast_to_TypedWritableReferenceCount 0 12 1823 55 ReferenceCount::downcast_to_TypedWritableReferenceCount 0 1 205 59
downcast from ReferenceCount to TypedWritableReferenceCount
91
TypedWritableReferenceCount *ReferenceCount::downcast_to_TypedWritableReferenceCount(void);

1122 22 decode_from_bam_stream 0 4 1822 51 TypedWritableReferenceCount::decode_from_bam_stream 0 2 199 200 872
////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
////////////////////////////////////////////////////////////////////
169
static PointerTo< TypedWritableReferenceCount > TypedWritableReferenceCount::decode_from_bam_stream(basic_string< char > const &data, BamReader *reader = ((void *)(0)));

1123 14 get_class_type 0 4 1822 43 TypedWritableReferenceCount::get_class_type 0 1 201 0
68
static TypeHandle TypedWritableReferenceCount::get_class_type(void);

1124 28 ~TypedWritableReferenceCount 0 4 1822 57 TypedWritableReferenceCount::~TypedWritableReferenceCount 0 0 0
64
TypedWritableReferenceCount::~TypedWritableReferenceCount(void);

1125 37 upcast_to_TypedWritableReferenceCount 0 12 1824 53 BamCacheRecord::upcast_to_TypedWritableReferenceCount 0 1 226 57
upcast from BamCacheRecord to TypedWritableReferenceCount
89
TypedWritableReferenceCount *BamCacheRecord::upcast_to_TypedWritableReferenceCount(void);

1126 26 downcast_to_BamCacheRecord 0 12 1822 55 TypedWritableReferenceCount::downcast_to_BamCacheRecord 0 1 227 59
downcast from TypedWritableReferenceCount to BamCacheRecord
78
BamCacheRecord *TypedWritableReferenceCount::downcast_to_BamCacheRecord(void);

1127 24 upcast_to_LinkedListNode 0 12 1824 40 BamCacheRecord::upcast_to_LinkedListNode 0 0 44
upcast from BamCacheRecord to LinkedListNode
63
LinkedListNode *BamCacheRecord::upcast_to_LinkedListNode(void);

1128 26 downcast_to_BamCacheRecord 0 12 1825 42 LinkedListNode::downcast_to_BamCacheRecord 0 0 46
downcast from LinkedListNode to BamCacheRecord
65
BamCacheRecord *LinkedListNode::downcast_to_BamCacheRecord(void);

1129 15 ~BamCacheRecord 0 6 1824 31 BamCacheRecord::~BamCacheRecord 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual BamCacheRecord::~BamCacheRecord(void);

1130 9 make_copy 0 4 1824 25 BamCacheRecord::make_copy 0 1 206 438
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::make_copy
//       Access: Published
//  Description: Returns a duplicate of the BamCacheRecord.  The
//               duplicate will not have a data pointer set, even
//               though one may have been assigned to the original via
//               set_data().
////////////////////////////////////////////////////////////////////
73
inline PointerTo< BamCacheRecord > BamCacheRecord::make_copy(void) const;

1131 11 operator == 0 4 1824 27 BamCacheRecord::operator == 0 1 207 0
75
inline bool BamCacheRecord::operator ==(BamCacheRecord const &other) const;

1132 19 get_source_pathname 0 4 1824 35 BamCacheRecord::get_source_pathname 0 1 208 523
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_pathname
//       Access: Published
//  Description: Returns the full pathname to the source file that
//               originally generated this cache request.  In some
//               cases, for instance in the case of a of a multipage
//               texture like "cube_#.png", this may not not a true
//               filename on disk.
////////////////////////////////////////////////////////////////////
71
inline Filename const &BamCacheRecord::get_source_pathname(void) const;

1133 18 get_cache_filename 0 4 1824 34 BamCacheRecord::get_cache_filename 0 1 209 516
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_cache_filename
//       Access: Published
//  Description: Returns the name of the cache file as hashed from the
//               source_pathname.  This will be relative to the root
//               of the cache directory, and it will not include any
//               suffixes that may be appended to resolve hash
//               conflicts.
////////////////////////////////////////////////////////////////////
70
inline Filename const &BamCacheRecord::get_cache_filename(void) const;

1134 20 get_source_timestamp 0 4 1824 36 BamCacheRecord::get_source_timestamp 0 1 210 473
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_timestamp
//       Access: Published
//  Description: Returns the file timestamp of the original source
//               file that generated this cache record, if available.
//               In some cases the original file timestamp is not
//               available, and this will return 0.
////////////////////////////////////////////////////////////////////
69
inline unsigned int BamCacheRecord::get_source_timestamp(void) const;

1135 17 get_recorded_time 0 4 1824 33 BamCacheRecord::get_recorded_time 0 1 211 323
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_recorded_time
//       Access: Published
//  Description: Returns the time at which this particular record was
//               recorded or updated.
////////////////////////////////////////////////////////////////////
66
inline unsigned int BamCacheRecord::get_recorded_time(void) const;

1136 23 get_num_dependent_files 0 4 1824 39 BamCacheRecord::get_num_dependent_files 0 1 212 320
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_num_dependent_files
//       Access: Published
//  Description: Returns the number of source files that contribute to
//               the cache.
////////////////////////////////////////////////////////////////////
63
inline int BamCacheRecord::get_num_dependent_files(void) const;

1137 22 get_dependent_pathname 0 4 1824 38 BamCacheRecord::get_dependent_pathname 0 1 213 335
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_dependent_pathname
//       Access: Published
//  Description: Returns the full pathname of the nth source files
//               that contributes to the cache.
////////////////////////////////////////////////////////////////////
75
inline Filename const &BamCacheRecord::get_dependent_pathname(int n) const;

1138 20 dependents_unchanged 0 4 1824 36 BamCacheRecord::dependents_unchanged 0 1 214 380
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::dependents_unchanged
//       Access: Published
//  Description: Returns true if all of the dependent files are still
//               the same as when the cache was recorded, false
//               otherwise.
////////////////////////////////////////////////////////////////////
54
bool BamCacheRecord::dependents_unchanged(void) const;

1139 21 clear_dependent_files 0 4 1824 37 BamCacheRecord::clear_dependent_files 0 1 215 323
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_dependent_files
//       Access: Published
//  Description: Empties the list of files that contribute to the data
//               in this record.
////////////////////////////////////////////////////////////////////
49
void BamCacheRecord::clear_dependent_files(void);

1140 18 add_dependent_file 0 4 1824 34 BamCacheRecord::add_dependent_file 0 1 216 509
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::add_dependent_file
//       Access: Published
//  Description: Adds the indicated file to the list of files that
//               will be loaded to generate the data in this record.
//               This should be called once for the primary source
//               file, and again for each secondary source file, if
//               any.
////////////////////////////////////////////////////////////////////
66
void BamCacheRecord::add_dependent_file(Filename const &pathname);

1141 8 has_data 0 4 1824 24 BamCacheRecord::has_data 0 1 217 373
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::has_data
//       Access: Published
//  Description: Returns true if this cache record has an in-memory
//               data object associated--that is, the object stored in
//               the cache.
////////////////////////////////////////////////////////////////////
49
inline bool BamCacheRecord::has_data(void) const;

1142 10 clear_data 0 4 1824 26 BamCacheRecord::clear_data 0 1 218 394
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_data
//       Access: Published
//  Description: Removes the in-memory data object associated with
//               this record, if any.  This does not affect the
//               on-disk representation of the record.
////////////////////////////////////////////////////////////////////
45
inline void BamCacheRecord::clear_data(void);

1143 8 get_data 0 4 1824 24 BamCacheRecord::get_data 0 1 219 383
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_data
//       Access: Published
//  Description: Returns a pointer to the data stored in the
//               record, or NULL if there is no data.  The pointer is
//               not removed from the record.
////////////////////////////////////////////////////////////////////
59
inline TypedWritable *BamCacheRecord::get_data(void) const;

1144 12 extract_data 0 4 1824 28 BamCacheRecord::extract_data 0 0 737
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::extract_data
//       Access: Published
//  Description: Fills ptr and ref_ptr with the two different-typed
//               pointers to the same object, the data stored within
//               this record.  This transfers ownership of the data
//               pointer; the caller will be responsible for managing
//               the reference counts on this object subsequently.
//
//               Returns true if the record contained any data (and
//               the pointers have been filled), false if it didn't
//               (and the pointers are NULL).
////////////////////////////////////////////////////////////////////
88
inline bool BamCacheRecord::extract_data(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1145 8 set_data 0 4 1824 24 BamCacheRecord::set_data 0 2 220 221 1279
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: Stores a new data object on the record.  You should
//               pass the same pointer twice, to both parameters; this
//               allows the C++ typecasting to automatically convert
//               the pointer into both a TypedWritable and a
//               ReferenceCount pointer, so that the BamCacheRecord
//               object can reliably manage the reference counts.
//
//               You may pass 0 or NULL as the second parameter.  If
//               you do this, the BamCacheRecord will not manage the
//               object's reference count; it will be up to you to
//               ensure the object is not deleted during the lifetime
//               of the BamCacheRecord object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: This variant on set_data() is provided just to allow
//               Python code to pass a 0 as the second parameter.
////////////////////////////////////////////////////////////////////
151
inline void BamCacheRecord::set_data(TypedWritable *ptr, ReferenceCount *ref_ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr, int dummy);

1146 6 output 0 4 1824 22 BamCacheRecord::output 0 1 222 222
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void BamCacheRecord::output(ostream &out) const;

1147 5 write 0 4 1824 21 BamCacheRecord::write 0 2 223 224 221
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
void BamCacheRecord::write(ostream &out, int indent_level = (0)) const;

1148 14 get_class_type 0 4 1824 30 BamCacheRecord::get_class_type 0 1 225 0
55
static TypeHandle BamCacheRecord::get_class_type(void);

1149 8 BamCache 0 4 1826 18 BamCache::BamCache 0 1 228 220
////////////////////////////////////////////////////////////////////
//     Function: BamCache::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
25
BamCache::BamCache(void);

1150 9 ~BamCache 0 4 1826 19 BamCache::~BamCache 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: BamCache::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
26
BamCache::~BamCache(void);

1151 10 set_active 0 4 1826 20 BamCache::set_active 0 1 229 646
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_active
//       Access: Published
//  Description: Changes the state of the active flag.  "active" means
//               that the cache should be consulted automatically on
//               loads, "not active" means that objects should be
//               loaded directly without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
////////////////////////////////////////////////////////////////////
44
inline void BamCache::set_active(bool flag);

1152 10 get_active 0 4 1826 20 BamCache::get_active 0 1 230 695
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_active
//       Access: Published
//  Description: Returns true if the BamCache is currently active,
//               false if it is not.  "active" means that the cache
//               should be consulted automatically on loads, "not
//               active" means that objects should be loaded directly
//               without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
////////////////////////////////////////////////////////////////////
45
inline bool BamCache::get_active(void) const;

1153 16 set_cache_models 0 4 1826 26 BamCache::set_cache_models 0 1 231 346
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_models
//       Access: Published
//  Description: Indicates whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
////////////////////////////////////////////////////////////////////
50
inline void BamCache::set_cache_models(bool flag);

1154 16 get_cache_models 0 4 1826 26 BamCache::get_cache_models 0 1 232 414
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_models
//       Access: Published
//  Description: Returns whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
51
inline bool BamCache::get_cache_models(void) const;

1155 18 set_cache_textures 0 4 1826 28 BamCache::set_cache_textures 0 1 233 332
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_textures
//       Access: Published
//  Description: Indicates whether texture files will be stored in the
//               cache, as uncompressed txo files.
////////////////////////////////////////////////////////////////////
52
inline void BamCache::set_cache_textures(bool flag);

1156 18 get_cache_textures 0 4 1826 28 BamCache::get_cache_textures 0 1 234 418
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_textures
//       Access: Published
//  Description: Returns whether texture files (e.g. egg files and bam
//               files) will be stored in the cache, as txo files.
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
53
inline bool BamCache::get_cache_textures(void) const;

1157 29 set_cache_compressed_textures 0 4 1826 39 BamCache::set_cache_compressed_textures 0 1 235 1143
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_compressed_textures
//       Access: Published
//  Description: Indicates whether compressed texture files will be
//               stored in the cache, as compressed txo files.  The
//               compressed data may either be generated in-CPU, via
//               the squish library, or it may be extracted from the
//               GSG after the texture has been loaded.
//
//               This may be set in conjunction with
//               set_cache_textures(), or independently of it.  If
//               set_cache_textures() is true and this is false, all
//               textures will be cached in their uncompressed form.
//               If set_cache_textures() is false and this is true,
//               only compressed textures will be cached, and they
//               will be cached in their compressed form.  If both are
//               true, all textures will be cached, in their
//               uncompressed or compressed form appropriately.
////////////////////////////////////////////////////////////////////
63
inline void BamCache::set_cache_compressed_textures(bool flag);

1158 29 get_cache_compressed_textures 0 4 1826 39 BamCache::get_cache_compressed_textures 0 1 236 475
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_compressed_textures
//       Access: Published
//  Description: Returns whether compressed texture files will be
//               stored in the cache, as compressed txo files.  See
//               set_cache_compressed_textures().
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
64
inline bool BamCache::get_cache_compressed_textures(void) const;

1159 8 set_root 0 4 1826 18 BamCache::set_root 0 1 237 665
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_root
//       Access: Published
//  Description: Changes the current root pathname of the cache.  This
//               specifies where the cache files are stored on disk.
//               This should name a directory that is on a disk local
//               to the machine (not on a network-mounted disk), for
//               instance, /tmp/panda-cache or /c/panda-cache.
//
//               If the directory does not already exist, it will be
//               created as a result of this call.
////////////////////////////////////////////////////////////////////
46
void BamCache::set_root(Filename const &root);

1160 8 get_root 0 4 1826 18 BamCache::get_root 0 1 238 299
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_root
//       Access: Published
//  Description: Returns the current root pathname of the cache.  See
//               set_root().
////////////////////////////////////////////////////////////////////
47
inline Filename BamCache::get_root(void) const;

1161 14 set_flush_time 0 4 1826 24 BamCache::set_flush_time 0 1 239 316
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_flush_time
//       Access: Published
//  Description: Specifies the time in seconds between automatic
//               flushes of the cache index.
////////////////////////////////////////////////////////////////////
53
inline void BamCache::set_flush_time(int flush_time);

1162 14 get_flush_time 0 4 1826 24 BamCache::get_flush_time 0 1 240 314
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_flush_time
//       Access: Published
//  Description: Returns the time in seconds between automatic
//               flushes of the cache index.
////////////////////////////////////////////////////////////////////
48
inline int BamCache::get_flush_time(void) const;

1163 20 set_cache_max_kbytes 0 4 1826 30 BamCache::set_cache_max_kbytes 0 1 241 767
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_max_kbytes
//       Access: Published
//  Description: Specifies the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  If a newly cached file
//               would exceed this size, an older file is removed from
//               the cache.
//
//               Note that in the case of multiple different processes
//               simultaneously operating on the same cache directory,
//               the actual cache size may slightly exceed this value
//               from time to time due to latency in checking between
//               the processes.
////////////////////////////////////////////////////////////////////
59
inline void BamCache::set_cache_max_kbytes(int max_kbytes);

1164 20 get_cache_max_kbytes 0 4 1826 30 BamCache::get_cache_max_kbytes 0 1 242 371
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_max_kbytes
//       Access: Published
//  Description: Returns the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  See
//               set_cache_max_kbytes().
////////////////////////////////////////////////////////////////////
54
inline int BamCache::get_cache_max_kbytes(void) const;

1165 13 set_read_only 0 4 1826 23 BamCache::set_read_only 0 1 243 523
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_read_only
//       Access: Published
//  Description: Can be used to put the cache in read-only mode,
//               or take it out of read-only mode.  Note that if you
//               put it into read-write mode, and it discovers that
//               it does not have write access, it will put itself
//               right back into read-only mode.
////////////////////////////////////////////////////////////////////
45
inline void BamCache::set_read_only(bool ro);

1166 13 get_read_only 0 4 1826 23 BamCache::get_read_only 0 1 244 503
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_read_only
//       Access: Published
//  Description: Returns true if the cache is in read-only mode.
//               Normally, the cache starts in read-write mode.  It
//               can put itself into read-only mode automatically if
//               it discovers that it does not have write access to
//               the cache.
////////////////////////////////////////////////////////////////////
48
inline bool BamCache::get_read_only(void) const;

1167 6 lookup 0 4 1826 16 BamCache::lookup 0 1 245 1211
////////////////////////////////////////////////////////////////////
//     Function: BamCache::lookup
//       Access: Published
//  Description: Looks up a file in the cache.  
//
//               If the file is cacheable, then regardless of whether
//               the file is found in the cache or not, this returns a
//               BamCacheRecord.  On the other hand, if the file
//               cannot be cached, returns NULL.
//
//               If record->has_data() returns true, then the file was
//               found in the cache, and you may call
//               record->extract_data() to get the object.  If
//               record->has_data() returns false, then the file was
//               not found in the cache or the cache was stale; and
//               you should reload the source file (calling
//               record->add_dependent_file() for each file loaded,
//               including the original source file), and then call
//               record->set_data() to record the resulting loaded
//               object; and finally, you should call store() to write
//               the cached record to disk.
////////////////////////////////////////////////////////////////////
123
PointerTo< BamCacheRecord > BamCache::lookup(Filename const &source_filename, basic_string< char > const &cache_extension);

1168 5 store 0 4 1826 15 BamCache::store 0 1 246 478
////////////////////////////////////////////////////////////////////
//     Function: BamCache::store
//       Access: Published
//  Description: Flushes a cache entry to disk.  You must have
//               retrieved the cache record via a prior call to
//               lookup(), and then stored the data via
//               record->set_data().  Returns true on success, false
//               on failure.
////////////////////////////////////////////////////////////////////
45
bool BamCache::store(BamCacheRecord *record);

1169 20 consider_flush_index 0 4 1826 30 BamCache::consider_flush_index 0 1 247 325
////////////////////////////////////////////////////////////////////
//     Function: BamCache::consider_flush_index
//       Access: Published
//  Description: Flushes the index if enough time has elapsed since
//               the index was last flushed.
////////////////////////////////////////////////////////////////////
42
void BamCache::consider_flush_index(void);

1170 11 flush_index 0 4 1826 21 BamCache::flush_index 0 1 248 258
////////////////////////////////////////////////////////////////////
//     Function: BamCache::flush_index
//       Access: Published
//  Description: Ensures the index is written to disk.
////////////////////////////////////////////////////////////////////
33
void BamCache::flush_index(void);

1171 14 get_global_ptr 0 4 1826 24 BamCache::get_global_ptr 0 1 249 376
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global BamCache object,
//               which is used automatically by the ModelPool and
//               TexturePool.
////////////////////////////////////////////////////////////////////
55
static inline BamCache *BamCache::get_global_ptr(void);

1172 9 ~BamEnums 0 4 1827 19 BamEnums::~BamEnums 0 0 0
26
BamEnums::~BamEnums(void);

1173 13 LoaderOptions 0 4 1831 28 LoaderOptions::LoaderOptions 0 4 250 251 252 253 684
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
183
LoaderOptions::LoaderOptions(int flags = ((1 | 2)));
inline LoaderOptions::LoaderOptions(int flags, int texture_flags);
inline LoaderOptions::LoaderOptions(LoaderOptions const &copy);

1174 10 operator = 0 4 1831 25 LoaderOptions::operator = 0 1 254 0
65
inline void LoaderOptions::operator =(LoaderOptions const &copy);

1175 9 set_flags 0 4 1831 24 LoaderOptions::set_flags 0 1 255 223
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LoaderOptions::set_flags(int flags);

1176 9 get_flags 0 4 1831 24 LoaderOptions::get_flags 0 1 256 223
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline int LoaderOptions::get_flags(void) const;

1177 17 set_texture_flags 0 4 1831 32 LoaderOptions::set_texture_flags 0 1 257 231
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LoaderOptions::set_texture_flags(int flags);

1178 17 get_texture_flags 0 4 1831 32 LoaderOptions::get_texture_flags 0 1 258 231
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline int LoaderOptions::get_texture_flags(void) const;

1179 21 set_texture_num_views 0 4 1831 36 LoaderOptions::set_texture_num_views 0 1 259 767
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_num_views
//       Access: Published
//  Description: Specifies the expected number of views to load for
//               the texture.  This is ignored unless TF_multiview is
//               included in texture_flags.  This must be specified
//               when loading a 3-d multiview texture, in which case
//               it is used to differentiate z levels from separate
//               views; it may be zero in the case of 2-d textures or
//               cube maps, in which case the number of views can be
//               inferred from the number of images found on disk.
////////////////////////////////////////////////////////////////////
64
inline void LoaderOptions::set_texture_num_views(int num_views);

1180 21 get_texture_num_views 0 4 1831 36 LoaderOptions::get_texture_num_views 0 1 260 264
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_num_views
//       Access: Published
//  Description: See set_texture_num_views().
////////////////////////////////////////////////////////////////////
60
inline int LoaderOptions::get_texture_num_views(void) const;

1181 22 set_auto_texture_scale 0 4 1831 37 LoaderOptions::set_auto_texture_scale 0 1 261 480
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_auto_texture_scale
//       Access: Published
//  Description: Set this flag to ATS_none, ATS_up, ATS_down, or
//               ATS_pad to control how a texture is scaled from
//               disk when it is subsequently loaded.  Set it to
//               ATS_unspecified to restore the default behavior.
////////////////////////////////////////////////////////////////////
74
inline void LoaderOptions::set_auto_texture_scale(AutoTextureScale scale);

1182 22 get_auto_texture_scale 0 4 1831 37 LoaderOptions::get_auto_texture_scale 0 1 262 266
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_auto_texture_scale
//       Access: Published
//  Description: See set_auto_texture_scale().
////////////////////////////////////////////////////////////////////
74
inline AutoTextureScale LoaderOptions::get_auto_texture_scale(void) const;

1183 6 output 0 4 1831 21 LoaderOptions::output 0 1 263 221
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
void LoaderOptions::output(ostream &out) const;

1184 14 ~LoaderOptions 0 4 1831 29 LoaderOptions::~LoaderOptions 0 0 0
36
LoaderOptions::~LoaderOptions(void);

1185 9 BamReader 0 4 1834 20 BamReader::BamReader 0 2 264 265 261
// The primary interface for a caller.

////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
BamReader::BamReader(DatagramGenerator *source = ((void *)(0)));

1186 10 ~BamReader 0 4 1834 21 BamReader::~BamReader 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: BamReader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
BamReader::~BamReader(void);

1187 10 set_source 0 4 1834 21 BamReader::set_source 0 1 266 383
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_source
//       Access: Published
//  Description: Changes the source of future datagrams for this
//               BamReader.  This also implicitly calls init() if it
//               has not already been called.
////////////////////////////////////////////////////////////////////
54
void BamReader::set_source(DatagramGenerator *source);

1188 10 get_source 0 4 1834 21 BamReader::get_source 0 1 267 324
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_source
//       Access: Published
//  Description: Returns the current source of the BamReader as set by
//               set_source() or the constructor.
////////////////////////////////////////////////////////////////////
54
inline DatagramGenerator *BamReader::get_source(void);

1189 4 init 0 4 1834 15 BamReader::init 0 1 268 474
////////////////////////////////////////////////////////////////////
//     Function: BamReader::init
//       Access: Published
//  Description: Initializes the BamReader prior to reading any
//               objects from its source.  This includes reading the
//               Bam header.
//
//               This returns true if the BamReader successfully
//               initialized, false otherwise.
////////////////////////////////////////////////////////////////////
27
bool BamReader::init(void);

1190 12 set_aux_data 0 4 1834 23 BamReader::set_aux_data 0 1 269 1496
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_aux_data
//       Access: Published
//  Description: Associates an arbitrary block of data with the
//               indicated object (or NULL), and the indicated name.
//
//               This is intended to provide a place for temporary
//               storage for objects reading themselves from the bam
//               file.  To use it, inherit from BamReader::AuxData and
//               store whatever data you like there.  Then associate
//               your AuxData with the object as it is being read with
//               set_aux_data().  You may later set the aux data to
//               NULL to remove it; or it will automatically be
//               removed (and deleted) after finalize() is called for
//               the object in question.
//
//               If the TypedWritable pointer is NULL, the the aux
//               data is stored globally for the BamReader in general.
//               This pointer is available to any bam objects, and
//               will not be automatically removed until the BamReader
//               itself destructs.
//
//               In either case, the name is just an arbitrary
//               user-defined key.  If there is already a data pointer
//               stored for the obj/name pair, that data pointer will
//               be replaced (and deleted).
////////////////////////////////////////////////////////////////////
109
void BamReader::set_aux_data(TypedWritable *obj, basic_string< char > const &name, BamReader::AuxData *data);

1191 12 get_aux_data 0 4 1834 23 BamReader::get_aux_data 0 1 270 413
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_aux_data
//       Access: Published
//  Description: Returns the pointer previously associated with the
//               bam reader by a previous call to set_aux_data(), or
//               NULL if data with the indicated key has not been set.
////////////////////////////////////////////////////////////////////
104
BamReader::AuxData *BamReader::get_aux_data(TypedWritable *obj, basic_string< char > const &name) const;

1192 12 get_filename 0 4 1834 23 BamReader::get_filename 0 1 271 457
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamReader should
//               contain the name of the file.  This enables the
//               reader to interpret pathnames in the BAM as relative
//               to the directory containing the BAM.
////////////////////////////////////////////////////////////////////
59
inline Filename const &BamReader::get_filename(void) const;

1193 18 get_loader_options 0 4 1834 29 BamReader::get_loader_options 0 1 272 330
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_loader_options
//       Access: Published
//  Description: Returns the LoaderOptions passed to the loader when
//               the model was requested, if any.
////////////////////////////////////////////////////////////////////
70
inline LoaderOptions const &BamReader::get_loader_options(void) const;

1194 18 set_loader_options 0 4 1834 29 BamReader::set_loader_options 0 1 273 276
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_loader_options
//       Access: Published
//  Description: Specifies the LoaderOptions for this BamReader.
////////////////////////////////////////////////////////////////////
72
inline void BamReader::set_loader_options(LoaderOptions const &options);

1195 11 read_object 0 4 1834 22 BamReader::read_object 0 1 274 2207
////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  If the
//               object type is known, a new object of the appropriate
//               type is created and returned; otherwise, NULL is
//               returned.  NULL is also returned when the end of the
//               file is reached.  is_eof() may be called to
//               differentiate between these two cases.
//
//               This may be called repeatedly to extract out all the
//               objects in the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is retrieved directly
//               from the Bam file: the root of the scene graph.  The
//               remaining objects will all be retrieved recursively
//               by the first object.
//
//               Note that the object returned may not yet be
//               complete.  In particular, some of its pointers may
//               not be filled in; you must call resolve() to fill in
//               all the available pointers before you can safely use
//               any objects returned by read_object().
//
//               This flavor of read_object() requires the caller to
//               know what type of object it has received in order to
//               properly manage the reference counts.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  
//
//               This flavor of read_object() returns both a
//               TypedWritable and a ReferenceCount pointer to the
//               same object, so the reference count may be tracked
//               reliably, without having to know precisely what type
//               of object we have.  It returns true on success, or
//               false on failure.
////////////////////////////////////////////////////////////////////
120
TypedWritable *BamReader::read_object(void);
bool BamReader::read_object(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1196 6 is_eof 0 4 1834 17 BamReader::is_eof 0 1 275 375
////////////////////////////////////////////////////////////////////
//     Function: BamReader::is_eof
//       Access: Published
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
////////////////////////////////////////////////////////////////////
42
inline bool BamReader::is_eof(void) const;

1197 7 resolve 0 4 1834 18 BamReader::resolve 0 1 276 935
////////////////////////////////////////////////////////////////////
//     Function: BamReader::resolve
//       Access: Published
//  Description: This may be called at any time during processing of
//               the Bam file to resolve all the known pointers so
//               far.  It is usually called at the end of the
//               processing, after all objects have been read, which
//               is generally the best time to call it.
//
//               This must be called at least once after reading a
//               particular object via get_object() in order to
//               validate that object.
//
//               The return value is true if all objects have been
//               resolved, or false if some objects are still
//               outstanding (in which case you will need to call
//               resolve() again later).
////////////////////////////////////////////////////////////////////
30
bool BamReader::resolve(void);

1198 14 change_pointer 0 4 1834 25 BamReader::change_pointer 0 1 277 724
////////////////////////////////////////////////////////////////////
//     Function: BamReader::change_pointer
//       Access: Published
//  Description: Indicates that an object recently read from the bam
//               stream should be replaced with a new object.  Any
//               future occurrences of the original object in the
//               stream will henceforth return the new object instead.
//
//               The return value is true if the replacement was
//               successfully made, or false if the object was not
//               read from the stream (or if change_pointer had
//               already been called on it).
////////////////////////////////////////////////////////////////////
100
bool BamReader::change_pointer(TypedWritable const *orig_pointer, TypedWritable const *new_pointer);

1199 18 get_file_major_ver 0 4 1834 29 BamReader::get_file_major_ver 0 1 278 316
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_major_ver
//       Access: Published
//  Description: Returns the major version number of the Bam file
//               currently being read.
////////////////////////////////////////////////////////////////////
53
inline int BamReader::get_file_major_ver(void) const;

1200 18 get_file_minor_ver 0 4 1834 29 BamReader::get_file_minor_ver 0 1 279 316
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_minor_ver
//       Access: Published
//  Description: Returns the minor version number of the Bam file
//               currently being read.
////////////////////////////////////////////////////////////////////
53
inline int BamReader::get_file_minor_ver(void) const;

1201 15 get_file_endian 0 4 1834 26 BamReader::get_file_endian 0 1 280 528
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read.  This does not imply that
//               every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
////////////////////////////////////////////////////////////////////
66
inline BamEnums::BamEndian BamReader::get_file_endian(void) const;

1202 24 get_file_stdfloat_double 0 4 1834 35 BamReader::get_file_stdfloat_double 0 1 281 489
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file stores all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This is determined by the compilation flags
//               of the version of Panda that generated this file.
////////////////////////////////////////////////////////////////////
60
inline bool BamReader::get_file_stdfloat_double(void) const;

1203 21 get_current_major_ver 0 4 1834 32 BamReader::get_current_major_ver 0 1 282 440
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_major_ver
//       Access: Published
//  Description: Returns the major version number of Bam files
//               supported by the current code base.  This must match
//               get_file_major_ver() in order to successfully read a
//               file.
////////////////////////////////////////////////////////////////////
56
inline int BamReader::get_current_major_ver(void) const;

1204 21 get_current_minor_ver 0 4 1834 32 BamReader::get_current_minor_ver 0 1 283 450
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_minor_ver
//       Access: Published
//  Description: Returns the minor version number of Bam files
//               supported by the current code base.  This must match
//               or exceed get_file_minor_ver() in order to
//               successfully read a file.
////////////////////////////////////////////////////////////////////
56
inline int BamReader::get_current_minor_ver(void) const;

1205 9 BamWriter 0 4 1835 20 BamWriter::BamWriter 0 2 284 285 221
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
BamWriter::BamWriter(DatagramSink *target = ((void *)(0)));

1206 10 ~BamWriter 0 4 1835 21 BamWriter::~BamWriter 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
BamWriter::~BamWriter(void);

1207 10 set_target 0 4 1835 21 BamWriter::set_target 0 1 286 394
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_target
//       Access: Published
//  Description: Changes the destination of future datagrams written
//               by the BamWriter.  This also implicitly calls init()
//               if it has not already been called.
////////////////////////////////////////////////////////////////////
49
void BamWriter::set_target(DatagramSink *target);

1208 10 get_target 0 4 1835 21 BamWriter::get_target 0 1 287 324
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_target
//       Access: Published
//  Description: Returns the current target of the BamWriter as set by
//               set_target() or the constructor.
////////////////////////////////////////////////////////////////////
49
inline DatagramSink *BamWriter::get_target(void);

1209 4 init 0 4 1835 15 BamWriter::init 0 1 288 483
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::init
//       Access: Published
//  Description: Initializes the BamWriter prior to writing any
//               objects to its output stream.  This includes writing
//               out the Bam header.
//
//               This returns true if the BamWriter successfully
//               initialized, false otherwise.
////////////////////////////////////////////////////////////////////
27
bool BamWriter::init(void);

1210 12 get_filename 0 4 1835 23 BamWriter::get_filename 0 1 289 455
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamWriter should
//               contain the name of the file.  This enables the
//               writer to convert pathnames in the BAM to relative
//               to the directory containing the BAM.
////////////////////////////////////////////////////////////////////
59
inline Filename const &BamWriter::get_filename(void) const;

1211 12 write_object 0 4 1835 23 BamWriter::write_object 0 1 290 1153
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::write_object
//       Access: Published
//  Description: Writes a single object to the Bam file, so that the
//               BamReader::read_object() can later correctly restore
//               the object and all its pointers.
//
//               This implicitly also writes any additional objects
//               this object references (if they haven't already been
//               written), so that pointers may be fully resolved.
//
//               This may be called repeatedly to write a sequence of
//               objects to the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is written directly from
//               the Bam file: the root of the scene graph.  The
//               remaining objects will all be written recursively by
//               the first object.
//
//               Returns true if the object is successfully written,
//               false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BamWriter::write_object(TypedWritable const *obj);

1212 10 has_object 0 4 1835 21 BamWriter::has_object 0 1 291 408
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::has_object
//       Access: Published
//  Description: Returns true if the object has previously been
//               written (or at least requested to be written) to the
//               bam file, or false if we've never heard of it before.
////////////////////////////////////////////////////////////////////
59
bool BamWriter::has_object(TypedWritable const *obj) const;

1213 5 flush 0 4 1835 16 BamWriter::flush 0 1 292 307
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::flush
//       Access: Published
//  Description: Ensures that all data written thus far is manifested
//               on the output stream.
////////////////////////////////////////////////////////////////////
28
void BamWriter::flush(void);

1214 15 get_file_endian 0 4 1835 26 BamWriter::get_file_endian 0 1 293 531
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being written.  This does not imply
//               that every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
////////////////////////////////////////////////////////////////////
66
inline BamEnums::BamEndian BamWriter::get_file_endian(void) const;

1215 24 get_file_stdfloat_double 0 4 1835 35 BamWriter::get_file_stdfloat_double 0 1 294 531
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file will store all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This isn't runtime settable; it's based on
//               the compilation flags of the version of Panda that
//               generated this file.
////////////////////////////////////////////////////////////////////
60
inline bool BamWriter::get_file_stdfloat_double(void) const;

1216 21 get_file_texture_mode 0 4 1835 32 BamWriter::get_file_texture_mode 0 1 295 462
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_texture_mode
//       Access: Published
//  Description: Returns the BamTextureMode preference indicated by
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
////////////////////////////////////////////////////////////////////
77
inline BamEnums::BamTextureMode BamWriter::get_file_texture_mode(void) const;

1217 21 set_file_texture_mode 0 4 1835 32 BamWriter::set_file_texture_mode 0 1 296 453
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_file_texture_mode
//       Access: Published
//  Description: Changes the BamTextureMode preference for
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
////////////////////////////////////////////////////////////////////
89
inline void BamWriter::set_file_texture_mode(BamEnums::BamTextureMode file_texture_mode);

1218 7 BitMask 0 4 1836 42 BitMask< unsigned short int, 16 >::BitMask 0 3 297 298 299 0
242
inline ::BitMask< unsigned short int, 16 >::BitMask(void);
inline ::BitMask< unsigned short int, 16 >::BitMask(unsigned short int init_value);
inline ::BitMask< unsigned short int, 16 >::BitMask(BitMask< unsigned short int, 16 > const &copy);

1219 10 operator = 0 4 1836 45 BitMask< unsigned short int, 16 >::operator = 0 1 300 0
137
inline BitMask< unsigned short int, 16 > &::BitMask< unsigned short int, 16 >::operator =(BitMask< unsigned short int, 16 > const &copy);

1220 6 all_on 0 4 1836 41 BitMask< unsigned short int, 16 >::all_on 0 1 301 0
98
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::all_on(void);

1221 7 all_off 0 4 1836 42 BitMask< unsigned short int, 16 >::all_off 0 1 302 0
99
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::all_off(void);

1222 8 lower_on 0 4 1836 43 BitMask< unsigned short int, 16 >::lower_on 0 1 303 0
107
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::lower_on(int on_bits);

1223 3 bit 0 4 1836 38 BitMask< unsigned short int, 16 >::bit 0 1 304 0
100
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::bit(int index);

1224 5 range 0 4 1836 40 BitMask< unsigned short int, 16 >::range 0 1 305 0
114
static inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::range(int low_bit, int size);

1225 8 ~BitMask 0 4 1836 43 BitMask< unsigned short int, 16 >::~BitMask 0 0 0
59
inline ::BitMask< unsigned short int, 16 >::~BitMask(void);

1226 16 has_max_num_bits 0 4 1836 51 BitMask< unsigned short int, 16 >::has_max_num_bits 0 1 306 0
79
static inline bool ::BitMask< unsigned short int, 16 >::has_max_num_bits(void);

1227 16 get_max_num_bits 0 4 1836 51 BitMask< unsigned short int, 16 >::get_max_num_bits 0 1 307 0
78
static inline int ::BitMask< unsigned short int, 16 >::get_max_num_bits(void);

1228 12 get_num_bits 0 4 1836 47 BitMask< unsigned short int, 16 >::get_num_bits 0 1 308 0
74
static inline int ::BitMask< unsigned short int, 16 >::get_num_bits(void);

1229 7 get_bit 0 4 1836 42 BitMask< unsigned short int, 16 >::get_bit 0 1 309 0
74
inline bool ::BitMask< unsigned short int, 16 >::get_bit(int index) const;

1230 7 set_bit 0 4 1836 42 BitMask< unsigned short int, 16 >::set_bit 0 1 310 0
68
inline void ::BitMask< unsigned short int, 16 >::set_bit(int index);

1231 9 clear_bit 0 4 1836 44 BitMask< unsigned short int, 16 >::clear_bit 0 1 311 0
70
inline void ::BitMask< unsigned short int, 16 >::clear_bit(int index);

1232 10 set_bit_to 0 4 1836 45 BitMask< unsigned short int, 16 >::set_bit_to 0 1 312 0
83
inline void ::BitMask< unsigned short int, 16 >::set_bit_to(int index, bool value);

1233 7 is_zero 0 4 1836 42 BitMask< unsigned short int, 16 >::is_zero 0 1 313 0
69
inline bool ::BitMask< unsigned short int, 16 >::is_zero(void) const;

1234 9 is_all_on 0 4 1836 44 BitMask< unsigned short int, 16 >::is_all_on 0 1 314 0
71
inline bool ::BitMask< unsigned short int, 16 >::is_all_on(void) const;

1235 7 extract 0 4 1836 42 BitMask< unsigned short int, 16 >::extract 0 1 315 0
100
inline unsigned short int ::BitMask< unsigned short int, 16 >::extract(int low_bit, int size) const;

1236 5 store 0 4 1836 40 BitMask< unsigned short int, 16 >::store 0 1 316 0
104
inline void ::BitMask< unsigned short int, 16 >::store(unsigned short int value, int low_bit, int size);

1237 10 has_any_of 0 4 1836 45 BitMask< unsigned short int, 16 >::has_any_of 0 1 317 0
89
inline bool ::BitMask< unsigned short int, 16 >::has_any_of(int low_bit, int size) const;

1238 10 has_all_of 0 4 1836 45 BitMask< unsigned short int, 16 >::has_all_of 0 1 318 0
89
inline bool ::BitMask< unsigned short int, 16 >::has_all_of(int low_bit, int size) const;

1239 9 set_range 0 4 1836 44 BitMask< unsigned short int, 16 >::set_range 0 1 319 0
82
inline void ::BitMask< unsigned short int, 16 >::set_range(int low_bit, int size);

1240 11 clear_range 0 4 1836 46 BitMask< unsigned short int, 16 >::clear_range 0 1 320 0
84
inline void ::BitMask< unsigned short int, 16 >::clear_range(int low_bit, int size);

1241 12 set_range_to 0 4 1836 47 BitMask< unsigned short int, 16 >::set_range_to 0 1 321 0
97
inline void ::BitMask< unsigned short int, 16 >::set_range_to(bool value, int low_bit, int size);

1242 8 get_word 0 4 1836 43 BitMask< unsigned short int, 16 >::get_word 0 1 322 0
84
inline unsigned short int ::BitMask< unsigned short int, 16 >::get_word(void) const;

1243 8 set_word 0 4 1836 43 BitMask< unsigned short int, 16 >::set_word 0 1 323 0
84
inline void ::BitMask< unsigned short int, 16 >::set_word(unsigned short int value);

1244 15 get_num_on_bits 0 4 1836 50 BitMask< unsigned short int, 16 >::get_num_on_bits 0 1 324 0
76
inline int ::BitMask< unsigned short int, 16 >::get_num_on_bits(void) const;

1245 16 get_num_off_bits 0 4 1836 51 BitMask< unsigned short int, 16 >::get_num_off_bits 0 1 325 0
77
inline int ::BitMask< unsigned short int, 16 >::get_num_off_bits(void) const;

1246 17 get_lowest_on_bit 0 4 1836 52 BitMask< unsigned short int, 16 >::get_lowest_on_bit 0 1 326 0
78
inline int ::BitMask< unsigned short int, 16 >::get_lowest_on_bit(void) const;

1247 18 get_lowest_off_bit 0 4 1836 53 BitMask< unsigned short int, 16 >::get_lowest_off_bit 0 1 327 0
79
inline int ::BitMask< unsigned short int, 16 >::get_lowest_off_bit(void) const;

1248 18 get_highest_on_bit 0 4 1836 53 BitMask< unsigned short int, 16 >::get_highest_on_bit 0 1 328 0
79
inline int ::BitMask< unsigned short int, 16 >::get_highest_on_bit(void) const;

1249 19 get_highest_off_bit 0 4 1836 54 BitMask< unsigned short int, 16 >::get_highest_off_bit 0 1 329 0
80
inline int ::BitMask< unsigned short int, 16 >::get_highest_off_bit(void) const;

1250 29 get_next_higher_different_bit 0 4 1836 64 BitMask< unsigned short int, 16 >::get_next_higher_different_bit 0 1 330 0
97
inline int ::BitMask< unsigned short int, 16 >::get_next_higher_different_bit(int low_bit) const;

1251 15 invert_in_place 0 4 1836 50 BitMask< unsigned short int, 16 >::invert_in_place 0 1 331 0
71
inline void ::BitMask< unsigned short int, 16 >::invert_in_place(void);

1252 18 has_bits_in_common 0 4 1836 53 BitMask< unsigned short int, 16 >::has_bits_in_common 0 1 332 0
122
inline bool ::BitMask< unsigned short int, 16 >::has_bits_in_common(BitMask< unsigned short int, 16 > const &other) const;

1253 5 clear 0 4 1836 40 BitMask< unsigned short int, 16 >::clear 0 1 333 0
61
inline void ::BitMask< unsigned short int, 16 >::clear(void);

1254 6 output 0 4 1836 41 BitMask< unsigned short int, 16 >::output 0 1 334 0
69
void ::BitMask< unsigned short int, 16 >::output(ostream &out) const;

1255 13 output_binary 0 4 1836 48 BitMask< unsigned short int, 16 >::output_binary 0 2 335 336 0
100
void ::BitMask< unsigned short int, 16 >::output_binary(ostream &out, int spaces_every = (4)) const;

1256 10 output_hex 0 4 1836 45 BitMask< unsigned short int, 16 >::output_hex 0 2 337 338 0
97
void ::BitMask< unsigned short int, 16 >::output_hex(ostream &out, int spaces_every = (4)) const;

1257 5 write 0 4 1836 40 BitMask< unsigned short int, 16 >::write 0 2 339 340 0
92
void ::BitMask< unsigned short int, 16 >::write(ostream &out, int indent_level = (0)) const;

1258 11 operator == 0 4 1836 46 BitMask< unsigned short int, 16 >::operator == 0 1 341 0
115
inline bool ::BitMask< unsigned short int, 16 >::operator ==(BitMask< unsigned short int, 16 > const &other) const;

1259 11 operator != 0 4 1836 46 BitMask< unsigned short int, 16 >::operator != 0 1 342 0
115
inline bool ::BitMask< unsigned short int, 16 >::operator !=(BitMask< unsigned short int, 16 > const &other) const;

1260 10 operator < 0 4 1836 45 BitMask< unsigned short int, 16 >::operator < 0 1 343 0
114
inline bool ::BitMask< unsigned short int, 16 >::operator <(BitMask< unsigned short int, 16 > const &other) const;

1261 10 compare_to 0 4 1836 45 BitMask< unsigned short int, 16 >::compare_to 0 1 344 0
113
inline int ::BitMask< unsigned short int, 16 >::compare_to(BitMask< unsigned short int, 16 > const &other) const;

1262 10 operator & 0 4 1836 45 BitMask< unsigned short int, 16 >::operator & 0 1 345 0
143
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator &(BitMask< unsigned short int, 16 > const &other) const;

1263 10 operator | 0 4 1836 45 BitMask< unsigned short int, 16 >::operator | 0 1 346 0
143
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator |(BitMask< unsigned short int, 16 > const &other) const;

1264 10 operator ^ 0 4 1836 45 BitMask< unsigned short int, 16 >::operator ^ 0 1 347 0
143
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator ^(BitMask< unsigned short int, 16 > const &other) const;

1265 10 operator ~ 0 68 1836 45 BitMask< unsigned short int, 16 >::operator ~ 0 1 348 0
101
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator ~(void) const;

1266 11 operator << 0 4 1836 46 BitMask< unsigned short int, 16 >::operator << 0 1 349 0
107
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator <<(int shift) const;

1267 11 operator >> 0 4 1836 46 BitMask< unsigned short int, 16 >::operator >> 0 1 350 0
107
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::operator >>(int shift) const;

1268 11 operator &= 0 4 1836 46 BitMask< unsigned short int, 16 >::operator &= 0 1 351 0
109
inline void ::BitMask< unsigned short int, 16 >::operator &=(BitMask< unsigned short int, 16 > const &other);

1269 11 operator |= 0 4 1836 46 BitMask< unsigned short int, 16 >::operator |= 0 1 352 0
109
inline void ::BitMask< unsigned short int, 16 >::operator |=(BitMask< unsigned short int, 16 > const &other);

1270 11 operator ^= 0 4 1836 46 BitMask< unsigned short int, 16 >::operator ^= 0 1 353 0
109
inline void ::BitMask< unsigned short int, 16 >::operator ^=(BitMask< unsigned short int, 16 > const &other);

1271 12 operator <<= 0 4 1836 47 BitMask< unsigned short int, 16 >::operator <<= 0 1 354 0
73
inline void ::BitMask< unsigned short int, 16 >::operator <<=(int shift);

1272 12 operator >>= 0 4 1836 47 BitMask< unsigned short int, 16 >::operator >>= 0 1 355 0
73
inline void ::BitMask< unsigned short int, 16 >::operator >>=(int shift);

1273 19 flood_down_in_place 0 4 1836 54 BitMask< unsigned short int, 16 >::flood_down_in_place 0 1 356 0
75
inline void ::BitMask< unsigned short int, 16 >::flood_down_in_place(void);

1274 17 flood_up_in_place 0 4 1836 52 BitMask< unsigned short int, 16 >::flood_up_in_place 0 1 357 0
73
inline void ::BitMask< unsigned short int, 16 >::flood_up_in_place(void);

1275 15 flood_bits_down 0 4 1836 50 BitMask< unsigned short int, 16 >::flood_bits_down 0 1 358 0
106
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::flood_bits_down(void) const;

1276 13 flood_bits_up 0 4 1836 48 BitMask< unsigned short int, 16 >::flood_bits_up 0 1 359 0
104
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::flood_bits_up(void) const;

1277 21 keep_next_highest_bit 0 4 1836 56 BitMask< unsigned short int, 16 >::keep_next_highest_bit 0 3 360 361 362 0
385
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_highest_bit(BitMask< unsigned short int, 16 > const &other) const;

1278 20 keep_next_lowest_bit 0 4 1836 55 BitMask< unsigned short int, 16 >::keep_next_lowest_bit 0 3 363 364 365 0
382
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned short int, 16 > ::BitMask< unsigned short int, 16 >::keep_next_lowest_bit(BitMask< unsigned short int, 16 > const &other) const;

1279 7 get_key 0 4 1836 42 BitMask< unsigned short int, 16 >::get_key 0 1 366 0
68
inline int ::BitMask< unsigned short int, 16 >::get_key(void) const;

1280 11 __nonzero__ 0 4 1836 46 BitMask< unsigned short int, 16 >::__nonzero__ 0 1 367 0
73
inline bool ::BitMask< unsigned short int, 16 >::__nonzero__(void) const;

1281 14 get_class_type 0 4 1836 49 BitMask< unsigned short int, 16 >::get_class_type 0 1 368 0
76
static TypeHandle ::BitMask< unsigned short int, 16 >::get_class_type(void);

1282 7 BitMask 0 4 1837 36 BitMask< unsigned int, 32 >::BitMask 0 3 369 370 371 0
212
inline ::BitMask< unsigned int, 32 >::BitMask(void);
inline ::BitMask< unsigned int, 32 >::BitMask(unsigned int init_value);
inline ::BitMask< unsigned int, 32 >::BitMask(BitMask< unsigned int, 32 > const &copy);

1283 10 operator = 0 4 1837 39 BitMask< unsigned int, 32 >::operator = 0 1 372 0
119
inline BitMask< unsigned int, 32 > &::BitMask< unsigned int, 32 >::operator =(BitMask< unsigned int, 32 > const &copy);

1284 6 all_on 0 4 1837 35 BitMask< unsigned int, 32 >::all_on 0 1 373 0
86
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::all_on(void);

1285 7 all_off 0 4 1837 36 BitMask< unsigned int, 32 >::all_off 0 1 374 0
87
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::all_off(void);

1286 8 lower_on 0 4 1837 37 BitMask< unsigned int, 32 >::lower_on 0 1 375 0
95
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::lower_on(int on_bits);

1287 3 bit 0 4 1837 32 BitMask< unsigned int, 32 >::bit 0 1 376 0
88
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::bit(int index);

1288 5 range 0 4 1837 34 BitMask< unsigned int, 32 >::range 0 1 377 0
102
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::range(int low_bit, int size);

1289 8 ~BitMask 0 4 1837 37 BitMask< unsigned int, 32 >::~BitMask 0 0 0
53
inline ::BitMask< unsigned int, 32 >::~BitMask(void);

1290 16 has_max_num_bits 0 4 1837 45 BitMask< unsigned int, 32 >::has_max_num_bits 0 1 378 0
73
static inline bool ::BitMask< unsigned int, 32 >::has_max_num_bits(void);

1291 16 get_max_num_bits 0 4 1837 45 BitMask< unsigned int, 32 >::get_max_num_bits 0 1 379 0
72
static inline int ::BitMask< unsigned int, 32 >::get_max_num_bits(void);

1292 12 get_num_bits 0 4 1837 41 BitMask< unsigned int, 32 >::get_num_bits 0 1 380 0
68
static inline int ::BitMask< unsigned int, 32 >::get_num_bits(void);

1293 7 get_bit 0 4 1837 36 BitMask< unsigned int, 32 >::get_bit 0 1 381 0
68
inline bool ::BitMask< unsigned int, 32 >::get_bit(int index) const;

1294 7 set_bit 0 4 1837 36 BitMask< unsigned int, 32 >::set_bit 0 1 382 0
62
inline void ::BitMask< unsigned int, 32 >::set_bit(int index);

1295 9 clear_bit 0 4 1837 38 BitMask< unsigned int, 32 >::clear_bit 0 1 383 0
64
inline void ::BitMask< unsigned int, 32 >::clear_bit(int index);

1296 10 set_bit_to 0 4 1837 39 BitMask< unsigned int, 32 >::set_bit_to 0 1 384 0
77
inline void ::BitMask< unsigned int, 32 >::set_bit_to(int index, bool value);

1297 7 is_zero 0 4 1837 36 BitMask< unsigned int, 32 >::is_zero 0 1 385 0
63
inline bool ::BitMask< unsigned int, 32 >::is_zero(void) const;

1298 9 is_all_on 0 4 1837 38 BitMask< unsigned int, 32 >::is_all_on 0 1 386 0
65
inline bool ::BitMask< unsigned int, 32 >::is_all_on(void) const;

1299 7 extract 0 4 1837 36 BitMask< unsigned int, 32 >::extract 0 1 387 0
88
inline unsigned int ::BitMask< unsigned int, 32 >::extract(int low_bit, int size) const;

1300 5 store 0 4 1837 34 BitMask< unsigned int, 32 >::store 0 1 388 0
92
inline void ::BitMask< unsigned int, 32 >::store(unsigned int value, int low_bit, int size);

1301 10 has_any_of 0 4 1837 39 BitMask< unsigned int, 32 >::has_any_of 0 1 389 0
83
inline bool ::BitMask< unsigned int, 32 >::has_any_of(int low_bit, int size) const;

1302 10 has_all_of 0 4 1837 39 BitMask< unsigned int, 32 >::has_all_of 0 1 390 0
83
inline bool ::BitMask< unsigned int, 32 >::has_all_of(int low_bit, int size) const;

1303 9 set_range 0 4 1837 38 BitMask< unsigned int, 32 >::set_range 0 1 391 0
76
inline void ::BitMask< unsigned int, 32 >::set_range(int low_bit, int size);

1304 11 clear_range 0 4 1837 40 BitMask< unsigned int, 32 >::clear_range 0 1 392 0
78
inline void ::BitMask< unsigned int, 32 >::clear_range(int low_bit, int size);

1305 12 set_range_to 0 4 1837 41 BitMask< unsigned int, 32 >::set_range_to 0 1 393 0
91
inline void ::BitMask< unsigned int, 32 >::set_range_to(bool value, int low_bit, int size);

1306 8 get_word 0 4 1837 37 BitMask< unsigned int, 32 >::get_word 0 1 394 0
72
inline unsigned int ::BitMask< unsigned int, 32 >::get_word(void) const;

1307 8 set_word 0 4 1837 37 BitMask< unsigned int, 32 >::set_word 0 1 395 0
72
inline void ::BitMask< unsigned int, 32 >::set_word(unsigned int value);

1308 15 get_num_on_bits 0 4 1837 44 BitMask< unsigned int, 32 >::get_num_on_bits 0 1 396 0
70
inline int ::BitMask< unsigned int, 32 >::get_num_on_bits(void) const;

1309 16 get_num_off_bits 0 4 1837 45 BitMask< unsigned int, 32 >::get_num_off_bits 0 1 397 0
71
inline int ::BitMask< unsigned int, 32 >::get_num_off_bits(void) const;

1310 17 get_lowest_on_bit 0 4 1837 46 BitMask< unsigned int, 32 >::get_lowest_on_bit 0 1 398 0
72
inline int ::BitMask< unsigned int, 32 >::get_lowest_on_bit(void) const;

1311 18 get_lowest_off_bit 0 4 1837 47 BitMask< unsigned int, 32 >::get_lowest_off_bit 0 1 399 0
73
inline int ::BitMask< unsigned int, 32 >::get_lowest_off_bit(void) const;

1312 18 get_highest_on_bit 0 4 1837 47 BitMask< unsigned int, 32 >::get_highest_on_bit 0 1 400 0
73
inline int ::BitMask< unsigned int, 32 >::get_highest_on_bit(void) const;

1313 19 get_highest_off_bit 0 4 1837 48 BitMask< unsigned int, 32 >::get_highest_off_bit 0 1 401 0
74
inline int ::BitMask< unsigned int, 32 >::get_highest_off_bit(void) const;

1314 29 get_next_higher_different_bit 0 4 1837 58 BitMask< unsigned int, 32 >::get_next_higher_different_bit 0 1 402 0
91
inline int ::BitMask< unsigned int, 32 >::get_next_higher_different_bit(int low_bit) const;

1315 15 invert_in_place 0 4 1837 44 BitMask< unsigned int, 32 >::invert_in_place 0 1 403 0
65
inline void ::BitMask< unsigned int, 32 >::invert_in_place(void);

1316 18 has_bits_in_common 0 4 1837 47 BitMask< unsigned int, 32 >::has_bits_in_common 0 1 404 0
110
inline bool ::BitMask< unsigned int, 32 >::has_bits_in_common(BitMask< unsigned int, 32 > const &other) const;

1317 5 clear 0 4 1837 34 BitMask< unsigned int, 32 >::clear 0 1 405 0
55
inline void ::BitMask< unsigned int, 32 >::clear(void);

1318 6 output 0 4 1837 35 BitMask< unsigned int, 32 >::output 0 1 406 0
63
void ::BitMask< unsigned int, 32 >::output(ostream &out) const;

1319 13 output_binary 0 4 1837 42 BitMask< unsigned int, 32 >::output_binary 0 2 407 408 0
94
void ::BitMask< unsigned int, 32 >::output_binary(ostream &out, int spaces_every = (4)) const;

1320 10 output_hex 0 4 1837 39 BitMask< unsigned int, 32 >::output_hex 0 2 409 410 0
91
void ::BitMask< unsigned int, 32 >::output_hex(ostream &out, int spaces_every = (4)) const;

1321 5 write 0 4 1837 34 BitMask< unsigned int, 32 >::write 0 2 411 412 0
86
void ::BitMask< unsigned int, 32 >::write(ostream &out, int indent_level = (0)) const;

1322 11 operator == 0 4 1837 40 BitMask< unsigned int, 32 >::operator == 0 1 413 0
103
inline bool ::BitMask< unsigned int, 32 >::operator ==(BitMask< unsigned int, 32 > const &other) const;

1323 11 operator != 0 4 1837 40 BitMask< unsigned int, 32 >::operator != 0 1 414 0
103
inline bool ::BitMask< unsigned int, 32 >::operator !=(BitMask< unsigned int, 32 > const &other) const;

1324 10 operator < 0 4 1837 39 BitMask< unsigned int, 32 >::operator < 0 1 415 0
102
inline bool ::BitMask< unsigned int, 32 >::operator <(BitMask< unsigned int, 32 > const &other) const;

1325 10 compare_to 0 4 1837 39 BitMask< unsigned int, 32 >::compare_to 0 1 416 0
101
inline int ::BitMask< unsigned int, 32 >::compare_to(BitMask< unsigned int, 32 > const &other) const;

1326 10 operator & 0 4 1837 39 BitMask< unsigned int, 32 >::operator & 0 1 417 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator &(BitMask< unsigned int, 32 > const &other) const;

1327 10 operator | 0 4 1837 39 BitMask< unsigned int, 32 >::operator | 0 1 418 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator |(BitMask< unsigned int, 32 > const &other) const;

1328 10 operator ^ 0 4 1837 39 BitMask< unsigned int, 32 >::operator ^ 0 1 419 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator ^(BitMask< unsigned int, 32 > const &other) const;

1329 10 operator ~ 0 68 1837 39 BitMask< unsigned int, 32 >::operator ~ 0 1 420 0
89
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator ~(void) const;

1330 11 operator << 0 4 1837 40 BitMask< unsigned int, 32 >::operator << 0 1 421 0
95
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator <<(int shift) const;

1331 11 operator >> 0 4 1837 40 BitMask< unsigned int, 32 >::operator >> 0 1 422 0
95
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator >>(int shift) const;

1332 11 operator &= 0 4 1837 40 BitMask< unsigned int, 32 >::operator &= 0 1 423 0
97
inline void ::BitMask< unsigned int, 32 >::operator &=(BitMask< unsigned int, 32 > const &other);

1333 11 operator |= 0 4 1837 40 BitMask< unsigned int, 32 >::operator |= 0 1 424 0
97
inline void ::BitMask< unsigned int, 32 >::operator |=(BitMask< unsigned int, 32 > const &other);

1334 11 operator ^= 0 4 1837 40 BitMask< unsigned int, 32 >::operator ^= 0 1 425 0
97
inline void ::BitMask< unsigned int, 32 >::operator ^=(BitMask< unsigned int, 32 > const &other);

1335 12 operator <<= 0 4 1837 41 BitMask< unsigned int, 32 >::operator <<= 0 1 426 0
67
inline void ::BitMask< unsigned int, 32 >::operator <<=(int shift);

1336 12 operator >>= 0 4 1837 41 BitMask< unsigned int, 32 >::operator >>= 0 1 427 0
67
inline void ::BitMask< unsigned int, 32 >::operator >>=(int shift);

1337 19 flood_down_in_place 0 4 1837 48 BitMask< unsigned int, 32 >::flood_down_in_place 0 1 428 0
69
inline void ::BitMask< unsigned int, 32 >::flood_down_in_place(void);

1338 17 flood_up_in_place 0 4 1837 46 BitMask< unsigned int, 32 >::flood_up_in_place 0 1 429 0
67
inline void ::BitMask< unsigned int, 32 >::flood_up_in_place(void);

1339 15 flood_bits_down 0 4 1837 44 BitMask< unsigned int, 32 >::flood_bits_down 0 1 430 0
94
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::flood_bits_down(void) const;

1340 13 flood_bits_up 0 4 1837 42 BitMask< unsigned int, 32 >::flood_bits_up 0 1 431 0
92
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::flood_bits_up(void) const;

1341 21 keep_next_highest_bit 0 4 1837 50 BitMask< unsigned int, 32 >::keep_next_highest_bit 0 3 432 433 434 0
343
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(BitMask< unsigned int, 32 > const &other) const;

1342 20 keep_next_lowest_bit 0 4 1837 49 BitMask< unsigned int, 32 >::keep_next_lowest_bit 0 3 435 436 437 0
340
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(BitMask< unsigned int, 32 > const &other) const;

1343 7 get_key 0 4 1837 36 BitMask< unsigned int, 32 >::get_key 0 1 438 0
62
inline int ::BitMask< unsigned int, 32 >::get_key(void) const;

1344 11 __nonzero__ 0 4 1837 40 BitMask< unsigned int, 32 >::__nonzero__ 0 1 439 0
67
inline bool ::BitMask< unsigned int, 32 >::__nonzero__(void) const;

1345 14 get_class_type 0 4 1837 43 BitMask< unsigned int, 32 >::get_class_type 0 1 440 0
70
static TypeHandle ::BitMask< unsigned int, 32 >::get_class_type(void);

1346 7 BitMask 0 4 1838 40 BitMask< unsigned __int64, 64 >::BitMask 0 3 441 442 443 0
232
inline ::BitMask< unsigned __int64, 64 >::BitMask(void);
inline ::BitMask< unsigned __int64, 64 >::BitMask(unsigned __int64 init_value);
inline ::BitMask< unsigned __int64, 64 >::BitMask(BitMask< unsigned __int64, 64 > const &copy);

1347 10 operator = 0 4 1838 43 BitMask< unsigned __int64, 64 >::operator = 0 1 444 0
131
inline BitMask< unsigned __int64, 64 > &::BitMask< unsigned __int64, 64 >::operator =(BitMask< unsigned __int64, 64 > const &copy);

1348 6 all_on 0 4 1838 39 BitMask< unsigned __int64, 64 >::all_on 0 1 445 0
94
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::all_on(void);

1349 7 all_off 0 4 1838 40 BitMask< unsigned __int64, 64 >::all_off 0 1 446 0
95
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::all_off(void);

1350 8 lower_on 0 4 1838 41 BitMask< unsigned __int64, 64 >::lower_on 0 1 447 0
103
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::lower_on(int on_bits);

1351 3 bit 0 4 1838 36 BitMask< unsigned __int64, 64 >::bit 0 1 448 0
96
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::bit(int index);

1352 5 range 0 4 1838 38 BitMask< unsigned __int64, 64 >::range 0 1 449 0
110
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::range(int low_bit, int size);

1353 8 ~BitMask 0 4 1838 41 BitMask< unsigned __int64, 64 >::~BitMask 0 0 0
57
inline ::BitMask< unsigned __int64, 64 >::~BitMask(void);

1354 16 has_max_num_bits 0 4 1838 49 BitMask< unsigned __int64, 64 >::has_max_num_bits 0 1 450 0
77
static inline bool ::BitMask< unsigned __int64, 64 >::has_max_num_bits(void);

1355 16 get_max_num_bits 0 4 1838 49 BitMask< unsigned __int64, 64 >::get_max_num_bits 0 1 451 0
76
static inline int ::BitMask< unsigned __int64, 64 >::get_max_num_bits(void);

1356 12 get_num_bits 0 4 1838 45 BitMask< unsigned __int64, 64 >::get_num_bits 0 1 452 0
72
static inline int ::BitMask< unsigned __int64, 64 >::get_num_bits(void);

1357 7 get_bit 0 4 1838 40 BitMask< unsigned __int64, 64 >::get_bit 0 1 453 0
72
inline bool ::BitMask< unsigned __int64, 64 >::get_bit(int index) const;

1358 7 set_bit 0 4 1838 40 BitMask< unsigned __int64, 64 >::set_bit 0 1 454 0
66
inline void ::BitMask< unsigned __int64, 64 >::set_bit(int index);

1359 9 clear_bit 0 4 1838 42 BitMask< unsigned __int64, 64 >::clear_bit 0 1 455 0
68
inline void ::BitMask< unsigned __int64, 64 >::clear_bit(int index);

1360 10 set_bit_to 0 4 1838 43 BitMask< unsigned __int64, 64 >::set_bit_to 0 1 456 0
81
inline void ::BitMask< unsigned __int64, 64 >::set_bit_to(int index, bool value);

1361 7 is_zero 0 4 1838 40 BitMask< unsigned __int64, 64 >::is_zero 0 1 457 0
67
inline bool ::BitMask< unsigned __int64, 64 >::is_zero(void) const;

1362 9 is_all_on 0 4 1838 42 BitMask< unsigned __int64, 64 >::is_all_on 0 1 458 0
69
inline bool ::BitMask< unsigned __int64, 64 >::is_all_on(void) const;

1363 7 extract 0 4 1838 40 BitMask< unsigned __int64, 64 >::extract 0 1 459 0
96
inline unsigned __int64 ::BitMask< unsigned __int64, 64 >::extract(int low_bit, int size) const;

1364 5 store 0 4 1838 38 BitMask< unsigned __int64, 64 >::store 0 1 460 0
100
inline void ::BitMask< unsigned __int64, 64 >::store(unsigned __int64 value, int low_bit, int size);

1365 10 has_any_of 0 4 1838 43 BitMask< unsigned __int64, 64 >::has_any_of 0 1 461 0
87
inline bool ::BitMask< unsigned __int64, 64 >::has_any_of(int low_bit, int size) const;

1366 10 has_all_of 0 4 1838 43 BitMask< unsigned __int64, 64 >::has_all_of 0 1 462 0
87
inline bool ::BitMask< unsigned __int64, 64 >::has_all_of(int low_bit, int size) const;

1367 9 set_range 0 4 1838 42 BitMask< unsigned __int64, 64 >::set_range 0 1 463 0
80
inline void ::BitMask< unsigned __int64, 64 >::set_range(int low_bit, int size);

1368 11 clear_range 0 4 1838 44 BitMask< unsigned __int64, 64 >::clear_range 0 1 464 0
82
inline void ::BitMask< unsigned __int64, 64 >::clear_range(int low_bit, int size);

1369 12 set_range_to 0 4 1838 45 BitMask< unsigned __int64, 64 >::set_range_to 0 1 465 0
95
inline void ::BitMask< unsigned __int64, 64 >::set_range_to(bool value, int low_bit, int size);

1370 8 get_word 0 4 1838 41 BitMask< unsigned __int64, 64 >::get_word 0 1 466 0
80
inline unsigned __int64 ::BitMask< unsigned __int64, 64 >::get_word(void) const;

1371 8 set_word 0 4 1838 41 BitMask< unsigned __int64, 64 >::set_word 0 1 467 0
80
inline void ::BitMask< unsigned __int64, 64 >::set_word(unsigned __int64 value);

1372 15 get_num_on_bits 0 4 1838 48 BitMask< unsigned __int64, 64 >::get_num_on_bits 0 1 468 0
74
inline int ::BitMask< unsigned __int64, 64 >::get_num_on_bits(void) const;

1373 16 get_num_off_bits 0 4 1838 49 BitMask< unsigned __int64, 64 >::get_num_off_bits 0 1 469 0
75
inline int ::BitMask< unsigned __int64, 64 >::get_num_off_bits(void) const;

1374 17 get_lowest_on_bit 0 4 1838 50 BitMask< unsigned __int64, 64 >::get_lowest_on_bit 0 1 470 0
76
inline int ::BitMask< unsigned __int64, 64 >::get_lowest_on_bit(void) const;

1375 18 get_lowest_off_bit 0 4 1838 51 BitMask< unsigned __int64, 64 >::get_lowest_off_bit 0 1 471 0
77
inline int ::BitMask< unsigned __int64, 64 >::get_lowest_off_bit(void) const;

1376 18 get_highest_on_bit 0 4 1838 51 BitMask< unsigned __int64, 64 >::get_highest_on_bit 0 1 472 0
77
inline int ::BitMask< unsigned __int64, 64 >::get_highest_on_bit(void) const;

1377 19 get_highest_off_bit 0 4 1838 52 BitMask< unsigned __int64, 64 >::get_highest_off_bit 0 1 473 0
78
inline int ::BitMask< unsigned __int64, 64 >::get_highest_off_bit(void) const;

1378 29 get_next_higher_different_bit 0 4 1838 62 BitMask< unsigned __int64, 64 >::get_next_higher_different_bit 0 1 474 0
95
inline int ::BitMask< unsigned __int64, 64 >::get_next_higher_different_bit(int low_bit) const;

1379 15 invert_in_place 0 4 1838 48 BitMask< unsigned __int64, 64 >::invert_in_place 0 1 475 0
69
inline void ::BitMask< unsigned __int64, 64 >::invert_in_place(void);

1380 18 has_bits_in_common 0 4 1838 51 BitMask< unsigned __int64, 64 >::has_bits_in_common 0 1 476 0
118
inline bool ::BitMask< unsigned __int64, 64 >::has_bits_in_common(BitMask< unsigned __int64, 64 > const &other) const;

1381 5 clear 0 4 1838 38 BitMask< unsigned __int64, 64 >::clear 0 1 477 0
59
inline void ::BitMask< unsigned __int64, 64 >::clear(void);

1382 6 output 0 4 1838 39 BitMask< unsigned __int64, 64 >::output 0 1 478 0
67
void ::BitMask< unsigned __int64, 64 >::output(ostream &out) const;

1383 13 output_binary 0 4 1838 46 BitMask< unsigned __int64, 64 >::output_binary 0 2 479 480 0
98
void ::BitMask< unsigned __int64, 64 >::output_binary(ostream &out, int spaces_every = (4)) const;

1384 10 output_hex 0 4 1838 43 BitMask< unsigned __int64, 64 >::output_hex 0 2 481 482 0
95
void ::BitMask< unsigned __int64, 64 >::output_hex(ostream &out, int spaces_every = (4)) const;

1385 5 write 0 4 1838 38 BitMask< unsigned __int64, 64 >::write 0 2 483 484 0
90
void ::BitMask< unsigned __int64, 64 >::write(ostream &out, int indent_level = (0)) const;

1386 11 operator == 0 4 1838 44 BitMask< unsigned __int64, 64 >::operator == 0 1 485 0
111
inline bool ::BitMask< unsigned __int64, 64 >::operator ==(BitMask< unsigned __int64, 64 > const &other) const;

1387 11 operator != 0 4 1838 44 BitMask< unsigned __int64, 64 >::operator != 0 1 486 0
111
inline bool ::BitMask< unsigned __int64, 64 >::operator !=(BitMask< unsigned __int64, 64 > const &other) const;

1388 10 operator < 0 4 1838 43 BitMask< unsigned __int64, 64 >::operator < 0 1 487 0
110
inline bool ::BitMask< unsigned __int64, 64 >::operator <(BitMask< unsigned __int64, 64 > const &other) const;

1389 10 compare_to 0 4 1838 43 BitMask< unsigned __int64, 64 >::compare_to 0 1 488 0
109
inline int ::BitMask< unsigned __int64, 64 >::compare_to(BitMask< unsigned __int64, 64 > const &other) const;

1390 10 operator & 0 4 1838 43 BitMask< unsigned __int64, 64 >::operator & 0 1 489 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator &(BitMask< unsigned __int64, 64 > const &other) const;

1391 10 operator | 0 4 1838 43 BitMask< unsigned __int64, 64 >::operator | 0 1 490 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator |(BitMask< unsigned __int64, 64 > const &other) const;

1392 10 operator ^ 0 4 1838 43 BitMask< unsigned __int64, 64 >::operator ^ 0 1 491 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator ^(BitMask< unsigned __int64, 64 > const &other) const;

1393 10 operator ~ 0 68 1838 43 BitMask< unsigned __int64, 64 >::operator ~ 0 1 492 0
97
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator ~(void) const;

1394 11 operator << 0 4 1838 44 BitMask< unsigned __int64, 64 >::operator << 0 1 493 0
103
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator <<(int shift) const;

1395 11 operator >> 0 4 1838 44 BitMask< unsigned __int64, 64 >::operator >> 0 1 494 0
103
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator >>(int shift) const;

1396 11 operator &= 0 4 1838 44 BitMask< unsigned __int64, 64 >::operator &= 0 1 495 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator &=(BitMask< unsigned __int64, 64 > const &other);

1397 11 operator |= 0 4 1838 44 BitMask< unsigned __int64, 64 >::operator |= 0 1 496 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator |=(BitMask< unsigned __int64, 64 > const &other);

1398 11 operator ^= 0 4 1838 44 BitMask< unsigned __int64, 64 >::operator ^= 0 1 497 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator ^=(BitMask< unsigned __int64, 64 > const &other);

1399 12 operator <<= 0 4 1838 45 BitMask< unsigned __int64, 64 >::operator <<= 0 1 498 0
71
inline void ::BitMask< unsigned __int64, 64 >::operator <<=(int shift);

1400 12 operator >>= 0 4 1838 45 BitMask< unsigned __int64, 64 >::operator >>= 0 1 499 0
71
inline void ::BitMask< unsigned __int64, 64 >::operator >>=(int shift);

1401 19 flood_down_in_place 0 4 1838 52 BitMask< unsigned __int64, 64 >::flood_down_in_place 0 1 500 0
73
inline void ::BitMask< unsigned __int64, 64 >::flood_down_in_place(void);

1402 17 flood_up_in_place 0 4 1838 50 BitMask< unsigned __int64, 64 >::flood_up_in_place 0 1 501 0
71
inline void ::BitMask< unsigned __int64, 64 >::flood_up_in_place(void);

1403 15 flood_bits_down 0 4 1838 48 BitMask< unsigned __int64, 64 >::flood_bits_down 0 1 502 0
102
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::flood_bits_down(void) const;

1404 13 flood_bits_up 0 4 1838 46 BitMask< unsigned __int64, 64 >::flood_bits_up 0 1 503 0
100
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::flood_bits_up(void) const;

1405 21 keep_next_highest_bit 0 4 1838 54 BitMask< unsigned __int64, 64 >::keep_next_highest_bit 0 3 504 505 506 0
371
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(BitMask< unsigned __int64, 64 > const &other) const;

1406 20 keep_next_lowest_bit 0 4 1838 53 BitMask< unsigned __int64, 64 >::keep_next_lowest_bit 0 3 507 508 509 0
368
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(BitMask< unsigned __int64, 64 > const &other) const;

1407 7 get_key 0 4 1838 40 BitMask< unsigned __int64, 64 >::get_key 0 1 510 0
66
inline int ::BitMask< unsigned __int64, 64 >::get_key(void) const;

1408 11 __nonzero__ 0 4 1838 44 BitMask< unsigned __int64, 64 >::__nonzero__ 0 1 511 0
71
inline bool ::BitMask< unsigned __int64, 64 >::__nonzero__(void) const;

1409 14 get_class_type 0 4 1838 47 BitMask< unsigned __int64, 64 >::get_class_type 0 1 512 0
74
static TypeHandle ::BitMask< unsigned __int64, 64 >::get_class_type(void);

1410 8 BitArray 0 4 1839 18 BitArray::BitArray 0 4 513 514 515 516 910
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor (from SparseArray)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
178
inline BitArray::BitArray(void);
inline BitArray::BitArray(unsigned int init_value);
inline BitArray::BitArray(BitArray const &copy);
BitArray::BitArray(SparseArray const &from);

1411 10 operator = 0 4 1839 20 BitArray::operator = 0 1 517 233
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline BitArray &BitArray::operator =(BitArray const &copy);

1412 6 all_on 0 4 1839 16 BitArray::all_on 0 1 518 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray with an infinite array of bits,
//               all on.
////////////////////////////////////////////////////////////////////
46
static inline BitArray BitArray::all_on(void);

1413 7 all_off 0 4 1839 17 BitArray::all_off 0 1 519 284
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose bits are all off.
////////////////////////////////////////////////////////////////////
47
static inline BitArray BitArray::all_off(void);

1414 8 lower_on 0 4 1839 18 BitArray::lower_on 0 1 520 295
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose lower on_bits bits are on.
////////////////////////////////////////////////////////////////////
55
static inline BitArray BitArray::lower_on(int on_bits);

1415 3 bit 0 4 1839 13 BitArray::bit 0 1 521 289
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a BitArray with only the indicated bit on.
////////////////////////////////////////////////////////////////////
48
static inline BitArray BitArray::bit(int index);

1416 5 range 0 4 1839 15 BitArray::range 0 1 522 323
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose size bits, beginning at
//               low_bit, are on.
////////////////////////////////////////////////////////////////////
62
static inline BitArray BitArray::range(int low_bit, int size);

1417 9 ~BitArray 0 4 1839 19 BitArray::~BitArray 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline BitArray::~BitArray(void);

1418 16 has_max_num_bits 0 4 1839 26 BitArray::has_max_num_bits 0 1 523 714
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The BitArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               BitArray interchangeably.
////////////////////////////////////////////////////////////////////
52
static inline bool BitArray::has_max_num_bits(void);

1419 16 get_max_num_bits 0 4 1839 26 BitArray::get_max_num_bits 0 1 524 749
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               BitArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or BitArray interchangeably.
////////////////////////////////////////////////////////////////////
51
static inline int BitArray::get_max_num_bits(void);

1420 21 get_num_bits_per_word 0 4 1839 31 BitArray::get_num_bits_per_word 0 1 525 476
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits_per_word
//       Access: Published, Static
//  Description: Returns the number of bits stored per word
//               internally.  This is of interest only in that it
//               limits the maximum number of bits that may be queried
//               or set at once by extract() and store().
////////////////////////////////////////////////////////////////////
56
static inline int BitArray::get_num_bits_per_word(void);

1421 12 get_num_bits 0 4 1839 22 BitArray::get_num_bits 0 1 526 604
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
////////////////////////////////////////////////////////////////////
46
inline int BitArray::get_num_bits(void) const;

1422 7 get_bit 0 4 1839 17 BitArray::get_bit 0 1 527 442
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
////////////////////////////////////////////////////////////////////
47
inline bool BitArray::get_bit(int index) const;

1423 7 set_bit 0 4 1839 17 BitArray::set_bit 0 1 528 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
41
inline void BitArray::set_bit(int index);

1424 9 clear_bit 0 4 1839 19 BitArray::clear_bit 0 1 529 320
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
43
inline void BitArray::clear_bit(int index);

1425 10 set_bit_to 0 4 1839 20 BitArray::set_bit_to 0 1 530 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
////////////////////////////////////////////////////////////////////
56
inline void BitArray::set_bit_to(int index, bool value);

1426 16 get_highest_bits 0 4 1839 26 BitArray::get_highest_bits 0 1 531 364
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
////////////////////////////////////////////////////////////////////
51
inline bool BitArray::get_highest_bits(void) const;

1427 7 is_zero 0 4 1839 17 BitArray::is_zero 0 1 532 294
////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
////////////////////////////////////////////////////////////////////
35
bool BitArray::is_zero(void) const;

1428 9 is_all_on 0 4 1839 19 BitArray::is_all_on 0 1 533 295
////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
////////////////////////////////////////////////////////////////////
37
bool BitArray::is_all_on(void) const;

1429 7 extract 0 4 1839 17 BitArray::extract 0 1 534 438
////////////////////////////////////////////////////////////////////
//     Function: BitArray::extract
//       Access: Published
//  Description: Returns a word that represents only the indicated
//               range of bits within this BitArray, shifted to the
//               least-significant position.  size must be <=
//               get_num_bits_per_word().
////////////////////////////////////////////////////////////////////
67
inline unsigned int BitArray::extract(int low_bit, int size) const;

1430 5 store 0 4 1839 15 BitArray::store 0 1 535 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::store
//       Access: Published
//  Description: Stores the indicated word into the indicated range of
//               bits with this BitArray.
////////////////////////////////////////////////////////////////////
71
inline void BitArray::store(unsigned int value, int low_bit, int size);

1431 10 has_any_of 0 4 1839 20 BitArray::has_any_of 0 1 536 308
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BitArray::has_any_of(int low_bit, int size) const;

1432 10 has_all_of 0 4 1839 20 BitArray::has_all_of 0 1 537 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BitArray::has_all_of(int low_bit, int size) const;

1433 9 set_range 0 4 1839 19 BitArray::set_range 0 1 538 255
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
////////////////////////////////////////////////////////////////////
48
void BitArray::set_range(int low_bit, int size);

1434 11 clear_range 0 4 1839 21 BitArray::clear_range 0 1 539 258
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
////////////////////////////////////////////////////////////////////
50
void BitArray::clear_range(int low_bit, int size);

1435 12 set_range_to 0 4 1839 22 BitArray::set_range_to 0 1 540 275
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
////////////////////////////////////////////////////////////////////
70
inline void BitArray::set_range_to(bool value, int low_bit, int size);

1436 15 get_num_on_bits 0 4 1839 25 BitArray::get_num_on_bits 0 1 541 372
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
////////////////////////////////////////////////////////////////////
42
int BitArray::get_num_on_bits(void) const;

1437 16 get_num_off_bits 0 4 1839 26 BitArray::get_num_off_bits 0 1 542 373
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
////////////////////////////////////////////////////////////////////
43
int BitArray::get_num_off_bits(void) const;

1438 17 get_lowest_on_bit 0 4 1839 27 BitArray::get_lowest_on_bit 0 1 543 330
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits.
////////////////////////////////////////////////////////////////////
44
int BitArray::get_lowest_on_bit(void) const;

1439 18 get_lowest_off_bit 0 4 1839 28 BitArray::get_lowest_off_bit 0 1 544 331
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits.
////////////////////////////////////////////////////////////////////
45
int BitArray::get_lowest_off_bit(void) const;

1440 18 get_highest_on_bit 0 4 1839 28 BitArray::get_highest_on_bit 0 1 545 390
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
45
int BitArray::get_highest_on_bit(void) const;

1441 19 get_highest_off_bit 0 4 1839 29 BitArray::get_highest_off_bit 0 1 546 391
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
46
int BitArray::get_highest_off_bit(void) const;

1442 29 get_next_higher_different_bit 0 4 1839 39 BitArray::get_next_higher_different_bit 0 1 547 591
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
////////////////////////////////////////////////////////////////////
63
int BitArray::get_next_higher_different_bit(int low_bit) const;

1443 13 get_num_words 0 4 1839 23 BitArray::get_num_words 0 1 548 304
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_words
//       Access: Published
//  Description: Returns the number of possibly-unique words stored in
//               the array.
////////////////////////////////////////////////////////////////////
47
inline int BitArray::get_num_words(void) const;

1444 8 get_word 0 4 1839 18 BitArray::get_word 0 1 549 410
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_word
//       Access: Published
//  Description: Returns the nth word in the array.  It is valid for n
//               to be greater than get_num_words(), but the return
//               value beyond get_num_words() will always be the same.
////////////////////////////////////////////////////////////////////
67
inline BitMask< unsigned int, 32 > BitArray::get_word(int n) const;

1445 8 set_word 0 4 1839 18 BitArray::set_word 0 1 550 351
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_word
//       Access: Published
//  Description: Replaces the nth word in the array.  If n >=
//               get_num_words(), this automatically extends the
//               array.
////////////////////////////////////////////////////////////////////
73
inline void BitArray::set_word(int n, BitMask< unsigned int, 32 > value);

1446 15 invert_in_place 0 4 1839 25 BitArray::invert_in_place 0 1 551 318
////////////////////////////////////////////////////////////////////
//     Function: BitArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the BitArray.  This is
//               equivalent to array = ~array.
////////////////////////////////////////////////////////////////////
37
void BitArray::invert_in_place(void);

1447 18 has_bits_in_common 0 4 1839 28 BitArray::has_bits_in_common 0 1 552 440
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this BitArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
////////////////////////////////////////////////////////////////////
63
bool BitArray::has_bits_in_common(BitArray const &other) const;

1448 5 clear 0 4 1839 15 BitArray::clear 0 1 553 253
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear
//       Access: Published
//  Description: Sets all the bits in the BitArray off.
////////////////////////////////////////////////////////////////////
34
inline void BitArray::clear(void);

1449 6 output 0 4 1839 16 BitArray::output 0 1 554 443
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output
//       Access: Published
//  Description: Writes the BitArray out as a hex number.  For a
//               BitArray, this is always the same as output_hex();
//               it's too confusing for the output format to change
//               back and forth at runtime.
////////////////////////////////////////////////////////////////////
42
void BitArray::output(ostream &out) const;

1450 13 output_binary 0 4 1839 23 BitArray::output_binary 0 2 555 556 312
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
////////////////////////////////////////////////////////////////////
73
void BitArray::output_binary(ostream &out, int spaces_every = (4)) const;

1451 10 output_hex 0 4 1839 20 BitArray::output_hex 0 2 557 558 316
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
////////////////////////////////////////////////////////////////////
70
void BitArray::output_hex(ostream &out, int spaces_every = (4)) const;

1452 5 write 0 4 1839 15 BitArray::write 0 2 559 560 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
////////////////////////////////////////////////////////////////////
65
void BitArray::write(ostream &out, int indent_level = (0)) const;

1453 11 operator == 0 4 1839 21 BitArray::operator == 0 1 561 0
63
inline bool BitArray::operator ==(BitArray const &other) const;

1454 11 operator != 0 4 1839 21 BitArray::operator != 0 1 562 0
63
inline bool BitArray::operator !=(BitArray const &other) const;

1455 10 operator < 0 4 1839 20 BitArray::operator < 0 1 563 0
62
inline bool BitArray::operator <(BitArray const &other) const;

1456 10 compare_to 0 4 1839 20 BitArray::compare_to 0 1 564 487
////////////////////////////////////////////////////////////////////
//     Function: BitArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this BitArray sorts
//               before the indicated other BitArray, greater than zero
//               if it sorts after, or 0 if they are equivalent.  This
//               is based on the same ordering defined by operator <.
////////////////////////////////////////////////////////////////////
54
int BitArray::compare_to(BitArray const &other) const;

1457 10 operator & 0 4 1839 20 BitArray::operator & 0 1 565 0
66
inline BitArray BitArray::operator &(BitArray const &other) const;

1458 10 operator | 0 4 1839 20 BitArray::operator | 0 1 566 0
66
inline BitArray BitArray::operator |(BitArray const &other) const;

1459 10 operator ^ 0 4 1839 20 BitArray::operator ^ 0 1 567 0
66
inline BitArray BitArray::operator ^(BitArray const &other) const;

1460 10 operator ~ 0 68 1839 20 BitArray::operator ~ 0 1 568 0
49
inline BitArray BitArray::operator ~(void) const;

1461 11 operator << 0 4 1839 21 BitArray::operator << 0 1 569 0
55
inline BitArray BitArray::operator <<(int shift) const;

1462 11 operator >> 0 4 1839 21 BitArray::operator >> 0 1 570 0
55
inline BitArray BitArray::operator >>(int shift) const;

1463 11 operator &= 0 4 1839 21 BitArray::operator &= 0 1 571 0
50
void BitArray::operator &=(BitArray const &other);

1464 11 operator |= 0 4 1839 21 BitArray::operator |= 0 1 572 0
50
void BitArray::operator |=(BitArray const &other);

1465 11 operator ^= 0 4 1839 21 BitArray::operator ^= 0 1 573 0
50
void BitArray::operator ^=(BitArray const &other);

1466 12 operator <<= 0 4 1839 22 BitArray::operator <<= 0 1 574 0
39
void BitArray::operator <<=(int shift);

1467 12 operator >>= 0 4 1839 22 BitArray::operator >>= 0 1 575 0
39
void BitArray::operator >>=(int shift);

1468 14 get_class_type 0 4 1839 24 BitArray::get_class_type 0 1 576 0
49
static TypeHandle BitArray::get_class_type(void);

1469 12 ButtonHandle 0 4 1840 26 ButtonHandle::ButtonHandle 0 4 577 578 579 580 1817
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               index number, which may have been returned by an
//               earlier call to ButtonHandle::get_index().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               name, which is looked up in the ButtonRegistry.
//               This exists for the purpose of being able to
//               automatically coerce a string into a ButtonHandle;
//               for most purposes, you should use either the static
//               KeyboardButton/MouseButton getters or
//               ButtonRegistry::register_button().
////////////////////////////////////////////////////////////////////
209
inline ButtonHandle::ButtonHandle(void);
inline ButtonHandle::ButtonHandle(int index);
inline ButtonHandle::ButtonHandle(ButtonHandle const &copy);
ButtonHandle::ButtonHandle(basic_string< char > const &name);

1470 11 operator == 0 4 1840 25 ButtonHandle::operator == 0 1 581 0
71
inline bool ButtonHandle::operator ==(ButtonHandle const &other) const;

1471 11 operator != 0 4 1840 25 ButtonHandle::operator != 0 1 582 0
71
inline bool ButtonHandle::operator !=(ButtonHandle const &other) const;

1472 10 operator < 0 4 1840 24 ButtonHandle::operator < 0 1 583 0
70
inline bool ButtonHandle::operator <(ButtonHandle const &other) const;

1473 11 operator <= 0 4 1840 25 ButtonHandle::operator <= 0 1 584 0
71
inline bool ButtonHandle::operator <=(ButtonHandle const &other) const;

1474 10 operator > 0 4 1840 24 ButtonHandle::operator > 0 1 585 0
70
inline bool ButtonHandle::operator >(ButtonHandle const &other) const;

1475 11 operator >= 0 4 1840 25 ButtonHandle::operator >= 0 1 586 0
71
inline bool ButtonHandle::operator >=(ButtonHandle const &other) const;

1476 10 compare_to 0 4 1840 24 ButtonHandle::compare_to 0 1 587 467
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::compare_to
//       Access: Published
//  Description: Sorts ButtonHandles arbitrarily (according to <, >,
//               etc.).  Returns a number less than 0 if this type
//               sorts before the other one, greater than zero if it
//               sorts after, 0 if they are equivalent.
////////////////////////////////////////////////////////////////////
69
inline int ButtonHandle::compare_to(ButtonHandle const &other) const;

1477 8 get_hash 0 4 1840 22 ButtonHandle::get_hash 0 1 588 265
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_hash
//       Access: Published
//  Description: Returns a hash code suitable for phash_map.
////////////////////////////////////////////////////////////////////
55
inline unsigned int ButtonHandle::get_hash(void) const;

1478 8 get_name 0 4 1840 22 ButtonHandle::get_name 0 1 589 250
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_name
//       Access: Public
//  Description: Returns the name of the button.
////////////////////////////////////////////////////////////////////
56
basic_string< char > ButtonHandle::get_name(void) const;

1479 20 has_ascii_equivalent 0 4 1840 34 ButtonHandle::has_ascii_equivalent 0 1 590 375
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::has_ascii_equivalent
//       Access: Published
//  Description: Returns true if the button was created with an ASCII
//               equivalent code (e.g. for a standard keyboard
//               button).
////////////////////////////////////////////////////////////////////
59
inline bool ButtonHandle::has_ascii_equivalent(void) const;

1480 20 get_ascii_equivalent 0 4 1840 34 ButtonHandle::get_ascii_equivalent 0 1 591 346
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_ascii_equivalent
//       Access: Published
//  Description: Returns the character code associated with the
//               button, or '\0' if no ASCII code was associated.
////////////////////////////////////////////////////////////////////
59
inline char ButtonHandle::get_ascii_equivalent(void) const;

1481 9 get_alias 0 4 1840 23 ButtonHandle::get_alias 0 1 592 692
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_alias
//       Access: Published
//  Description: Returns the alias (alternate name) associated with
//               the button, if any, or ButtonHandle::none() if the
//               button has no alias.
//
//               Each button is allowed to have one alias, and
//               multiple different buttons can refer to the same
//               alias.  The alias should be the more general name for
//               the button, for instance, shift is an alias for
//               lshift, but not vice-versa.
////////////////////////////////////////////////////////////////////
49
ButtonHandle ButtonHandle::get_alias(void) const;

1482 7 matches 0 4 1840 21 ButtonHandle::matches 0 1 593 532
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::matches
//       Access: Published
//  Description: Returns true if this ButtonHandle is the same as the
//               other one, or if the other one is an alias for this
//               one.  (Does not return true if this button is an
//               alias for the other one, however.)
//
//               This is a more general comparison than operator ==.
////////////////////////////////////////////////////////////////////
67
inline bool ButtonHandle::matches(ButtonHandle const &other) const;

1483 9 get_index 0 4 1840 23 ButtonHandle::get_index 0 1 594 664
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               ButtonHandle. Each different ButtonHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               ButtonHandles as opaque classes.  This is provided
//               for the convenience of non-C++ scripting languages to
//               build a hashtable of ButtonHandles.
////////////////////////////////////////////////////////////////////
47
inline int ButtonHandle::get_index(void) const;

1484 6 output 0 4 1840 20 ButtonHandle::output 0 1 595 219
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void ButtonHandle::output(ostream &out) const;

1485 4 none 0 4 1840 18 ButtonHandle::none 0 1 596 321
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued ButtonHandle that is
//               used to indicate no button.
////////////////////////////////////////////////////////////////////
52
static inline ButtonHandle ButtonHandle::none(void);

1486 22 operator typecast bool 0 132 1840 36 ButtonHandle::operator typecast bool 0 1 598 0
61
inline bool ButtonHandle::operator typecast bool(void) const;

1487 14 get_class_type 0 4 1840 28 ButtonHandle::get_class_type 0 1 597 0
53
static TypeHandle ButtonHandle::get_class_type(void);

1488 13 ~ButtonHandle 0 4 1840 27 ButtonHandle::~ButtonHandle 0 0 0
34
ButtonHandle::~ButtonHandle(void);

1489 10 get_button 0 4 1841 26 ButtonRegistry::get_button 0 1 599 396
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::get_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               registers a new one and returns it.
////////////////////////////////////////////////////////////////////
74
ButtonHandle ButtonRegistry::get_button(basic_string< char > const &name);

1490 11 find_button 0 4 1841 27 ButtonRegistry::find_button 0 1 600 391
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
75
ButtonHandle ButtonRegistry::find_button(basic_string< char > const &name);

1491 17 find_ascii_button 0 4 1841 33 ButtonRegistry::find_ascii_button 0 1 601 419
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_ascii_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated ASCII equivalent character.  If there is no
//               such ButtonHandle, returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
76
ButtonHandle ButtonRegistry::find_ascii_button(char ascii_equivalent) const;

1492 5 write 0 4 1841 21 ButtonRegistry::write 0 1 602 220
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
void ButtonRegistry::write(ostream &out) const;

1493 3 ptr 0 4 1841 19 ButtonRegistry::ptr 0 1 603 367
// ptr() returns the pointer to the global ButtonRegistry object.

////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global ButtonRegistry
//               object.
////////////////////////////////////////////////////////////////////
56
static inline ButtonRegistry *ButtonRegistry::ptr(void);

1494 15 ~ButtonRegistry 0 4 1841 31 ButtonRegistry::~ButtonRegistry 0 0 0
38
ButtonRegistry::~ButtonRegistry(void);

1495 15 get_num_buttons 0 4 1842 26 ButtonMap::get_num_buttons 0 1 604 308
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that this button
//               mapping specifies.
////////////////////////////////////////////////////////////////////
50
inline int ButtonMap::get_num_buttons(void) const;

1496 14 get_raw_button 0 4 1842 25 ButtonMap::get_raw_button 0 1 605 307
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_raw_button
//       Access: Published
//  Description: Returns the underlying raw button associated with
//               the nth button.
////////////////////////////////////////////////////////////////////
59
inline ButtonHandle ButtonMap::get_raw_button(int i) const;

1497 17 get_mapped_button 0 4 1842 28 ButtonMap::get_mapped_button 0 3 606 607 608 1158
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the nth mapped button, meaning the button
//               that the nth raw button is mapped to.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the button that the given button is mapped
//               to, or ButtonHandle::none() if this map does not
//               specify a mapped button for the given raw button.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the button that the given button is mapped
//               to, or ButtonHandle::none() if this map does not
//               specify a mapped button for the given raw button.
////////////////////////////////////////////////////////////////////
230
inline ButtonHandle ButtonMap::get_mapped_button(int i) const;
inline ButtonHandle ButtonMap::get_mapped_button(ButtonHandle raw) const;
inline ButtonHandle ButtonMap::get_mapped_button(basic_string< char > const &raw_name) const;

1498 23 get_mapped_button_label 0 4 1842 34 ButtonMap::get_mapped_button_label 0 3 609 610 611 1713
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button_label
//       Access: Published
//  Description: Returns the label associated with the nth mapped
//               button, meaning the button that the nth raw
//               button is mapped to.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtoMap::get_mapped_button_label
//       Access: Published
//  Description: If the button map specifies a special name for the
//               button (eg. if the operating system or keyboard
//               device has a localized name describing the key),
//               returns it, or the empty string otherwise.
//
//               Note that this is not the same as
//               get_mapped_button().get_name(), which returns the
//               name of the Panda event associated with the button.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtoMap::get_mapped_button_label
//       Access: Published
//  Description: If the button map specifies a special name for the
//               button (eg. if the operating system or keyboard
//               device has a localized name describing the key),
//               returns it, or the empty string otherwise.
//
//               Note that this is not the same as
//               get_mapped_button().get_name(), which returns the
//               name of the Panda event associated with the button.
////////////////////////////////////////////////////////////////////
293
inline basic_string< char > const &ButtonMap::get_mapped_button_label(int i) const;
inline basic_string< char > const &ButtonMap::get_mapped_button_label(ButtonHandle raw) const;
inline basic_string< char > const &ButtonMap::get_mapped_button_label(basic_string< char > const &raw_name) const;

1499 6 output 0 4 1842 17 ButtonMap::output 0 1 612 217
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
void ButtonMap::output(ostream &out) const;

1500 5 write 0 4 1842 16 ButtonMap::write 0 2 613 614 216
////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
void ButtonMap::write(ostream &out, int indent_level = (0)) const;

1501 14 get_class_type 0 4 1842 25 ButtonMap::get_class_type 0 1 615 0
50
static TypeHandle ButtonMap::get_class_type(void);

1502 10 ~ButtonMap 0 4 1842 21 ButtonMap::~ButtonMap 0 0 0
28
ButtonMap::~ButtonMap(void);

1503 6 output 0 6 1844 22 CallbackObject::output 0 1 616 230
////////////////////////////////////////////////////////////////////
//     Function: CallbackObject::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
56
virtual void CallbackObject::output(ostream &out) const;

1504 14 get_class_type 0 4 1844 30 CallbackObject::get_class_type 0 1 617 0
55
static TypeHandle CallbackObject::get_class_type(void);

1505 15 ~CallbackObject 0 4 1844 31 CallbackObject::~CallbackObject 0 0 0
38
CallbackObject::~CallbackObject(void);

1506 19 get_cache_ref_count 0 4 1845 54 CachedTypedWritableReferenceCount::get_cache_ref_count 0 1 618 290
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::get_cache_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
78
inline int CachedTypedWritableReferenceCount::get_cache_ref_count(void) const;

1507 9 cache_ref 0 4 1845 44 CachedTypedWritableReferenceCount::cache_ref 0 1 619 355
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_ref
//       Access: Published
//  Description: Explicitly increments the cache reference count and
//               the normal reference count simultaneously.
////////////////////////////////////////////////////////////////////
69
inline void CachedTypedWritableReferenceCount::cache_ref(void) const;

1508 11 cache_unref 0 4 1845 46 CachedTypedWritableReferenceCount::cache_unref 0 1 620 479
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_unref
//       Access: Published
//  Description: Explicitly decrements the cache reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
71
inline bool CachedTypedWritableReferenceCount::cache_unref(void) const;

1509 24 test_ref_count_integrity 0 4 1845 59 CachedTypedWritableReferenceCount::test_ref_count_integrity 0 1 621 359
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
84
inline bool CachedTypedWritableReferenceCount::test_ref_count_integrity(void) const;

1510 14 get_class_type 0 4 1845 49 CachedTypedWritableReferenceCount::get_class_type 0 1 622 0
74
static TypeHandle CachedTypedWritableReferenceCount::get_class_type(void);

1511 6 output 0 6 1846 20 CallbackData::output 0 1 623 228
////////////////////////////////////////////////////////////////////
//     Function: CallbackData::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
54
virtual void CallbackData::output(ostream &out) const;

1512 6 upcall 0 6 1846 20 CallbackData::upcall 0 1 624 408
////////////////////////////////////////////////////////////////////
//     Function: CallbackData::upcall
//       Access: Published, Virtual
//  Description: You should make this call during the callback if you
//               want to continue the normal function that would have
//               been done in the absence of a callback.
////////////////////////////////////////////////////////////////////
40
virtual void CallbackData::upcall(void);

1513 14 get_class_type 0 4 1846 28 CallbackData::get_class_type 0 1 625 0
53
static TypeHandle CallbackData::get_class_type(void);

1514 13 ~CallbackData 0 4 1846 27 CallbackData::~CallbackData 0 0 0
34
CallbackData::~CallbackData(void);

1515 7 TimeVal 0 4 1847 16 TimeVal::TimeVal 0 1 626 218
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::contructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
inline TimeVal::TimeVal(void);

1516 7 get_sec 0 4 1847 16 TimeVal::get_sec 0 1 627 215
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_sec
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline unsigned long int TimeVal::get_sec(void) const;

1517 8 get_usec 0 4 1847 17 TimeVal::get_usec 0 1 628 216
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_usec
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline unsigned long int TimeVal::get_usec(void) const;

1518 8 ~TimeVal 0 4 1847 17 TimeVal::~TimeVal 0 0 0
24
TimeVal::~TimeVal(void);

1519 11 ClockObject 0 4 1848 24 ClockObject::ClockObject 0 2 629 630 454
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
ClockObject::ClockObject(void);
ClockObject::ClockObject(ClockObject const &copy);

1520 8 set_mode 0 4 1848 21 ClockObject::set_mode 0 1 631 2596
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_mode
//       Access: Published
//  Description: Changes the mode of the clock.  Normally, the clock
//               is in mode M_normal. In this mode, each call to
//               tick() will set the value returned by
//               get_frame_time() to the current real time; thus, the
//               clock simply reports time advancing.
//
//               Other possible modes:
//
//               M_non_real_time - the clock ignores real time
//               completely; at each call to tick(), it pretends that
//               exactly dt seconds have elapsed since the last call
//               to tick().  You may set the value of dt with
//               set_dt() or set_frame_rate().
//
//               M_limited - the clock will run as fast as it can, as
//               in M_normal, but will not run faster than the rate
//               specified by set_frame_rate().  If the application
//               would run faster than this rate, the clock will slow
//               down the application.
//
//               M_integer - the clock will run as fast as it can, but
//               the rate will be constrained to be an integer
//               multiple or divisor of the rate specified by
//               set_frame_rate().  The clock will slow down the
//               application a bit to guarantee this.
//
//               M_integer_limited - a combination of M_limited and
//               M_integer; the clock will not run faster than
//               set_frame_rate(), and if it runs slower, it will run
//               at a integer divisor of that rate.
//
//               M_forced - the clock forces the application to run at
//               the rate specified by set_frame_rate().  If the
//               application would run faster than this rate, the
//               clock will slow down the application; if the
//               application would run slower than this rate, the
//               clock slows down time so that the application
//               believes it is running at the given rate.
//
//               M_degrade - the clock runs at real time, but the
//               application is slowed down by a set factor of its
//               frame rate, specified by set_degrade_factor().
//
//               M_slave - the clock does not advance, but relies on
//               the user to call set_frame_time() and/or
//               set_frame_count() each frame.
////////////////////////////////////////////////////////////////////
51
void ClockObject::set_mode(ClockObject::Mode mode);

1521 8 get_mode 0 4 1848 21 ClockObject::get_mode 0 1 632 293
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_mode
//       Access: Published
//  Description: Returns the current mode of the clock.  See
//               set_mode().
////////////////////////////////////////////////////////////////////
59
inline ClockObject::Mode ClockObject::get_mode(void) const;

1522 14 get_frame_time 0 4 1848 27 ClockObject::get_frame_time 0 2 633 634 656
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
////////////////////////////////////////////////////////////////////
99
inline double ClockObject::get_frame_time(Thread *current_thread = ((get_current_thread()))) const;

1523 13 get_real_time 0 4 1848 26 ClockObject::get_real_time 0 1 635 769
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_real_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.  This is useful for doing real timing
//               measurements, e.g. for performance statistics.
//
//               This returns the most precise timer we have for short
//               time intervals, but it may tend to drift over the
//               long haul.  If more accurate timekeeping is needed
//               over a long period of time, use get_long_time()
//               instead.
////////////////////////////////////////////////////////////////////
53
inline double ClockObject::get_real_time(void) const;

1524 13 get_long_time 0 4 1848 26 ClockObject::get_long_time 0 1 636 773
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_long_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.
//
//               This is similar to get_real_time(), except that it
//               uses the most accurate counter we have over a long
//               period of time, and so it is less likely to drift.
//               However, it may not be very precise for measuring
//               short intervals.  On Windows, for instace, this is
//               only accurate to within about 55 milliseconds.
////////////////////////////////////////////////////////////////////
53
inline double ClockObject::get_long_time(void) const;

1525 5 reset 0 4 1848 18 ClockObject::reset 0 1 637 299
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::reset
//       Access: Published
//  Description: Simultaneously resets both the time and the frame
//               count to zero.
////////////////////////////////////////////////////////////////////
37
inline void ClockObject::reset(void);

1526 13 set_real_time 0 4 1848 26 ClockObject::set_real_time 0 1 638 607
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_real_time
//       Access: Published
//  Description: Resets the clock to the indicated time.  This
//               changes only the real time of the clock as reported
//               by get_real_time(), but does not immediately change
//               the time reported by get_frame_time()--that will
//               change after the next call to tick().  Also see
//               reset(), set_frame_time(), and set_frame_count().
////////////////////////////////////////////////////////////////////
45
void ClockObject::set_real_time(double time);

1527 14 set_frame_time 0 4 1848 27 ClockObject::set_frame_time 0 2 639 640 477
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
////////////////////////////////////////////////////////////////////
97
void ClockObject::set_frame_time(double time, Thread *current_thread = ((get_current_thread())));

1528 15 set_frame_count 0 4 1848 28 ClockObject::set_frame_count 0 2 641 642 380
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
////////////////////////////////////////////////////////////////////
102
void ClockObject::set_frame_count(int frame_count, Thread *current_thread = ((get_current_thread())));

1529 15 get_frame_count 0 4 1848 28 ClockObject::get_frame_count 0 2 643 644 457
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
////////////////////////////////////////////////////////////////////
97
inline int ClockObject::get_frame_count(Thread *current_thread = ((get_current_thread()))) const;

1530 18 get_net_frame_rate 0 4 1848 31 ClockObject::get_net_frame_rate 0 2 645 646 523
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
////////////////////////////////////////////////////////////////////
103
inline double ClockObject::get_net_frame_rate(Thread *current_thread = ((get_current_thread()))) const;

1531 6 get_dt 0 4 1848 19 ClockObject::get_dt 0 2 647 648 369
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
////////////////////////////////////////////////////////////////////
91
inline double ClockObject::get_dt(Thread *current_thread = ((get_current_thread()))) const;

1532 6 set_dt 0 4 1848 19 ClockObject::set_dt 0 1 649 575
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_dt
//       Access: Published
//  Description: In non-real-time mode, sets the number of seconds
//               that should appear to elapse between frames.  In
//               forced mode or limited mode, sets our target dt.  In
//               normal mode, this has no effect.  
//
//               Also see set_frame_rate(), which is a different way
//               to specify the same quantity.
////////////////////////////////////////////////////////////////////
36
void ClockObject::set_dt(double dt);

1533 14 set_frame_rate 0 4 1848 27 ClockObject::set_frame_rate 0 1 650 583
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_rate
//       Access: Published
//  Description: In non-real-time mode, sets the number of frames per
//               second that we should appear to be running.  In forced
//               mode or limited mode, sets our target frame rate.  In
//               normal mode, this has no effect.
//
//               Also see set_dt(), which is a different way to
//               specify the same quantity.
////////////////////////////////////////////////////////////////////
52
void ClockObject::set_frame_rate(double frame_rate);

1534 10 get_max_dt 0 4 1848 23 ClockObject::get_max_dt 0 1 651 333
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_dt
//       Access: Published
//  Description: Returns the current maximum allowable time elapsed
//               between any two frames.  See set_max_dt().
////////////////////////////////////////////////////////////////////
50
inline double ClockObject::get_max_dt(void) const;

1535 10 set_max_dt 0 4 1848 23 ClockObject::set_max_dt 0 1 652 872
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_max_dt
//       Access: Published
//  Description: Sets a limit on the value returned by get_dt().  If
//               this value is less than zero, no limit is imposed;
//               otherwise, this is the maximum value that will ever
//               be returned by get_dt(), regardless of how much time
//               has actually elapsed between frames.
//
//               This limit is only imposed in real-time mode; in
//               non-real-time mode, the dt is fixed anyway and max_dt
//               is ignored.
//
//               This is generally used to guarantee reasonable
//               behavior even in the presence of a very slow or
//               chuggy frame rame.
////////////////////////////////////////////////////////////////////
51
inline void ClockObject::set_max_dt(double max_dt);

1536 18 get_degrade_factor 0 4 1848 31 ClockObject::get_degrade_factor 0 1 653 544
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_degrade_factor
//       Access: Published
//  Description: In degrade mode, returns the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
////////////////////////////////////////////////////////////////////
58
inline double ClockObject::get_degrade_factor(void) const;

1537 18 set_degrade_factor 0 4 1848 31 ClockObject::set_degrade_factor 0 1 654 541
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_degrade_factor
//       Access: Published
//  Description: In degrade mode, sets the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
////////////////////////////////////////////////////////////////////
67
inline void ClockObject::set_degrade_factor(double degrade_factor);

1538 31 set_average_frame_rate_interval 0 4 1848 44 ClockObject::set_average_frame_rate_interval 0 1 655 729
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_average_frame_rate_interval
//       Access: Published
//  Description: Specifies the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of
//               frames per second to compute the frame rate.
//               Changing this does not necessarily immediately change
//               the result of get_average_frame_rate(), until this
//               interval of time has elapsed again.
//
//               Setting this to zero disables the computation of
//               get_average_frame_rate().
////////////////////////////////////////////////////////////////////
70
inline void ClockObject::set_average_frame_rate_interval(double time);

1539 31 get_average_frame_rate_interval 0 4 1848 44 ClockObject::get_average_frame_rate_interval 0 1 656 423
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate_interval
//       Access: Published
//  Description: Returns the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of frames
//               per second to compute the frame rate.
////////////////////////////////////////////////////////////////////
71
inline double ClockObject::get_average_frame_rate_interval(void) const;

1540 22 get_average_frame_rate 0 4 1848 35 ClockObject::get_average_frame_rate 0 2 657 658 500
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
////////////////////////////////////////////////////////////////////
100
double ClockObject::get_average_frame_rate(Thread *current_thread = ((get_current_thread()))) const;

1541 22 get_max_frame_duration 0 4 1848 35 ClockObject::get_max_frame_duration 0 2 659 660 343
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
////////////////////////////////////////////////////////////////////
100
double ClockObject::get_max_frame_duration(Thread *current_thread = ((get_current_thread()))) const;

1542 25 calc_frame_rate_deviation 0 4 1848 38 ClockObject::calc_frame_rate_deviation 0 2 661 662 915
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
////////////////////////////////////////////////////////////////////
103
double ClockObject::calc_frame_rate_deviation(Thread *current_thread = ((get_current_thread()))) const;

1543 4 tick 0 4 1848 17 ClockObject::tick 0 2 663 664 566
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
////////////////////////////////////////////////////////////////////
74
void ClockObject::tick(Thread *current_thread = ((get_current_thread())));

1544 15 sync_frame_time 0 4 1848 28 ClockObject::sync_frame_time 0 2 665 666 756
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
////////////////////////////////////////////////////////////////////
85
void ClockObject::sync_frame_time(Thread *current_thread = ((get_current_thread())));

1545 12 check_errors 0 4 1848 25 ClockObject::check_errors 0 1 667 609
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::check_errors
//       Access: Published
//  Description: Returns true if a clock error was detected since the
//               last time check_errors() was called.  A clock error
//               means that something happened, an OS or BIOS bug, for
//               instance, that makes the current value of the clock
//               somewhat suspect, and an application may wish to
//               resynchronize with any external clocks.
////////////////////////////////////////////////////////////////////
62
inline bool ClockObject::check_errors(Thread *current_thread);

1546 16 get_global_clock 0 4 1848 29 ClockObject::get_global_clock 0 1 668 408
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_global_clock
//       Access: Published
//  Description: Returns a pointer to the global ClockObject.  This is
//               the ClockObject that most code should use for
//               handling scene graph rendering and animation.
////////////////////////////////////////////////////////////////////
63
static inline ClockObject *ClockObject::get_global_clock(void);

1547 14 get_class_type 0 4 1848 27 ClockObject::get_class_type 0 1 669 0
52
static TypeHandle ClockObject::get_class_type(void);

1548 14 get_model_path 0 1 0 14 get_model_path 0 1 924 0
47
ConfigVariableSearchPath &get_model_path(void);

1549 15 get_plugin_path 0 1 0 15 get_plugin_path 0 1 925 0
48
ConfigVariableSearchPath &get_plugin_path(void);

1550 9 cache_ref 0 4 1850 28 CopyOnWriteObject::cache_ref 0 1 670 279
////////////////////////////////////////////////////////////////////
//     Function: CopyOnWriteObject::cache_ref
//       Access: Published
//  Description: See CachedTypedWritableReferenceCount::cache_ref().
////////////////////////////////////////////////////////////////////
53
inline void CopyOnWriteObject::cache_ref(void) const;

1551 14 get_class_type 0 4 1850 33 CopyOnWriteObject::get_class_type 0 1 671 0
58
static TypeHandle CopyOnWriteObject::get_class_type(void);

1552 18 ~CopyOnWriteObject 0 4 1850 37 CopyOnWriteObject::~CopyOnWriteObject 0 0 0
44
CopyOnWriteObject::~CopyOnWriteObject(void);

1553 17 DatagramInputFile 0 4 1851 36 DatagramInputFile::DatagramInputFile 0 1 672 229
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline DatagramInputFile::DatagramInputFile(void);

1554 4 open 0 4 1851 23 DatagramInputFile::open 0 4 673 674 675 676 1158
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Starts reading from the indicated stream.  Returns
//               true on success, false on failure.  The
//               DatagramInputFile does not take ownership of the
//               stream; you are responsible for closing or deleting
//               it when you are done.
////////////////////////////////////////////////////////////////////
197
bool DatagramInputFile::open(FileReference const *file);
inline bool DatagramInputFile::open(Filename const &filename);
bool DatagramInputFile::open(istream &in, Filename const &filename = ((())));

1555 10 get_stream 0 4 1851 29 DatagramInputFile::get_stream 0 1 677 279
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::get_stream
//       Access: Published
//  Description: Returns the istream represented by the input file.
////////////////////////////////////////////////////////////////////
52
inline istream &DatagramInputFile::get_stream(void);

1556 5 close 0 4 1851 24 DatagramInputFile::close 0 1 678 325
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::close
//       Access: Published
//  Description: Closes the file.  This is also implicitly done when
//               the DatagramInputFile destructs.
////////////////////////////////////////////////////////////////////
36
void DatagramInputFile::close(void);

1557 11 read_header 0 4 1851 30 DatagramInputFile::read_header 0 1 679 535
////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::read_header
//       Access: Published
//  Description: Reads a sequence of bytes from the beginning of the
//               datagram file.  This may be called any number of
//               times after the file has been opened and before the
//               first datagram is read.  It may not be called once
//               the first datagram has been read.
////////////////////////////////////////////////////////////////////
90
bool DatagramInputFile::read_header(basic_string< char > &header, unsigned int num_bytes);

1558 9 ascii_key 0 4 1853 25 KeyboardButton::ascii_key 0 2 680 681 864
////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character, if there is one, or
//               ButtonHandle::none() if there is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character (taken from the first
//               character of the indicated string), if there is one,
//               or ButtonHandle::none() if there is not.
////////////////////////////////////////////////////////////////////
162
static ButtonHandle KeyboardButton::ascii_key(char ascii_equivalent);
static ButtonHandle KeyboardButton::ascii_key(basic_string< char > const &ascii_equivalent);

1559 5 space 0 4 1853 21 KeyboardButton::space 0 1 682 0
48
static ButtonHandle KeyboardButton::space(void);

1560 9 backspace 0 4 1853 25 KeyboardButton::backspace 0 1 683 0
52
static ButtonHandle KeyboardButton::backspace(void);

1561 3 tab 0 4 1853 19 KeyboardButton::tab 0 1 684 0
46
static ButtonHandle KeyboardButton::tab(void);

1562 5 enter 0 4 1853 21 KeyboardButton::enter 0 1 685 0
48
static ButtonHandle KeyboardButton::enter(void);

1563 6 escape 0 4 1853 22 KeyboardButton::escape 0 1 686 0
49
static ButtonHandle KeyboardButton::escape(void);

1564 2 f1 0 4 1853 18 KeyboardButton::f1 0 1 687 0
45
static ButtonHandle KeyboardButton::f1(void);

1565 2 f2 0 4 1853 18 KeyboardButton::f2 0 1 688 0
45
static ButtonHandle KeyboardButton::f2(void);

1566 2 f3 0 4 1853 18 KeyboardButton::f3 0 1 689 0
45
static ButtonHandle KeyboardButton::f3(void);

1567 2 f4 0 4 1853 18 KeyboardButton::f4 0 1 690 0
45
static ButtonHandle KeyboardButton::f4(void);

1568 2 f5 0 4 1853 18 KeyboardButton::f5 0 1 691 0
45
static ButtonHandle KeyboardButton::f5(void);

1569 2 f6 0 4 1853 18 KeyboardButton::f6 0 1 692 0
45
static ButtonHandle KeyboardButton::f6(void);

1570 2 f7 0 4 1853 18 KeyboardButton::f7 0 1 693 0
45
static ButtonHandle KeyboardButton::f7(void);

1571 2 f8 0 4 1853 18 KeyboardButton::f8 0 1 694 0
45
static ButtonHandle KeyboardButton::f8(void);

1572 2 f9 0 4 1853 18 KeyboardButton::f9 0 1 695 0
45
static ButtonHandle KeyboardButton::f9(void);

1573 3 f10 0 4 1853 19 KeyboardButton::f10 0 1 696 0
46
static ButtonHandle KeyboardButton::f10(void);

1574 3 f11 0 4 1853 19 KeyboardButton::f11 0 1 697 0
46
static ButtonHandle KeyboardButton::f11(void);

1575 3 f12 0 4 1853 19 KeyboardButton::f12 0 1 698 0
46
static ButtonHandle KeyboardButton::f12(void);

1576 3 f13 0 4 1853 19 KeyboardButton::f13 0 1 699 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f13(void);

1577 3 f14 0 4 1853 19 KeyboardButton::f14 0 1 700 0
46
static ButtonHandle KeyboardButton::f14(void);

1578 3 f15 0 4 1853 19 KeyboardButton::f15 0 1 701 0
46
static ButtonHandle KeyboardButton::f15(void);

1579 3 f16 0 4 1853 19 KeyboardButton::f16 0 1 702 0
46
static ButtonHandle KeyboardButton::f16(void);

1580 4 left 0 4 1853 20 KeyboardButton::left 0 1 703 0
47
static ButtonHandle KeyboardButton::left(void);

1581 5 right 0 4 1853 21 KeyboardButton::right 0 1 704 0
48
static ButtonHandle KeyboardButton::right(void);

1582 2 up 0 4 1853 18 KeyboardButton::up 0 1 705 0
45
static ButtonHandle KeyboardButton::up(void);

1583 4 down 0 4 1853 20 KeyboardButton::down 0 1 706 0
47
static ButtonHandle KeyboardButton::down(void);

1584 7 page_up 0 4 1853 23 KeyboardButton::page_up 0 1 707 0
50
static ButtonHandle KeyboardButton::page_up(void);

1585 9 page_down 0 4 1853 25 KeyboardButton::page_down 0 1 708 0
52
static ButtonHandle KeyboardButton::page_down(void);

1586 4 home 0 4 1853 20 KeyboardButton::home 0 1 709 0
47
static ButtonHandle KeyboardButton::home(void);

1587 3 end 0 4 1853 19 KeyboardButton::end 0 1 710 0
46
static ButtonHandle KeyboardButton::end(void);

1588 6 insert 0 4 1853 22 KeyboardButton::insert 0 1 711 0
49
static ButtonHandle KeyboardButton::insert(void);

1589 3 del 0 4 1853 19 KeyboardButton::del 0 1 712 27
// delete is a C++ keyword.
46
static ButtonHandle KeyboardButton::del(void);

1590 4 help 0 4 1853 20 KeyboardButton::help 0 1 713 27
// delete is a C++ keyword.
47
static ButtonHandle KeyboardButton::help(void);

1591 4 menu 0 4 1853 20 KeyboardButton::menu 0 1 714 0
47
static ButtonHandle KeyboardButton::menu(void);

1592 5 shift 0 4 1853 21 KeyboardButton::shift 0 1 715 0
48
static ButtonHandle KeyboardButton::shift(void);

1593 7 control 0 4 1853 23 KeyboardButton::control 0 1 716 0
50
static ButtonHandle KeyboardButton::control(void);

1594 3 alt 0 4 1853 19 KeyboardButton::alt 0 1 717 0
46
static ButtonHandle KeyboardButton::alt(void);

1595 4 meta 0 4 1853 20 KeyboardButton::meta 0 1 718 0
47
static ButtonHandle KeyboardButton::meta(void);

1596 9 caps_lock 0 4 1853 25 KeyboardButton::caps_lock 0 1 719 0
52
static ButtonHandle KeyboardButton::caps_lock(void);

1597 10 shift_lock 0 4 1853 26 KeyboardButton::shift_lock 0 1 720 0
53
static ButtonHandle KeyboardButton::shift_lock(void);

1598 8 num_lock 0 4 1853 24 KeyboardButton::num_lock 0 1 721 0
51
static ButtonHandle KeyboardButton::num_lock(void);

1599 11 scroll_lock 0 4 1853 27 KeyboardButton::scroll_lock 0 1 722 0
54
static ButtonHandle KeyboardButton::scroll_lock(void);

1600 12 print_screen 0 4 1853 28 KeyboardButton::print_screen 0 1 723 0
55
static ButtonHandle KeyboardButton::print_screen(void);

1601 5 pause 0 4 1853 21 KeyboardButton::pause 0 1 724 0
48
static ButtonHandle KeyboardButton::pause(void);

1602 6 lshift 0 4 1853 22 KeyboardButton::lshift 0 1 725 0
49
static ButtonHandle KeyboardButton::lshift(void);

1603 6 rshift 0 4 1853 22 KeyboardButton::rshift 0 1 726 0
49
static ButtonHandle KeyboardButton::rshift(void);

1604 8 lcontrol 0 4 1853 24 KeyboardButton::lcontrol 0 1 727 0
51
static ButtonHandle KeyboardButton::lcontrol(void);

1605 8 rcontrol 0 4 1853 24 KeyboardButton::rcontrol 0 1 728 0
51
static ButtonHandle KeyboardButton::rcontrol(void);

1606 4 lalt 0 4 1853 20 KeyboardButton::lalt 0 1 729 0
47
static ButtonHandle KeyboardButton::lalt(void);

1607 4 ralt 0 4 1853 20 KeyboardButton::ralt 0 1 730 0
47
static ButtonHandle KeyboardButton::ralt(void);

1608 5 lmeta 0 4 1853 21 KeyboardButton::lmeta 0 1 731 0
48
static ButtonHandle KeyboardButton::lmeta(void);

1609 5 rmeta 0 4 1853 21 KeyboardButton::rmeta 0 1 732 0
48
static ButtonHandle KeyboardButton::rmeta(void);

1610 15 ~KeyboardButton 0 4 1853 31 KeyboardButton::~KeyboardButton 0 0 0
38
KeyboardButton::~KeyboardButton(void);

1611 10 LineStream 0 4 1854 22 LineStream::LineStream 0 1 733 219
////////////////////////////////////////////////////////////////////
//     Function: LineStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LineStream::LineStream(void);

1612 17 is_text_available 0 4 1854 29 LineStream::is_text_available 0 1 734 458
////////////////////////////////////////////////////////////////////
//     Function: LineStream::is_text_available
//       Access: Public
//  Description: Returns true if there is at least one line of text
//               (or even a partial line) available in the LineStream
//               object.  If this returns true, the line may then be
//               retrieved via get_line().
////////////////////////////////////////////////////////////////////
54
inline bool LineStream::is_text_available(void) const;

1613 8 get_line 0 4 1854 20 LineStream::get_line 0 1 735 540
////////////////////////////////////////////////////////////////////
//     Function: LineStream::get_line
//       Access: Public
//  Description: Extracts and returns the next line (or partial line)
//               of text available in the LineStream object.  Once the
//               line has been extracted, you may call has_newline()
//               to determine whether or not there was an explicit
//               newline character written following this line.
////////////////////////////////////////////////////////////////////
55
inline basic_string< char > LineStream::get_line(void);

1614 11 has_newline 0 4 1854 23 LineStream::has_newline 0 1 736 460
////////////////////////////////////////////////////////////////////
//     Function: LineStream::has_newline
//       Access: Public
//  Description: Returns true if the line of text most recently
//               returned by get_line() was written out with a
//               terminating newline, or false if a newline character
//               has not yet been written to the LineStream.
////////////////////////////////////////////////////////////////////
48
inline bool LineStream::has_newline(void) const;

1615 11 ~LineStream 0 4 1854 23 LineStream::~LineStream 0 0 0
30
LineStream::~LineStream(void);

1616 13 load_prc_file 0 1 0 13 load_prc_file 0 1 926 1916
////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
////////////////////////////////////////////////////////////////////
52
ConfigPage *load_prc_file(Filename const &filename);

1617 18 load_prc_file_data 0 1 0 18 load_prc_file_data 0 1 927 1362
////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
////////////////////////////////////////////////////////////////////
99
ConfigPage *load_prc_file_data(basic_string< char > const &name, basic_string< char > const &data);

1618 15 unload_prc_file 0 1 0 15 unload_prc_file 0 1 928 0
39
bool unload_prc_file(ConfigPage *page);

1619 18 hash_prc_variables 0 1 0 18 hash_prc_variables 0 1 929 0
39
void hash_prc_variables(HashVal &hash);

1620 15 ModifierButtons 0 4 1856 32 ModifierButtons::ModifierButtons 0 2 737 738 461
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
ModifierButtons::ModifierButtons(void);
ModifierButtons::ModifierButtons(ModifierButtons const &copy);

1621 16 ~ModifierButtons 0 4 1856 33 ModifierButtons::~ModifierButtons 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
ModifierButtons::~ModifierButtons(void);

1622 10 operator = 0 4 1856 27 ModifierButtons::operator = 0 1 739 0
69
inline void ModifierButtons::operator =(ModifierButtons const &copy);

1623 11 operator == 0 4 1856 28 ModifierButtons::operator == 0 1 740 0
77
inline bool ModifierButtons::operator ==(ModifierButtons const &other) const;

1624 11 operator != 0 4 1856 28 ModifierButtons::operator != 0 1 741 0
77
inline bool ModifierButtons::operator !=(ModifierButtons const &other) const;

1625 10 operator < 0 4 1856 27 ModifierButtons::operator < 0 1 742 0
76
inline bool ModifierButtons::operator <(ModifierButtons const &other) const;

1626 10 operator & 0 4 1856 27 ModifierButtons::operator & 0 1 743 0
87
inline ModifierButtons ModifierButtons::operator &(ModifierButtons const &other) const;

1627 10 operator | 0 4 1856 27 ModifierButtons::operator | 0 1 744 0
87
inline ModifierButtons ModifierButtons::operator |(ModifierButtons const &other) const;

1628 11 operator &= 0 4 1856 28 ModifierButtons::operator &= 0 1 745 0
64
void ModifierButtons::operator &=(ModifierButtons const &other);

1629 11 operator |= 0 4 1856 28 ModifierButtons::operator |= 0 1 746 0
64
void ModifierButtons::operator |=(ModifierButtons const &other);

1630 15 set_button_list 0 4 1856 32 ModifierButtons::set_button_list 0 1 747 698
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::set_button_list
//       Access: Published
//  Description: Sets the list of buttons to watch to be the same as
//               that of the other ModifierButtons object.  This makes
//               the lists pointer equivalent (until one or the other
//               is later modified).
//
//               This will preserve the state of any button that was
//               on the original list and is also on the new lists.
//               Any other buttons will get reset to the default state
//               of "up".
////////////////////////////////////////////////////////////////////
68
void ModifierButtons::set_button_list(ModifierButtons const &other);

1631 7 matches 0 4 1856 24 ModifierButtons::matches 0 1 748 504
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::matches
//       Access: Published
//  Description: Returns true if the set of buttons indicated as down
//               by this ModifierButtons object is the same set of
//               buttons indicated as down by the other
//               ModifierButtons object.  The buttons indicated as up
//               are not relevant.
////////////////////////////////////////////////////////////////////
66
bool ModifierButtons::matches(ModifierButtons const &other) const;

1632 10 add_button 0 4 1856 27 ModifierButtons::add_button 0 1 749 523
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::add_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               will be monitored for upness and downness.  Returns
//               true if the button was added, false if it was already
//               being monitored or if too many buttons are currently
//               being monitored.
////////////////////////////////////////////////////////////////////
54
bool ModifierButtons::add_button(ButtonHandle button);

1633 10 has_button 0 4 1856 27 ModifierButtons::has_button 0 1 750 339
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::has_button
//       Access: Published
//  Description: Returns true if the indicated button is in the set of
//               buttons being monitored, false otherwise.
////////////////////////////////////////////////////////////////////
60
bool ModifierButtons::has_button(ButtonHandle button) const;

1634 13 remove_button 0 4 1856 30 ModifierButtons::remove_button 0 1 751 623
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::remove_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               being monitored.  Returns true if the button was
//               removed, false if it was not being monitored in the
//               first place.
//
//               Unlike the other methods, you cannot remove a button
//               by removing its alias; you have to remove exactly the
//               button itself.
////////////////////////////////////////////////////////////////////
57
bool ModifierButtons::remove_button(ButtonHandle button);

1635 15 get_num_buttons 0 4 1856 32 ModifierButtons::get_num_buttons 0 1 752 394
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that the
//               ModifierButtons object is monitoring (e.g. the number
//               of buttons passed to add_button()).
////////////////////////////////////////////////////////////////////
56
inline int ModifierButtons::get_num_buttons(void) const;

1636 10 get_button 0 4 1856 27 ModifierButtons::get_button 0 1 753 446
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_button
//       Access: Published
//  Description: Returns the nth button that the ModifierButtons
//               object is monitoring (the nth button passed to
//               add_button()).  This must be in the range 0 <= index
//               < get_num_buttons().
////////////////////////////////////////////////////////////////////
65
inline ButtonHandle ModifierButtons::get_button(int index) const;

1637 11 button_down 0 4 1856 28 ModifierButtons::button_down 0 1 754 597
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_down
//       Access: Published
//  Description: Records that a particular button has been pressed.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
////////////////////////////////////////////////////////////////////
55
bool ModifierButtons::button_down(ButtonHandle button);

1638 9 button_up 0 4 1856 26 ModifierButtons::button_up 0 1 755 596
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_up
//       Access: Published
//  Description: Records that a particular button has been released.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
////////////////////////////////////////////////////////////////////
53
bool ModifierButtons::button_up(ButtonHandle button);

1639 14 all_buttons_up 0 4 1856 31 ModifierButtons::all_buttons_up 0 1 756 303
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::all_buttons_up
//       Access: Published
//  Description: Marks all monitored buttons as being in the "up"
//               state.
////////////////////////////////////////////////////////////////////
50
inline void ModifierButtons::all_buttons_up(void);

1640 7 is_down 0 4 1856 24 ModifierButtons::is_down 0 2 757 758 735
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up or if it is
//               not in the set of buttons being tracked.
////////////////////////////////////////////////////////////////////
112
bool ModifierButtons::is_down(ButtonHandle button) const;
inline bool ModifierButtons::is_down(int index) const;

1641 11 is_any_down 0 4 1856 28 ModifierButtons::is_any_down 0 1 759 340
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_any_down
//       Access: Published
//  Description: Returns true if any of the tracked button are known
//               to be down, or false if all of them are up.
////////////////////////////////////////////////////////////////////
53
inline bool ModifierButtons::is_any_down(void) const;

1642 10 get_prefix 0 4 1856 27 ModifierButtons::get_prefix 0 1 760 397
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_prefix
//       Access: Published
//  Description: Returns a string which can be used to prefix any
//               button name or event name with the unique set of
//               modifier buttons currently being held.
////////////////////////////////////////////////////////////////////
61
basic_string< char > ModifierButtons::get_prefix(void) const;

1643 6 output 0 4 1856 23 ModifierButtons::output 0 1 761 298
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::output
//       Access: Published
//  Description: Writes a one-line summary of the buttons known to be
//               down.
////////////////////////////////////////////////////////////////////
49
void ModifierButtons::output(ostream &out) const;

1644 5 write 0 4 1856 22 ModifierButtons::write 0 1 762 365
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::write
//       Access: Published
//  Description: Writes a multi-line summary including all of the
//               buttons being monitored and which ones are known to
//               be down.
////////////////////////////////////////////////////////////////////
48
void ModifierButtons::write(ostream &out) const;

1645 6 button 0 4 1857 19 MouseButton::button 0 1 763 424
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::button
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular numbered mouse button (zero-based), if
//               there is one, or ButtonHandle::none() if there is
//               not.
////////////////////////////////////////////////////////////////////
59
static ButtonHandle MouseButton::button(int button_number);

1646 3 one 0 4 1857 16 MouseButton::one 0 1 764 302
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::one
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               first mouse button.
////////////////////////////////////////////////////////////////////
43
static ButtonHandle MouseButton::one(void);

1647 3 two 0 4 1857 16 MouseButton::two 0 1 765 303
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::two
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               second mouse button.
////////////////////////////////////////////////////////////////////
43
static ButtonHandle MouseButton::two(void);

1648 5 three 0 4 1857 18 MouseButton::three 0 1 766 304
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::three
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               third mouse button.
////////////////////////////////////////////////////////////////////
45
static ButtonHandle MouseButton::three(void);

1649 4 four 0 4 1857 17 MouseButton::four 0 1 767 304
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::four
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fourth mouse button.
////////////////////////////////////////////////////////////////////
44
static ButtonHandle MouseButton::four(void);

1650 4 five 0 4 1857 17 MouseButton::five 0 1 768 303
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::five
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fifth mouse button.
////////////////////////////////////////////////////////////////////
44
static ButtonHandle MouseButton::five(void);

1651 8 wheel_up 0 4 1857 21 MouseButton::wheel_up 0 1 769 327
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_up
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch upwards.
////////////////////////////////////////////////////////////////////
48
static ButtonHandle MouseButton::wheel_up(void);

1652 10 wheel_down 0 4 1857 23 MouseButton::wheel_down 0 1 770 331
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_down
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch downwards.
////////////////////////////////////////////////////////////////////
50
static ButtonHandle MouseButton::wheel_down(void);

1653 10 wheel_left 0 4 1857 23 MouseButton::wheel_left 0 1 771 396
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_left
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the left. Usually, you'll only
//               find the horizontal scroll on laptops.
////////////////////////////////////////////////////////////////////
50
static ButtonHandle MouseButton::wheel_left(void);

1654 11 wheel_right 0 4 1857 24 MouseButton::wheel_right 0 1 772 398
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_right
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the right. Usually, you'll only
//               find the horizontal scroll on laptops.
////////////////////////////////////////////////////////////////////
51
static ButtonHandle MouseButton::wheel_right(void);

1655 15 is_mouse_button 0 4 1857 28 MouseButton::is_mouse_button 0 1 773 353
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::is_mouse_button
//       Access: Public, Static
//  Description: Returns true if the indicated ButtonHandle is a mouse
//               button, false if it is some other kind of button.
////////////////////////////////////////////////////////////////////
62
static bool MouseButton::is_mouse_button(ButtonHandle button);

1656 12 ~MouseButton 0 4 1857 25 MouseButton::~MouseButton 0 0 0
32
MouseButton::~MouseButton(void);

1657 9 MouseData 0 4 1858 20 MouseData::MouseData 0 2 774 775 449
////////////////////////////////////////////////////////////////////
//     Function: MouseData::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
inline MouseData::MouseData(void);
inline MouseData::MouseData(MouseData const &copy);

1658 10 operator = 0 4 1858 21 MouseData::operator = 0 1 776 0
57
inline void MouseData::operator =(MouseData const &copy);

1659 5 get_x 0 4 1858 16 MouseData::get_x 0 1 777 215
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline double MouseData::get_x(void) const;

1660 5 get_y 0 4 1858 16 MouseData::get_y 0 1 778 215
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline double MouseData::get_y(void) const;

1661 13 get_in_window 0 4 1858 24 MouseData::get_in_window 0 1 779 223
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_in_window
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool MouseData::get_in_window(void) const;

1662 6 output 0 4 1858 17 MouseData::output 0 1 780 216
////////////////////////////////////////////////////////////////////
//     Function: MouseData::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void MouseData::output(ostream &out) const;

1663 10 ~MouseData 0 4 1858 21 MouseData::~MouseData 0 0 0
28
MouseData::~MouseData(void);

1664 18 get_node_ref_count 0 4 1859 44 NodeCachedReferenceCount::get_node_ref_count 0 1 781 280
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
68
inline int NodeCachedReferenceCount::get_node_ref_count(void) const;

1665 8 node_ref 0 4 1859 34 NodeCachedReferenceCount::node_ref 0 1 782 662
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the reference count.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
////////////////////////////////////////////////////////////////////
59
inline void NodeCachedReferenceCount::node_ref(void) const;

1666 10 node_unref 0 4 1859 36 NodeCachedReferenceCount::node_unref 0 1 783 468
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
61
inline bool NodeCachedReferenceCount::node_unref(void) const;

1667 24 test_ref_count_integrity 0 4 1859 50 NodeCachedReferenceCount::test_ref_count_integrity 0 1 784 350
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
75
inline bool NodeCachedReferenceCount::test_ref_count_integrity(void) const;

1668 19 get_referenced_bits 0 4 1859 45 NodeCachedReferenceCount::get_referenced_bits 0 1 785 600
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_referenced_bits
//       Access: Published
//  Description: Returns the union of the values defined in the
//               Referenced enum that represents the various things
//               that appear to be holding a pointer to this object.
//
//               If R_node is included, at least one node is holding a
//               pointer; if R_cache is included, at least one cache
//               element is.
////////////////////////////////////////////////////////////////////
69
inline int NodeCachedReferenceCount::get_referenced_bits(void) const;

1669 14 get_class_type 0 4 1859 40 NodeCachedReferenceCount::get_class_type 0 1 786 0
65
static TypeHandle NodeCachedReferenceCount::get_class_type(void);

1670 11 SparseArray 0 4 1861 24 SparseArray::SparseArray 0 3 787 788 789 694
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor (from BitArray)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
144
inline SparseArray::SparseArray(void);
inline SparseArray::SparseArray(SparseArray const &copy);
SparseArray::SparseArray(BitArray const &from);

1671 10 operator = 0 4 1861 23 SparseArray::operator = 0 1 790 236
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline SparseArray &SparseArray::operator =(SparseArray const &copy);

1672 6 all_on 0 4 1861 19 SparseArray::all_on 0 1 791 323
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with an infinite array of bits,
//               all on.
////////////////////////////////////////////////////////////////////
52
static inline SparseArray SparseArray::all_on(void);

1673 7 all_off 0 4 1861 20 SparseArray::all_off 0 1 792 290
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose bits are all off.
////////////////////////////////////////////////////////////////////
53
static inline SparseArray SparseArray::all_off(void);

1674 8 lower_on 0 4 1861 21 SparseArray::lower_on 0 1 793 301
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose lower on_bits bits are on.
////////////////////////////////////////////////////////////////////
61
static inline SparseArray SparseArray::lower_on(int on_bits);

1675 3 bit 0 4 1861 16 SparseArray::bit 0 1 794 295
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with only the indicated bit on.
////////////////////////////////////////////////////////////////////
54
static inline SparseArray SparseArray::bit(int index);

1676 5 range 0 4 1861 18 SparseArray::range 0 1 795 329
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose size bits, beginning at
//               low_bit, are on.
////////////////////////////////////////////////////////////////////
68
static inline SparseArray SparseArray::range(int low_bit, int size);

1677 12 ~SparseArray 0 4 1861 25 SparseArray::~SparseArray 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline SparseArray::~SparseArray(void);

1678 16 has_max_num_bits 0 4 1861 29 SparseArray::has_max_num_bits 0 1 796 723
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The SparseArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               SparseArray interchangeably.
////////////////////////////////////////////////////////////////////
55
static inline bool SparseArray::has_max_num_bits(void);

1679 16 get_max_num_bits 0 4 1861 29 SparseArray::get_max_num_bits 0 1 797 758
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               SparseArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or SparseArray interchangeably.
////////////////////////////////////////////////////////////////////
54
static inline int SparseArray::get_max_num_bits(void);

1680 12 get_num_bits 0 4 1861 25 SparseArray::get_num_bits 0 1 798 607
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
////////////////////////////////////////////////////////////////////
49
inline int SparseArray::get_num_bits(void) const;

1681 7 get_bit 0 4 1861 20 SparseArray::get_bit 0 1 799 445
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
////////////////////////////////////////////////////////////////////
50
inline bool SparseArray::get_bit(int index) const;

1682 7 set_bit 0 4 1861 20 SparseArray::set_bit 0 1 800 320
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
44
inline void SparseArray::set_bit(int index);

1683 9 clear_bit 0 4 1861 22 SparseArray::clear_bit 0 1 801 323
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
46
inline void SparseArray::clear_bit(int index);

1684 10 set_bit_to 0 4 1861 23 SparseArray::set_bit_to 0 1 802 313
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
////////////////////////////////////////////////////////////////////
59
inline void SparseArray::set_bit_to(int index, bool value);

1685 16 get_highest_bits 0 4 1861 29 SparseArray::get_highest_bits 0 1 803 367
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
////////////////////////////////////////////////////////////////////
54
inline bool SparseArray::get_highest_bits(void) const;

1686 7 is_zero 0 4 1861 20 SparseArray::is_zero 0 1 804 297
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
////////////////////////////////////////////////////////////////////
45
inline bool SparseArray::is_zero(void) const;

1687 9 is_all_on 0 4 1861 22 SparseArray::is_all_on 0 1 805 298
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool SparseArray::is_all_on(void) const;

1688 10 has_any_of 0 4 1861 23 SparseArray::has_any_of 0 1 806 311
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool SparseArray::has_any_of(int low_bit, int size) const;

1689 10 has_all_of 0 4 1861 23 SparseArray::has_all_of 0 1 807 313
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool SparseArray::has_all_of(int low_bit, int size) const;

1690 9 set_range 0 4 1861 22 SparseArray::set_range 0 1 808 258
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
////////////////////////////////////////////////////////////////////
58
inline void SparseArray::set_range(int low_bit, int size);

1691 11 clear_range 0 4 1861 24 SparseArray::clear_range 0 1 809 261
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
////////////////////////////////////////////////////////////////////
60
inline void SparseArray::clear_range(int low_bit, int size);

1692 12 set_range_to 0 4 1861 25 SparseArray::set_range_to 0 1 810 278
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
////////////////////////////////////////////////////////////////////
73
inline void SparseArray::set_range_to(bool value, int low_bit, int size);

1693 15 get_num_on_bits 0 4 1861 28 SparseArray::get_num_on_bits 0 1 811 375
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
////////////////////////////////////////////////////////////////////
45
int SparseArray::get_num_on_bits(void) const;

1694 16 get_num_off_bits 0 4 1861 29 SparseArray::get_num_off_bits 0 1 812 376
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
////////////////////////////////////////////////////////////////////
46
int SparseArray::get_num_off_bits(void) const;

1695 17 get_lowest_on_bit 0 4 1861 30 SparseArray::get_lowest_on_bit 0 1 813 395
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there are an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
47
int SparseArray::get_lowest_on_bit(void) const;

1696 18 get_lowest_off_bit 0 4 1861 31 SparseArray::get_lowest_off_bit 0 1 814 396
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there are an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
48
int SparseArray::get_lowest_off_bit(void) const;

1697 18 get_highest_on_bit 0 4 1861 31 SparseArray::get_highest_on_bit 0 1 815 393
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
48
int SparseArray::get_highest_on_bit(void) const;

1698 19 get_highest_off_bit 0 4 1861 32 SparseArray::get_highest_off_bit 0 1 816 394
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
49
int SparseArray::get_highest_off_bit(void) const;

1699 29 get_next_higher_different_bit 0 4 1861 42 SparseArray::get_next_higher_different_bit 0 1 817 594
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
////////////////////////////////////////////////////////////////////
66
int SparseArray::get_next_higher_different_bit(int low_bit) const;

1700 15 invert_in_place 0 4 1861 28 SparseArray::invert_in_place 0 1 818 324
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the SparseArray.  This is
//               equivalent to array = ~array.
////////////////////////////////////////////////////////////////////
47
inline void SparseArray::invert_in_place(void);

1701 18 has_bits_in_common 0 4 1861 31 SparseArray::has_bits_in_common 0 1 819 446
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this SparseArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
////////////////////////////////////////////////////////////////////
69
bool SparseArray::has_bits_in_common(SparseArray const &other) const;

1702 5 clear 0 4 1861 18 SparseArray::clear 0 1 820 259
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear
//       Access: Published
//  Description: Sets all the bits in the SparseArray off.
////////////////////////////////////////////////////////////////////
37
inline void SparseArray::clear(void);

1703 6 output 0 4 1861 19 SparseArray::output 0 1 821 219
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void SparseArray::output(ostream &out) const;

1704 11 operator == 0 4 1861 24 SparseArray::operator == 0 1 822 0
69
inline bool SparseArray::operator ==(SparseArray const &other) const;

1705 11 operator != 0 4 1861 24 SparseArray::operator != 0 1 823 0
69
inline bool SparseArray::operator !=(SparseArray const &other) const;

1706 10 operator < 0 4 1861 23 SparseArray::operator < 0 1 824 0
68
inline bool SparseArray::operator <(SparseArray const &other) const;

1707 10 compare_to 0 4 1861 23 SparseArray::compare_to 0 1 825 513
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this SparseArray
//               sorts before the indicated other SparseArray, greater
//               than zero if it sorts after, or 0 if they are
//               equivalent.  This is based on the same ordering
//               defined by operator <.
////////////////////////////////////////////////////////////////////
60
int SparseArray::compare_to(SparseArray const &other) const;

1708 10 operator & 0 4 1861 23 SparseArray::operator & 0 1 826 0
75
inline SparseArray SparseArray::operator &(SparseArray const &other) const;

1709 10 operator | 0 4 1861 23 SparseArray::operator | 0 1 827 0
75
inline SparseArray SparseArray::operator |(SparseArray const &other) const;

1710 10 operator ^ 0 4 1861 23 SparseArray::operator ^ 0 1 828 0
75
inline SparseArray SparseArray::operator ^(SparseArray const &other) const;

1711 10 operator ~ 0 68 1861 23 SparseArray::operator ~ 0 1 829 0
55
inline SparseArray SparseArray::operator ~(void) const;

1712 11 operator << 0 4 1861 24 SparseArray::operator << 0 1 830 0
61
inline SparseArray SparseArray::operator <<(int shift) const;

1713 11 operator >> 0 4 1861 24 SparseArray::operator >> 0 1 831 0
61
inline SparseArray SparseArray::operator >>(int shift) const;

1714 11 operator &= 0 4 1861 24 SparseArray::operator &= 0 1 832 0
56
void SparseArray::operator &=(SparseArray const &other);

1715 11 operator |= 0 4 1861 24 SparseArray::operator |= 0 1 833 0
56
void SparseArray::operator |=(SparseArray const &other);

1716 11 operator ^= 0 4 1861 24 SparseArray::operator ^= 0 1 834 0
56
void SparseArray::operator ^=(SparseArray const &other);

1717 12 operator <<= 0 4 1861 25 SparseArray::operator <<= 0 1 835 0
49
inline void SparseArray::operator <<=(int shift);

1718 12 operator >>= 0 4 1861 25 SparseArray::operator >>= 0 1 836 0
49
inline void SparseArray::operator >>=(int shift);

1719 10 is_inverse 0 4 1861 23 SparseArray::is_inverse 0 1 837 614
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_inverse
//       Access: Published
//  Description: If this is true, the SparseArray is actually defined
//               as a list of subranges of integers that are *not* in
//               the set.  If this is false (the default), then the
//               subranges define the integers that *are* in the set.
//               This affects the interpretation of the values
//               returned by iterating through get_num_subranges().
////////////////////////////////////////////////////////////////////
48
inline bool SparseArray::is_inverse(void) const;

1720 17 get_num_subranges 0 4 1861 30 SparseArray::get_num_subranges 0 1 838 515
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_subranges
//       Access: Published
//  Description: Returns the number of separate subranges stored in
//               the SparseArray.  You can use this limit to iterate
//               through the subranges, calling get_subrange_begin()
//               and get_subrange_end() for each one.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
54
inline int SparseArray::get_num_subranges(void) const;

1721 18 get_subrange_begin 0 4 1861 31 SparseArray::get_subrange_begin 0 1 839 345
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_begin
//       Access: Published
//  Description: Returns the first numeric element in the nth
//               subrange.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
56
inline int SparseArray::get_subrange_begin(int n) const;

1722 16 get_subrange_end 0 4 1861 29 SparseArray::get_subrange_end 0 1 840 353
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_end
//       Access: Published
//  Description: Returns the last numeric element, plus one, in the
//               nth subrange.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
54
inline int SparseArray::get_subrange_end(int n) const;

1723 14 get_class_type 0 4 1861 27 SparseArray::get_class_type 0 1 841 0
52
static TypeHandle SparseArray::get_class_type(void);

1724 14 get_value_type 0 6 1862 30 ParamValueBase::get_value_type 0 1 842 280
////////////////////////////////////////////////////////////////////
//     Function: ParamValueBase::get_value_type
//       Access: Published, Virtual
//  Description: Returns the type of the underlying value.
////////////////////////////////////////////////////////////////////
69
virtual inline TypeHandle ParamValueBase::get_value_type(void) const;

1725 6 output 0 6 1862 22 ParamValueBase::output 0 1 843 0
60
virtual void ParamValueBase::output(ostream &out) const = 0;

1726 14 get_class_type 0 4 1862 30 ParamValueBase::get_class_type 0 1 844 0
55
static TypeHandle ParamValueBase::get_class_type(void);

1727 18 ParamTypedRefCount 0 4 1863 38 ParamTypedRefCount::ParamTypedRefCount 0 1 845 230
////////////////////////////////////////////////////////////////////
//     Function: ParamTypedRefCount::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
80
inline ParamTypedRefCount::ParamTypedRefCount(TypedReferenceCount const *value);

1728 9 get_value 0 4 1863 29 ParamTypedRefCount::get_value 0 1 846 273
////////////////////////////////////////////////////////////////////
//     Function: ParamTypedRefCount::get_value
//       Access: Published
//  Description: Retrieves the value stored in the parameter.
////////////////////////////////////////////////////////////////////
70
inline TypedReferenceCount *ParamTypedRefCount::get_value(void) const;

1729 14 get_class_type 0 4 1863 34 ParamTypedRefCount::get_class_type 0 1 847 0
59
static TypeHandle ParamTypedRefCount::get_class_type(void);

1730 10 ParamValue 0 4 1864 46 ParamValue< basic_string< char > >::ParamValue 0 1 848 0
91
inline ::ParamValue< basic_string< char > >::ParamValue(basic_string< char > const &value);

1731 9 set_value 0 4 1864 45 ParamValue< basic_string< char > >::set_value 0 1 849 0
95
inline void ::ParamValue< basic_string< char > >::set_value(basic_string< char > const &value);

1732 9 get_value 0 4 1864 45 ParamValue< basic_string< char > >::get_value 0 1 850 0
95
inline basic_string< char > const &::ParamValue< basic_string< char > >::get_value(void) const;

1733 14 get_class_type 0 4 1864 50 ParamValue< basic_string< char > >::get_class_type 0 1 851 0
77
static TypeHandle ::ParamValue< basic_string< char > >::get_class_type(void);

1734 10 ParamValue 0 4 1865 49 ParamValue< basic_string< wchar_t > >::ParamValue 0 1 852 0
97
inline ::ParamValue< basic_string< wchar_t > >::ParamValue(basic_string< wchar_t > const &value);

1735 9 set_value 0 4 1865 48 ParamValue< basic_string< wchar_t > >::set_value 0 1 853 0
101
inline void ::ParamValue< basic_string< wchar_t > >::set_value(basic_string< wchar_t > const &value);

1736 9 get_value 0 4 1865 48 ParamValue< basic_string< wchar_t > >::get_value 0 1 854 0
101
inline basic_string< wchar_t > const &::ParamValue< basic_string< wchar_t > >::get_value(void) const;

1737 14 get_class_type 0 4 1865 53 ParamValue< basic_string< wchar_t > >::get_class_type 0 1 855 0
80
static TypeHandle ::ParamValue< basic_string< wchar_t > >::get_class_type(void);

1738 10 ParamValue 0 4 1866 36 ParamValue< LVecBase2d >::ParamValue 0 1 856 0
71
inline ::ParamValue< LVecBase2d >::ParamValue(LVecBase2d const &value);

1739 9 set_value 0 4 1866 35 ParamValue< LVecBase2d >::set_value 0 1 857 0
75
inline void ::ParamValue< LVecBase2d >::set_value(LVecBase2d const &value);

1740 9 get_value 0 4 1866 35 ParamValue< LVecBase2d >::get_value 0 1 858 0
75
inline LVecBase2d const &::ParamValue< LVecBase2d >::get_value(void) const;

1741 14 get_class_type 0 4 1866 40 ParamValue< LVecBase2d >::get_class_type 0 1 859 0
67
static TypeHandle ::ParamValue< LVecBase2d >::get_class_type(void);

1742 10 ParamValue 0 4 1867 36 ParamValue< LVecBase2f >::ParamValue 0 1 860 0
71
inline ::ParamValue< LVecBase2f >::ParamValue(LVecBase2f const &value);

1743 9 set_value 0 4 1867 35 ParamValue< LVecBase2f >::set_value 0 1 861 0
75
inline void ::ParamValue< LVecBase2f >::set_value(LVecBase2f const &value);

1744 9 get_value 0 4 1867 35 ParamValue< LVecBase2f >::get_value 0 1 862 0
75
inline LVecBase2f const &::ParamValue< LVecBase2f >::get_value(void) const;

1745 14 get_class_type 0 4 1867 40 ParamValue< LVecBase2f >::get_class_type 0 1 863 0
67
static TypeHandle ::ParamValue< LVecBase2f >::get_class_type(void);

1746 10 ParamValue 0 4 1868 36 ParamValue< LVecBase2i >::ParamValue 0 1 864 0
71
inline ::ParamValue< LVecBase2i >::ParamValue(LVecBase2i const &value);

1747 9 set_value 0 4 1868 35 ParamValue< LVecBase2i >::set_value 0 1 865 0
75
inline void ::ParamValue< LVecBase2i >::set_value(LVecBase2i const &value);

1748 9 get_value 0 4 1868 35 ParamValue< LVecBase2i >::get_value 0 1 866 0
75
inline LVecBase2i const &::ParamValue< LVecBase2i >::get_value(void) const;

1749 14 get_class_type 0 4 1868 40 ParamValue< LVecBase2i >::get_class_type 0 1 867 0
67
static TypeHandle ::ParamValue< LVecBase2i >::get_class_type(void);

1750 10 ParamValue 0 4 1869 36 ParamValue< LVecBase3d >::ParamValue 0 1 868 0
71
inline ::ParamValue< LVecBase3d >::ParamValue(LVecBase3d const &value);

1751 9 set_value 0 4 1869 35 ParamValue< LVecBase3d >::set_value 0 1 869 0
75
inline void ::ParamValue< LVecBase3d >::set_value(LVecBase3d const &value);

1752 9 get_value 0 4 1869 35 ParamValue< LVecBase3d >::get_value 0 1 870 0
75
inline LVecBase3d const &::ParamValue< LVecBase3d >::get_value(void) const;

1753 14 get_class_type 0 4 1869 40 ParamValue< LVecBase3d >::get_class_type 0 1 871 0
67
static TypeHandle ::ParamValue< LVecBase3d >::get_class_type(void);

1754 10 ParamValue 0 4 1870 36 ParamValue< LVecBase3f >::ParamValue 0 1 872 0
71
inline ::ParamValue< LVecBase3f >::ParamValue(LVecBase3f const &value);

1755 9 set_value 0 4 1870 35 ParamValue< LVecBase3f >::set_value 0 1 873 0
75
inline void ::ParamValue< LVecBase3f >::set_value(LVecBase3f const &value);

1756 9 get_value 0 4 1870 35 ParamValue< LVecBase3f >::get_value 0 1 874 0
75
inline LVecBase3f const &::ParamValue< LVecBase3f >::get_value(void) const;

1757 14 get_class_type 0 4 1870 40 ParamValue< LVecBase3f >::get_class_type 0 1 875 0
67
static TypeHandle ::ParamValue< LVecBase3f >::get_class_type(void);

1758 10 ParamValue 0 4 1871 36 ParamValue< LVecBase3i >::ParamValue 0 1 876 0
71
inline ::ParamValue< LVecBase3i >::ParamValue(LVecBase3i const &value);

1759 9 set_value 0 4 1871 35 ParamValue< LVecBase3i >::set_value 0 1 877 0
75
inline void ::ParamValue< LVecBase3i >::set_value(LVecBase3i const &value);

1760 9 get_value 0 4 1871 35 ParamValue< LVecBase3i >::get_value 0 1 878 0
75
inline LVecBase3i const &::ParamValue< LVecBase3i >::get_value(void) const;

1761 14 get_class_type 0 4 1871 40 ParamValue< LVecBase3i >::get_class_type 0 1 879 0
67
static TypeHandle ::ParamValue< LVecBase3i >::get_class_type(void);

1762 10 ParamValue 0 4 1872 36 ParamValue< LVecBase4d >::ParamValue 0 1 880 0
71
inline ::ParamValue< LVecBase4d >::ParamValue(LVecBase4d const &value);

1763 9 set_value 0 4 1872 35 ParamValue< LVecBase4d >::set_value 0 1 881 0
75
inline void ::ParamValue< LVecBase4d >::set_value(LVecBase4d const &value);

1764 9 get_value 0 4 1872 35 ParamValue< LVecBase4d >::get_value 0 1 882 0
75
inline LVecBase4d const &::ParamValue< LVecBase4d >::get_value(void) const;

1765 14 get_class_type 0 4 1872 40 ParamValue< LVecBase4d >::get_class_type 0 1 883 0
67
static TypeHandle ::ParamValue< LVecBase4d >::get_class_type(void);

1766 10 ParamValue 0 4 1873 36 ParamValue< LVecBase4f >::ParamValue 0 1 884 0
71
inline ::ParamValue< LVecBase4f >::ParamValue(LVecBase4f const &value);

1767 9 set_value 0 4 1873 35 ParamValue< LVecBase4f >::set_value 0 1 885 0
75
inline void ::ParamValue< LVecBase4f >::set_value(LVecBase4f const &value);

1768 9 get_value 0 4 1873 35 ParamValue< LVecBase4f >::get_value 0 1 886 0
75
inline LVecBase4f const &::ParamValue< LVecBase4f >::get_value(void) const;

1769 14 get_class_type 0 4 1873 40 ParamValue< LVecBase4f >::get_class_type 0 1 887 0
67
static TypeHandle ::ParamValue< LVecBase4f >::get_class_type(void);

1770 10 ParamValue 0 4 1874 36 ParamValue< LVecBase4i >::ParamValue 0 1 888 0
71
inline ::ParamValue< LVecBase4i >::ParamValue(LVecBase4i const &value);

1771 9 set_value 0 4 1874 35 ParamValue< LVecBase4i >::set_value 0 1 889 0
75
inline void ::ParamValue< LVecBase4i >::set_value(LVecBase4i const &value);

1772 9 get_value 0 4 1874 35 ParamValue< LVecBase4i >::get_value 0 1 890 0
75
inline LVecBase4i const &::ParamValue< LVecBase4i >::get_value(void) const;

1773 14 get_class_type 0 4 1874 40 ParamValue< LVecBase4i >::get_class_type 0 1 891 0
67
static TypeHandle ::ParamValue< LVecBase4i >::get_class_type(void);

1774 10 ParamValue 0 4 1875 35 ParamValue< LMatrix3d >::ParamValue 0 1 892 0
69
inline ::ParamValue< LMatrix3d >::ParamValue(LMatrix3d const &value);

1775 9 set_value 0 4 1875 34 ParamValue< LMatrix3d >::set_value 0 1 893 0
73
inline void ::ParamValue< LMatrix3d >::set_value(LMatrix3d const &value);

1776 9 get_value 0 4 1875 34 ParamValue< LMatrix3d >::get_value 0 1 894 0
73
inline LMatrix3d const &::ParamValue< LMatrix3d >::get_value(void) const;

1777 14 get_class_type 0 4 1875 39 ParamValue< LMatrix3d >::get_class_type 0 1 895 0
66
static TypeHandle ::ParamValue< LMatrix3d >::get_class_type(void);

1778 10 ParamValue 0 4 1876 35 ParamValue< LMatrix3f >::ParamValue 0 1 896 0
69
inline ::ParamValue< LMatrix3f >::ParamValue(LMatrix3f const &value);

1779 9 set_value 0 4 1876 34 ParamValue< LMatrix3f >::set_value 0 1 897 0
73
inline void ::ParamValue< LMatrix3f >::set_value(LMatrix3f const &value);

1780 9 get_value 0 4 1876 34 ParamValue< LMatrix3f >::get_value 0 1 898 0
73
inline LMatrix3f const &::ParamValue< LMatrix3f >::get_value(void) const;

1781 14 get_class_type 0 4 1876 39 ParamValue< LMatrix3f >::get_class_type 0 1 899 0
66
static TypeHandle ::ParamValue< LMatrix3f >::get_class_type(void);

1782 10 ParamValue 0 4 1877 35 ParamValue< LMatrix4d >::ParamValue 0 1 900 0
69
inline ::ParamValue< LMatrix4d >::ParamValue(LMatrix4d const &value);

1783 9 set_value 0 4 1877 34 ParamValue< LMatrix4d >::set_value 0 1 901 0
73
inline void ::ParamValue< LMatrix4d >::set_value(LMatrix4d const &value);

1784 9 get_value 0 4 1877 34 ParamValue< LMatrix4d >::get_value 0 1 902 0
73
inline LMatrix4d const &::ParamValue< LMatrix4d >::get_value(void) const;

1785 14 get_class_type 0 4 1877 39 ParamValue< LMatrix4d >::get_class_type 0 1 903 0
66
static TypeHandle ::ParamValue< LMatrix4d >::get_class_type(void);

1786 10 ParamValue 0 4 1878 35 ParamValue< LMatrix4f >::ParamValue 0 1 904 0
69
inline ::ParamValue< LMatrix4f >::ParamValue(LMatrix4f const &value);

1787 9 set_value 0 4 1878 34 ParamValue< LMatrix4f >::set_value 0 1 905 0
73
inline void ::ParamValue< LMatrix4f >::set_value(LMatrix4f const &value);

1788 9 get_value 0 4 1878 34 ParamValue< LMatrix4f >::get_value 0 1 906 0
73
inline LMatrix4f const &::ParamValue< LMatrix4f >::get_value(void) const;

1789 14 get_class_type 0 4 1878 39 ParamValue< LMatrix4f >::get_class_type 0 1 907 0
66
static TypeHandle ::ParamValue< LMatrix4f >::get_class_type(void);

1790 20 PythonCallbackObject 0 4 1879 42 PythonCallbackObject::PythonCallbackObject 0 2 908 909 232
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
74
PythonCallbackObject::PythonCallbackObject(_object *function = (Py_None));

1791 12 operator new 0 4 1879 34 PythonCallbackObject::operator new 0 1 910 0
146
inline void *PythonCallbackObject::operator new(unsigned int size);
inline void *PythonCallbackObject::operator new(unsigned int size, void *ptr);

1792 15 operator delete 0 4 1879 37 PythonCallbackObject::operator delete 0 0 0
128
inline void PythonCallbackObject::operator delete(void *ptr);
inline void PythonCallbackObject::operator delete(void *, void *);

1793 12 validate_ptr 0 4 1879 34 PythonCallbackObject::validate_ptr 0 0 0
71
static inline bool PythonCallbackObject::validate_ptr(void const *ptr);

1794 12 set_function 0 4 1879 34 PythonCallbackObject::set_function 0 1 911 379
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::set_function
//       Access: Published
//  Description: Replaces the function that is called for the callback.
//               runs.  The parameter should be a Python callable
//               object.
////////////////////////////////////////////////////////////////////
59
void PythonCallbackObject::set_function(_object *function);

1795 12 get_function 0 4 1879 34 PythonCallbackObject::get_function 0 1 912 287
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::get_function
//       Access: Published
//  Description: Returns the function that is called for the callback.
////////////////////////////////////////////////////////////////////
50
_object *PythonCallbackObject::get_function(void);

1796 14 get_class_type 0 4 1879 36 PythonCallbackObject::get_class_type 0 1 913 0
61
static TypeHandle PythonCallbackObject::get_class_type(void);

1797 14 get_class_type 0 4 1880 36 WritableConfigurable::get_class_type 0 1 914 0
61
static TypeHandle WritableConfigurable::get_class_type(void);

1798 21 ~WritableConfigurable 0 4 1880 43 WritableConfigurable::~WritableConfigurable 0 0 0
50
WritableConfigurable::~WritableConfigurable(void);

1799 17 UniqueIdAllocator 0 4 1881 36 UniqueIdAllocator::UniqueIdAllocator 0 3 915 916 917 275
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
////////////////////////////////////////////////////////////////////
86
UniqueIdAllocator::UniqueIdAllocator(unsigned int min = (0), unsigned int max = (20));

1800 18 ~UniqueIdAllocator 0 4 1881 37 UniqueIdAllocator::~UniqueIdAllocator 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
UniqueIdAllocator::~UniqueIdAllocator(void);

1801 8 allocate 0 4 1881 27 UniqueIdAllocator::allocate 0 1 918 381
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::allocate
//       Access: Published
//  Description: Returns an id between _min and _max (that were passed
//               to the constructor).
//               IndexEnd is returned if no ids are available.
////////////////////////////////////////////////////////////////////
47
unsigned int UniqueIdAllocator::allocate(void);

1802 18 initial_reserve_id 0 4 1881 37 UniqueIdAllocator::initial_reserve_id 0 1 919 893
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::initial_reserve_id
//       Access: Published
//  Description: This may be called to mark a particular id as having
//               already been allocated (for instance, by a prior
//               pass).  The specified id is removed from the
//               available pool.
//
//               Because of the limitations of this algorithm, this is
//               most efficient when it is called before the first
//               call to allocate(), and when all the calls to
//               initial_reserve_id() are made in descending order by
//               id.  However, this is a performance warning only; if
//               performance is not an issue, any id may be reserved
//               at any time.
////////////////////////////////////////////////////////////////////
60
void UniqueIdAllocator::initial_reserve_id(unsigned int id);

1803 4 free 0 4 1881 23 UniqueIdAllocator::free 0 1 920 338
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::free
//       Access: Published
//  Description: Free an allocated index (index must be between _min
//               and _max that were passed to the constructor).
////////////////////////////////////////////////////////////////////
49
void UniqueIdAllocator::free(unsigned int index);

1804 13 fraction_used 0 4 1881 32 UniqueIdAllocator::fraction_used 0 1 921 350
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::fraction_used
//       Access: Published
//  Description: return the decimal fraction of the pool that is used.
//               The range is 0 to 1.0 (e.g. 75% would be 0.75).
////////////////////////////////////////////////////////////////////
51
float UniqueIdAllocator::fraction_used(void) const;

1805 6 output 0 4 1881 25 UniqueIdAllocator::output 0 1 922 256
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::output
//       Access: Published
//  Description: ...intended for debugging only.
////////////////////////////////////////////////////////////////////
51
void UniqueIdAllocator::output(ostream &out) const;

1806 5 write 0 4 1881 24 UniqueIdAllocator::write 0 1 923 255
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::write
//       Access: Published
//  Description: ...intended for debugging only.
////////////////////////////////////////////////////////////////////
50
void UniqueIdAllocator::write(ostream &out) const;

1807 39 py_decode_TypedWritable_from_bam_stream 0 1 0 39 py_decode_TypedWritable_from_bam_stream 0 1 930 0
104
_object *py_decode_TypedWritable_from_bam_stream(_object *this_class, basic_string< char > const &data);

1808 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 0 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 931 0
132
_object *py_decode_TypedWritable_from_bam_stream_persist(_object *unpickler, _object *this_class, basic_string< char > const &data);

931
1 14 Dtool_xqRvX63M 0 7 8 1884 945 14 Dtool_xqRvX63M 0 1 4 copy 1 1882  
2 14 Dtool_xqRv1HLX 0 7 8 1884 945 14 Dtool_xqRv1HLX 0 1 4 copy 1 1885  
3 14 Dtool_xqRv7Y0T 0 7 8 1884 945 14 Dtool_xqRv7Y0T 0 1 6 source 1 1887  
4 14 Dtool_xqRvsFvc 0 6 9 1889 0 14 Dtool_xqRvsFvc 0 1 4 this 3 1882  
5 14 Dtool_xqRv_r_f 0 6 10 1890 0 14 Dtool_xqRv_r_f 0 2 4 this 3 1882  1 n 1 1889  
6 14 Dtool_xqRvyg6O 0 6 11 1890 0 14 Dtool_xqRvyg6O 0 2 4 this 3 1882  1 n 1 1889  
7 14 Dtool_xqRvFXK9 0 6 12 1891 0 14 Dtool_xqRvFXK9 0 1 4 this 3 1882  
8 14 Dtool_xqRvgZO_ 0 6 13 1891 0 14 Dtool_xqRvgZO_ 0 3 4 this 3 1882  1 n 1 1889  5 count 1 1889  
9 14 Dtool_xqRvyoll 0 6 14 1892 0 14 Dtool_xqRvyoll 0 1 4 this 3 1882  
10 14 Dtool_xqRvAXXF 0 6 15 1892 0 14 Dtool_xqRvAXXF 0 1 4 this 3 1882  
11 14 Dtool_xqRvJq4P 0 6 16 1892 0 14 Dtool_xqRvJq4P 0 3 4 this 3 1882  4 view 1 1893  5 flags 1 1892  
12 14 Dtool_xqRv7ZKi 0 4 17 1895 0 14 Dtool_xqRv7ZKi 0 2 4 this 3 1882  4 view 1 1893  
13 14 Dtool_xqRvwEyO 0 4 5 1895 0 14 Dtool_xqRvwEyO 0 1 4 this 3 1896  
14 14 Dtool_xqRvh3jh 0 4 6 1895 0 14 Dtool_xqRvh3jh 0 2 4 this 3 1897  3 out 1 1899  
15 14 Dtool_xqRv8B9l 0 7 20 1900 953 14 Dtool_xqRv8B9l 0 0 
16 14 Dtool_xqRvsm_Z 0 7 20 1900 953 14 Dtool_xqRvsm_Z 0 1 4 copy 1 1901  
17 14 Dtool_xqRvkq1x 0 6 21 1900 0 14 Dtool_xqRvkq1x 0 2 4 this 3 1900  4 copy 1 1901  
18 14 Dtool_xqRvVHPu 0 7 22 1900 953 14 Dtool_xqRvVHPu 0 0 
19 14 Dtool_xqRvkrT6 0 7 23 1900 953 14 Dtool_xqRvkrT6 0 0 
20 14 Dtool_xqRvPteB 0 7 24 1900 953 14 Dtool_xqRvPteB 0 1 7 on_bits 1 1892  
21 14 Dtool_xqRvEES9 0 7 25 1900 953 14 Dtool_xqRvEES9 0 1 5 index 1 1892  
22 14 Dtool_xqRv2jZV 0 7 26 1900 953 14 Dtool_xqRv2jZV 0 2 7 low_bit 1 1892  4 size 1 1892  
23 14 Dtool_xqRvrw_P 0 6 28 1903 0 14 Dtool_xqRvrw_P 0 0 
24 14 Dtool_xqRvkA7l 0 6 29 1892 0 14 Dtool_xqRvkA7l 0 0 
25 14 Dtool_xqRvn_6E 0 6 30 1892 0 14 Dtool_xqRvn_6E 0 0 
26 14 Dtool_xqRvNI0e 0 6 31 1903 0 14 Dtool_xqRvNI0e 0 2 4 this 3 1901  5 index 1 1892  
27 14 Dtool_xqRvbA_k 0 4 32 1895 0 14 Dtool_xqRvbA_k 0 2 4 this 3 1900  5 index 1 1892  
28 14 Dtool_xqRvTA34 0 4 33 1895 0 14 Dtool_xqRvTA34 0 2 4 this 3 1900  5 index 1 1892  
29 14 Dtool_xqRvN6Cn 0 4 34 1895 0 14 Dtool_xqRvN6Cn 0 3 4 this 3 1900  5 index 1 1892  5 value 1 1903  
30 14 Dtool_xqRvADmV 0 6 35 1903 0 14 Dtool_xqRvADmV 0 1 4 this 3 1901  
31 14 Dtool_xqRv3P9m 0 6 36 1903 0 14 Dtool_xqRv3P9m 0 1 4 this 3 1901  
32 14 Dtool_xqRvxFld 0 6 37 1889 0 14 Dtool_xqRvxFld 0 3 4 this 3 1901  7 low_bit 1 1892  4 size 1 1892  
33 14 Dtool_xqRvZDj3 0 4 38 1895 0 14 Dtool_xqRvZDj3 0 4 4 this 3 1900  5 value 1 1889  7 low_bit 1 1892  4 size 1 1892  
34 14 Dtool_xqRvyIIs 0 6 39 1903 0 14 Dtool_xqRvyIIs 0 3 4 this 3 1901  7 low_bit 1 1892  4 size 1 1892  
35 14 Dtool_xqRvOfMc 0 6 40 1903 0 14 Dtool_xqRvOfMc 0 3 4 this 3 1901  7 low_bit 1 1892  4 size 1 1892  
36 14 Dtool_xqRvPdea 0 4 41 1895 0 14 Dtool_xqRvPdea 0 3 4 this 3 1900  7 low_bit 1 1892  4 size 1 1892  
37 14 Dtool_xqRveZzC 0 4 42 1895 0 14 Dtool_xqRveZzC 0 3 4 this 3 1900  7 low_bit 1 1892  4 size 1 1892  
38 14 Dtool_xqRvwG5f 0 4 43 1895 0 14 Dtool_xqRvwG5f 0 4 4 this 3 1900  5 value 1 1903  7 low_bit 1 1892  4 size 1 1892  
39 14 Dtool_xqRvImLX 0 6 44 1892 0 14 Dtool_xqRvImLX 0 1 4 this 3 1901  
40 14 Dtool_xqRvL6nV 0 6 45 1892 0 14 Dtool_xqRvL6nV 0 1 4 this 3 1901  
41 14 Dtool_xqRvEGfL 0 6 46 1892 0 14 Dtool_xqRvEGfL 0 1 4 this 3 1901  
42 14 Dtool_xqRvVvnV 0 6 47 1892 0 14 Dtool_xqRvVvnV 0 1 4 this 3 1901  
43 14 Dtool_xqRvNZDs 0 6 48 1892 0 14 Dtool_xqRvNZDs 0 1 4 this 3 1901  
44 14 Dtool_xqRv1q3w 0 6 49 1892 0 14 Dtool_xqRv1q3w 0 1 4 this 3 1901  
45 14 Dtool_xqRvvM6M 0 6 50 1892 0 14 Dtool_xqRvvM6M 0 2 4 this 3 1901  7 low_bit 1 1892  
46 14 Dtool_xqRvW1u9 0 4 51 1895 0 14 Dtool_xqRvW1u9 0 1 4 this 3 1900  
47 14 Dtool_xqRvfWTS 0 6 52 1903 0 14 Dtool_xqRvfWTS 0 2 4 this 3 1901  5 other 1 1901  
48 14 Dtool_xqRvsPqY 0 4 53 1895 0 14 Dtool_xqRvsPqY 0 1 4 this 3 1900  
49 14 Dtool_xqRvtsUG 0 4 54 1895 0 14 Dtool_xqRvtsUG 0 2 4 this 3 1901  3 out 1 1899  
50 14 Dtool_xqRvi8A6 0 4 55 1895 0 14 Dtool_xqRvi8A6 0 3 4 this 3 1901  3 out 1 1899  12 spaces_every 1 1892  
51 14 Dtool_xqRvida8 0 4 55 1895 0 14 Dtool_xqRvida8 0 2 4 this 3 1901  3 out 1 1899  
52 14 Dtool_xqRvGkzd 0 4 56 1895 0 14 Dtool_xqRvGkzd 0 3 4 this 3 1901  3 out 1 1899  12 spaces_every 1 1892  
53 14 Dtool_xqRvRW_f 0 4 56 1895 0 14 Dtool_xqRvRW_f 0 2 4 this 3 1901  3 out 1 1899  
54 14 Dtool_xqRvatxG 0 4 57 1895 0 14 Dtool_xqRvatxG 0 3 4 this 3 1901  3 out 1 1899  12 indent_level 1 1892  
55 14 Dtool_xqRvL_2n 0 4 57 1895 0 14 Dtool_xqRvL_2n 0 2 4 this 3 1901  3 out 1 1899  
56 14 Dtool_xqRvRqjr 0 6 58 1903 0 14 Dtool_xqRvRqjr 0 2 4 this 3 1901  5 other 1 1901  
57 14 Dtool_xqRvFbfL 0 6 59 1903 0 14 Dtool_xqRvFbfL 0 2 4 this 3 1901  5 other 1 1901  
58 14 Dtool_xqRvdImb 0 6 60 1903 0 14 Dtool_xqRvdImb 0 2 4 this 3 1901  5 other 1 1901  
59 14 Dtool_xqRvw6Ce 0 6 61 1892 0 14 Dtool_xqRvw6Ce 0 2 4 this 3 1901  5 other 1 1901  
60 14 Dtool_xqRvjYjL 0 7 62 1900 953 14 Dtool_xqRvjYjL 0 2 4 this 3 1901  5 other 1 1901  
61 14 Dtool_xqRvF7xb 0 7 63 1900 953 14 Dtool_xqRvF7xb 0 2 4 this 3 1901  5 other 1 1901  
62 14 Dtool_xqRvS1rL 0 7 64 1900 953 14 Dtool_xqRvS1rL 0 2 4 this 3 1901  5 other 1 1901  
63 14 Dtool_xqRvlqQk 0 7 65 1900 953 14 Dtool_xqRvlqQk 0 1 4 this 3 1901  
64 14 Dtool_xqRvfKAq 0 7 66 1900 953 14 Dtool_xqRvfKAq 0 2 4 this 3 1901  5 shift 1 1892  
65 14 Dtool_xqRvAlKa 0 7 67 1900 953 14 Dtool_xqRvAlKa 0 2 4 this 3 1901  5 shift 1 1892  
66 14 Dtool_xqRvva1p 0 6 68 1900 0 14 Dtool_xqRvva1p 0 2 4 this 3 1900  5 other 1 1901  
67 14 Dtool_xqRvUoD6 0 6 69 1900 0 14 Dtool_xqRvUoD6 0 2 4 this 3 1900  5 other 1 1901  
68 14 Dtool_xqRve0_p 0 6 70 1900 0 14 Dtool_xqRve0_p 0 2 4 this 3 1900  5 other 1 1901  
69 14 Dtool_xqRv1MmK 0 6 71 1900 0 14 Dtool_xqRv1MmK 0 2 4 this 3 1900  5 shift 1 1892  
70 14 Dtool_xqRvsqx6 0 6 72 1900 0 14 Dtool_xqRvsqx6 0 2 4 this 3 1900  5 shift 1 1892  
71 14 Dtool_xqRvIpt7 0 7 73 1905 0 14 Dtool_xqRvIpt7 0 0 
72 14 Dtool_xqRvQ4t2 0 7 75 1906 1007 14 Dtool_xqRvQ4t2 0 0 
73 14 Dtool_xqRvBKTk 0 7 75 1906 1007 14 Dtool_xqRvBKTk 0 1 4 copy 1 1907  
74 14 Dtool_xqRvZK2I 0 6 76 1906 0 14 Dtool_xqRvZK2I 0 2 4 this 3 1906  4 copy 1 1907  
75 14 Dtool_xqRvtdgp 0 7 77 1906 1007 14 Dtool_xqRvtdgp 0 0 
76 14 Dtool_xqRvRxDj 0 7 78 1906 1007 14 Dtool_xqRvRxDj 0 0 
77 14 Dtool_xqRvnApV 0 7 79 1906 1007 14 Dtool_xqRvnApV 0 1 7 on_bits 1 1892  
78 14 Dtool_xqRvl_fN 0 7 80 1906 1007 14 Dtool_xqRvl_fN 0 1 5 index 1 1892  
79 14 Dtool_xqRvhu4K 0 7 81 1906 1007 14 Dtool_xqRvhu4K 0 2 7 low_bit 1 1892  4 size 1 1892  
80 14 Dtool_xqRvV293 0 6 83 1903 0 14 Dtool_xqRvV293 0 0 
81 14 Dtool_xqRvfhwX 0 6 84 1892 0 14 Dtool_xqRvfhwX 0 0 
82 14 Dtool_xqRvc9oV 0 6 85 1892 0 14 Dtool_xqRvc9oV 0 0 
83 14 Dtool_xqRvQkKR 0 6 86 1903 0 14 Dtool_xqRvQkKR 0 2 4 this 3 1907  5 index 1 1892  
84 14 Dtool_xqRvWhDJ 0 4 87 1895 0 14 Dtool_xqRvWhDJ 0 2 4 this 3 1906  5 index 1 1892  
85 14 Dtool_xqRvapyc 0 4 88 1895 0 14 Dtool_xqRvapyc 0 2 4 this 3 1906  5 index 1 1892  
86 14 Dtool_xqRvtnCt 0 4 89 1895 0 14 Dtool_xqRvtnCt 0 3 4 this 3 1906  5 index 1 1892  5 value 1 1903  
87 14 Dtool_xqRvNDBe 0 6 90 1903 0 14 Dtool_xqRvNDBe 0 1 4 this 3 1907  
88 14 Dtool_xqRvSm0S 0 6 91 1903 0 14 Dtool_xqRvSm0S 0 1 4 this 3 1907  
89 14 Dtool_xqRvk2VC 0 6 92 1889 0 14 Dtool_xqRvk2VC 0 3 4 this 3 1907  7 low_bit 1 1892  4 size 1 1892  
90 14 Dtool_xqRvQI03 0 4 93 1895 0 14 Dtool_xqRvQI03 0 4 4 this 3 1906  5 value 1 1889  7 low_bit 1 1892  4 size 1 1892  
91 14 Dtool_xqRvvZI1 0 6 94 1903 0 14 Dtool_xqRvvZI1 0 3 4 this 3 1907  7 low_bit 1 1892  4 size 1 1892  
92 14 Dtool_xqRv4rQO 0 6 95 1903 0 14 Dtool_xqRv4rQO 0 3 4 this 3 1907  7 low_bit 1 1892  4 size 1 1892  
93 14 Dtool_xqRvce2Y 0 4 96 1895 0 14 Dtool_xqRvce2Y 0 3 4 this 3 1906  7 low_bit 1 1892  4 size 1 1892  
94 14 Dtool_xqRvouj3 0 4 97 1895 0 14 Dtool_xqRvouj3 0 3 4 this 3 1906  7 low_bit 1 1892  4 size 1 1892  
95 14 Dtool_xqRvtybc 0 4 98 1895 0 14 Dtool_xqRvtybc 0 4 4 this 3 1906  5 value 1 1903  7 low_bit 1 1892  4 size 1 1892  
96 14 Dtool_xqRvjXq9 0 6 99 1892 0 14 Dtool_xqRvjXq9 0 1 4 this 3 1907  
97 14 Dtool_xqRv14ol 0 6 100 1892 0 14 Dtool_xqRv14ol 0 1 4 this 3 1907  
98 14 Dtool_xqRvYTi7 0 6 101 1892 0 14 Dtool_xqRvYTi7 0 1 4 this 3 1907  
99 14 Dtool_xqRvu2rJ 0 6 102 1892 0 14 Dtool_xqRvu2rJ 0 1 4 this 3 1907  
100 14 Dtool_xqRvMqdg 0 6 103 1892 0 14 Dtool_xqRvMqdg 0 1 4 this 3 1907  
101 14 Dtool_xqRvTBnk 0 6 104 1892 0 14 Dtool_xqRvTBnk 0 1 4 this 3 1907  
102 14 Dtool_xqRvpm5E 0 6 105 1892 0 14 Dtool_xqRvpm5E 0 2 4 this 3 1907  7 low_bit 1 1892  
103 14 Dtool_xqRvBa0l 0 4 106 1895 0 14 Dtool_xqRvBa0l 0 1 4 this 3 1906  
104 14 Dtool_xqRvXKrM 0 6 107 1903 0 14 Dtool_xqRvXKrM 0 2 4 this 3 1907  5 other 1 1907  
105 14 Dtool_xqRv4mX_ 0 4 108 1895 0 14 Dtool_xqRv4mX_ 0 1 4 this 3 1906  
106 14 Dtool_xqRvoXIR 0 4 109 1895 0 14 Dtool_xqRvoXIR 0 2 4 this 3 1907  3 out 1 1899  
107 14 Dtool_xqRvb9kN 0 4 110 1895 0 14 Dtool_xqRvb9kN 0 3 4 this 3 1907  3 out 1 1899  12 spaces_every 1 1892  
108 14 Dtool_xqRvjx6v 0 4 110 1895 0 14 Dtool_xqRvjx6v 0 2 4 this 3 1907  3 out 1 1899  
109 14 Dtool_xqRv52R1 0 4 111 1895 0 14 Dtool_xqRv52R1 0 3 4 this 3 1907  3 out 1 1899  12 spaces_every 1 1892  
110 14 Dtool_xqRvmM4l 0 4 111 1895 0 14 Dtool_xqRvmM4l 0 2 4 this 3 1907  3 out 1 1899  
111 14 Dtool_xqRvKmrX 0 4 112 1895 0 14 Dtool_xqRvKmrX 0 3 4 this 3 1907  3 out 1 1899  12 indent_level 1 1892  
112 14 Dtool_xqRvJx_v 0 4 112 1895 0 14 Dtool_xqRvJx_v 0 2 4 this 3 1907  3 out 1 1899  
113 14 Dtool_xqRvDBQ_ 0 6 113 1903 0 14 Dtool_xqRvDBQ_ 0 2 4 this 3 1907  5 other 1 1907  
114 14 Dtool_xqRv7Bfc 0 6 114 1903 0 14 Dtool_xqRv7Bfc 0 2 4 this 3 1907  5 other 1 1907  
115 14 Dtool_xqRvPse8 0 6 115 1903 0 14 Dtool_xqRvPse8 0 2 4 this 3 1907  5 other 1 1907  
116 14 Dtool_xqRvHtQ8 0 6 116 1892 0 14 Dtool_xqRvHtQ8 0 2 4 this 3 1907  5 other 1 1907  
117 14 Dtool_xqRv1z5O 0 7 117 1906 1007 14 Dtool_xqRv1z5O 0 2 4 this 3 1907  5 other 1 1907  
118 14 Dtool_xqRvbsOe 0 7 118 1906 1007 14 Dtool_xqRvbsOe 0 2 4 this 3 1907  5 other 1 1907  
119 14 Dtool_xqRvEMaU 0 7 119 1906 1007 14 Dtool_xqRvEMaU 0 2 4 this 3 1907  5 other 1 1907  
120 14 Dtool_xqRv1NZN 0 7 120 1906 1007 14 Dtool_xqRv1NZN 0 1 4 this 3 1907  
121 14 Dtool_xqRvavX9 0 7 121 1906 1007 14 Dtool_xqRvavX9 0 2 4 this 3 1907  5 shift 1 1892  
122 14 Dtool_xqRv3PLG 0 7 122 1906 1007 14 Dtool_xqRv3PLG 0 2 4 this 3 1907  5 shift 1 1892  
123 14 Dtool_xqRv_0dX 0 6 123 1906 0 14 Dtool_xqRv_0dX 0 2 4 this 3 1906  5 other 1 1907  
124 14 Dtool_xqRvYUzm 0 6 124 1906 0 14 Dtool_xqRvYUzm 0 2 4 this 3 1906  5 other 1 1907  
125 14 Dtool_xqRvR0_c 0 6 125 1906 0 14 Dtool_xqRvR0_c 0 2 4 this 3 1906  5 other 1 1907  
126 14 Dtool_xqRvq_L4 0 6 126 1906 0 14 Dtool_xqRvq_L4 0 2 4 this 3 1906  5 shift 1 1892  
127 14 Dtool_xqRvFe_A 0 6 127 1906 0 14 Dtool_xqRvFe_A 0 2 4 this 3 1906  5 shift 1 1892  
128 14 Dtool_xqRv2usD 0 7 128 1905 0 14 Dtool_xqRv2usD 0 0 
129 14 Dtool_xqRvDVLW 0 7 130 1909 1071 14 Dtool_xqRvDVLW 0 1 4 copy 1 1885  
130 14 Dtool_xqRv1rpQ 0 7 130 1909 1071 14 Dtool_xqRv1rpQ 0 1 11 type_handle 1 1905  
131 14 Dtool_xqRv8OP5 0 7 130 1909 1071 14 Dtool_xqRv8OP5 0 0 
132 14 Dtool_xqRvT0Yl 0 7 130 1909 1071 14 Dtool_xqRvT0Yl 0 1 6 source 1 1887  
133 14 Dtool_xqRv7V4I 0 7 131 1909 1071 14 Dtool_xqRv7V4I 0 2 1 n 1 1889  11 type_handle 1 1905  
134 14 Dtool_xqRvJ8ub 0 7 131 1909 1071 14 Dtool_xqRvJ8ub 0 1 1 n 1 1889  
135 14 Dtool_xqRvI3xs 0 6 132 1889 0 14 Dtool_xqRvI3xs 0 1 4 this 3 1885  
136 14 Dtool_xqRv_7ej 0 4 133 1895 0 14 Dtool_xqRv_7ej 0 2 4 this 3 1909  1 x 1 1890  
137 14 Dtool_xqRvxujU 0 4 134 1895 0 14 Dtool_xqRvxujU 0 1 4 this 3 1909  
138 14 Dtool_xqRvC1Wu 0 6 135 1890 0 14 Dtool_xqRvC1Wu 0 2 4 this 3 1885  1 n 1 1889  
139 14 Dtool_xqRv04Y4 0 4 136 1895 0 14 Dtool_xqRv04Y4 0 3 4 this 3 1909  1 n 1 1889  5 value 1 1890  
140 14 Dtool_xqRvuw0l 0 6 137 1890 0 14 Dtool_xqRvuw0l 0 2 4 this 3 1885  1 n 1 1889  
141 14 Dtool_xqRvy_QJ 0 4 138 1895 0 14 Dtool_xqRvy_QJ 0 3 4 this 3 1909  1 n 1 1889  5 value 1 1890  
142 14 Dtool_xqRvnE_c 0 6 139 1891 0 14 Dtool_xqRvnE_c 0 1 4 this 3 1885  
143 14 Dtool_xqRvbfhi 0 4 140 1895 0 14 Dtool_xqRvbfhi 0 2 4 this 3 1909  4 data 1 1891  
144 14 Dtool_xqRvlO9d 0 6 141 1891 0 14 Dtool_xqRvlO9d 0 3 4 this 3 1885  1 n 1 1889  5 count 1 1889  
145 14 Dtool_xqRv6EdM 0 4 142 1895 0 14 Dtool_xqRv6EdM 0 4 4 this 3 1909  1 n 1 1889  5 count 1 1889  4 data 1 1891  
146 14 Dtool_xqRvyVLR 0 6 143 1892 0 14 Dtool_xqRvyVLR 0 1 4 this 3 1885  
147 14 Dtool_xqRv8hDB 0 6 144 1892 0 14 Dtool_xqRv8hDB 0 1 4 this 3 1885  
148 14 Dtool_xqRvXO0w 0 6 145 1892 0 14 Dtool_xqRvXO0w 0 3 4 this 3 1909  4 view 1 1893  5 flags 1 1892  
149 14 Dtool_xqRvSkcP 0 4 146 1895 0 14 Dtool_xqRvSkcP 0 2 4 this 3 1885  4 view 1 1893  
150 14 Dtool_xqRvBhAH 0 4 151 1895 0 14 Dtool_xqRvBhAH 294 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the entire animation from beginning to end and
//               stops.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1910  
151 14 Dtool_xqRvNKyB 0 4 151 1895 0 14 Dtool_xqRvNKyB 736 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the animation from the frame "from" to and
//               including the frame "to", at which point the
//               animation is stopped.  Both "from" and "to" frame
//               numbers may be outside the range (0,
//               get_num_frames()) and the animation will follow the
//               range correctly, reporting numbers modulo
//               get_num_frames().  For instance, play(0,
//               get_num_frames() * 2) will play the animation twice
//               and then stop.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1910  4 from 1 1911  2 to 1 1911  
152 14 Dtool_xqRvblrP 0 4 152 1895 0 14 Dtool_xqRvblrP 405 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Starts the entire animation looping.  If restart is
//               true, the animation is restarted from the beginning;
//               otherwise, it continues from the current frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1910  7 restart 1 1903  
153 14 Dtool_xqRvub22 0 4 152 1895 0 14 Dtool_xqRvub22 491 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", indefinitely.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1910  7 restart 1 1903  4 from 1 1911  2 to 1 1911  
154 14 Dtool_xqRvFEBu 0 4 153 1895 0 14 Dtool_xqRvFEBu 498 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Starts the entire animation bouncing back and forth
//               between its first frame and last frame.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1910  7 restart 1 1903  
155 14 Dtool_xqRvA7bg 0 4 153 1895 0 14 Dtool_xqRvA7bg 386 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", and then back in the
//               opposite direction, indefinitely.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1910  7 restart 1 1903  4 from 1 1911  2 to 1 1911  
156 14 Dtool_xqRvEmm6 0 4 154 1895 0 14 Dtool_xqRvEmm6 369 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::stop
//       Access: Published
//  Description: Stops a currently playing or looping animation right
//               where it is.  The animation remains posed at the
//               current frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1910  
157 14 Dtool_xqRvUH7a 0 4 155 1895 0 14 Dtool_xqRvUH7a 297 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pose
//       Access: Published
//  Description: Sets the animation to the indicated frame and holds
//               it there.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1910  5 frame 1 1911  
158 14 Dtool_xqRvTzzJ 0 4 156 1895 0 14 Dtool_xqRvTzzJ 519 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::set_play_rate
//       Access: Published
//  Description: Changes the rate at which the animation plays.  1.0
//               is the normal speed, 2.0 is twice normal speed, and
//               0.5 is half normal speed.  0.0 is legal to pause the
//               animation, and a negative value will play the
//               animation backwards.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1910  9 play_rate 1 1911  
159 14 Dtool_xqRvHfNF 0 6 157 1911 0 14 Dtool_xqRvHfNF 313 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_play_rate
//       Access: Published
//  Description: Returns the rate at which the animation plays.  See
//               set_play_rate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1912  
160 14 Dtool_xqRv1MDt 0 6 158 1911 0 14 Dtool_xqRv1MDt 514 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame_rate
//       Access: Published
//  Description: Returns the native frame rate of the animation.  This
//               is the number of frames per second that will elapse
//               when the play_rate is set to 1.0.  It is a fixed
//               property of the animation and may not be adjusted by
//               the user.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1912  
161 14 Dtool_xqRv38Tm 0 6 159 1892 0 14 Dtool_xqRv38Tm 581 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1912  
162 14 Dtool_xqRvFJm1 0 6 160 1892 0 14 Dtool_xqRvFJm1 359 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//               This number will be in the range 0 <= f <
//               get_num_frames().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1912  
163 14 Dtool_xqRvL6yq 0 6 161 1892 0 14 Dtool_xqRvL6yq 638 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_next_frame
//       Access: Published
//  Description: Returns the current integer frame number + 1,
//               constrained to the range 0 <= f < get_num_frames().
//
//               If the play mode is PM_play, this will clamp to the
//               same value as get_frame() at the end of the
//               animation.  If the play mode is any other value, this
//               will wrap around to frame 0 at the end of the
//               animation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1912  
164 14 Dtool_xqRvc9m_ 0 6 162 1911 0 14 Dtool_xqRvc9m_ 598 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frac
//       Access: Published
//  Description: Returns the fractional part of the current frame.
//               Normally, this is in the range 0.0 <= f < 1.0, but in
//               the one special case of an animation playing to its
//               end frame and stopping, it might exactly equal 1.0.
//
//               It will always be true that get_full_frame() +
//               get_frac() == get_full_fframe().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1912  
165 14 Dtool_xqRvu_72 0 6 163 1892 0 14 Dtool_xqRvu_72 693 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_fframe(), this
//               return value will never exceed the value passed to
//               to_frame in the play() method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1912  
166 14 Dtool_xqRviZK4 0 6 164 1911 0 14 Dtool_xqRviZK4 841 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_fframe
//       Access: Published
//  Description: Returns the current floating-point frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_frame(), this
//               return value may equal (to_frame + 1.0), when the
//               animation has played to its natural end.  However, in
//               this case the return value of get_full_frame() will
//               be to_frame, not (to_frame + 1).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1912  
167 14 Dtool_xqRveUtV 0 6 165 1903 0 14 Dtool_xqRveUtV 466 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::is_playing
//       Access: Published
//  Description: Returns true if the animation is currently playing,
//               false if it is stopped (e.g. because stop() or pose()
//               was called, or because it reached the end of the
//               animation after play() was called).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1912  
168 14 Dtool_xqRvjJYM 0 4 166 1895 0 14 Dtool_xqRvjJYM 230 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1912  3 out 1 1899  
169 14 Dtool_xqRv3PK3 0 7 167 1905 0 14 Dtool_xqRv3PK3 0 0 
170 14 Dtool_xqRveAZ3 0 7 170 1914 1110 14 Dtool_xqRveAZ3 274 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Default Constructor
//       Access: Published
//  Description: Creates an UpdateSeq in the 'initial' state.
//////////////////////////////////////////////////////////////////// 0 
171 14 Dtool_xqRvTpCm 0 7 170 1914 1110 14 Dtool_xqRvTpCm 226 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1915  
172 14 Dtool_xqRvXroR 0 7 171 1914 1110 14 Dtool_xqRvXroR 290 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::initial (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'initial' state.
//////////////////////////////////////////////////////////////////// 0 
173 14 Dtool_xqRvnK4u 0 7 172 1914 1110 14 Dtool_xqRvnK4u 282 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::old (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'old' state.
//////////////////////////////////////////////////////////////////// 0 
174 14 Dtool_xqRv9eRT 0 7 173 1914 1110 14 Dtool_xqRv9eRT 286 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::fresh (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'fresh' state.
//////////////////////////////////////////////////////////////////// 0 
175 14 Dtool_xqRvGswc 0 6 174 1914 0 14 Dtool_xqRvGswc 234 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1914  4 copy 1 1915  
176 14 Dtool_xqRv0_vY 0 4 175 1895 0 14 Dtool_xqRv0_vY 260 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::clear
//       Access: Published
//  Description: Resets the UpdateSeq to the 'initial' state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1914  
177 14 Dtool_xqRvT1E2 0 6 176 1903 0 14 Dtool_xqRvT1E2 294 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_initial
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'initial'
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1915  
178 14 Dtool_xqRvLeqi 0 6 177 1903 0 14 Dtool_xqRvLeqi 269 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_old
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'old' state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1915  
179 14 Dtool_xqRvWsUb 0 6 178 1903 0 14 Dtool_xqRvWsUb 290 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_fresh
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'fresh'
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1915  
180 14 Dtool_xqRv6gLj 0 6 179 1903 0 14 Dtool_xqRv6gLj 328 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_special
//       Access: Published
//  Description: Returns true if the UpdateSeq is in any special
//               states, i.e. 'initial', 'old', or 'fresh'.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1915  
181 14 Dtool_xqRvgvS2 0 6 180 1903 0 14 Dtool_xqRvgvS2 0 2 4 this 3 1915  5 other 1 1915  
182 14 Dtool_xqRvgevt 0 6 181 1903 0 14 Dtool_xqRvgevt 0 2 4 this 3 1915  5 other 1 1915  
183 14 Dtool_xqRvNGO_ 0 6 182 1903 0 14 Dtool_xqRvNGO_ 0 2 4 this 3 1915  5 other 1 1915  
184 14 Dtool_xqRvwJ_1 0 6 183 1903 0 14 Dtool_xqRvwJ_1 0 2 4 this 3 1915  5 other 1 1915  
185 14 Dtool_xqRvt52_ 0 6 184 1903 0 14 Dtool_xqRvt52_ 0 2 4 this 3 1915  5 other 1 1915  
186 14 Dtool_xqRvQMl2 0 6 185 1903 0 14 Dtool_xqRvQMl2 0 2 4 this 3 1915  5 other 1 1915  
187 14 Dtool_xqRvkAFl 0 7 186 1914 1110 14 Dtool_xqRvkAFl 0 1 4 this 3 1914  
188 14 Dtool_xqRvqToO 0 7 187 1914 1110 14 Dtool_xqRvqToO 0 2 4 this 3 1914  6 param0 0 1892  
189 14 Dtool_xqRvZuR8 0 6 188 1917 0 14 Dtool_xqRvZuR8 328 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::get_seq
//       Access: Published
//  Description: Returns the internal integer value associated with
//               the UpdateSeq.  Useful for debugging only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1915  
190 14 Dtool_xqRvHG_1 0 4 189 1895 0 14 Dtool_xqRvHG_1 216 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1915  3 out 1 1899  
191 14 Dtool_xqRvh86d 0 4 193 1895 0 14 Dtool_xqRvh86d 653 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::mark_bam_modified
//       Access: Public
//  Description: Increments the bam_modified counter, so that this
//               object will be invalidated and retransmitted on any
//               open bam streams.  This should normally not need to
//               be called by user code; it should be called
//               internally when the object has been changed in a way
//               that legitimately requires its retransmission to any
//               connected clients.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1918  
192 14 Dtool_xqRvA1uu 0 7 194 1914 1110 14 Dtool_xqRvA1uu 388 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::get_bam_modified
//       Access: Public
//  Description: Returns the current bam_modified counter.  This
//               counter is normally incremented automatically
//               whenever the object is modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1919  
193 14 Dtool_xqRva_PN 0 6 195 1887 0 14 Dtool_xqRva_PN 0 1 4 this 3 1919  
194 14 Dtool_xqRvtu2x 0 6 196 1887 0 14 Dtool_xqRvtu2x 0 2 4 this 3 1919  7 pickler 1 1887  
195 14 Dtool_xqRvSud2 0 6 197 1891 0 14 Dtool_xqRvSud2 756 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1919  
196 14 Dtool_xqRv91zQ 0 6 197 1903 0 14 Dtool_xqRv91zQ 770 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1919  4 data 1 1921  6 writer 1 1922  
197 14 Dtool_xqRv_CTI 0 6 197 1903 0 14 Dtool_xqRv_CTI 770 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1919  4 data 1 1921  
198 14 Dtool_xqRvTBaO 0 7 199 1905 0 14 Dtool_xqRvTBaO 0 0 
199 14 Dtool_xqRvEJGP 0 7 206 1924 1124 14 Dtool_xqRvEJGP 872 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
//////////////////////////////////////////////////////////////////// 2 4 data 1 1891  6 reader 1 1923  
200 14 Dtool_xqRvtU54 0 7 206 1924 1124 14 Dtool_xqRvtU54 872 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
//////////////////////////////////////////////////////////////////// 1 4 data 1 1891  
201 14 Dtool_xqRv5oCX 0 7 207 1905 0 14 Dtool_xqRv5oCX 0 0 
202 14 Dtool_xqRvb50R 0 6 201 1918 0 14 Dtool_xqRvb50R 0 1 4 this 3 1924  
203 14 Dtool_xqRvIu02 0 7 202 1924 1124 14 Dtool_xqRvIu02 0 1 4 this 3 1918  
204 14 Dtool_xqRvkcf_ 0 7 204 1925 0 14 Dtool_xqRvkcf_ 0 1 4 this 3 1924  
205 14 Dtool_xqRvGHue 0 7 205 1924 1124 14 Dtool_xqRvGHue 0 1 4 this 3 1925  
206 14 Dtool_xqRv5zcI 0 7 216 1928 1129 14 Dtool_xqRv5zcI 438 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::make_copy
//       Access: Published
//  Description: Returns a duplicate of the BamCacheRecord.  The
//               duplicate will not have a data pointer set, even
//               though one may have been assigned to the original via
//               set_data().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1926  
207 14 Dtool_xqRvRs2_ 0 6 217 1903 0 14 Dtool_xqRvRs2_ 0 2 4 this 3 1926  5 other 1 1926  
208 14 Dtool_xqRv5cIS 0 6 218 1929 0 14 Dtool_xqRv5cIS 523 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_pathname
//       Access: Published
//  Description: Returns the full pathname to the source file that
//               originally generated this cache request.  In some
//               cases, for instance in the case of a of a multipage
//               texture like "cube_#.png", this may not not a true
//               filename on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1926  
209 14 Dtool_xqRvPDd1 0 6 219 1929 0 14 Dtool_xqRvPDd1 516 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_cache_filename
//       Access: Published
//  Description: Returns the name of the cache file as hashed from the
//               source_pathname.  This will be relative to the root
//               of the cache directory, and it will not include any
//               suffixes that may be appended to resolve hash
//               conflicts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1926  
210 14 Dtool_xqRv_xt3 0 6 220 1889 0 14 Dtool_xqRv_xt3 473 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_timestamp
//       Access: Published
//  Description: Returns the file timestamp of the original source
//               file that generated this cache record, if available.
//               In some cases the original file timestamp is not
//               available, and this will return 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1926  
211 14 Dtool_xqRv3ULN 0 6 221 1889 0 14 Dtool_xqRv3ULN 323 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_recorded_time
//       Access: Published
//  Description: Returns the time at which this particular record was
//               recorded or updated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1926  
212 14 Dtool_xqRvfk9J 0 6 222 1892 0 14 Dtool_xqRvfk9J 320 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_num_dependent_files
//       Access: Published
//  Description: Returns the number of source files that contribute to
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1926  
213 14 Dtool_xqRvtgta 0 6 223 1929 0 14 Dtool_xqRvtgta 335 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_dependent_pathname
//       Access: Published
//  Description: Returns the full pathname of the nth source files
//               that contributes to the cache.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1926  1 n 1 1892  
214 14 Dtool_xqRv_q0S 0 6 224 1903 0 14 Dtool_xqRv_q0S 380 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::dependents_unchanged
//       Access: Published
//  Description: Returns true if all of the dependent files are still
//               the same as when the cache was recorded, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1926  
215 14 Dtool_xqRvorWD 0 4 225 1895 0 14 Dtool_xqRvorWD 323 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_dependent_files
//       Access: Published
//  Description: Empties the list of files that contribute to the data
//               in this record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1928  
216 14 Dtool_xqRvt_BK 0 4 226 1895 0 14 Dtool_xqRvt_BK 509 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::add_dependent_file
//       Access: Published
//  Description: Adds the indicated file to the list of files that
//               will be loaded to generate the data in this record.
//               This should be called once for the primary source
//               file, and again for each secondary source file, if
//               any.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1928  8 pathname 1 1929  
217 14 Dtool_xqRvmwOq 0 6 227 1903 0 14 Dtool_xqRvmwOq 373 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::has_data
//       Access: Published
//  Description: Returns true if this cache record has an in-memory
//               data object associated--that is, the object stored in
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1926  
218 14 Dtool_xqRv_CEW 0 4 228 1895 0 14 Dtool_xqRv_CEW 394 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_data
//       Access: Published
//  Description: Removes the in-memory data object associated with
//               this record, if any.  This does not affect the
//               on-disk representation of the record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1928  
219 14 Dtool_xqRv_VOd 0 6 229 1918 0 14 Dtool_xqRv_VOd 383 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_data
//       Access: Published
//  Description: Returns a pointer to the data stored in the
//               record, or NULL if there is no data.  The pointer is
//               not removed from the record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1926  
220 14 Dtool_xqRvY08g 0 4 231 1895 0 14 Dtool_xqRvY08g 935 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: Stores a new data object on the record.  You should
//               pass the same pointer twice, to both parameters; this
//               allows the C++ typecasting to automatically convert
//               the pointer into both a TypedWritable and a
//               ReferenceCount pointer, so that the BamCacheRecord
//               object can reliably manage the reference counts.
//
//               You may pass 0 or NULL as the second parameter.  If
//               you do this, the BamCacheRecord will not manage the
//               object's reference count; it will be up to you to
//               ensure the object is not deleted during the lifetime
//               of the BamCacheRecord object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1928  3 ptr 1 1918  7 ref_ptr 1 1925  
221 14 Dtool_xqRvhwxq 0 4 231 1895 0 14 Dtool_xqRvhwxq 342 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: This variant on set_data() is provided just to allow
//               Python code to pass a 0 as the second parameter.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1928  3 ptr 1 1918  5 dummy 1 1892  
222 14 Dtool_xqRvFvYJ 0 4 232 1895 0 14 Dtool_xqRvFvYJ 222 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1926  3 out 1 1899  
223 14 Dtool_xqRvE3j3 0 4 233 1895 0 14 Dtool_xqRvE3j3 221 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 1926  3 out 1 1899  12 indent_level 1 1892  
224 14 Dtool_xqRvUKVK 0 4 233 1895 0 14 Dtool_xqRvUKVK 221 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1926  3 out 1 1899  
225 14 Dtool_xqRv5Y_g 0 7 234 1905 0 14 Dtool_xqRv5Y_g 0 0 
226 14 Dtool_xqRvhSD0 0 7 210 1924 1124 14 Dtool_xqRvhSD0 0 1 4 this 3 1928  
227 14 Dtool_xqRvCxca 0 7 211 1928 1129 14 Dtool_xqRvCxca 0 1 4 this 3 1924  
228 14 Dtool_xqRvF6go 0 7 236 1932 1150 14 Dtool_xqRvF6go 220 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
229 14 Dtool_xqRvLJj3 0 4 238 1895 0 14 Dtool_xqRvLJj3 646 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_active
//       Access: Published
//  Description: Changes the state of the active flag.  "active" means
//               that the cache should be consulted automatically on
//               loads, "not active" means that objects should be
//               loaded directly without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1932  4 flag 1 1903  
230 14 Dtool_xqRvov3M 0 6 239 1903 0 14 Dtool_xqRvov3M 695 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_active
//       Access: Published
//  Description: Returns true if the BamCache is currently active,
//               false if it is not.  "active" means that the cache
//               should be consulted automatically on loads, "not
//               active" means that objects should be loaded directly
//               without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1933  
231 14 Dtool_xqRvRUjp 0 4 240 1895 0 14 Dtool_xqRvRUjp 346 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_models
//       Access: Published
//  Description: Indicates whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1932  4 flag 1 1903  
232 14 Dtool_xqRvPFL2 0 6 241 1903 0 14 Dtool_xqRvPFL2 414 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_models
//       Access: Published
//  Description: Returns whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1933  
233 14 Dtool_xqRvoUbM 0 4 242 1895 0 14 Dtool_xqRvoUbM 332 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_textures
//       Access: Published
//  Description: Indicates whether texture files will be stored in the
//               cache, as uncompressed txo files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1932  4 flag 1 1903  
234 14 Dtool_xqRvtUl1 0 6 243 1903 0 14 Dtool_xqRvtUl1 418 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_textures
//       Access: Published
//  Description: Returns whether texture files (e.g. egg files and bam
//               files) will be stored in the cache, as txo files.
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1933  
235 14 Dtool_xqRvqUmd 0 4 244 1895 0 14 Dtool_xqRvqUmd 1143 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_compressed_textures
//       Access: Published
//  Description: Indicates whether compressed texture files will be
//               stored in the cache, as compressed txo files.  The
//               compressed data may either be generated in-CPU, via
//               the squish library, or it may be extracted from the
//               GSG after the texture has been loaded.
//
//               This may be set in conjunction with
//               set_cache_textures(), or independently of it.  If
//               set_cache_textures() is true and this is false, all
//               textures will be cached in their uncompressed form.
//               If set_cache_textures() is false and this is true,
//               only compressed textures will be cached, and they
//               will be cached in their compressed form.  If both are
//               true, all textures will be cached, in their
//               uncompressed or compressed form appropriately.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1932  4 flag 1 1903  
236 14 Dtool_xqRvMfxn 0 6 245 1903 0 14 Dtool_xqRvMfxn 475 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_compressed_textures
//       Access: Published
//  Description: Returns whether compressed texture files will be
//               stored in the cache, as compressed txo files.  See
//               set_cache_compressed_textures().
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1933  
237 14 Dtool_xqRvSDrp 0 4 246 1895 0 14 Dtool_xqRvSDrp 665 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_root
//       Access: Published
//  Description: Changes the current root pathname of the cache.  This
//               specifies where the cache files are stored on disk.
//               This should name a directory that is on a disk local
//               to the machine (not on a network-mounted disk), for
//               instance, /tmp/panda-cache or /c/panda-cache.
//
//               If the directory does not already exist, it will be
//               created as a result of this call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1932  4 root 1 1929  
238 14 Dtool_xqRvDaLL 0 7 247 1935 0 14 Dtool_xqRvDaLL 299 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_root
//       Access: Published
//  Description: Returns the current root pathname of the cache.  See
//               set_root().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1933  
239 14 Dtool_xqRvFO7v 0 4 248 1895 0 14 Dtool_xqRvFO7v 316 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_flush_time
//       Access: Published
//  Description: Specifies the time in seconds between automatic
//               flushes of the cache index.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1932  10 flush_time 1 1892  
240 14 Dtool_xqRvzd6A 0 6 249 1892 0 14 Dtool_xqRvzd6A 314 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_flush_time
//       Access: Published
//  Description: Returns the time in seconds between automatic
//               flushes of the cache index.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1933  
241 14 Dtool_xqRvBePF 0 4 250 1895 0 14 Dtool_xqRvBePF 767 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_max_kbytes
//       Access: Published
//  Description: Specifies the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  If a newly cached file
//               would exceed this size, an older file is removed from
//               the cache.
//
//               Note that in the case of multiple different processes
//               simultaneously operating on the same cache directory,
//               the actual cache size may slightly exceed this value
//               from time to time due to latency in checking between
//               the processes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1932  10 max_kbytes 1 1892  
242 14 Dtool_xqRvbqs_ 0 6 251 1892 0 14 Dtool_xqRvbqs_ 371 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_max_kbytes
//       Access: Published
//  Description: Returns the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  See
//               set_cache_max_kbytes().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1933  
243 14 Dtool_xqRvPgHj 0 4 252 1895 0 14 Dtool_xqRvPgHj 523 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_read_only
//       Access: Published
//  Description: Can be used to put the cache in read-only mode,
//               or take it out of read-only mode.  Note that if you
//               put it into read-write mode, and it discovers that
//               it does not have write access, it will put itself
//               right back into read-only mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1932  2 ro 1 1903  
244 14 Dtool_xqRvD7P3 0 6 253 1903 0 14 Dtool_xqRvD7P3 503 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_read_only
//       Access: Published
//  Description: Returns true if the cache is in read-only mode.
//               Normally, the cache starts in read-write mode.  It
//               can put itself into read-only mode automatically if
//               it discovers that it does not have write access to
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1933  
245 14 Dtool_xqRvamUZ 0 7 254 1928 1129 14 Dtool_xqRvamUZ 1211 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::lookup
//       Access: Published
//  Description: Looks up a file in the cache.  
//
//               If the file is cacheable, then regardless of whether
//               the file is found in the cache or not, this returns a
//               BamCacheRecord.  On the other hand, if the file
//               cannot be cached, returns NULL.
//
//               If record->has_data() returns true, then the file was
//               found in the cache, and you may call
//               record->extract_data() to get the object.  If
//               record->has_data() returns false, then the file was
//               not found in the cache or the cache was stale; and
//               you should reload the source file (calling
//               record->add_dependent_file() for each file loaded,
//               including the original source file), and then call
//               record->set_data() to record the resulting loaded
//               object; and finally, you should call store() to write
//               the cached record to disk.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1932  15 source_filename 1 1929  15 cache_extension 1 1891  
246 14 Dtool_xqRvztlT 0 6 255 1903 0 14 Dtool_xqRvztlT 478 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::store
//       Access: Published
//  Description: Flushes a cache entry to disk.  You must have
//               retrieved the cache record via a prior call to
//               lookup(), and then stored the data via
//               record->set_data().  Returns true on success, false
//               on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1932  6 record 1 1928  
247 14 Dtool_xqRvoxHn 0 4 256 1895 0 14 Dtool_xqRvoxHn 325 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::consider_flush_index
//       Access: Published
//  Description: Flushes the index if enough time has elapsed since
//               the index was last flushed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1932  
248 14 Dtool_xqRvUv8K 0 4 257 1895 0 14 Dtool_xqRvUv8K 258 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::flush_index
//       Access: Published
//  Description: Ensures the index is written to disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1932  
249 14 Dtool_xqRvA5ij 0 6 258 1932 0 14 Dtool_xqRvA5ij 376 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global BamCache object,
//               which is used automatically by the ModelPool and
//               TexturePool.
//////////////////////////////////////////////////////////////////// 0 
250 14 Dtool_xqRv5YaZ 0 7 267 1938 1184 14 Dtool_xqRv5YaZ 230 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1936  
251 14 Dtool_xqRv19et 0 7 267 1938 1184 14 Dtool_xqRv19et 225 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 flags 1 1892  
252 14 Dtool_xqRvMYtK 0 7 267 1938 1184 14 Dtool_xqRvMYtK 225 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
253 14 Dtool_xqRvkRhb 0 7 267 1938 1184 14 Dtool_xqRvkRhb 225 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 5 flags 1 1892  13 texture_flags 1 1892  
254 14 Dtool_xqRvERe5 0 6 268 1938 0 14 Dtool_xqRvERe5 0 2 4 this 3 1938  4 copy 1 1936  
255 14 Dtool_xqRvGDaf 0 4 269 1895 0 14 Dtool_xqRvGDaf 223 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1938  5 flags 1 1892  
256 14 Dtool_xqRvjYev 0 6 270 1892 0 14 Dtool_xqRvjYev 223 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1936  
257 14 Dtool_xqRvedgq 0 4 271 1895 0 14 Dtool_xqRvedgq 231 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1938  5 flags 1 1892  
258 14 Dtool_xqRvWo93 0 6 272 1892 0 14 Dtool_xqRvWo93 231 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1936  
259 14 Dtool_xqRvloHl 0 4 273 1895 0 14 Dtool_xqRvloHl 767 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_num_views
//       Access: Published
//  Description: Specifies the expected number of views to load for
//               the texture.  This is ignored unless TF_multiview is
//               included in texture_flags.  This must be specified
//               when loading a 3-d multiview texture, in which case
//               it is used to differentiate z levels from separate
//               views; it may be zero in the case of 2-d textures or
//               cube maps, in which case the number of views can be
//               inferred from the number of images found on disk.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1938  9 num_views 1 1892  
260 14 Dtool_xqRvLOQ8 0 6 274 1892 0 14 Dtool_xqRvLOQ8 264 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_num_views
//       Access: Published
//  Description: See set_texture_num_views().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1936  
261 14 Dtool_xqRvOzo7 0 4 275 1895 0 14 Dtool_xqRvOzo7 480 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_auto_texture_scale
//       Access: Published
//  Description: Set this flag to ATS_none, ATS_up, ATS_down, or
//               ATS_pad to control how a texture is scaled from
//               disk when it is subsequently loaded.  Set it to
//               ATS_unspecified to restore the default behavior.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1938  5 scale 1 1818  
262 14 Dtool_xqRvxpJO 0 6 276 1818 0 14 Dtool_xqRvxpJO 266 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_auto_texture_scale
//       Access: Published
//  Description: See set_auto_texture_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1936  
263 14 Dtool_xqRv0FtW 0 4 277 1895 0 14 Dtool_xqRv0FtW 221 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1936  3 out 1 1899  
264 14 Dtool_xqRvyofV 0 7 280 1923 1186 14 Dtool_xqRvyofV 221 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 source 1 1939  
265 14 Dtool_xqRvswJK 0 7 280 1923 1186 14 Dtool_xqRvswJK 221 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
266 14 Dtool_xqRvykLj 0 4 282 1895 0 14 Dtool_xqRvykLj 383 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_source
//       Access: Published
//  Description: Changes the source of future datagrams for this
//               BamReader.  This also implicitly calls init() if it
//               has not already been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1923  6 source 1 1939  
267 14 Dtool_xqRvjVTZ 0 6 283 1939 0 14 Dtool_xqRvjVTZ 324 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_source
//       Access: Published
//  Description: Returns the current source of the BamReader as set by
//               set_source() or the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1923  
268 14 Dtool_xqRvOowx 0 6 284 1903 0 14 Dtool_xqRvOowx 474 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::init
//       Access: Published
//  Description: Initializes the BamReader prior to reading any
//               objects from its source.  This includes reading the
//               Bam header.
//
//               This returns true if the BamReader successfully
//               initialized, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1923  
269 14 Dtool_xqRv7KNc 0 4 285 1895 0 14 Dtool_xqRv7KNc 1496 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_aux_data
//       Access: Published
//  Description: Associates an arbitrary block of data with the
//               indicated object (or NULL), and the indicated name.
//
//               This is intended to provide a place for temporary
//               storage for objects reading themselves from the bam
//               file.  To use it, inherit from BamReader::AuxData and
//               store whatever data you like there.  Then associate
//               your AuxData with the object as it is being read with
//               set_aux_data().  You may later set the aux data to
//               NULL to remove it; or it will automatically be
//               removed (and deleted) after finalize() is called for
//               the object in question.
//
//               If the TypedWritable pointer is NULL, the the aux
//               data is stored globally for the BamReader in general.
//               This pointer is available to any bam objects, and
//               will not be automatically removed until the BamReader
//               itself destructs.
//
//               In either case, the name is just an arbitrary
//               user-defined key.  If there is already a data pointer
//               stored for the obj/name pair, that data pointer will
//               be replaced (and deleted).
//////////////////////////////////////////////////////////////////// 4 4 this 3 1923  3 obj 1 1918  4 name 1 1891  4 data 1 1940  
270 14 Dtool_xqRvGGPG 0 7 286 1940 0 14 Dtool_xqRvGGPG 413 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_aux_data
//       Access: Published
//  Description: Returns the pointer previously associated with the
//               bam reader by a previous call to set_aux_data(), or
//               NULL if data with the indicated key has not been set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1942  3 obj 1 1918  4 name 1 1891  
271 14 Dtool_xqRvlMp4 0 6 287 1929 0 14 Dtool_xqRvlMp4 457 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamReader should
//               contain the name of the file.  This enables the
//               reader to interpret pathnames in the BAM as relative
//               to the directory containing the BAM.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1942  
272 14 Dtool_xqRvQgUs 0 6 288 1936 0 14 Dtool_xqRvQgUs 330 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_loader_options
//       Access: Published
//  Description: Returns the LoaderOptions passed to the loader when
//               the model was requested, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1942  
273 14 Dtool_xqRvoG4k 0 4 289 1895 0 14 Dtool_xqRvoG4k 276 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_loader_options
//       Access: Published
//  Description: Specifies the LoaderOptions for this BamReader.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1923  7 options 1 1936  
274 14 Dtool_xqRvkEg5 0 6 290 1918 0 14 Dtool_xqRvkEg5 1569 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  If the
//               object type is known, a new object of the appropriate
//               type is created and returned; otherwise, NULL is
//               returned.  NULL is also returned when the end of the
//               file is reached.  is_eof() may be called to
//               differentiate between these two cases.
//
//               This may be called repeatedly to extract out all the
//               objects in the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is retrieved directly
//               from the Bam file: the root of the scene graph.  The
//               remaining objects will all be retrieved recursively
//               by the first object.
//
//               Note that the object returned may not yet be
//               complete.  In particular, some of its pointers may
//               not be filled in; you must call resolve() to fill in
//               all the available pointers before you can safely use
//               any objects returned by read_object().
//
//               This flavor of read_object() requires the caller to
//               know what type of object it has received in order to
//               properly manage the reference counts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1923  
275 14 Dtool_xqRvdeRo 0 6 291 1903 0 14 Dtool_xqRvdeRo 375 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::is_eof
//       Access: Published
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1942  
276 14 Dtool_xqRvkMdY 0 6 292 1903 0 14 Dtool_xqRvkMdY 935 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::resolve
//       Access: Published
//  Description: This may be called at any time during processing of
//               the Bam file to resolve all the known pointers so
//               far.  It is usually called at the end of the
//               processing, after all objects have been read, which
//               is generally the best time to call it.
//
//               This must be called at least once after reading a
//               particular object via get_object() in order to
//               validate that object.
//
//               The return value is true if all objects have been
//               resolved, or false if some objects are still
//               outstanding (in which case you will need to call
//               resolve() again later).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1923  
277 14 Dtool_xqRv7ine 0 6 293 1903 0 14 Dtool_xqRv7ine 724 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::change_pointer
//       Access: Published
//  Description: Indicates that an object recently read from the bam
//               stream should be replaced with a new object.  Any
//               future occurrences of the original object in the
//               stream will henceforth return the new object instead.
//
//               The return value is true if the replacement was
//               successfully made, or false if the object was not
//               read from the stream (or if change_pointer had
//               already been called on it).
//////////////////////////////////////////////////////////////////// 3 4 this 3 1923  12 orig_pointer 1 1919  11 new_pointer 1 1919  
278 14 Dtool_xqRvHY9j 0 6 294 1892 0 14 Dtool_xqRvHY9j 316 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_major_ver
//       Access: Published
//  Description: Returns the major version number of the Bam file
//               currently being read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1942  
279 14 Dtool_xqRvyH0T 0 6 295 1892 0 14 Dtool_xqRvyH0T 316 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_minor_ver
//       Access: Published
//  Description: Returns the minor version number of the Bam file
//               currently being read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1942  
280 14 Dtool_xqRvTPGP 0 6 296 1828 0 14 Dtool_xqRvTPGP 528 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read.  This does not imply that
//               every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1942  
281 14 Dtool_xqRvIek2 0 6 297 1903 0 14 Dtool_xqRvIek2 489 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file stores all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This is determined by the compilation flags
//               of the version of Panda that generated this file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1942  
282 14 Dtool_xqRvDBcf 0 6 298 1892 0 14 Dtool_xqRvDBcf 440 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_major_ver
//       Access: Published
//  Description: Returns the major version number of Bam files
//               supported by the current code base.  This must match
//               get_file_major_ver() in order to successfully read a
//               file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1942  
283 14 Dtool_xqRvbCCi 0 6 299 1892 0 14 Dtool_xqRvbCCi 450 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_minor_ver
//       Access: Published
//  Description: Returns the minor version number of Bam files
//               supported by the current code base.  This must match
//               or exceed get_file_minor_ver() in order to
//               successfully read a file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1942  
284 14 Dtool_xqRv8uzO 0 7 301 1922 1206 14 Dtool_xqRv8uzO 221 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 target 1 1944  
285 14 Dtool_xqRvpd8a 0 7 301 1922 1206 14 Dtool_xqRvpd8a 221 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
286 14 Dtool_xqRvpGaG 0 4 303 1895 0 14 Dtool_xqRvpGaG 394 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_target
//       Access: Published
//  Description: Changes the destination of future datagrams written
//               by the BamWriter.  This also implicitly calls init()
//               if it has not already been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1922  6 target 1 1944  
287 14 Dtool_xqRvcRQs 0 6 304 1944 0 14 Dtool_xqRvcRQs 324 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_target
//       Access: Published
//  Description: Returns the current target of the BamWriter as set by
//               set_target() or the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1922  
288 14 Dtool_xqRvyJ_l 0 6 305 1903 0 14 Dtool_xqRvyJ_l 483 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::init
//       Access: Published
//  Description: Initializes the BamWriter prior to writing any
//               objects to its output stream.  This includes writing
//               out the Bam header.
//
//               This returns true if the BamWriter successfully
//               initialized, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1922  
289 14 Dtool_xqRv2a2s 0 6 306 1929 0 14 Dtool_xqRv2a2s 455 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamWriter should
//               contain the name of the file.  This enables the
//               writer to convert pathnames in the BAM to relative
//               to the directory containing the BAM.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1946  
290 14 Dtool_xqRvaCkL 0 6 307 1903 0 14 Dtool_xqRvaCkL 1153 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::write_object
//       Access: Published
//  Description: Writes a single object to the Bam file, so that the
//               BamReader::read_object() can later correctly restore
//               the object and all its pointers.
//
//               This implicitly also writes any additional objects
//               this object references (if they haven't already been
//               written), so that pointers may be fully resolved.
//
//               This may be called repeatedly to write a sequence of
//               objects to the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is written directly from
//               the Bam file: the root of the scene graph.  The
//               remaining objects will all be written recursively by
//               the first object.
//
//               Returns true if the object is successfully written,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1922  3 obj 1 1919  
291 14 Dtool_xqRvgrPZ 0 6 308 1903 0 14 Dtool_xqRvgrPZ 408 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::has_object
//       Access: Published
//  Description: Returns true if the object has previously been
//               written (or at least requested to be written) to the
//               bam file, or false if we've never heard of it before.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1946  3 obj 1 1919  
292 14 Dtool_xqRvyWRG 0 4 309 1895 0 14 Dtool_xqRvyWRG 307 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::flush
//       Access: Published
//  Description: Ensures that all data written thus far is manifested
//               on the output stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1922  
293 14 Dtool_xqRvAdVD 0 6 310 1828 0 14 Dtool_xqRvAdVD 531 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being written.  This does not imply
//               that every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1946  
294 14 Dtool_xqRvroyq 0 6 311 1903 0 14 Dtool_xqRvroyq 531 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_stdfloat_double
//       Access: Published
//  Description: Returns true if the file will store all "standard"
//               floats as 64-bit doubles, or false if they are 32-bit
//               floats.  This isn't runtime settable; it's based on
//               the compilation flags of the version of Panda that
//               generated this file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1946  
295 14 Dtool_xqRvvXrV 0 6 312 1830 0 14 Dtool_xqRvvXrV 462 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_texture_mode
//       Access: Published
//  Description: Returns the BamTextureMode preference indicated by
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1946  
296 14 Dtool_xqRveMfu 0 4 313 1895 0 14 Dtool_xqRveMfu 453 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_file_texture_mode
//       Access: Published
//  Description: Changes the BamTextureMode preference for
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1922  17 file_texture_mode 1 1830  
297 14 Dtool_xqRvY8n1 0 7 315 1948 1225 14 Dtool_xqRvY8n1 0 0 
298 14 Dtool_xqRvd8dF 0 7 315 1948 1225 14 Dtool_xqRvd8dF 0 1 4 copy 1 1949  
299 14 Dtool_xqRvQKNp 0 7 315 1948 1225 14 Dtool_xqRvQKNp 0 1 10 init_value 1 1890  
300 14 Dtool_xqRvJZTb 0 6 316 1948 0 14 Dtool_xqRvJZTb 0 2 4 this 3 1948  4 copy 1 1949  
301 14 Dtool_xqRvXYNA 0 7 317 1948 1225 14 Dtool_xqRvXYNA 0 0 
302 14 Dtool_xqRvYhyY 0 7 318 1948 1225 14 Dtool_xqRvYhyY 0 0 
303 14 Dtool_xqRvj81C 0 7 319 1948 1225 14 Dtool_xqRvj81C 0 1 7 on_bits 1 1892  
304 14 Dtool_xqRvv20_ 0 7 320 1948 1225 14 Dtool_xqRvv20_ 0 1 5 index 1 1892  
305 14 Dtool_xqRv29fW 0 7 321 1948 1225 14 Dtool_xqRv29fW 0 2 7 low_bit 1 1892  4 size 1 1892  
306 14 Dtool_xqRvjM9n 0 6 323 1903 0 14 Dtool_xqRvjM9n 0 0 
307 14 Dtool_xqRvLPok 0 6 324 1892 0 14 Dtool_xqRvLPok 0 0 
308 14 Dtool_xqRvLMWC 0 6 325 1892 0 14 Dtool_xqRvLMWC 0 0 
309 14 Dtool_xqRvoZD7 0 6 326 1903 0 14 Dtool_xqRvoZD7 0 2 4 this 3 1949  5 index 1 1892  
310 14 Dtool_xqRvHvH5 0 4 327 1895 0 14 Dtool_xqRvHvH5 0 2 4 this 3 1948  5 index 1 1892  
311 14 Dtool_xqRvDlS1 0 4 328 1895 0 14 Dtool_xqRvDlS1 0 2 4 this 3 1948  5 index 1 1892  
312 14 Dtool_xqRvwyI5 0 4 329 1895 0 14 Dtool_xqRvwyI5 0 3 4 this 3 1948  5 index 1 1892  5 value 1 1903  
313 14 Dtool_xqRvpD_I 0 6 330 1903 0 14 Dtool_xqRvpD_I 0 1 4 this 3 1949  
314 14 Dtool_xqRvrRHW 0 6 331 1903 0 14 Dtool_xqRvrRHW 0 1 4 this 3 1949  
315 14 Dtool_xqRvvAiO 0 6 332 1890 0 14 Dtool_xqRvvAiO 0 3 4 this 3 1949  7 low_bit 1 1892  4 size 1 1892  
316 14 Dtool_xqRvhlDh 0 4 333 1895 0 14 Dtool_xqRvhlDh 0 4 4 this 3 1948  5 value 1 1890  7 low_bit 1 1892  4 size 1 1892  
317 14 Dtool_xqRvrEJ7 0 6 334 1903 0 14 Dtool_xqRvrEJ7 0 3 4 this 3 1949  7 low_bit 1 1892  4 size 1 1892  
318 14 Dtool_xqRvVXDN 0 6 335 1903 0 14 Dtool_xqRvVXDN 0 3 4 this 3 1949  7 low_bit 1 1892  4 size 1 1892  
319 14 Dtool_xqRvDfi2 0 4 336 1895 0 14 Dtool_xqRvDfi2 0 3 4 this 3 1948  7 low_bit 1 1892  4 size 1 1892  
320 14 Dtool_xqRvTDVh 0 4 337 1895 0 14 Dtool_xqRvTDVh 0 3 4 this 3 1948  7 low_bit 1 1892  4 size 1 1892  
321 14 Dtool_xqRv3CAw 0 4 338 1895 0 14 Dtool_xqRv3CAw 0 4 4 this 3 1948  5 value 1 1903  7 low_bit 1 1892  4 size 1 1892  
322 14 Dtool_xqRvKtug 0 6 339 1890 0 14 Dtool_xqRvKtug 0 1 4 this 3 1949  
323 14 Dtool_xqRvqWNx 0 4 340 1895 0 14 Dtool_xqRvqWNx 0 2 4 this 3 1948  5 value 1 1890  
324 14 Dtool_xqRvwNdD 0 6 341 1892 0 14 Dtool_xqRvwNdD 0 1 4 this 3 1949  
325 14 Dtool_xqRvNq9C 0 6 342 1892 0 14 Dtool_xqRvNq9C 0 1 4 this 3 1949  
326 14 Dtool_xqRvPG3h 0 6 343 1892 0 14 Dtool_xqRvPG3h 0 1 4 this 3 1949  
327 14 Dtool_xqRvyV9D 0 6 344 1892 0 14 Dtool_xqRvyV9D 0 1 4 this 3 1949  
328 14 Dtool_xqRv0xJw 0 6 345 1892 0 14 Dtool_xqRv0xJw 0 1 4 this 3 1949  
329 14 Dtool_xqRvpjpy 0 6 346 1892 0 14 Dtool_xqRvpjpy 0 1 4 this 3 1949  
330 14 Dtool_xqRvTJ13 0 6 347 1892 0 14 Dtool_xqRvTJ13 0 2 4 this 3 1949  7 low_bit 1 1892  
331 14 Dtool_xqRvGlyF 0 4 348 1895 0 14 Dtool_xqRvGlyF 0 1 4 this 3 1948  
332 14 Dtool_xqRvdBzV 0 6 349 1903 0 14 Dtool_xqRvdBzV 0 2 4 this 3 1949  5 other 1 1949  
333 14 Dtool_xqRvYjCO 0 4 350 1895 0 14 Dtool_xqRvYjCO 0 1 4 this 3 1948  
334 14 Dtool_xqRvCJ36 0 4 351 1895 0 14 Dtool_xqRvCJ36 0 2 4 this 3 1949  3 out 1 1899  
335 14 Dtool_xqRvKhMC 0 4 352 1895 0 14 Dtool_xqRvKhMC 0 3 4 this 3 1949  3 out 1 1899  12 spaces_every 1 1892  
336 14 Dtool_xqRvYovn 0 4 352 1895 0 14 Dtool_xqRvYovn 0 2 4 this 3 1949  3 out 1 1899  
337 14 Dtool_xqRvwLf9 0 4 353 1895 0 14 Dtool_xqRvwLf9 0 3 4 this 3 1949  3 out 1 1899  12 spaces_every 1 1892  
338 14 Dtool_xqRvN0AH 0 4 353 1895 0 14 Dtool_xqRvN0AH 0 2 4 this 3 1949  3 out 1 1899  
339 14 Dtool_xqRv4_Uj 0 4 354 1895 0 14 Dtool_xqRv4_Uj 0 3 4 this 3 1949  3 out 1 1899  12 indent_level 1 1892  
340 14 Dtool_xqRvK9Ho 0 4 354 1895 0 14 Dtool_xqRvK9Ho 0 2 4 this 3 1949  3 out 1 1899  
341 14 Dtool_xqRv_rYC 0 6 355 1903 0 14 Dtool_xqRv_rYC 0 2 4 this 3 1949  5 other 1 1949  
342 14 Dtool_xqRvnpIW 0 6 356 1903 0 14 Dtool_xqRvnpIW 0 2 4 this 3 1949  5 other 1 1949  
343 14 Dtool_xqRvbyVY 0 6 357 1903 0 14 Dtool_xqRvbyVY 0 2 4 this 3 1949  5 other 1 1949  
344 14 Dtool_xqRvKgVU 0 6 358 1892 0 14 Dtool_xqRvKgVU 0 2 4 this 3 1949  5 other 1 1949  
345 14 Dtool_xqRvvwt_ 0 7 359 1948 1225 14 Dtool_xqRvvwt_ 0 2 4 this 3 1949  5 other 1 1949  
346 14 Dtool_xqRvD3V0 0 7 360 1948 1225 14 Dtool_xqRvD3V0 0 2 4 this 3 1949  5 other 1 1949  
347 14 Dtool_xqRvx0NX 0 7 361 1948 1225 14 Dtool_xqRvx0NX 0 2 4 this 3 1949  5 other 1 1949  
348 14 Dtool_xqRvdjF_ 0 7 362 1948 1225 14 Dtool_xqRvdjF_ 0 1 4 this 3 1949  
349 14 Dtool_xqRvGBn_ 0 7 363 1948 1225 14 Dtool_xqRvGBn_ 0 2 4 this 3 1949  5 shift 1 1892  
350 14 Dtool_xqRvBEfL 0 7 364 1948 1225 14 Dtool_xqRvBEfL 0 2 4 this 3 1949  5 shift 1 1892  
351 14 Dtool_xqRv8phA 0 6 365 1948 0 14 Dtool_xqRv8phA 0 2 4 this 3 1948  5 other 1 1949  
352 14 Dtool_xqRvfgJ2 0 6 366 1948 0 14 Dtool_xqRvfgJ2 0 2 4 this 3 1948  5 other 1 1949  
353 14 Dtool_xqRvNmBZ 0 6 367 1948 0 14 Dtool_xqRvNmBZ 0 2 4 this 3 1948  5 other 1 1949  
354 14 Dtool_xqRvQIZr 0 6 368 1948 0 14 Dtool_xqRvQIZr 0 2 4 this 3 1948  5 shift 1 1892  
355 14 Dtool_xqRveTR4 0 6 369 1948 0 14 Dtool_xqRveTR4 0 2 4 this 3 1948  5 shift 1 1892  
356 14 Dtool_xqRvZhUs 0 4 370 1895 0 14 Dtool_xqRvZhUs 0 1 4 this 3 1948  
357 14 Dtool_xqRv6S0S 0 4 371 1895 0 14 Dtool_xqRv6S0S 0 1 4 this 3 1948  
358 14 Dtool_xqRvccAh 0 7 372 1948 1225 14 Dtool_xqRvccAh 0 1 4 this 3 1949  
359 14 Dtool_xqRv3HQS 0 7 373 1948 1225 14 Dtool_xqRv3HQS 0 1 4 this 3 1949  
360 14 Dtool_xqRvuOp5 0 7 374 1948 1225 14 Dtool_xqRvuOp5 0 1 4 this 3 1949  
361 14 Dtool_xqRvdxsS 0 7 374 1948 1225 14 Dtool_xqRvdxsS 0 2 4 this 3 1949  5 other 1 1949  
362 14 Dtool_xqRvOp9c 0 7 374 1948 1225 14 Dtool_xqRvOp9c 0 2 4 this 3 1949  5 index 1 1892  
363 14 Dtool_xqRvjXNC 0 7 375 1948 1225 14 Dtool_xqRvjXNC 0 1 4 this 3 1949  
364 14 Dtool_xqRvl87a 0 7 375 1948 1225 14 Dtool_xqRvl87a 0 2 4 this 3 1949  5 other 1 1949  
365 14 Dtool_xqRv5AUL 0 7 375 1948 1225 14 Dtool_xqRv5AUL 0 2 4 this 3 1949  5 index 1 1892  
366 14 Dtool_xqRvEmuv 0 6 376 1892 0 14 Dtool_xqRvEmuv 0 1 4 this 3 1949  
367 14 Dtool_xqRv8p19 0 6 377 1903 0 14 Dtool_xqRv8p19 0 1 4 this 3 1949  
368 14 Dtool_xqRvf5Rj 0 7 378 1905 0 14 Dtool_xqRvf5Rj 0 0 
369 14 Dtool_xqRvnVQd 0 7 380 1951 1289 14 Dtool_xqRvnVQd 0 0 
370 14 Dtool_xqRv7gMO 0 7 380 1951 1289 14 Dtool_xqRv7gMO 0 1 4 copy 1 1952  
371 14 Dtool_xqRv0eoo 0 7 380 1951 1289 14 Dtool_xqRv0eoo 0 1 10 init_value 1 1889  
372 14 Dtool_xqRvCaYM 0 6 381 1951 0 14 Dtool_xqRvCaYM 0 2 4 this 3 1951  4 copy 1 1952  
373 14 Dtool_xqRvRObZ 0 7 382 1951 1289 14 Dtool_xqRvRObZ 0 0 
374 14 Dtool_xqRvjEzX 0 7 383 1951 1289 14 Dtool_xqRvjEzX 0 0 
375 14 Dtool_xqRvIQak 0 7 384 1951 1289 14 Dtool_xqRvIQak 0 1 7 on_bits 1 1892  
376 14 Dtool_xqRvsGZS 0 7 385 1951 1289 14 Dtool_xqRvsGZS 0 1 5 index 1 1892  
377 14 Dtool_xqRvOgvR 0 7 386 1951 1289 14 Dtool_xqRvOgvR 0 2 7 low_bit 1 1892  4 size 1 1892  
378 14 Dtool_xqRv6pB9 0 6 388 1903 0 14 Dtool_xqRv6pB9 0 0 
379 14 Dtool_xqRvyO9U 0 6 389 1892 0 14 Dtool_xqRvyO9U 0 0 
380 14 Dtool_xqRvR9aU 0 6 390 1892 0 14 Dtool_xqRvR9aU 0 0 
381 14 Dtool_xqRve0SD 0 6 391 1903 0 14 Dtool_xqRve0SD 0 2 4 this 3 1952  5 index 1 1892  
382 14 Dtool_xqRvd8Sx 0 4 392 1895 0 14 Dtool_xqRvd8Sx 0 2 4 this 3 1951  5 index 1 1892  
383 14 Dtool_xqRveFOW 0 4 393 1895 0 14 Dtool_xqRveFOW 0 2 4 this 3 1951  5 index 1 1892  
384 14 Dtool_xqRvdoR6 0 4 394 1895 0 14 Dtool_xqRvdoR6 0 3 4 this 3 1951  5 index 1 1892  5 value 1 1903  
385 14 Dtool_xqRvJyi2 0 6 395 1903 0 14 Dtool_xqRvJyi2 0 1 4 this 3 1952  
386 14 Dtool_xqRvKdtD 0 6 396 1903 0 14 Dtool_xqRvKdtD 0 1 4 this 3 1952  
387 14 Dtool_xqRvvCn_ 0 6 397 1889 0 14 Dtool_xqRvvCn_ 0 3 4 this 3 1952  7 low_bit 1 1892  4 size 1 1892  
388 14 Dtool_xqRvVp78 0 4 398 1895 0 14 Dtool_xqRvVp78 0 4 4 this 3 1951  5 value 1 1889  7 low_bit 1 1892  4 size 1 1892  
389 14 Dtool_xqRv5NS8 0 6 399 1903 0 14 Dtool_xqRv5NS8 0 3 4 this 3 1952  7 low_bit 1 1892  4 size 1 1892  
390 14 Dtool_xqRv7Fky 0 6 400 1903 0 14 Dtool_xqRv7Fky 0 3 4 this 3 1952  7 low_bit 1 1892  4 size 1 1892  
391 14 Dtool_xqRvDAOF 0 4 401 1895 0 14 Dtool_xqRvDAOF 0 3 4 this 3 1951  7 low_bit 1 1892  4 size 1 1892  
392 14 Dtool_xqRvU65s 0 4 402 1895 0 14 Dtool_xqRvU65s 0 3 4 this 3 1951  7 low_bit 1 1892  4 size 1 1892  
393 14 Dtool_xqRvDZHW 0 4 403 1895 0 14 Dtool_xqRvDZHW 0 4 4 this 3 1951  5 value 1 1903  7 low_bit 1 1892  4 size 1 1892  
394 14 Dtool_xqRviD5O 0 6 404 1889 0 14 Dtool_xqRviD5O 0 1 4 this 3 1952  
395 14 Dtool_xqRvERWc 0 4 405 1895 0 14 Dtool_xqRvERWc 0 2 4 this 3 1951  5 value 1 1889  
396 14 Dtool_xqRvb3be 0 6 406 1892 0 14 Dtool_xqRvb3be 0 1 4 this 3 1952  
397 14 Dtool_xqRvKHao 0 6 407 1892 0 14 Dtool_xqRvKHao 0 1 4 this 3 1952  
398 14 Dtool_xqRvRr4t 0 6 408 1892 0 14 Dtool_xqRvRr4t 0 1 4 this 3 1952  
399 14 Dtool_xqRvxYbh 0 6 409 1892 0 14 Dtool_xqRvxYbh 0 1 4 this 3 1952  
400 14 Dtool_xqRv_tIX 0 6 410 1892 0 14 Dtool_xqRv_tIX 0 1 4 this 3 1952  
401 14 Dtool_xqRvRLKI 0 6 411 1892 0 14 Dtool_xqRvRLKI 0 1 4 this 3 1952  
402 14 Dtool_xqRvgFMA 0 6 412 1892 0 14 Dtool_xqRvgFMA 0 2 4 this 3 1952  7 low_bit 1 1892  
403 14 Dtool_xqRvLld4 0 4 413 1895 0 14 Dtool_xqRvLld4 0 1 4 this 3 1951  
404 14 Dtool_xqRvjIgk 0 6 414 1903 0 14 Dtool_xqRvjIgk 0 2 4 this 3 1952  5 other 1 1952  
405 14 Dtool_xqRvYEpe 0 4 415 1895 0 14 Dtool_xqRvYEpe 0 1 4 this 3 1951  
406 14 Dtool_xqRv3eSz 0 4 416 1895 0 14 Dtool_xqRv3eSz 0 2 4 this 3 1952  3 out 1 1899  
407 14 Dtool_xqRvBOXy 0 4 417 1895 0 14 Dtool_xqRvBOXy 0 3 4 this 3 1952  3 out 1 1899  12 spaces_every 1 1892  
408 14 Dtool_xqRv8596 0 4 417 1895 0 14 Dtool_xqRv8596 0 2 4 this 3 1952  3 out 1 1899  
409 14 Dtool_xqRvHJUc 0 4 418 1895 0 14 Dtool_xqRvHJUc 0 3 4 this 3 1952  3 out 1 1899  12 spaces_every 1 1892  
410 14 Dtool_xqRv6TeI 0 4 418 1895 0 14 Dtool_xqRv6TeI 0 2 4 this 3 1952  3 out 1 1899  
411 14 Dtool_xqRvB_7k 0 4 419 1895 0 14 Dtool_xqRvB_7k 0 3 4 this 3 1952  3 out 1 1899  12 indent_level 1 1892  
412 14 Dtool_xqRvHvA7 0 4 419 1895 0 14 Dtool_xqRvHvA7 0 2 4 this 3 1952  3 out 1 1899  
413 14 Dtool_xqRvmOwJ 0 6 420 1903 0 14 Dtool_xqRvmOwJ 0 2 4 this 3 1952  5 other 1 1952  
414 14 Dtool_xqRvk_DB 0 6 421 1903 0 14 Dtool_xqRvk_DB 0 2 4 this 3 1952  5 other 1 1952  
415 14 Dtool_xqRvj58v 0 6 422 1903 0 14 Dtool_xqRvj58v 0 2 4 this 3 1952  5 other 1 1952  
416 14 Dtool_xqRvp_4v 0 6 423 1892 0 14 Dtool_xqRvp_4v 0 2 4 this 3 1952  5 other 1 1952  
417 14 Dtool_xqRvgBiE 0 7 424 1951 1289 14 Dtool_xqRvgBiE 0 2 4 this 3 1952  5 other 1 1952  
418 14 Dtool_xqRvm5Yo 0 7 425 1951 1289 14 Dtool_xqRvm5Yo 0 2 4 this 3 1952  5 other 1 1952  
419 14 Dtool_xqRvkh7V 0 7 426 1951 1289 14 Dtool_xqRvkh7V 0 2 4 this 3 1952  5 other 1 1952  
420 14 Dtool_xqRv0pXy 0 7 427 1951 1289 14 Dtool_xqRv0pXy 0 1 4 this 3 1952  
421 14 Dtool_xqRv8uW_ 0 7 428 1951 1289 14 Dtool_xqRv8uW_ 0 2 4 this 3 1952  5 shift 1 1892  
422 14 Dtool_xqRv62jA 0 7 429 1951 1289 14 Dtool_xqRv62jA 0 2 4 this 3 1952  5 shift 1 1892  
423 14 Dtool_xqRvRRDL 0 6 430 1951 0 14 Dtool_xqRvRRDL 0 2 4 this 3 1951  5 other 1 1952  
424 14 Dtool_xqRvfJ5u 0 6 431 1951 0 14 Dtool_xqRvfJ5u 0 2 4 this 3 1951  5 other 1 1952  
425 14 Dtool_xqRvdxcc 0 6 432 1951 0 14 Dtool_xqRvdxcc 0 2 4 this 3 1951  5 other 1 1952  
426 14 Dtool_xqRvP4Dt 0 6 433 1951 0 14 Dtool_xqRvP4Dt 0 2 4 this 3 1951  5 shift 1 1892  
427 14 Dtool_xqRvIwQv 0 6 434 1951 0 14 Dtool_xqRvIwQv 0 2 4 this 3 1951  5 shift 1 1892  
428 14 Dtool_xqRv_AEu 0 4 435 1895 0 14 Dtool_xqRv_AEu 0 1 4 this 3 1951  
429 14 Dtool_xqRvXFrF 0 4 436 1895 0 14 Dtool_xqRvXFrF 0 1 4 this 3 1951  
430 14 Dtool_xqRvYU4u 0 7 437 1951 1289 14 Dtool_xqRvYU4u 0 1 4 this 3 1952  
431 14 Dtool_xqRv5nqX 0 7 438 1951 1289 14 Dtool_xqRv5nqX 0 1 4 this 3 1952  
432 14 Dtool_xqRvWEPP 0 7 439 1951 1289 14 Dtool_xqRvWEPP 0 1 4 this 3 1952  
433 14 Dtool_xqRvHbN9 0 7 439 1951 1289 14 Dtool_xqRvHbN9 0 2 4 this 3 1952  5 other 1 1952  
434 14 Dtool_xqRvDpyT 0 7 439 1951 1289 14 Dtool_xqRvDpyT 0 2 4 this 3 1952  5 index 1 1892  
435 14 Dtool_xqRveUY6 0 7 440 1951 1289 14 Dtool_xqRveUY6 0 1 4 this 3 1952  
436 14 Dtool_xqRvyau5 0 7 440 1951 1289 14 Dtool_xqRvyau5 0 2 4 this 3 1952  5 other 1 1952  
437 14 Dtool_xqRviRhU 0 7 440 1951 1289 14 Dtool_xqRviRhU 0 2 4 this 3 1952  5 index 1 1892  
438 14 Dtool_xqRvGYJg 0 6 441 1892 0 14 Dtool_xqRvGYJg 0 1 4 this 3 1952  
439 14 Dtool_xqRvJcVa 0 6 442 1903 0 14 Dtool_xqRvJcVa 0 1 4 this 3 1952  
440 14 Dtool_xqRvq17v 0 7 443 1905 0 14 Dtool_xqRvq17v 0 0 
441 14 Dtool_xqRvU9bE 0 7 445 1954 1353 14 Dtool_xqRvU9bE 0 0 
442 14 Dtool_xqRv5ezH 0 7 445 1954 1353 14 Dtool_xqRv5ezH 0 1 4 copy 1 1955  
443 14 Dtool_xqRvTcCB 0 7 445 1954 1353 14 Dtool_xqRvTcCB 0 1 10 init_value 1 1957  
444 14 Dtool_xqRv62Cv 0 6 446 1954 0 14 Dtool_xqRv62Cv 0 2 4 this 3 1954  4 copy 1 1955  
445 14 Dtool_xqRv6XLs 0 7 447 1954 1353 14 Dtool_xqRv6XLs 0 0 
446 14 Dtool_xqRvj7E0 0 7 448 1954 1353 14 Dtool_xqRvj7E0 0 0 
447 14 Dtool_xqRvRJ3I 0 7 449 1954 1353 14 Dtool_xqRvRJ3I 0 1 7 on_bits 1 1892  
448 14 Dtool_xqRvfjxv 0 7 450 1954 1353 14 Dtool_xqRvfjxv 0 1 5 index 1 1892  
449 14 Dtool_xqRv6MsD 0 7 451 1954 1353 14 Dtool_xqRv6MsD 0 2 7 low_bit 1 1892  4 size 1 1892  
450 14 Dtool_xqRv3EZO 0 6 453 1903 0 14 Dtool_xqRv3EZO 0 0 
451 14 Dtool_xqRvDK5H 0 6 454 1892 0 14 Dtool_xqRvDK5H 0 0 
452 14 Dtool_xqRvgs2D 0 6 455 1892 0 14 Dtool_xqRvgs2D 0 0 
453 14 Dtool_xqRvC4y6 0 6 456 1903 0 14 Dtool_xqRvC4y6 0 2 4 this 3 1955  5 index 1 1892  
454 14 Dtool_xqRvZ9qJ 0 4 457 1895 0 14 Dtool_xqRvZ9qJ 0 2 4 this 3 1954  5 index 1 1892  
455 14 Dtool_xqRvPD_7 0 4 458 1895 0 14 Dtool_xqRvPD_7 0 2 4 this 3 1954  5 index 1 1892  
456 14 Dtool_xqRveONW 0 4 459 1895 0 14 Dtool_xqRveONW 0 3 4 this 3 1954  5 index 1 1892  5 value 1 1903  
457 14 Dtool_xqRv88_Z 0 6 460 1903 0 14 Dtool_xqRv88_Z 0 1 4 this 3 1955  
458 14 Dtool_xqRvS_1K 0 6 461 1903 0 14 Dtool_xqRvS_1K 0 1 4 this 3 1955  
459 14 Dtool_xqRvDBje 0 6 462 1957 0 14 Dtool_xqRvDBje 0 3 4 this 3 1955  7 low_bit 1 1892  4 size 1 1892  
460 14 Dtool_xqRvu4q5 0 4 463 1895 0 14 Dtool_xqRvu4q5 0 4 4 this 3 1954  5 value 1 1957  7 low_bit 1 1892  4 size 1 1892  
461 14 Dtool_xqRvdWSm 0 6 464 1903 0 14 Dtool_xqRvdWSm 0 3 4 this 3 1955  7 low_bit 1 1892  4 size 1 1892  
462 14 Dtool_xqRv9utt 0 6 465 1903 0 14 Dtool_xqRv9utt 0 3 4 this 3 1955  7 low_bit 1 1892  4 size 1 1892  
463 14 Dtool_xqRv1U5K 0 4 466 1895 0 14 Dtool_xqRv1U5K 0 3 4 this 3 1954  7 low_bit 1 1892  4 size 1 1892  
464 14 Dtool_xqRvbjY5 0 4 467 1895 0 14 Dtool_xqRvbjY5 0 3 4 this 3 1954  7 low_bit 1 1892  4 size 1 1892  
465 14 Dtool_xqRvgM5H 0 4 468 1895 0 14 Dtool_xqRvgM5H 0 4 4 this 3 1954  5 value 1 1903  7 low_bit 1 1892  4 size 1 1892  
466 14 Dtool_xqRv8DhL 0 6 469 1957 0 14 Dtool_xqRv8DhL 0 1 4 this 3 1955  
467 14 Dtool_xqRvqVn_ 0 4 470 1895 0 14 Dtool_xqRvqVn_ 0 2 4 this 3 1954  5 value 1 1957  
468 14 Dtool_xqRv4Wds 0 6 471 1892 0 14 Dtool_xqRv4Wds 0 1 4 this 3 1955  
469 14 Dtool_xqRvjQFl 0 6 472 1892 0 14 Dtool_xqRvjQFl 0 1 4 this 3 1955  
470 14 Dtool_xqRve7aR 0 6 473 1892 0 14 Dtool_xqRve7aR 0 1 4 this 3 1955  
471 14 Dtool_xqRvCwok 0 6 474 1892 0 14 Dtool_xqRvCwok 0 1 4 this 3 1955  
472 14 Dtool_xqRvBx_b 0 6 475 1892 0 14 Dtool_xqRvBx_b 0 1 4 this 3 1955  
473 14 Dtool_xqRvT2DD 0 6 476 1892 0 14 Dtool_xqRvT2DD 0 1 4 this 3 1955  
474 14 Dtool_xqRvF8hO 0 6 477 1892 0 14 Dtool_xqRvF8hO 0 2 4 this 3 1955  7 low_bit 1 1892  
475 14 Dtool_xqRvZ9Iu 0 4 478 1895 0 14 Dtool_xqRvZ9Iu 0 1 4 this 3 1954  
476 14 Dtool_xqRvSAaD 0 6 479 1903 0 14 Dtool_xqRvSAaD 0 2 4 this 3 1955  5 other 1 1955  
477 14 Dtool_xqRvoQig 0 4 480 1895 0 14 Dtool_xqRvoQig 0 1 4 this 3 1954  
478 14 Dtool_xqRvT6y9 0 4 481 1895 0 14 Dtool_xqRvT6y9 0 2 4 this 3 1955  3 out 1 1899  
479 14 Dtool_xqRvEmrZ 0 4 482 1895 0 14 Dtool_xqRvEmrZ 0 3 4 this 3 1955  3 out 1 1899  12 spaces_every 1 1892  
480 14 Dtool_xqRv8bPK 0 4 482 1895 0 14 Dtool_xqRv8bPK 0 2 4 this 3 1955  3 out 1 1899  
481 14 Dtool_xqRv9ET8 0 4 483 1895 0 14 Dtool_xqRv9ET8 0 3 4 this 3 1955  3 out 1 1899  12 spaces_every 1 1892  
482 14 Dtool_xqRvFAEP 0 4 483 1895 0 14 Dtool_xqRvFAEP 0 2 4 this 3 1955  3 out 1 1899  
483 14 Dtool_xqRvZH30 0 4 484 1895 0 14 Dtool_xqRvZH30 0 3 4 this 3 1955  3 out 1 1899  12 indent_level 1 1892  
484 14 Dtool_xqRvG1R_ 0 4 484 1895 0 14 Dtool_xqRvG1R_ 0 2 4 this 3 1955  3 out 1 1899  
485 14 Dtool_xqRvHeST 0 6 485 1903 0 14 Dtool_xqRvHeST 0 2 4 this 3 1955  5 other 1 1955  
486 14 Dtool_xqRvHPvK 0 6 486 1903 0 14 Dtool_xqRvHPvK 0 2 4 this 3 1955  5 other 1 1955  
487 14 Dtool_xqRvVunG 0 6 487 1903 0 14 Dtool_xqRvVunG 0 2 4 this 3 1955  5 other 1 1955  
488 14 Dtool_xqRvSDp_ 0 6 488 1892 0 14 Dtool_xqRvSDp_ 0 2 4 this 3 1955  5 other 1 1955  
489 14 Dtool_xqRv2H5_ 0 7 489 1954 1353 14 Dtool_xqRv2H5_ 0 2 4 this 3 1955  5 other 1 1955  
490 14 Dtool_xqRvV_Ja 0 7 490 1954 1353 14 Dtool_xqRvV_Ja 0 2 4 this 3 1955  5 other 1 1955  
491 14 Dtool_xqRv1p_Q 0 7 491 1954 1353 14 Dtool_xqRv1p_Q 0 2 4 this 3 1955  5 other 1 1955  
492 14 Dtool_xqRvYbux 0 7 492 1954 1353 14 Dtool_xqRvYbux 0 1 4 this 3 1955  
493 14 Dtool_xqRvjLeS 0 7 493 1954 1353 14 Dtool_xqRvjLeS 0 2 4 this 3 1955  5 shift 1 1892  
494 14 Dtool_xqRvD4nm 0 7 494 1954 1353 14 Dtool_xqRvD4nm 0 2 4 this 3 1955  5 shift 1 1892  
495 14 Dtool_xqRvywOP 0 6 495 1954 0 14 Dtool_xqRvywOP 0 2 4 this 3 1954  5 other 1 1955  
496 14 Dtool_xqRvSGep 0 6 496 1954 0 14 Dtool_xqRvSGep 0 2 4 this 3 1954  5 other 1 1955  
497 14 Dtool_xqRvySUg 0 6 497 1954 0 14 Dtool_xqRvySUg 0 2 4 this 3 1954  5 other 1 1955  
498 14 Dtool_xqRvDSbd 0 6 498 1954 0 14 Dtool_xqRvDSbd 0 2 4 this 3 1954  5 shift 1 1892  
499 14 Dtool_xqRvjHix 0 6 499 1954 0 14 Dtool_xqRvjHix 0 2 4 this 3 1954  5 shift 1 1892  
500 14 Dtool_xqRvojcd 0 4 500 1895 0 14 Dtool_xqRvojcd 0 1 4 this 3 1954  
501 14 Dtool_xqRvtB6e 0 4 501 1895 0 14 Dtool_xqRvtB6e 0 1 4 this 3 1954  
502 14 Dtool_xqRvoufB 0 7 502 1954 1353 14 Dtool_xqRvoufB 0 1 4 this 3 1955  
503 14 Dtool_xqRv4rCk 0 7 503 1954 1353 14 Dtool_xqRv4rCk 0 1 4 this 3 1955  
504 14 Dtool_xqRvXbfv 0 7 504 1954 1353 14 Dtool_xqRvXbfv 0 1 4 this 3 1955  
505 14 Dtool_xqRvol__ 0 7 504 1954 1353 14 Dtool_xqRvol__ 0 2 4 this 3 1955  5 other 1 1955  
506 14 Dtool_xqRv_Axj 0 7 504 1954 1353 14 Dtool_xqRv_Axj 0 2 4 this 3 1955  5 index 1 1892  
507 14 Dtool_xqRv_rNa 0 7 505 1954 1353 14 Dtool_xqRv_rNa 0 1 4 this 3 1955  
508 14 Dtool_xqRvumm_ 0 7 505 1954 1353 14 Dtool_xqRvumm_ 0 2 4 this 3 1955  5 other 1 1955  
509 14 Dtool_xqRvTV1H 0 7 505 1954 1353 14 Dtool_xqRvTV1H 0 2 4 this 3 1955  5 index 1 1892  
510 14 Dtool_xqRvhnlk 0 6 506 1892 0 14 Dtool_xqRvhnlk 0 1 4 this 3 1955  
511 14 Dtool_xqRvdBOk 0 6 507 1903 0 14 Dtool_xqRvdBOk 0 1 4 this 3 1955  
512 14 Dtool_xqRvOQlp 0 7 508 1905 0 14 Dtool_xqRvOQlp 0 0 
513 14 Dtool_xqRvGMUp 0 7 510 1958 1417 14 Dtool_xqRvGMUp 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
514 14 Dtool_xqRvbrvy 0 7 510 1958 1417 14 Dtool_xqRvbrvy 225 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1959  
515 14 Dtool_xqRvShJd 0 7 510 1958 1417 14 Dtool_xqRvShJd 239 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor (from SparseArray)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 from 1 1961  
516 14 Dtool_xqRvQUAC 0 7 510 1958 1417 14 Dtool_xqRvQUAC 0 1 10 init_value 1 1889  
517 14 Dtool_xqRve8C3 0 6 511 1958 0 14 Dtool_xqRve8C3 233 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1958  4 copy 1 1959  
518 14 Dtool_xqRvbBX6 0 7 512 1958 1417 14 Dtool_xqRvbBX6 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray with an infinite array of bits,
//               all on.
//////////////////////////////////////////////////////////////////// 0 
519 14 Dtool_xqRvGQnq 0 7 513 1958 1417 14 Dtool_xqRvGQnq 284 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose bits are all off.
//////////////////////////////////////////////////////////////////// 0 
520 14 Dtool_xqRvK3PH 0 7 514 1958 1417 14 Dtool_xqRvK3PH 295 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose lower on_bits bits are on.
//////////////////////////////////////////////////////////////////// 1 7 on_bits 1 1892  
521 14 Dtool_xqRvX0f2 0 7 515 1958 1417 14 Dtool_xqRvX0f2 289 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a BitArray with only the indicated bit on.
//////////////////////////////////////////////////////////////////// 1 5 index 1 1892  
522 14 Dtool_xqRvPjFX 0 7 516 1958 1417 14 Dtool_xqRvPjFX 323 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose size bits, beginning at
//               low_bit, are on.
//////////////////////////////////////////////////////////////////// 2 7 low_bit 1 1892  4 size 1 1892  
523 14 Dtool_xqRvDxaB 0 6 518 1903 0 14 Dtool_xqRvDxaB 714 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The BitArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               BitArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
524 14 Dtool_xqRv_yNZ 0 6 519 1892 0 14 Dtool_xqRv_yNZ 749 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               BitArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or BitArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
525 14 Dtool_xqRvSGW6 0 6 520 1892 0 14 Dtool_xqRvSGW6 476 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits_per_word
//       Access: Published, Static
//  Description: Returns the number of bits stored per word
//               internally.  This is of interest only in that it
//               limits the maximum number of bits that may be queried
//               or set at once by extract() and store().
//////////////////////////////////////////////////////////////////// 0 
526 14 Dtool_xqRvlwdi 0 6 521 1892 0 14 Dtool_xqRvlwdi 604 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
527 14 Dtool_xqRvLvz8 0 6 522 1903 0 14 Dtool_xqRvLvz8 442 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1959  5 index 1 1892  
528 14 Dtool_xqRvrNRV 0 4 523 1895 0 14 Dtool_xqRvrNRV 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1958  5 index 1 1892  
529 14 Dtool_xqRv541k 0 4 524 1895 0 14 Dtool_xqRv541k 320 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1958  5 index 1 1892  
530 14 Dtool_xqRvQgnd 0 4 525 1895 0 14 Dtool_xqRvQgnd 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1958  5 index 1 1892  5 value 1 1903  
531 14 Dtool_xqRvHjU1 0 6 526 1903 0 14 Dtool_xqRvHjU1 364 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
532 14 Dtool_xqRvT0xX 0 6 527 1903 0 14 Dtool_xqRvT0xX 294 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
533 14 Dtool_xqRvr4Sd 0 6 528 1903 0 14 Dtool_xqRvr4Sd 295 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
534 14 Dtool_xqRvPS63 0 6 529 1889 0 14 Dtool_xqRvPS63 438 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::extract
//       Access: Published
//  Description: Returns a word that represents only the indicated
//               range of bits within this BitArray, shifted to the
//               least-significant position.  size must be <=
//               get_num_bits_per_word().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1959  7 low_bit 1 1892  4 size 1 1892  
535 14 Dtool_xqRvAQuf 0 4 530 1895 0 14 Dtool_xqRvAQuf 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::store
//       Access: Published
//  Description: Stores the indicated word into the indicated range of
//               bits with this BitArray.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1958  5 value 1 1889  7 low_bit 1 1892  4 size 1 1892  
536 14 Dtool_xqRvBUJy 0 6 531 1903 0 14 Dtool_xqRvBUJy 308 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1959  7 low_bit 1 1892  4 size 1 1892  
537 14 Dtool_xqRvybWy 0 6 532 1903 0 14 Dtool_xqRvybWy 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1959  7 low_bit 1 1892  4 size 1 1892  
538 14 Dtool_xqRvv8Tr 0 4 533 1895 0 14 Dtool_xqRvv8Tr 255 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1958  7 low_bit 1 1892  4 size 1 1892  
539 14 Dtool_xqRvfuvM 0 4 534 1895 0 14 Dtool_xqRvfuvM 258 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1958  7 low_bit 1 1892  4 size 1 1892  
540 14 Dtool_xqRvAEMB 0 4 535 1895 0 14 Dtool_xqRvAEMB 275 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1958  5 value 1 1903  7 low_bit 1 1892  4 size 1 1892  
541 14 Dtool_xqRvO1Ve 0 6 536 1892 0 14 Dtool_xqRvO1Ve 372 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
542 14 Dtool_xqRvsqGY 0 6 537 1892 0 14 Dtool_xqRvsqGY 373 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
543 14 Dtool_xqRvbpfv 0 6 538 1892 0 14 Dtool_xqRvbpfv 330 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
544 14 Dtool_xqRviKFY 0 6 539 1892 0 14 Dtool_xqRviKFY 331 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
545 14 Dtool_xqRvstzx 0 6 540 1892 0 14 Dtool_xqRvstzx 390 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
546 14 Dtool_xqRvEmCF 0 6 541 1892 0 14 Dtool_xqRvEmCF 391 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
547 14 Dtool_xqRv_eW1 0 6 542 1892 0 14 Dtool_xqRv_eW1 591 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1959  7 low_bit 1 1892  
548 14 Dtool_xqRvVjn8 0 6 543 1892 0 14 Dtool_xqRvVjn8 304 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_words
//       Access: Published
//  Description: Returns the number of possibly-unique words stored in
//               the array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1959  
549 14 Dtool_xqRv85dk 0 7 544 1951 1289 14 Dtool_xqRv85dk 410 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_word
//       Access: Published
//  Description: Returns the nth word in the array.  It is valid for n
//               to be greater than get_num_words(), but the return
//               value beyond get_num_words() will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1959  1 n 1 1892  
550 14 Dtool_xqRvPLIH 0 4 545 1895 0 14 Dtool_xqRvPLIH 351 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_word
//       Access: Published
//  Description: Replaces the nth word in the array.  If n >=
//               get_num_words(), this automatically extends the
//               array.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1958  1 n 1 1892  5 value 1 1951  
551 14 Dtool_xqRvhGZ4 0 4 546 1895 0 14 Dtool_xqRvhGZ4 318 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the BitArray.  This is
//               equivalent to array = ~array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1958  
552 14 Dtool_xqRvseqE 0 6 547 1903 0 14 Dtool_xqRvseqE 440 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this BitArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1959  5 other 1 1959  
553 14 Dtool_xqRvKXAk 0 4 548 1895 0 14 Dtool_xqRvKXAk 253 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear
//       Access: Published
//  Description: Sets all the bits in the BitArray off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1958  
554 14 Dtool_xqRvgv5a 0 4 549 1895 0 14 Dtool_xqRvgv5a 443 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output
//       Access: Published
//  Description: Writes the BitArray out as a hex number.  For a
//               BitArray, this is always the same as output_hex();
//               it's too confusing for the output format to change
//               back and forth at runtime.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1959  3 out 1 1899  
555 14 Dtool_xqRvk9tp 0 4 550 1895 0 14 Dtool_xqRvk9tp 312 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1959  3 out 1 1899  12 spaces_every 1 1892  
556 14 Dtool_xqRvLRPz 0 4 550 1895 0 14 Dtool_xqRvLRPz 312 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1959  3 out 1 1899  
557 14 Dtool_xqRvMpy4 0 4 551 1895 0 14 Dtool_xqRvMpy4 316 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1959  3 out 1 1899  12 spaces_every 1 1892  
558 14 Dtool_xqRvxwaB 0 4 551 1895 0 14 Dtool_xqRvxwaB 316 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1959  3 out 1 1899  
559 14 Dtool_xqRvWflc 0 4 552 1895 0 14 Dtool_xqRvWflc 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1959  3 out 1 1899  12 indent_level 1 1892  
560 14 Dtool_xqRvVe5g 0 4 552 1895 0 14 Dtool_xqRvVe5g 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1959  3 out 1 1899  
561 14 Dtool_xqRv5zlA 0 6 553 1903 0 14 Dtool_xqRv5zlA 0 2 4 this 3 1959  5 other 1 1959  
562 14 Dtool_xqRvbpSA 0 6 554 1903 0 14 Dtool_xqRvbpSA 0 2 4 this 3 1959  5 other 1 1959  
563 14 Dtool_xqRvbO7u 0 6 555 1903 0 14 Dtool_xqRvbO7u 0 2 4 this 3 1959  5 other 1 1959  
564 14 Dtool_xqRvzJr4 0 6 556 1892 0 14 Dtool_xqRvzJr4 487 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this BitArray sorts
//               before the indicated other BitArray, greater than zero
//               if it sorts after, or 0 if they are equivalent.  This
//               is based on the same ordering defined by operator <.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1959  5 other 1 1959  
565 14 Dtool_xqRvoqtu 0 7 557 1958 1417 14 Dtool_xqRvoqtu 0 2 4 this 3 1959  5 other 1 1959  
566 14 Dtool_xqRv7Jiv 0 7 558 1958 1417 14 Dtool_xqRv7Jiv 0 2 4 this 3 1959  5 other 1 1959  
567 14 Dtool_xqRvk9Pv 0 7 559 1958 1417 14 Dtool_xqRvk9Pv 0 2 4 this 3 1959  5 other 1 1959  
568 14 Dtool_xqRvD0gS 0 7 560 1958 1417 14 Dtool_xqRvD0gS 0 1 4 this 3 1959  
569 14 Dtool_xqRvphhp 0 7 561 1958 1417 14 Dtool_xqRvphhp 0 2 4 this 3 1959  5 shift 1 1892  
570 14 Dtool_xqRvwzJq 0 7 562 1958 1417 14 Dtool_xqRvwzJq 0 2 4 this 3 1959  5 shift 1 1892  
571 14 Dtool_xqRvvQVj 0 6 563 1958 0 14 Dtool_xqRvvQVj 0 2 4 this 3 1958  5 other 1 1959  
572 14 Dtool_xqRv6_Jk 0 6 564 1958 0 14 Dtool_xqRv6_Jk 0 2 4 this 3 1958  5 other 1 1959  
573 14 Dtool_xqRvjr3j 0 6 565 1958 0 14 Dtool_xqRvjr3j 0 2 4 this 3 1958  5 other 1 1959  
574 14 Dtool_xqRv9z5r 0 6 566 1958 0 14 Dtool_xqRv9z5r 0 2 4 this 3 1958  5 shift 1 1892  
575 14 Dtool_xqRvUhhs 0 6 567 1958 0 14 Dtool_xqRvUhhs 0 2 4 this 3 1958  5 shift 1 1892  
576 14 Dtool_xqRv1IRw 0 7 568 1905 0 14 Dtool_xqRv1IRw 0 0 
577 14 Dtool_xqRv40bO 0 7 570 1963 1488 14 Dtool_xqRv40bO 539 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
//////////////////////////////////////////////////////////////////// 0 
578 14 Dtool_xqRvBHwp 0 7 570 1963 1488 14 Dtool_xqRvBHwp 229 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1964  
579 14 Dtool_xqRvm6Sg 0 7 570 1963 1488 14 Dtool_xqRvm6Sg 644 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               name, which is looked up in the ButtonRegistry.
//               This exists for the purpose of being able to
//               automatically coerce a string into a ButtonHandle;
//               for most purposes, you should use either the static
//               KeyboardButton/MouseButton getters or
//               ButtonRegistry::register_button().
//////////////////////////////////////////////////////////////////// 1 4 name 1 1891  
580 14 Dtool_xqRv53AF 0 7 570 1963 1488 14 Dtool_xqRv53AF 399 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               index number, which may have been returned by an
//               earlier call to ButtonHandle::get_index().
//////////////////////////////////////////////////////////////////// 1 5 index 1 1892  
581 14 Dtool_xqRvmrT3 0 6 571 1903 0 14 Dtool_xqRvmrT3 0 2 4 this 3 1964  5 other 1 1964  
582 14 Dtool_xqRvx9Tv 0 6 572 1903 0 14 Dtool_xqRvx9Tv 0 2 4 this 3 1964  5 other 1 1964  
583 14 Dtool_xqRv1WP4 0 6 573 1903 0 14 Dtool_xqRv1WP4 0 2 4 this 3 1964  5 other 1 1964  
584 14 Dtool_xqRvCpTp 0 6 574 1903 0 14 Dtool_xqRvCpTp 0 2 4 this 3 1964  5 other 1 1964  
585 14 Dtool_xqRvORPU 0 6 575 1903 0 14 Dtool_xqRvORPU 0 2 4 this 3 1964  5 other 1 1964  
586 14 Dtool_xqRvFkTF 0 6 576 1903 0 14 Dtool_xqRvFkTF 0 2 4 this 3 1964  5 other 1 1964  
587 14 Dtool_xqRvrY34 0 6 577 1892 0 14 Dtool_xqRvrY34 467 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::compare_to
//       Access: Published
//  Description: Sorts ButtonHandles arbitrarily (according to <, >,
//               etc.).  Returns a number less than 0 if this type
//               sorts before the other one, greater than zero if it
//               sorts after, 0 if they are equivalent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1964  5 other 1 1964  
588 14 Dtool_xqRvc38v 0 6 578 1889 0 14 Dtool_xqRvc38v 265 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_hash
//       Access: Published
//  Description: Returns a hash code suitable for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1964  
589 14 Dtool_xqRvoq06 0 6 579 1891 0 14 Dtool_xqRvoq06 250 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_name
//       Access: Public
//  Description: Returns the name of the button.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1964  
590 14 Dtool_xqRv2_MD 0 6 580 1903 0 14 Dtool_xqRv2_MD 375 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::has_ascii_equivalent
//       Access: Published
//  Description: Returns true if the button was created with an ASCII
//               equivalent code (e.g. for a standard keyboard
//               button).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1964  
591 14 Dtool_xqRvvhsY 0 6 581 1966 0 14 Dtool_xqRvvhsY 346 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_ascii_equivalent
//       Access: Published
//  Description: Returns the character code associated with the
//               button, or '\0' if no ASCII code was associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1964  
592 14 Dtool_xqRvTr0x 0 7 582 1963 1488 14 Dtool_xqRvTr0x 692 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_alias
//       Access: Published
//  Description: Returns the alias (alternate name) associated with
//               the button, if any, or ButtonHandle::none() if the
//               button has no alias.
//
//               Each button is allowed to have one alias, and
//               multiple different buttons can refer to the same
//               alias.  The alias should be the more general name for
//               the button, for instance, shift is an alias for
//               lshift, but not vice-versa.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1964  
593 14 Dtool_xqRvpu5Z 0 6 583 1903 0 14 Dtool_xqRvpu5Z 532 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::matches
//       Access: Published
//  Description: Returns true if this ButtonHandle is the same as the
//               other one, or if the other one is an alias for this
//               one.  (Does not return true if this button is an
//               alias for the other one, however.)
//
//               This is a more general comparison than operator ==.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1964  5 other 1 1964  
594 14 Dtool_xqRviajp 0 6 584 1892 0 14 Dtool_xqRviajp 664 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               ButtonHandle. Each different ButtonHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               ButtonHandles as opaque classes.  This is provided
//               for the convenience of non-C++ scripting languages to
//               build a hashtable of ButtonHandles.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1964  
595 14 Dtool_xqRv6vL2 0 4 585 1895 0 14 Dtool_xqRv6vL2 219 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1964  3 out 1 1899  
596 14 Dtool_xqRvXMlV 0 7 586 1963 1488 14 Dtool_xqRvXMlV 321 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued ButtonHandle that is
//               used to indicate no button.
//////////////////////////////////////////////////////////////////// 0 
597 14 Dtool_xqRvmThD 0 7 588 1905 0 14 Dtool_xqRvmThD 0 0 
598 14 Dtool_xqRvwBxF 0 6 587 1903 0 14 Dtool_xqRvwBxF 0 1 4 this 3 1964  
599 14 Dtool_xqRvKZsi 0 7 591 1963 1488 14 Dtool_xqRvKZsi 396 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::get_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               registers a new one and returns it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1967  4 name 1 1891  
600 14 Dtool_xqRvA9gR 0 7 592 1963 1488 14 Dtool_xqRvA9gR 391 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               returns ButtonHandle::none().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1967  4 name 1 1891  
601 14 Dtool_xqRvuc8u 0 7 593 1963 1488 14 Dtool_xqRvuc8u 419 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_ascii_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated ASCII equivalent character.  If there is no
//               such ButtonHandle, returns ButtonHandle::none().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1968  16 ascii_equivalent 1 1966  
602 14 Dtool_xqRv_iXj 0 4 594 1895 0 14 Dtool_xqRv_iXj 220 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1968  3 out 1 1899  
603 14 Dtool_xqRvdgyc 0 6 595 1967 0 14 Dtool_xqRvdgyc 300 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global ButtonRegistry
//               object.
//////////////////////////////////////////////////////////////////// 0 
604 14 Dtool_xqRvUCRq 0 6 599 1892 0 14 Dtool_xqRvUCRq 308 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that this button
//               mapping specifies.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1970  
605 14 Dtool_xqRvhvFE 0 7 600 1963 1488 14 Dtool_xqRvhvFE 307 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_raw_button
//       Access: Published
//  Description: Returns the underlying raw button associated with
//               the nth button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1970  1 i 1 1892  
606 14 Dtool_xqRvKnoL 0 7 601 1963 1488 14 Dtool_xqRvKnoL 411 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the button that the given button is mapped
//               to, or ButtonHandle::none() if this map does not
//               specify a mapped button for the given raw button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1970  3 raw 1 1963  
607 14 Dtool_xqRvncbV 0 7 601 1963 1488 14 Dtool_xqRvncbV 411 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the button that the given button is mapped
//               to, or ButtonHandle::none() if this map does not
//               specify a mapped button for the given raw button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1970  8 raw_name 1 1891  
608 14 Dtool_xqRvNs12 0 7 601 1963 1488 14 Dtool_xqRvNs12 332 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button
//       Access: Published
//  Description: Returns the nth mapped button, meaning the button
//               that the nth raw button is mapped to.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1970  1 i 1 1892  
609 14 Dtool_xqRv00i3 0 6 602 1891 0 14 Dtool_xqRv00i3 664 ////////////////////////////////////////////////////////////////////
//     Function: ButtoMap::get_mapped_button_label
//       Access: Published
//  Description: If the button map specifies a special name for the
//               button (eg. if the operating system or keyboard
//               device has a localized name describing the key),
//               returns it, or the empty string otherwise.
//
//               Note that this is not the same as
//               get_mapped_button().get_name(), which returns the
//               name of the Panda event associated with the button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1970  3 raw 1 1963  
610 14 Dtool_xqRvTlqq 0 6 602 1891 0 14 Dtool_xqRvTlqq 664 ////////////////////////////////////////////////////////////////////
//     Function: ButtoMap::get_mapped_button_label
//       Access: Published
//  Description: If the button map specifies a special name for the
//               button (eg. if the operating system or keyboard
//               device has a localized name describing the key),
//               returns it, or the empty string otherwise.
//
//               Note that this is not the same as
//               get_mapped_button().get_name(), which returns the
//               name of the Panda event associated with the button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1970  8 raw_name 1 1891  
611 14 Dtool_xqRvT2RA 0 6 602 1891 0 14 Dtool_xqRvT2RA 381 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::get_mapped_button_label
//       Access: Published
//  Description: Returns the label associated with the nth mapped
//               button, meaning the button that the nth raw
//               button is mapped to.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1970  1 i 1 1892  
612 14 Dtool_xqRv2oxA 0 4 603 1895 0 14 Dtool_xqRv2oxA 217 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1970  3 out 1 1899  
613 14 Dtool_xqRvxe33 0 4 604 1895 0 14 Dtool_xqRvxe33 216 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 1970  3 out 1 1899  12 indent_level 1 1892  
614 14 Dtool_xqRv6vRB 0 4 604 1895 0 14 Dtool_xqRv6vRB 216 ////////////////////////////////////////////////////////////////////
//     Function: ButtonMap::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1970  3 out 1 1899  
615 14 Dtool_xqRvatks 0 7 605 1905 0 14 Dtool_xqRvatks 0 0 
616 14 Dtool_xqRvNGJJ 0 4 608 1895 0 14 Dtool_xqRvNGJJ 230 ////////////////////////////////////////////////////////////////////
//     Function: CallbackObject::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1972  3 out 1 1899  
617 14 Dtool_xqRvtUug 0 7 609 1905 0 14 Dtool_xqRvtUug 0 0 
618 14 Dtool_xqRv3cWf 0 6 612 1892 0 14 Dtool_xqRv3cWf 290 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::get_cache_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1974  
619 14 Dtool_xqRvEGtE 0 4 613 1895 0 14 Dtool_xqRvEGtE 355 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_ref
//       Access: Published
//  Description: Explicitly increments the cache reference count and
//               the normal reference count simultaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1974  
620 14 Dtool_xqRvC2Hz 0 6 614 1903 0 14 Dtool_xqRvC2Hz 479 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_unref
//       Access: Published
//  Description: Explicitly decrements the cache reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1974  
621 14 Dtool_xqRvbkjU 0 6 615 1903 0 14 Dtool_xqRvbkjU 359 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1974  
622 14 Dtool_xqRvXAeA 0 7 616 1905 0 14 Dtool_xqRvXAeA 0 0 
623 14 Dtool_xqRvykHH 0 4 618 1895 0 14 Dtool_xqRvykHH 228 ////////////////////////////////////////////////////////////////////
//     Function: CallbackData::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1976  3 out 1 1899  
624 14 Dtool_xqRvJxUp 0 4 619 1895 0 14 Dtool_xqRvJxUp 408 ////////////////////////////////////////////////////////////////////
//     Function: CallbackData::upcall
//       Access: Published, Virtual
//  Description: You should make this call during the callback if you
//               want to continue the normal function that would have
//               been done in the absence of a callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1978  
625 14 Dtool_xqRvfdeU 0 7 620 1905 0 14 Dtool_xqRvfdeU 0 0 
626 14 Dtool_xqRvZzSC 0 7 623 1979 1518 14 Dtool_xqRvZzSC 218 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::contructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
627 14 Dtool_xqRv2ZxR 0 6 624 1982 0 14 Dtool_xqRv2ZxR 215 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_sec
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1980  
628 14 Dtool_xqRvalc7 0 6 625 1982 0 14 Dtool_xqRvalc7 216 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_usec
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1980  
629 14 Dtool_xqRvwP2R 0 7 630 1983 0 14 Dtool_xqRvwP2R 223 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
630 14 Dtool_xqRvDhry 0 7 630 1983 0 14 Dtool_xqRvDhry 229 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1984  
631 14 Dtool_xqRvsf6_ 0 4 631 1895 0 14 Dtool_xqRvsf6_ 2596 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_mode
//       Access: Published
//  Description: Changes the mode of the clock.  Normally, the clock
//               is in mode M_normal. In this mode, each call to
//               tick() will set the value returned by
//               get_frame_time() to the current real time; thus, the
//               clock simply reports time advancing.
//
//               Other possible modes:
//
//               M_non_real_time - the clock ignores real time
//               completely; at each call to tick(), it pretends that
//               exactly dt seconds have elapsed since the last call
//               to tick().  You may set the value of dt with
//               set_dt() or set_frame_rate().
//
//               M_limited - the clock will run as fast as it can, as
//               in M_normal, but will not run faster than the rate
//               specified by set_frame_rate().  If the application
//               would run faster than this rate, the clock will slow
//               down the application.
//
//               M_integer - the clock will run as fast as it can, but
//               the rate will be constrained to be an integer
//               multiple or divisor of the rate specified by
//               set_frame_rate().  The clock will slow down the
//               application a bit to guarantee this.
//
//               M_integer_limited - a combination of M_limited and
//               M_integer; the clock will not run faster than
//               set_frame_rate(), and if it runs slower, it will run
//               at a integer divisor of that rate.
//
//               M_forced - the clock forces the application to run at
//               the rate specified by set_frame_rate().  If the
//               application would run faster than this rate, the
//               clock will slow down the application; if the
//               application would run slower than this rate, the
//               clock slows down time so that the application
//               believes it is running at the given rate.
//
//               M_degrade - the clock runs at real time, but the
//               application is slowed down by a set factor of its
//               frame rate, specified by set_degrade_factor().
//
//               M_slave - the clock does not advance, but relies on
//               the user to call set_frame_time() and/or
//               set_frame_count() each frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  4 mode 1 1849  
632 14 Dtool_xqRvC0lD 0 6 632 1849 0 14 Dtool_xqRvC0lD 293 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_mode
//       Access: Published
//  Description: Returns the current mode of the clock.  See
//               set_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
633 14 Dtool_xqRvIvyW 0 6 633 1911 0 14 Dtool_xqRvIvyW 656 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1984  14 current_thread 1 1986  
634 14 Dtool_xqRvQ13s 0 6 633 1911 0 14 Dtool_xqRvQ13s 656 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
635 14 Dtool_xqRv94v7 0 6 634 1911 0 14 Dtool_xqRv94v7 769 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_real_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.  This is useful for doing real timing
//               measurements, e.g. for performance statistics.
//
//               This returns the most precise timer we have for short
//               time intervals, but it may tend to drift over the
//               long haul.  If more accurate timekeeping is needed
//               over a long period of time, use get_long_time()
//               instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
636 14 Dtool_xqRv8RD3 0 6 635 1911 0 14 Dtool_xqRv8RD3 773 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_long_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.
//
//               This is similar to get_real_time(), except that it
//               uses the most accurate counter we have over a long
//               period of time, and so it is less likely to drift.
//               However, it may not be very precise for measuring
//               short intervals.  On Windows, for instace, this is
//               only accurate to within about 55 milliseconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
637 14 Dtool_xqRvVWd9 0 4 636 1895 0 14 Dtool_xqRvVWd9 299 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::reset
//       Access: Published
//  Description: Simultaneously resets both the time and the frame
//               count to zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1983  
638 14 Dtool_xqRvx4ev 0 4 637 1895 0 14 Dtool_xqRvx4ev 607 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_real_time
//       Access: Published
//  Description: Resets the clock to the indicated time.  This
//               changes only the real time of the clock as reported
//               by get_real_time(), but does not immediately change
//               the time reported by get_frame_time()--that will
//               change after the next call to tick().  Also see
//               reset(), set_frame_time(), and set_frame_count().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  4 time 1 1911  
639 14 Dtool_xqRvJ8vm 0 4 638 1895 0 14 Dtool_xqRvJ8vm 477 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1983  4 time 1 1911  14 current_thread 1 1986  
640 14 Dtool_xqRv2d9O 0 4 638 1895 0 14 Dtool_xqRv2d9O 477 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  4 time 1 1911  
641 14 Dtool_xqRvT6Z9 0 4 639 1895 0 14 Dtool_xqRvT6Z9 380 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1983  11 frame_count 1 1892  14 current_thread 1 1986  
642 14 Dtool_xqRvc2uN 0 4 639 1895 0 14 Dtool_xqRvc2uN 380 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  11 frame_count 1 1892  
643 14 Dtool_xqRv7u4X 0 6 640 1892 0 14 Dtool_xqRv7u4X 457 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1984  14 current_thread 1 1986  
644 14 Dtool_xqRvmz0Y 0 6 640 1892 0 14 Dtool_xqRvmz0Y 457 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
645 14 Dtool_xqRvhgnR 0 6 641 1911 0 14 Dtool_xqRvhgnR 523 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1984  14 current_thread 1 1986  
646 14 Dtool_xqRviXAn 0 6 641 1911 0 14 Dtool_xqRviXAn 523 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
647 14 Dtool_xqRvNolu 0 6 642 1911 0 14 Dtool_xqRvNolu 369 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1984  14 current_thread 1 1986  
648 14 Dtool_xqRvsvG2 0 6 642 1911 0 14 Dtool_xqRvsvG2 369 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
649 14 Dtool_xqRvMQK2 0 4 643 1895 0 14 Dtool_xqRvMQK2 575 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_dt
//       Access: Published
//  Description: In non-real-time mode, sets the number of seconds
//               that should appear to elapse between frames.  In
//               forced mode or limited mode, sets our target dt.  In
//               normal mode, this has no effect.  
//
//               Also see set_frame_rate(), which is a different way
//               to specify the same quantity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  2 dt 1 1911  
650 14 Dtool_xqRv3_E3 0 4 644 1895 0 14 Dtool_xqRv3_E3 583 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_rate
//       Access: Published
//  Description: In non-real-time mode, sets the number of frames per
//               second that we should appear to be running.  In forced
//               mode or limited mode, sets our target frame rate.  In
//               normal mode, this has no effect.
//
//               Also see set_dt(), which is a different way to
//               specify the same quantity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  10 frame_rate 1 1911  
651 14 Dtool_xqRva66A 0 6 645 1911 0 14 Dtool_xqRva66A 333 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_dt
//       Access: Published
//  Description: Returns the current maximum allowable time elapsed
//               between any two frames.  See set_max_dt().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
652 14 Dtool_xqRv_bSs 0 4 646 1895 0 14 Dtool_xqRv_bSs 872 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_max_dt
//       Access: Published
//  Description: Sets a limit on the value returned by get_dt().  If
//               this value is less than zero, no limit is imposed;
//               otherwise, this is the maximum value that will ever
//               be returned by get_dt(), regardless of how much time
//               has actually elapsed between frames.
//
//               This limit is only imposed in real-time mode; in
//               non-real-time mode, the dt is fixed anyway and max_dt
//               is ignored.
//
//               This is generally used to guarantee reasonable
//               behavior even in the presence of a very slow or
//               chuggy frame rame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  6 max_dt 1 1911  
653 14 Dtool_xqRvYmhR 0 6 647 1911 0 14 Dtool_xqRvYmhR 544 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_degrade_factor
//       Access: Published
//  Description: In degrade mode, returns the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
654 14 Dtool_xqRvTHAP 0 4 648 1895 0 14 Dtool_xqRvTHAP 541 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_degrade_factor
//       Access: Published
//  Description: In degrade mode, sets the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  14 degrade_factor 1 1911  
655 14 Dtool_xqRvh4_P 0 4 649 1895 0 14 Dtool_xqRvh4_P 729 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_average_frame_rate_interval
//       Access: Published
//  Description: Specifies the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of
//               frames per second to compute the frame rate.
//               Changing this does not necessarily immediately change
//               the result of get_average_frame_rate(), until this
//               interval of time has elapsed again.
//
//               Setting this to zero disables the computation of
//               get_average_frame_rate().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  4 time 1 1911  
656 14 Dtool_xqRv1N1j 0 6 650 1911 0 14 Dtool_xqRv1N1j 423 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate_interval
//       Access: Published
//  Description: Returns the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of frames
//               per second to compute the frame rate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
657 14 Dtool_xqRv7sfw 0 6 651 1911 0 14 Dtool_xqRv7sfw 500 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1984  14 current_thread 1 1986  
658 14 Dtool_xqRvBu1t 0 6 651 1911 0 14 Dtool_xqRvBu1t 500 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
659 14 Dtool_xqRvHcI3 0 6 652 1911 0 14 Dtool_xqRvHcI3 343 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1984  14 current_thread 1 1986  
660 14 Dtool_xqRv55e0 0 6 652 1911 0 14 Dtool_xqRv55e0 343 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
661 14 Dtool_xqRvt0YZ 0 6 653 1911 0 14 Dtool_xqRvt0YZ 915 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1984  14 current_thread 1 1986  
662 14 Dtool_xqRvELKd 0 6 653 1911 0 14 Dtool_xqRvELKd 915 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1984  
663 14 Dtool_xqRvo_ml 0 4 654 1895 0 14 Dtool_xqRvo_ml 566 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  14 current_thread 1 1986  
664 14 Dtool_xqRvnDUl 0 4 654 1895 0 14 Dtool_xqRvnDUl 566 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1983  
665 14 Dtool_xqRv__EV 0 4 655 1895 0 14 Dtool_xqRv__EV 756 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  14 current_thread 1 1986  
666 14 Dtool_xqRvA_dx 0 4 655 1895 0 14 Dtool_xqRvA_dx 756 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1983  
667 14 Dtool_xqRvUzG_ 0 6 656 1903 0 14 Dtool_xqRvUzG_ 609 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::check_errors
//       Access: Published
//  Description: Returns true if a clock error was detected since the
//               last time check_errors() was called.  A clock error
//               means that something happened, an OS or BIOS bug, for
//               instance, that makes the current value of the clock
//               somewhat suspect, and an application may wish to
//               resynchronize with any external clocks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1983  14 current_thread 1 1986  
668 14 Dtool_xqRvb_iD 0 7 657 1983 0 14 Dtool_xqRvb_iD 408 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_global_clock
//       Access: Published
//  Description: Returns a pointer to the global ClockObject.  This is
//               the ClockObject that most code should use for
//               handling scene graph rendering and animation.
//////////////////////////////////////////////////////////////////// 0 
669 14 Dtool_xqRv9oIg 0 7 658 1905 0 14 Dtool_xqRv9oIg 0 0 
670 14 Dtool_xqRvPniS 0 4 662 1895 0 14 Dtool_xqRvPniS 279 ////////////////////////////////////////////////////////////////////
//     Function: CopyOnWriteObject::cache_ref
//       Access: Published
//  Description: See CachedTypedWritableReferenceCount::cache_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1988  
671 14 Dtool_xqRv8TRR 0 7 663 1905 0 14 Dtool_xqRv8TRR 0 0 
672 14 Dtool_xqRvk62i 0 7 667 1990 0 14 Dtool_xqRvk62i 229 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
673 14 Dtool_xqRvy35T 0 6 668 1903 0 14 Dtool_xqRvy35T 325 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1990  4 file 1 1991  
674 14 Dtool_xqRv4uPI 0 6 668 1903 0 14 Dtool_xqRv4uPI 325 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Opens the indicated filename for reading.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1990  8 filename 1 1929  
675 14 Dtool_xqRv__gR 0 6 668 1903 0 14 Dtool_xqRv__gR 504 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Starts reading from the indicated stream.  Returns
//               true on success, false on failure.  The
//               DatagramInputFile does not take ownership of the
//               stream; you are responsible for closing or deleting
//               it when you are done.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1990  2 in 1 1994  8 filename 1 1929  
676 14 Dtool_xqRvD1q2 0 6 668 1903 0 14 Dtool_xqRvD1q2 504 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::open
//       Access: Published
//  Description: Starts reading from the indicated stream.  Returns
//               true on success, false on failure.  The
//               DatagramInputFile does not take ownership of the
//               stream; you are responsible for closing or deleting
//               it when you are done.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1990  2 in 1 1994  
677 14 Dtool_xqRvQgeb 0 6 669 1994 0 14 Dtool_xqRvQgeb 279 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::get_stream
//       Access: Published
//  Description: Returns the istream represented by the input file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1990  
678 14 Dtool_xqRvIdsK 0 4 670 1895 0 14 Dtool_xqRvIdsK 325 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::close
//       Access: Published
//  Description: Closes the file.  This is also implicitly done when
//               the DatagramInputFile destructs.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1990  
679 14 Dtool_xqRv0u9G 0 6 671 1903 0 14 Dtool_xqRv0u9G 535 ////////////////////////////////////////////////////////////////////
//     Function: DatagramInputFile::read_header
//       Access: Published
//  Description: Reads a sequence of bytes from the beginning of the
//               datagram file.  This may be called any number of
//               times after the file has been opened and before the
//               first datagram is read.  It may not be called once
//               the first datagram has been read.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1990  6 header 1 1921  9 num_bytes 1 1889  
680 14 Dtool_xqRvubDB 0 7 673 1963 1488 14 Dtool_xqRvubDB 468 ////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character (taken from the first
//               character of the indicated string), if there is one,
//               or ButtonHandle::none() if there is not.
//////////////////////////////////////////////////////////////////// 1 16 ascii_equivalent 1 1891  
681 14 Dtool_xqRvf5oq 0 7 673 1963 1488 14 Dtool_xqRvf5oq 394 ////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character, if there is one, or
//               ButtonHandle::none() if there is not.
//////////////////////////////////////////////////////////////////// 1 16 ascii_equivalent 1 1966  
682 14 Dtool_xqRvwvOd 0 7 674 1963 1488 14 Dtool_xqRvwvOd 0 0 
683 14 Dtool_xqRvwFyx 0 7 675 1963 1488 14 Dtool_xqRvwFyx 0 0 
684 14 Dtool_xqRvJuf_ 0 7 676 1963 1488 14 Dtool_xqRvJuf_ 0 0 
685 14 Dtool_xqRvjDap 0 7 677 1963 1488 14 Dtool_xqRvjDap 0 0 
686 14 Dtool_xqRvrLDY 0 7 678 1963 1488 14 Dtool_xqRvrLDY 0 0 
687 14 Dtool_xqRv1OGt 0 7 679 1963 1488 14 Dtool_xqRv1OGt 0 0 
688 14 Dtool_xqRv2OUJ 0 7 680 1963 1488 14 Dtool_xqRv2OUJ 0 0 
689 14 Dtool_xqRvwOil 0 7 681 1963 1488 14 Dtool_xqRvwOil 0 0 
690 14 Dtool_xqRv9OwB 0 7 682 1963 1488 14 Dtool_xqRv9OwB 0 0 
691 14 Dtool_xqRv_O_d 0 7 683 1963 1488 14 Dtool_xqRv_O_d 0 0 
692 14 Dtool_xqRv5OM6 0 7 684 1963 1488 14 Dtool_xqRv5OM6 0 0 
693 14 Dtool_xqRv6OaW 0 7 685 1963 1488 14 Dtool_xqRv6OaW 0 0 
694 14 Dtool_xqRvkOoy 0 7 686 1963 1488 14 Dtool_xqRvkOoy 0 0 
695 14 Dtool_xqRvhO2O 0 7 687 1963 1488 14 Dtool_xqRvhO2O 0 0 
696 14 Dtool_xqRvLFnR 0 7 688 1963 1488 14 Dtool_xqRvLFnR 0 0 
697 14 Dtool_xqRvZanY 0 7 689 1963 1488 14 Dtool_xqRvZanY 0 0 
698 14 Dtool_xqRvvbnf 0 7 690 1963 1488 14 Dtool_xqRvvbnf 0 0 
699 14 Dtool_xqRv9Ynm 0 7 691 1963 1488 14 Dtool_xqRv9Ynm 59 // PC keyboards don't have these four buttons, but Macs do. 0 
700 14 Dtool_xqRvDent 0 7 692 1963 1488 14 Dtool_xqRvDent 0 0 
701 14 Dtool_xqRvRfn0 0 7 693 1963 1488 14 Dtool_xqRvRfn0 0 0 
702 14 Dtool_xqRvncn7 0 7 694 1963 1488 14 Dtool_xqRvncn7 0 0 
703 14 Dtool_xqRvgrB1 0 7 695 1963 1488 14 Dtool_xqRvgrB1 0 0 
704 14 Dtool_xqRvbHch 0 7 696 1963 1488 14 Dtool_xqRvbHch 0 0 
705 14 Dtool_xqRvuoHo 0 7 697 1963 1488 14 Dtool_xqRvuoHo 0 0 
706 14 Dtool_xqRvf_Gf 0 7 698 1963 1488 14 Dtool_xqRvf_Gf 0 0 
707 14 Dtool_xqRv7XIX 0 7 699 1963 1488 14 Dtool_xqRv7XIX 0 0 
708 14 Dtool_xqRvQsHF 0 7 700 1963 1488 14 Dtool_xqRvQsHF 0 0 
709 14 Dtool_xqRvr4iM 0 7 701 1963 1488 14 Dtool_xqRvr4iM 0 0 
710 14 Dtool_xqRv1_Fy 0 7 702 1963 1488 14 Dtool_xqRv1_Fy 0 0 
711 14 Dtool_xqRvImkh 0 7 703 1963 1488 14 Dtool_xqRvImkh 0 0 
712 14 Dtool_xqRvYsPn 0 7 704 1963 1488 14 Dtool_xqRvYsPn 27 // delete is a C++ keyword. 0 
713 14 Dtool_xqRvDudL 0 7 705 1963 1488 14 Dtool_xqRvDudL 27 // delete is a C++ keyword. 0 
714 14 Dtool_xqRvd_6R 0 7 706 1963 1488 14 Dtool_xqRvd_6R 0 0 
715 14 Dtool_xqRv0QFY 0 7 707 1963 1488 14 Dtool_xqRv0QFY 0 0 
716 14 Dtool_xqRvn_Xd 0 7 708 1963 1488 14 Dtool_xqRvn_Xd 0 0 
717 14 Dtool_xqRvaaIW 0 7 709 1963 1488 14 Dtool_xqRvaaIW 0 0 
718 14 Dtool_xqRvvAt7 0 7 710 1963 1488 14 Dtool_xqRvvAt7 0 0 
719 14 Dtool_xqRvnQ06 0 7 711 1963 1488 14 Dtool_xqRvnQ06 0 0 
720 14 Dtool_xqRvKGms 0 7 712 1963 1488 14 Dtool_xqRvKGms 0 0 
721 14 Dtool_xqRvUJca 0 7 713 1963 1488 14 Dtool_xqRvUJca 0 0 
722 14 Dtool_xqRvk1PW 0 7 714 1963 1488 14 Dtool_xqRvk1PW 0 0 
723 14 Dtool_xqRvetDN 0 7 715 1963 1488 14 Dtool_xqRvetDN 0 0 
724 14 Dtool_xqRvTidz 0 7 716 1963 1488 14 Dtool_xqRvTidz 0 0 
725 14 Dtool_xqRv20qs 0 7 717 1963 1488 14 Dtool_xqRv20qs 0 0 
726 14 Dtool_xqRv1s_J 0 7 718 1963 1488 14 Dtool_xqRv1s_J 0 0 
727 14 Dtool_xqRvja3V 0 7 719 1963 1488 14 Dtool_xqRvja3V 0 0 
728 14 Dtool_xqRvjiKz 0 7 720 1963 1488 14 Dtool_xqRvjiKz 0 0 
729 14 Dtool_xqRv3iJu 0 7 721 1963 1488 14 Dtool_xqRv3iJu 0 0 
730 14 Dtool_xqRv0acL 0 7 722 1963 1488 14 Dtool_xqRv0acL 0 0 
731 14 Dtool_xqRvC9Vh 0 7 723 1963 1488 14 Dtool_xqRvC9Vh 0 0 
732 14 Dtool_xqRvClo_ 0 7 724 1963 1488 14 Dtool_xqRvClo_ 0 0 
733 14 Dtool_xqRvXztw 0 7 728 1996 1615 14 Dtool_xqRvXztw 219 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
734 14 Dtool_xqRvrsxw 0 6 729 1903 0 14 Dtool_xqRvrsxw 458 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::is_text_available
//       Access: Public
//  Description: Returns true if there is at least one line of text
//               (or even a partial line) available in the LineStream
//               object.  If this returns true, the line may then be
//               retrieved via get_line().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1997  
735 14 Dtool_xqRv1ylt 0 6 730 1891 0 14 Dtool_xqRv1ylt 540 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::get_line
//       Access: Public
//  Description: Extracts and returns the next line (or partial line)
//               of text available in the LineStream object.  Once the
//               line has been extracted, you may call has_newline()
//               to determine whether or not there was an explicit
//               newline character written following this line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1996  
736 14 Dtool_xqRvTJFM 0 6 731 1903 0 14 Dtool_xqRvTJFM 460 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::has_newline
//       Access: Public
//  Description: Returns true if the line of text most recently
//               returned by get_line() was written out with a
//               terminating newline, or false if a newline character
//               has not yet been written to the LineStream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1997  
737 14 Dtool_xqRvUVR4 0 7 738 1999 1621 14 Dtool_xqRvUVR4 227 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
738 14 Dtool_xqRvPxfU 0 7 738 1999 1621 14 Dtool_xqRvPxfU 232 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2000  
739 14 Dtool_xqRvfwyS 0 6 740 1999 0 14 Dtool_xqRvfwyS 0 2 4 this 3 1999  4 copy 1 2000  
740 14 Dtool_xqRvahow 0 6 741 1903 0 14 Dtool_xqRvahow 0 2 4 this 3 2000  5 other 1 2000  
741 14 Dtool_xqRvig3N 0 6 742 1903 0 14 Dtool_xqRvig3N 0 2 4 this 3 2000  5 other 1 2000  
742 14 Dtool_xqRvzaOV 0 6 743 1903 0 14 Dtool_xqRvzaOV 0 2 4 this 3 2000  5 other 1 2000  
743 14 Dtool_xqRv46nn 0 7 744 1999 1621 14 Dtool_xqRv46nn 0 2 4 this 3 2000  5 other 1 2000  
744 14 Dtool_xqRvea_2 0 7 745 1999 1621 14 Dtool_xqRvea_2 0 2 4 this 3 2000  5 other 1 2000  
745 14 Dtool_xqRv1hOw 0 6 746 1999 0 14 Dtool_xqRv1hOw 0 2 4 this 3 1999  5 other 1 2000  
746 14 Dtool_xqRvLBn_ 0 6 747 1999 0 14 Dtool_xqRvLBn_ 0 2 4 this 3 1999  5 other 1 2000  
747 14 Dtool_xqRv_tdp 0 4 748 1895 0 14 Dtool_xqRv_tdp 698 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::set_button_list
//       Access: Published
//  Description: Sets the list of buttons to watch to be the same as
//               that of the other ModifierButtons object.  This makes
//               the lists pointer equivalent (until one or the other
//               is later modified).
//
//               This will preserve the state of any button that was
//               on the original list and is also on the new lists.
//               Any other buttons will get reset to the default state
//               of "up".
//////////////////////////////////////////////////////////////////// 2 4 this 3 1999  5 other 1 2000  
748 14 Dtool_xqRvzNfr 0 6 749 1903 0 14 Dtool_xqRvzNfr 504 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::matches
//       Access: Published
//  Description: Returns true if the set of buttons indicated as down
//               by this ModifierButtons object is the same set of
//               buttons indicated as down by the other
//               ModifierButtons object.  The buttons indicated as up
//               are not relevant.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2000  5 other 1 2000  
749 14 Dtool_xqRvTLZg 0 6 750 1903 0 14 Dtool_xqRvTLZg 523 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::add_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               will be monitored for upness and downness.  Returns
//               true if the button was added, false if it was already
//               being monitored or if too many buttons are currently
//               being monitored.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1999  6 button 1 1963  
750 14 Dtool_xqRvMHRl 0 6 751 1903 0 14 Dtool_xqRvMHRl 339 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::has_button
//       Access: Published
//  Description: Returns true if the indicated button is in the set of
//               buttons being monitored, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2000  6 button 1 1963  
751 14 Dtool_xqRviuBm 0 6 752 1903 0 14 Dtool_xqRviuBm 623 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::remove_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               being monitored.  Returns true if the button was
//               removed, false if it was not being monitored in the
//               first place.
//
//               Unlike the other methods, you cannot remove a button
//               by removing its alias; you have to remove exactly the
//               button itself.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1999  6 button 1 1963  
752 14 Dtool_xqRvw9C5 0 6 753 1892 0 14 Dtool_xqRvw9C5 394 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that the
//               ModifierButtons object is monitoring (e.g. the number
//               of buttons passed to add_button()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
753 14 Dtool_xqRvKJca 0 7 754 1963 1488 14 Dtool_xqRvKJca 446 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_button
//       Access: Published
//  Description: Returns the nth button that the ModifierButtons
//               object is monitoring (the nth button passed to
//               add_button()).  This must be in the range 0 <= index
//               < get_num_buttons().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2000  5 index 1 1892  
754 14 Dtool_xqRvigE5 0 6 755 1903 0 14 Dtool_xqRvigE5 597 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_down
//       Access: Published
//  Description: Records that a particular button has been pressed.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1999  6 button 1 1963  
755 14 Dtool_xqRv3WnW 0 6 756 1903 0 14 Dtool_xqRv3WnW 596 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_up
//       Access: Published
//  Description: Records that a particular button has been released.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1999  6 button 1 1963  
756 14 Dtool_xqRveJ_1 0 4 757 1895 0 14 Dtool_xqRveJ_1 303 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::all_buttons_up
//       Access: Published
//  Description: Marks all monitored buttons as being in the "up"
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1999  
757 14 Dtool_xqRv6vCj 0 6 758 1903 0 14 Dtool_xqRv6vCj 401 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up or if it is
//               not in the set of buttons being tracked.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2000  6 button 1 1963  
758 14 Dtool_xqRvucQV 0 6 758 1903 0 14 Dtool_xqRvucQV 332 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2000  5 index 1 1892  
759 14 Dtool_xqRvS0db 0 6 759 1903 0 14 Dtool_xqRvS0db 340 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_any_down
//       Access: Published
//  Description: Returns true if any of the tracked button are known
//               to be down, or false if all of them are up.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
760 14 Dtool_xqRv9FCN 0 6 760 1891 0 14 Dtool_xqRv9FCN 397 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_prefix
//       Access: Published
//  Description: Returns a string which can be used to prefix any
//               button name or event name with the unique set of
//               modifier buttons currently being held.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2000  
761 14 Dtool_xqRvbeaY 0 4 761 1895 0 14 Dtool_xqRvbeaY 298 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::output
//       Access: Published
//  Description: Writes a one-line summary of the buttons known to be
//               down.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2000  3 out 1 1899  
762 14 Dtool_xqRvDRR3 0 4 762 1895 0 14 Dtool_xqRvDRR3 365 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::write
//       Access: Published
//  Description: Writes a multi-line summary including all of the
//               buttons being monitored and which ones are known to
//               be down.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2000  3 out 1 1899  
763 14 Dtool_xqRva24C 0 7 764 1963 1488 14 Dtool_xqRva24C 424 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::button
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular numbered mouse button (zero-based), if
//               there is one, or ButtonHandle::none() if there is
//               not.
//////////////////////////////////////////////////////////////////// 1 13 button_number 1 1892  
764 14 Dtool_xqRvRfhO 0 7 765 1963 1488 14 Dtool_xqRvRfhO 302 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::one
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               first mouse button.
//////////////////////////////////////////////////////////////////// 0 
765 14 Dtool_xqRv6jlR 0 7 766 1963 1488 14 Dtool_xqRv6jlR 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::two
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               second mouse button.
//////////////////////////////////////////////////////////////////// 0 
766 14 Dtool_xqRvhxQB 0 7 767 1963 1488 14 Dtool_xqRvhxQB 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::three
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               third mouse button.
//////////////////////////////////////////////////////////////////// 0 
767 14 Dtool_xqRvQnfN 0 7 768 1963 1488 14 Dtool_xqRvQnfN 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::four
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fourth mouse button.
//////////////////////////////////////////////////////////////////// 0 
768 14 Dtool_xqRvBJKu 0 7 769 1963 1488 14 Dtool_xqRvBJKu 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::five
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fifth mouse button.
//////////////////////////////////////////////////////////////////// 0 
769 14 Dtool_xqRvCrvD 0 7 770 1963 1488 14 Dtool_xqRvCrvD 327 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_up
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch upwards.
//////////////////////////////////////////////////////////////////// 0 
770 14 Dtool_xqRvFLlN 0 7 771 1963 1488 14 Dtool_xqRvFLlN 331 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_down
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch downwards.
//////////////////////////////////////////////////////////////////// 0 
771 14 Dtool_xqRvrYQ3 0 7 772 1963 1488 14 Dtool_xqRvrYQ3 396 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_left
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the left. Usually, you'll only
//               find the horizontal scroll on laptops.
//////////////////////////////////////////////////////////////////// 0 
772 14 Dtool_xqRvxvFe 0 7 773 1963 1488 14 Dtool_xqRvxvFe 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_right
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the right. Usually, you'll only
//               find the horizontal scroll on laptops.
//////////////////////////////////////////////////////////////////// 0 
773 14 Dtool_xqRvLqpQ 0 6 774 1903 0 14 Dtool_xqRvLqpQ 353 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::is_mouse_button
//       Access: Public, Static
//  Description: Returns true if the indicated ButtonHandle is a mouse
//               button, false if it is some other kind of button.
//////////////////////////////////////////////////////////////////// 1 6 button 1 1963  
774 14 Dtool_xqRvgWcW 0 7 777 2002 1663 14 Dtool_xqRvgWcW 221 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
775 14 Dtool_xqRvja_u 0 7 777 2002 1663 14 Dtool_xqRvja_u 226 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2003  
776 14 Dtool_xqRvqtbu 0 6 778 2002 0 14 Dtool_xqRvqtbu 0 2 4 this 3 2002  4 copy 1 2003  
777 14 Dtool_xqRvRo5w 0 6 779 1911 0 14 Dtool_xqRvRo5w 215 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2003  
778 14 Dtool_xqRvp4Dx 0 6 780 1911 0 14 Dtool_xqRvp4Dx 215 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2003  
779 14 Dtool_xqRv370X 0 6 781 1903 0 14 Dtool_xqRv370X 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_in_window
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2003  
780 14 Dtool_xqRvlQkK 0 4 782 1895 0 14 Dtool_xqRvlQkK 216 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2003  3 out 1 1899  
781 14 Dtool_xqRvHv2I 0 6 785 1892 0 14 Dtool_xqRvHv2I 280 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2005  
782 14 Dtool_xqRvC_qZ 0 4 786 1895 0 14 Dtool_xqRvC_qZ 662 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the reference count.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2005  
783 14 Dtool_xqRv35Q1 0 6 787 1903 0 14 Dtool_xqRv35Q1 468 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2005  
784 14 Dtool_xqRv6xUo 0 6 788 1903 0 14 Dtool_xqRv6xUo 350 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2005  
785 14 Dtool_xqRvwI10 0 6 790 1892 0 14 Dtool_xqRvwI10 600 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_referenced_bits
//       Access: Published
//  Description: Returns the union of the values defined in the
//               Referenced enum that represents the various things
//               that appear to be holding a pointer to this object.
//
//               If R_node is included, at least one node is holding a
//               pointer; if R_cache is included, at least one cache
//               element is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2005  
786 14 Dtool_xqRv_DaH 0 7 791 1905 0 14 Dtool_xqRv_DaH 0 0 
787 14 Dtool_xqRvZthJ 0 7 793 2007 1677 14 Dtool_xqRvZthJ 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
788 14 Dtool_xqRvbAWk 0 7 793 2007 1677 14 Dtool_xqRvbAWk 239 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor (from BitArray)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 from 1 1959  
789 14 Dtool_xqRvtTb_ 0 7 793 2007 1677 14 Dtool_xqRvtTb_ 228 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1961  
790 14 Dtool_xqRv4Q2p 0 6 794 2007 0 14 Dtool_xqRv4Q2p 236 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2007  4 copy 1 1961  
791 14 Dtool_xqRveCtD 0 7 795 2007 1677 14 Dtool_xqRveCtD 323 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with an infinite array of bits,
//               all on.
//////////////////////////////////////////////////////////////////// 0 
792 14 Dtool_xqRvSVTc 0 7 796 2007 1677 14 Dtool_xqRvSVTc 290 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose bits are all off.
//////////////////////////////////////////////////////////////////// 0 
793 14 Dtool_xqRvbAVG 0 7 797 2007 1677 14 Dtool_xqRvbAVG 301 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose lower on_bits bits are on.
//////////////////////////////////////////////////////////////////// 1 7 on_bits 1 1892  
794 14 Dtool_xqRvHLUD 0 7 798 2007 1677 14 Dtool_xqRvHLUD 295 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with only the indicated bit on.
//////////////////////////////////////////////////////////////////// 1 5 index 1 1892  
795 14 Dtool_xqRvviAa 0 7 799 2007 1677 14 Dtool_xqRvviAa 329 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose size bits, beginning at
//               low_bit, are on.
//////////////////////////////////////////////////////////////////// 2 7 low_bit 1 1892  4 size 1 1892  
796 14 Dtool_xqRvyhdr 0 6 801 1903 0 14 Dtool_xqRvyhdr 723 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The SparseArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               SparseArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
797 14 Dtool_xqRvIjIo 0 6 802 1892 0 14 Dtool_xqRvIjIo 758 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               SparseArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or SparseArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
798 14 Dtool_xqRvK3uW 0 6 803 1892 0 14 Dtool_xqRvK3uW 607 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
799 14 Dtool_xqRv5yj_ 0 6 804 1903 0 14 Dtool_xqRv5yj_ 445 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1961  5 index 1 1892  
800 14 Dtool_xqRvuAn8 0 4 805 1895 0 14 Dtool_xqRvuAn8 320 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2007  5 index 1 1892  
801 14 Dtool_xqRvSHy4 0 4 806 1895 0 14 Dtool_xqRvSHy4 323 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2007  5 index 1 1892  
802 14 Dtool_xqRvHYp8 0 4 807 1895 0 14 Dtool_xqRvHYp8 313 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2007  5 index 1 1892  5 value 1 1903  
803 14 Dtool_xqRvyw5L 0 6 808 1903 0 14 Dtool_xqRvyw5L 367 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
804 14 Dtool_xqRvRZfM 0 6 809 1903 0 14 Dtool_xqRvRZfM 297 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
805 14 Dtool_xqRv6InZ 0 6 810 1903 0 14 Dtool_xqRv6InZ 298 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
806 14 Dtool_xqRvq1o_ 0 6 811 1903 0 14 Dtool_xqRvq1o_ 311 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1961  7 low_bit 1 1892  4 size 1 1892  
807 14 Dtool_xqRvVHiQ 0 6 812 1903 0 14 Dtool_xqRvVHiQ 313 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1961  7 low_bit 1 1892  4 size 1 1892  
808 14 Dtool_xqRvygC6 0 4 813 1895 0 14 Dtool_xqRvygC6 258 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2007  7 low_bit 1 1892  4 size 1 1892  
809 14 Dtool_xqRvbx1k 0 4 814 1895 0 14 Dtool_xqRvbx1k 261 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2007  7 low_bit 1 1892  4 size 1 1892  
810 14 Dtool_xqRvnzgz 0 4 815 1895 0 14 Dtool_xqRvnzgz 278 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2007  5 value 1 1903  7 low_bit 1 1892  4 size 1 1892  
811 14 Dtool_xqRvHz9G 0 6 816 1892 0 14 Dtool_xqRvHz9G 375 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
812 14 Dtool_xqRvkQdG 0 6 817 1892 0 14 Dtool_xqRvkQdG 376 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
813 14 Dtool_xqRvWgXl 0 6 818 1892 0 14 Dtool_xqRvWgXl 395 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there are an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
814 14 Dtool_xqRvBWcH 0 6 819 1892 0 14 Dtool_xqRvBWcH 396 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there are an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
815 14 Dtool_xqRv2kpz 0 6 820 1892 0 14 Dtool_xqRv2kpz 393 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
816 14 Dtool_xqRvVaJ2 0 6 821 1892 0 14 Dtool_xqRvVaJ2 394 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
817 14 Dtool_xqRvgUV7 0 6 822 1892 0 14 Dtool_xqRvgUV7 594 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1961  7 low_bit 1 1892  
818 14 Dtool_xqRvUZSJ 0 4 823 1895 0 14 Dtool_xqRvUZSJ 324 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the SparseArray.  This is
//               equivalent to array = ~array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2007  
819 14 Dtool_xqRv_DNe 0 6 824 1903 0 14 Dtool_xqRv_DNe 446 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this SparseArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1961  5 other 1 1961  
820 14 Dtool_xqRvbfjR 0 4 825 1895 0 14 Dtool_xqRvbfjR 259 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear
//       Access: Published
//  Description: Sets all the bits in the SparseArray off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2007  
821 14 Dtool_xqRvYNW_ 0 4 826 1895 0 14 Dtool_xqRvYNW_ 219 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1961  3 out 1 1899  
822 14 Dtool_xqRv0ws5 0 6 827 1903 0 14 Dtool_xqRv0ws5 0 2 4 this 3 1961  5 other 1 1961  
823 14 Dtool_xqRv8_cN 0 6 828 1903 0 14 Dtool_xqRv8_cN 0 2 4 this 3 1961  5 other 1 1961  
824 14 Dtool_xqRvjHgr 0 6 829 1903 0 14 Dtool_xqRvjHgr 0 2 4 this 3 1961  5 other 1 1961  
825 14 Dtool_xqRv7lhn 0 6 830 1892 0 14 Dtool_xqRv7lhn 513 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this SparseArray
//               sorts before the indicated other SparseArray, greater
//               than zero if it sorts after, or 0 if they are
//               equivalent.  This is based on the same ordering
//               defined by operator <.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1961  5 other 1 1961  
826 14 Dtool_xqRvYF4R 0 7 831 2007 1677 14 Dtool_xqRvYF4R 0 2 4 this 3 1961  5 other 1 1961  
827 14 Dtool_xqRv8cgH 0 7 832 2007 1677 14 Dtool_xqRv8cgH 0 2 4 this 3 1961  5 other 1 1961  
828 14 Dtool_xqRvJBYq 0 7 833 2007 1677 14 Dtool_xqRvJBYq 0 2 4 this 3 1961  5 other 1 1961  
829 14 Dtool_xqRvV3mC 0 7 834 2007 1677 14 Dtool_xqRvV3mC 0 1 4 this 3 1961  
830 14 Dtool_xqRvQZHC 0 7 835 2007 1677 14 Dtool_xqRvQZHC 0 2 4 this 3 1961  5 shift 1 1892  
831 14 Dtool_xqRvun_O 0 7 836 2007 1677 14 Dtool_xqRvun_O 0 2 4 this 3 1961  5 shift 1 1892  
832 14 Dtool_xqRvrxEk 0 6 837 2007 0 14 Dtool_xqRvrxEk 0 2 4 this 3 2007  5 other 1 1961  
833 14 Dtool_xqRvP4sZ 0 6 838 2007 0 14 Dtool_xqRvP4sZ 0 2 4 this 3 2007  5 other 1 1961  
834 14 Dtool_xqRv81k8 0 6 839 2007 0 14 Dtool_xqRv81k8 0 2 4 this 3 2007  5 other 1 1961  
835 14 Dtool_xqRvDi5u 0 6 840 2007 0 14 Dtool_xqRvDi5u 0 2 4 this 3 2007  5 shift 1 1892  
836 14 Dtool_xqRvFnx7 0 6 841 2007 0 14 Dtool_xqRvFnx7 0 2 4 this 3 2007  5 shift 1 1892  
837 14 Dtool_xqRv3i80 0 6 842 1903 0 14 Dtool_xqRv3i80 614 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_inverse
//       Access: Published
//  Description: If this is true, the SparseArray is actually defined
//               as a list of subranges of integers that are *not* in
//               the set.  If this is false (the default), then the
//               subranges define the integers that *are* in the set.
//               This affects the interpretation of the values
//               returned by iterating through get_num_subranges().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
838 14 Dtool_xqRv2RsJ 0 6 843 1892 0 14 Dtool_xqRv2RsJ 515 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_subranges
//       Access: Published
//  Description: Returns the number of separate subranges stored in
//               the SparseArray.  You can use this limit to iterate
//               through the subranges, calling get_subrange_begin()
//               and get_subrange_end() for each one.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1961  
839 14 Dtool_xqRveaXN 0 6 844 1892 0 14 Dtool_xqRveaXN 345 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_begin
//       Access: Published
//  Description: Returns the first numeric element in the nth
//               subrange.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1961  1 n 1 1892  
840 14 Dtool_xqRvMLp6 0 6 845 1892 0 14 Dtool_xqRvMLp6 353 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_end
//       Access: Published
//  Description: Returns the last numeric element, plus one, in the
//               nth subrange.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1961  1 n 1 1892  
841 14 Dtool_xqRvGFxm 0 7 846 1905 0 14 Dtool_xqRvGFxm 0 0 
842 14 Dtool_xqRv2bXk 0 7 848 1905 0 14 Dtool_xqRv2bXk 280 ////////////////////////////////////////////////////////////////////
//     Function: ParamValueBase::get_value_type
//       Access: Published, Virtual
//  Description: Returns the type of the underlying value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2008  
843 14 Dtool_xqRvRmDI 0 4 849 1895 0 14 Dtool_xqRvRmDI 0 2 4 this 3 2008  3 out 1 1899  
844 14 Dtool_xqRvN3pf 0 7 850 1905 0 14 Dtool_xqRvN3pf 0 0 
845 14 Dtool_xqRv_GAL 0 7 852 2012 1124 14 Dtool_xqRv_GAL 230 ////////////////////////////////////////////////////////////////////
//     Function: ParamTypedRefCount::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 value 1 2010  
846 14 Dtool_xqRvQ8Xr 0 7 853 2015 0 14 Dtool_xqRvQ8Xr 273 ////////////////////////////////////////////////////////////////////
//     Function: ParamTypedRefCount::get_value
//       Access: Published
//  Description: Retrieves the value stored in the parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2013  
847 14 Dtool_xqRvO6xa 0 7 854 1905 0 14 Dtool_xqRvO6xa 0 0 
848 14 Dtool_xqRvIXKg 0 7 856 2016 1124 14 Dtool_xqRvIXKg 0 1 5 value 1 1891  
849 14 Dtool_xqRvtlVb 0 4 857 1895 0 14 Dtool_xqRvtlVb 0 2 4 this 3 2016  5 value 1 1891  
850 14 Dtool_xqRvdM9o 0 6 858 1891 0 14 Dtool_xqRvdM9o 0 1 4 this 3 2017  
851 14 Dtool_xqRvrltZ 0 7 859 1905 0 14 Dtool_xqRvrltZ 0 0 
852 14 Dtool_xqRvgH_4 0 7 861 2019 1124 14 Dtool_xqRvgH_4 0 1 5 value 1 1891  
853 14 Dtool_xqRvPSwN 0 4 862 1895 0 14 Dtool_xqRvPSwN 0 2 4 this 3 2019  5 value 1 1891  
854 14 Dtool_xqRvB9qR 0 6 863 1891 0 14 Dtool_xqRvB9qR 0 1 4 this 3 2020  
855 14 Dtool_xqRvXs5X 0 7 864 1905 0 14 Dtool_xqRvXs5X 0 0 
856 14 Dtool_xqRvyanP 0 7 866 2025 1124 14 Dtool_xqRvyanP 0 1 5 value 1 2022  
857 14 Dtool_xqRv9Vp7 0 4 867 1895 0 14 Dtool_xqRv9Vp7 0 2 4 this 3 2025  5 value 1 2022  
858 14 Dtool_xqRvKct3 0 6 868 2022 0 14 Dtool_xqRvKct3 0 1 4 this 3 2026  
859 14 Dtool_xqRv9W4T 0 7 869 1905 0 14 Dtool_xqRv9W4T 0 0 
860 14 Dtool_xqRv4zqr 0 7 871 2031 1124 14 Dtool_xqRv4zqr 0 1 5 value 1 2028  
861 14 Dtool_xqRvOcpz 0 4 872 1895 0 14 Dtool_xqRvOcpz 0 2 4 this 3 2031  5 value 1 2028  
862 14 Dtool_xqRvNXtT 0 6 873 2028 0 14 Dtool_xqRvNXtT 0 1 4 this 3 2032  
863 14 Dtool_xqRv1R4v 0 7 874 1905 0 14 Dtool_xqRv1R4v 0 0 
864 14 Dtool_xqRvoNtV 0 7 876 2037 1124 14 Dtool_xqRvoNtV 0 1 5 value 1 2034  
865 14 Dtool_xqRvYtpH 0 4 877 1895 0 14 Dtool_xqRvYtpH 0 2 4 this 3 2037  5 value 1 2034  
866 14 Dtool_xqRv5Qt9 0 6 878 2034 0 14 Dtool_xqRv5Qt9 0 1 4 this 3 2038  
867 14 Dtool_xqRvIa4Z 0 7 879 1905 0 14 Dtool_xqRvIa4Z 0 0 
868 14 Dtool_xqRvRYDW 0 7 881 2043 1124 14 Dtool_xqRvRYDW 0 1 5 value 1 2040  
869 14 Dtool_xqRv3Vhs 0 4 882 1895 0 14 Dtool_xqRv3Vhs 0 2 4 this 3 2043  5 value 1 2040  
870 14 Dtool_xqRvBcJw 0 6 883 2040 0 14 Dtool_xqRvBcJw 0 1 4 this 3 2044  
871 14 Dtool_xqRvAWUM 0 7 884 1905 0 14 Dtool_xqRvAWUM 0 0 
872 14 Dtool_xqRvbxGy 0 7 886 2049 1124 14 Dtool_xqRvbxGy 0 1 5 value 1 2046  
873 14 Dtool_xqRv4bhk 0 4 887 1895 0 14 Dtool_xqRv4bhk 0 2 4 this 3 2049  5 value 1 2046  
874 14 Dtool_xqRvIXJM 0 6 888 2046 0 14 Dtool_xqRvIXJM 0 1 4 this 3 2050  
875 14 Dtool_xqRv4RUo 0 7 889 1905 0 14 Dtool_xqRv4RUo 0 0 
876 14 Dtool_xqRvJOJc 0 7 891 2055 1124 14 Dtool_xqRvJOJc 0 1 5 value 1 2052  
877 14 Dtool_xqRvRth4 0 4 892 1895 0 14 Dtool_xqRvRth4 0 2 4 this 3 2055  5 value 1 2052  
878 14 Dtool_xqRv0QJ2 0 6 893 2052 0 14 Dtool_xqRv0QJ2 0 1 4 this 3 2056  
879 14 Dtool_xqRvTaUS 0 7 894 1905 0 14 Dtool_xqRvTaUS 0 0 
880 14 Dtool_xqRvwffc 0 7 896 2061 1124 14 Dtool_xqRvwffc 0 1 5 value 1 2058  
881 14 Dtool_xqRvhVZd 0 4 897 1895 0 14 Dtool_xqRvhVZd 0 2 4 this 3 2061  5 value 1 2058  
882 14 Dtool_xqRv8clo 0 6 898 2058 0 14 Dtool_xqRv8clo 0 1 4 this 3 2062  
883 14 Dtool_xqRvLWwE 0 7 899 1905 0 14 Dtool_xqRvLWwE 0 0 
884 14 Dtool_xqRv68i4 0 7 901 2067 1124 14 Dtool_xqRv68i4 0 1 5 value 1 2064  
885 14 Dtool_xqRvybZV 0 4 902 1895 0 14 Dtool_xqRvybZV 0 2 4 this 3 2067  5 value 1 2064  
886 14 Dtool_xqRvHXlE 0 6 903 2064 0 14 Dtool_xqRvHXlE 0 1 4 this 3 2068  
887 14 Dtool_xqRvDRwg 0 7 904 1905 0 14 Dtool_xqRvDRwg 0 0 
888 14 Dtool_xqRvuwki 0 7 906 2073 1124 14 Dtool_xqRvuwki 0 1 5 value 1 2070  
889 14 Dtool_xqRvLtZp 0 4 907 1895 0 14 Dtool_xqRvLtZp 0 2 4 this 3 2073  5 value 1 2070  
890 14 Dtool_xqRvzQlu 0 6 908 2070 0 14 Dtool_xqRvzQlu 0 1 4 this 3 2074  
891 14 Dtool_xqRvWawK 0 7 909 1905 0 14 Dtool_xqRvWawK 0 0 
892 14 Dtool_xqRvogcK 0 7 911 2079 1124 14 Dtool_xqRvogcK 0 1 5 value 1 2076  
893 14 Dtool_xqRvK5fe 0 4 912 1895 0 14 Dtool_xqRvK5fe 0 2 4 this 3 2079  5 value 1 2076  
894 14 Dtool_xqRvCSY8 0 6 913 2076 0 14 Dtool_xqRvCSY8 0 1 4 this 3 2080  
895 14 Dtool_xqRvB1RV 0 7 914 1905 0 14 Dtool_xqRvB1RV 0 0 
896 14 Dtool_xqRvHgMs 0 7 916 2085 1124 14 Dtool_xqRvHgMs 0 1 5 value 1 2082  
897 14 Dtool_xqRvQp5i 0 4 917 1895 0 14 Dtool_xqRvQp5i 0 2 4 this 3 2085  5 value 1 2082  
898 14 Dtool_xqRvYSQt 0 6 918 2082 0 14 Dtool_xqRvYSQt 0 1 4 this 3 2086  
899 14 Dtool_xqRvL1JG 0 7 919 1905 0 14 Dtool_xqRvL1JG 0 0 
900 14 Dtool_xqRvow_d 0 7 921 2091 1124 14 Dtool_xqRvow_d 0 1 5 value 1 2088  
901 14 Dtool_xqRv6Dio 0 4 922 1895 0 14 Dtool_xqRv6Dio 0 2 4 this 3 2091  5 value 1 2088  
902 14 Dtool_xqRvBKJG 0 6 923 2088 0 14 Dtool_xqRvBKJG 0 1 4 this 3 2092  
903 14 Dtool_xqRvBtAf 0 7 924 1905 0 14 Dtool_xqRvBtAf 0 0 
904 14 Dtool_xqRvHwu_ 0 7 926 2097 1124 14 Dtool_xqRvHwu_ 0 1 5 value 1 2094  
905 14 Dtool_xqRvgz9s 0 4 927 1895 0 14 Dtool_xqRvgz9s 0 2 4 this 3 2097  5 value 1 2094  
906 14 Dtool_xqRvYKB3 0 6 928 2094 0 14 Dtool_xqRvYKB3 0 1 4 this 3 2098  
907 14 Dtool_xqRvLt4P 0 7 929 1905 0 14 Dtool_xqRvLt4P 0 0 
908 14 Dtool_xqRvUrzM 0 7 931 2100 1505 14 Dtool_xqRvUrzM 232 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 function 1 1887  
909 14 Dtool_xqRv1FzO 0 7 931 2100 1505 14 Dtool_xqRv1FzO 232 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
910 14 Dtool_xqRv6nqB 0 4 932 1895 0 14 Dtool_xqRv6nqB 0 2 4 this 3 2100  4 size 1 1889  
911 14 Dtool_xqRvIeu8 0 4 935 1895 0 14 Dtool_xqRvIeu8 379 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::set_function
//       Access: Published
//  Description: Replaces the function that is called for the callback.
//               runs.  The parameter should be a Python callable
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2100  8 function 1 1887  
912 14 Dtool_xqRvKUDV 0 6 936 1887 0 14 Dtool_xqRvKUDV 287 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::get_function
//       Access: Published
//  Description: Returns the function that is called for the callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2100  
913 14 Dtool_xqRvk9Cc 0 7 937 1905 0 14 Dtool_xqRvk9Cc 0 0 
914 14 Dtool_xqRvQ2Tm 0 7 939 1905 0 14 Dtool_xqRvQ2Tm 0 0 
915 14 Dtool_xqRvEGE_ 0 7 942 2101 1800 14 Dtool_xqRvEGE_ 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 2 3 min 1 1889  3 max 1 1889  
916 14 Dtool_xqRv168y 0 7 942 2101 1800 14 Dtool_xqRv168y 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 1 3 min 1 1889  
917 14 Dtool_xqRvK9nc 0 7 942 2101 1800 14 Dtool_xqRvK9nc 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 0 
918 14 Dtool_xqRvD7pt 0 6 944 1889 0 14 Dtool_xqRvD7pt 381 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::allocate
//       Access: Published
//  Description: Returns an id between _min and _max (that were passed
//               to the constructor).
//               IndexEnd is returned if no ids are available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2101  
919 14 Dtool_xqRv8_oT 0 4 945 1895 0 14 Dtool_xqRv8_oT 893 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::initial_reserve_id
//       Access: Published
//  Description: This may be called to mark a particular id as having
//               already been allocated (for instance, by a prior
//               pass).  The specified id is removed from the
//               available pool.
//
//               Because of the limitations of this algorithm, this is
//               most efficient when it is called before the first
//               call to allocate(), and when all the calls to
//               initial_reserve_id() are made in descending order by
//               id.  However, this is a performance warning only; if
//               performance is not an issue, any id may be reserved
//               at any time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2101  2 id 1 1889  
920 14 Dtool_xqRvGQCz 0 4 946 1895 0 14 Dtool_xqRvGQCz 338 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::free
//       Access: Published
//  Description: Free an allocated index (index must be between _min
//               and _max that were passed to the constructor).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2101  5 index 1 1889  
921 14 Dtool_xqRvAmoe 0 6 947 2104 0 14 Dtool_xqRvAmoe 350 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::fraction_used
//       Access: Published
//  Description: return the decimal fraction of the pool that is used.
//               The range is 0 to 1.0 (e.g. 75% would be 0.75).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2102  
922 14 Dtool_xqRvMD2Z 0 4 948 1895 0 14 Dtool_xqRvMD2Z 256 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::output
//       Access: Published
//  Description: ...intended for debugging only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  3 out 1 1899  
923 14 Dtool_xqRvVAnq 0 4 949 1895 0 14 Dtool_xqRvVAnq 255 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::write
//       Access: Published
//  Description: ...intended for debugging only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2102  3 out 1 1899  
924 14 Dtool_xqRv26dg 0 6 659 2105 0 14 Dtool_xqRv26dg 0 0 
925 14 Dtool_xqRvwVkD 0 6 660 2105 0 14 Dtool_xqRvwVkD 0 0 
926 14 Dtool_xqRvYTce 0 6 733 2107 0 14 Dtool_xqRvYTce 957 ////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
//////////////////////////////////////////////////////////////////// 1 8 filename 1 1929  
927 14 Dtool_xqRvDEXZ 0 6 734 2107 0 14 Dtool_xqRvDEXZ 680 ////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
//////////////////////////////////////////////////////////////////// 2 4 name 1 1891  4 data 1 1891  
928 14 Dtool_xqRvw809 0 6 735 1903 0 14 Dtool_xqRvw809 0 1 4 page 1 2107  
929 14 Dtool_xqRv3gn0 0 4 736 1895 0 14 Dtool_xqRv3gn0 0 1 4 hash 1 2109  
930 14 Dtool_xqRv_Mk4 0 6 950 1887 0 14 Dtool_xqRv_Mk4 0 2 10 this_class 1 1887  4 data 1 1891  
931 14 Dtool_xqRvxk9_ 0 6 951 1887 0 14 Dtool_xqRvxk9_ 0 3 9 unpickler 1 1887  10 this_class 1 1887  4 data 1 1891  
302
1809 11 CPTA_ushort 0 141313 41 ConstPointerToArray< unsigned short int > 41 ConstPointerToArray< unsigned short int > 0 0 0 1 935 945 0 9 936 937 938 939 940 941 942 943 944 0 0 1 0 1810 0 0 0 0 0

1810 40 PointerToArrayBase< unsigned short int > 0 26625 40 PointerToArrayBase< unsigned short int > 40 PointerToArrayBase< unsigned short int > 0 0 0 0 934 0 0 0 0 1 0 1811 0 0 0 0 0

1811 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 0 43009 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 0 0 0 0 0 0 2 932 933 0 0 1 0 1812 0 0 0 0 0

1812 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

1813 19 DoubleBitMaskNative 0 26625 44 DoubleBitMask< BitMask< unsigned int, 32 > > 44 DoubleBitMask< BitMask< unsigned int, 32 > > 0 0 0 1 946 953 0 52 947 948 949 950 951 952 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 0 0 0 0 0 0

1814 17 QuadBitMaskNative 0 26625 61 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > 61 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > 0 0 0 1 1000 1007 0 52 1001 1002 1003 1004 1005 1006 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 0 0 0 0 0 0

1815 10 PTA_ushort 0 141313 36 PointerToArray< unsigned short int > 36 PointerToArray< unsigned short int > 0 0 0 1 1054 1071 0 16 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 0 0 1 0 1810 0 0 0 0 0

1816 7 CString 0 1050625 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1817 13 AnimInterface 0 26625 13 AnimInterface 13 AnimInterface 0 0 0 0 1072 0 17 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

1818 16 AutoTextureScale 0 532481 16 AutoTextureScale 16 AutoTextureScale 0 0 0 0 0 0 0 0 0 0 5 8 ATS_none 8 ATS_none 0
0 8 ATS_down 8 ATS_down 0
1 6 ATS_up 6 ATS_up 0
2 7 ATS_pad 7 ATS_pad 0
3 15 ATS_unspecified 15 ATS_unspecified 0
4 0 0

1819 9 UpdateSeq 0 141313 9 UpdateSeq 9 UpdateSeq 0 0 0 1 1090 1110 0 19 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 0 0 0 0 0 1140
////////////////////////////////////////////////////////////////////
//       Class : UpdateSeq
// Description : This is a sequence number that increments
//               monotonically.  It can be used to track cache
//               updates, or serve as a kind of timestamp for any
//               changing properties.
//
//               A special class is used instead of simply an int, so
//               we can elegantly handle such things as wraparound and
//               special cases.  There are two special cases.
//               Firstly, a sequence number is 'initial' when it is
//               first created.  This sequence is older than any other
//               sequence number.  Secondly, a sequence number may be
//               explicitly set to 'old'.  This is older than any
//               other sequence number except 'initial'.  Finally, we
//               have the explicit number 'fresh', which is newer
//               than any other sequence number.  All other sequences
//               are numeric and are monotonically increasing.
////////////////////////////////////////////////////////////////////

1820 13 TypedWritable 0 75777 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 7 1111 1112 1113 1114 1115 1116 1117 0 0 1 0 1821 0 0 0 0 341
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1821 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3561
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//
//               What follows are some examples that can be used in
//               new classes that you create.
//
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

1822 27 TypedWritableReferenceCount 0 141313 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 1124 0 2 1122 1123 0 0 2 3 1820 1118 1119 3 1823 1120 1121 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1823 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

1824 14 BamCacheRecord 0 26625 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 1129 0 19 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 0 0 2 3 1822 1125 1126 3 1825 1127 1128 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : BamCacheRecord
// Description : An instance of this class is written to the front of
//               a Bam or Txo file to make the file a cached instance
//               of some other loadable resource.  This record
//               contains information needed to test the validity of
//               the cache.
////////////////////////////////////////////////////////////////////

1825 14 LinkedListNode 0 1050625 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 762
////////////////////////////////////////////////////////////////////
//       Class : LinkedListNode
// Description : This just stores the pointers to implement a
//               doubly-linked list of some kind of object.  There are
//               occasions when a hand-rolled linked list is more
//               appropriate than an STL container.
//
//               Typically, each node of the linked list, as well as
//               the root of the list, will inherit from this class.
//
//               Note that this class is not inherently thread-safe;
//               derived classes are responsible for protecting any
//               calls into it within mutexes, if necessary.
////////////////////////////////////////////////////////////////////

1826 8 BamCache 0 26625 8 BamCache 8 BamCache 0 0 0 1 1149 1150 0 21 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 0 0 0 0 0 948
////////////////////////////////////////////////////////////////////
//       Class : BamCache
// Description : This class maintains a cache of Bam and/or Txo
//               objects generated from model files and texture images
//               (as well as possibly other kinds of loadable objects
//               that can be stored in bam file format).
//
//               This class also maintains a persistent index that
//               lists all of the cached objects (see BamCacheIndex).
//               We go through some considerable effort to make sure
//               this index gets saved correctly to disk, even in the
//               presence of multiple different processes writing to
//               the same index, and without relying too heavily on
//               low-level os-provided file locks (which work poorly
//               with C++ iostreams).
////////////////////////////////////////////////////////////////////

1827 8 BamEnums 0 141313 8 BamEnums 8 BamEnums 0 0 0 0 1172 0 0 0 0 0 0 3 1828 1829 1830 288
////////////////////////////////////////////////////////////////////
//       Class : BamEnums
// Description : This class exists just to provide scoping for the
//               enums shared by BamReader and BamWriter.
////////////////////////////////////////////////////////////////////

1828 9 BamEndian 0 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 1827 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0
0 15 BE_littleendian 25 BamEnums::BE_littleendian 0
1 9 BE_native 19 BamEnums::BE_native 0
1 0 345
// This defines an enumerated type used to represent the endianness of
// certain numeric values stored in a Bam file.  It really has only
// two possible values, either BE_bigendian or BE_littleendian; but
// through a preprocessor trick we also add BE_native, which is the
// same numerically as whichever value the hardware supports natively.

1829 13 BamObjectCode 0 794624 23 BamEnums::BamObjectCode 23 BamEnums::BamObjectCode 1827 0 0 0 0 0 0 0 0 0 5 8 BOC_push 18 BamEnums::BOC_push 0
0 7 BOC_pop 17 BamEnums::BOC_pop 0
1 11 BOC_adjunct 21 BamEnums::BOC_adjunct 0
2 10 BOC_remove 20 BamEnums::BOC_remove 0
3 13 BOC_file_data 23 BamEnums::BOC_file_data 0
4 0 565
// This is the code written along with each object.  It is used to
// control object scoping.  A BOC_push includes an object
// definition, and will always be eventually paired with a BOC_pop
// (which does not).  A BOC_adjunct includes an object definition
// but does not push the level; it is associated with the current
// level.  BOC_remove lists object ID's that have been deallocated
// on the sender end.  BOC_file_data may appear at any level and
// indicates the following datagram contains auxiliary file data
// that may be referenced by a later object.

1830 14 BamTextureMode 0 794624 24 BamEnums::BamTextureMode 24 BamEnums::BamTextureMode 1827 0 0 0 0 0 0 0 0 0 5 13 BTM_unchanged 23 BamEnums::BTM_unchanged 0
0 12 BTM_fullpath 22 BamEnums::BTM_fullpath 0
1 12 BTM_relative 22 BamEnums::BTM_relative 0
2 12 BTM_basename 22 BamEnums::BTM_basename 0
3 11 BTM_rawdata 21 BamEnums::BTM_rawdata 0
4 0 76
// This enum is used to control how textures are written to a bam
// stream.

1831 13 LoaderOptions 0 141313 13 LoaderOptions 13 LoaderOptions 0 0 0 1 1173 1184 0 10 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 0 0 0 0 2 1832 1833 257
////////////////////////////////////////////////////////////////////
//       Class : LoaderOptions
// Description : Specifies parameters that may be passed to the
//               loader.
////////////////////////////////////////////////////////////////////

1832 11 LoaderFlags 0 794624 26 LoaderOptions::LoaderFlags 26 LoaderOptions::LoaderFlags 1831 0 0 0 0 0 0 0 0 0 10 9 LF_search 24 LoaderOptions::LF_search 0
1 16 LF_report_errors 31 LoaderOptions::LF_report_errors 0
2 19 LF_convert_skeleton 34 LoaderOptions::LF_convert_skeleton 0
4 19 LF_convert_channels 34 LoaderOptions::LF_convert_channels 0
8 15 LF_convert_anim 30 LoaderOptions::LF_convert_anim 22
// skeleton + channels
12 16 LF_no_disk_cache 31 LoaderOptions::LF_no_disk_cache 20
// disallow BamCache
16 15 LF_no_ram_cache 30 LoaderOptions::LF_no_ram_cache 21
// disallow ModelPool
32 11 LF_no_cache 26 LoaderOptions::LF_no_cache 19
// no_disk + no_ram
48 13 LF_cache_only 28 LoaderOptions::LF_cache_only 23
// fail if not in cache
64 17 LF_allow_instance 32 LoaderOptions::LF_allow_instance 35
// returned pointer might be shared
128 0 33
// Flags for loading model files.

1833 12 TextureFlags 0 794624 27 LoaderOptions::TextureFlags 27 LoaderOptions::TextureFlags 1831 0 0 0 0 0 0 0 0 0 7 10 TF_preload 25 LoaderOptions::TF_preload 30
// Texture will have RAM image
4 17 TF_preload_simple 32 LoaderOptions::TF_preload_simple 37
// Texture will have simple RAM image
8 11 TF_allow_1d 26 LoaderOptions::TF_allow_1d 40
// If texture is Nx1, make a 1-d texture
16 19 TF_generate_mipmaps 34 LoaderOptions::TF_generate_mipmaps 30
// Consider generating mipmaps
32 12 TF_multiview 27 LoaderOptions::TF_multiview 36
// Load a multiview texture in pages
64 10 TF_integer 25 LoaderOptions::TF_integer 35
// Load as an integer (RGB) texture
128 8 TF_float 23 LoaderOptions::TF_float 43
// Load as a floating-point (depth) texture
256 0 35
// Flags for loading texture files.

1834 9 BamReader 0 26625 9 BamReader 9 BamReader 0 0 0 1 1185 1186 0 18 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 0 0 1 0 1827 0 0 0 0 1870
////////////////////////////////////////////////////////////////////
//       Class : BamReader
// Description : This is the fundamental interface for extracting
//               binary objects from a Bam file, as generated by a
//               BamWriter.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects within the Bam file; the BamReader
//               automatically manages these (with help from code
//               within each class) and restores the pointers
//               correctly.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramGenerator of some kind, which is simply a
//               linear source of Datagrams.  It is probably from a
//               disk file, but it might conceivably be streamed
//               directly from a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

1835 9 BamWriter 0 26625 9 BamWriter 9 BamWriter 0 0 0 1 1205 1206 0 11 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 0 0 1 0 1827 0 0 0 0 1949
////////////////////////////////////////////////////////////////////
//       Class : BamWriter
// Description : This is the fundamental interface for writing binary
//               objects to a Bam file, to be extracted later by a
//               BamReader.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects; the BamWriter automatically manages
//               these (with help from code within each class) and
//               writes all referenced objects to the file in such a
//               way that the pointers may be correctly restored
//               later.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramSink of some kind, which simply accepts a
//               linear stream of Datagrams.  It is probably written
//               to a disk file, but it might conceivably be streamed
//               directly to a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

1836 9 BitMask16 0 26625 33 BitMask< unsigned short int, 16 > 33 BitMask< unsigned short int, 16 > 0 0 0 1 1218 1225 0 62 1219 1220 1221 1222 1223 1224 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 0 0 0 0 0 0

1837 9 BitMask32 0 26625 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 1 1282 1289 0 62 1283 1284 1285 1286 1287 1288 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 0 0 0 0 0 0

1838 9 BitMask64 0 26625 31 BitMask< unsigned __int64, 64 > 31 BitMask< unsigned __int64, 64 > 0 0 0 1 1346 1353 0 62 1347 1348 1349 1350 1351 1352 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 0 0 0 0 0 0

1839 8 BitArray 0 26625 8 BitArray 8 BitArray 0 0 0 1 1410 1417 0 57 1411 1412 1413 1414 1415 1416 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : BitArray
// Description : A dynamic array with an unlimited number of bits.
//
//               This is similar to a BitMask, except it appears to
//               contain an infinite number of bits.  You can use it
//               very much as you would use a BitMask.
////////////////////////////////////////////////////////////////////

1840 12 ButtonHandle 0 141313 12 ButtonHandle 12 ButtonHandle 0 0 0 1 1469 1488 0 17 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1487 0 1 1486 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

1841 14 ButtonRegistry 0 141313 14 ButtonRegistry 14 ButtonRegistry 0 0 0 0 1494 0 5 1489 1490 1491 1492 1493 0 0 0 0 0 409
////////////////////////////////////////////////////////////////////
//       Class : ButtonRegistry
// Description : The ButtonRegistry class maintains all the assigned
//               ButtonHandles in a given system.  There should be only
//               one ButtonRegistry class during the lifetime of the
//               application.
////////////////////////////////////////////////////////////////////

1842 9 ButtonMap 0 141313 9 ButtonMap 9 ButtonMap 0 0 0 0 1502 0 7 1495 1496 1497 1498 1499 1500 1501 0 0 1 0 1843 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : ButtonMap
// Description : This class represents a map containing all of the
//               buttons of a (keyboard) device, though it can also
//               be used as a generic mapping between ButtonHandles.
//               It maps an underlying 'raw' button to a 'virtual'
//               button, which may optionally be associated with an
//               appropriate platform-specific name for the button.
////////////////////////////////////////////////////////////////////

1843 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1844 14 CallbackObject 0 141313 14 CallbackObject 14 CallbackObject 0 0 0 0 1505 0 2 1503 1504 0 0 1 0 1843 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

1845 33 CachedTypedWritableReferenceCount 0 43009 33 CachedTypedWritableReferenceCount 33 CachedTypedWritableReferenceCount 0 0 0 0 0 0 5 1506 1507 1508 1509 1510 0 0 1 0 1822 0 0 0 0 1112
////////////////////////////////////////////////////////////////////
//       Class : CachedTypedWritableReferenceCount
// Description : This is a special extension to ReferenceCount that
//               includes dual reference counts: the standard
//               reference count number, which includes all references
//               to the object, and a separate number (the cache
//               reference count) that counts the number of references
//               to the object just within its cache alone.  When
//               get_ref_count() == get_cache_ref_count(), the object
//               is not referenced outside the cache.
//
//               The cache refs must be explicitly maintained; there
//               is no PointerTo<> class to maintain the cache
//               reference counts automatically.  The cache reference
//               count is automatically included in the overall
//               reference count: calling cache_ref() and
//               cache_unref() automatically calls ref() and unref().
////////////////////////////////////////////////////////////////////

1846 12 CallbackData 0 141313 12 CallbackData 12 CallbackData 0 0 0 0 1514 0 3 1511 1512 1513 0 0 1 0 1821 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

1847 7 TimeVal 0 141313 7 TimeVal 7 TimeVal 0 0 0 1 1515 1518 0 2 1516 1517 0 0 0 0 0 0

1848 11 ClockObject 0 75777 11 ClockObject 11 ClockObject 0 0 0 1 1519 0 0 28 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 0 0 1 0 1823 0 0 0 1 1849 1457
////////////////////////////////////////////////////////////////////
//       Class : ClockObject
// Description : A ClockObject keeps track of elapsed real time and
//               discrete time.  In normal mode, get_frame_time()
//               returns the time as of the last time tick() was
//               called.  This is the "discrete" time, and is usually
//               used to get the time as of, for instance, the
//               beginning of the current frame.
//
//               In other modes, as set by set_mode() or the
//               clock-mode config variable, get_frame_time() may
//               return other values to simulate different timing
//               effects, for instance to perform non-real-time
//               animation.  See set_mode().
//
//               In all modes, get_real_time() always returns the
//               elapsed real time in seconds since the ClockObject
//               was constructed, or since it was last reset.
//
//               You can create your own ClockObject whenever you want
//               to have your own local timer.  There is also a
//               default, global ClockObject intended to represent
//               global time for the application; this is normally set
//               up to tick every frame so that its get_frame_time()
//               will return the time for the current frame.
////////////////////////////////////////////////////////////////////

1849 4 Mode 0 794624 17 ClockObject::Mode 17 ClockObject::Mode 1848 0 0 0 0 0 0 0 0 0 8 8 M_normal 21 ClockObject::M_normal 0
0 15 M_non_real_time 28 ClockObject::M_non_real_time 0
1 8 M_forced 21 ClockObject::M_forced 0
2 9 M_degrade 22 ClockObject::M_degrade 0
3 7 M_slave 20 ClockObject::M_slave 0
4 9 M_limited 22 ClockObject::M_limited 0
5 9 M_integer 22 ClockObject::M_integer 0
6 17 M_integer_limited 30 ClockObject::M_integer_limited 0
7 0 0

1850 17 CopyOnWriteObject 0 141313 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 1552 0 2 1550 1551 0 0 1 0 1845 0 0 0 0 376
////////////////////////////////////////////////////////////////////
//       Class : CopyOnWriteObject
// Description : This base class provides basic reference counting,
//               but also can be used with a CopyOnWritePointer to
//               provide get_read_pointer() and get_write_pointer().
////////////////////////////////////////////////////////////////////

1851 17 DatagramInputFile 0 75777 17 DatagramInputFile 17 DatagramInputFile 0 0 0 1 1553 0 0 4 1554 1555 1556 1557 0 0 1 0 1852 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : DatagramInputFile
// Description : This class can be used to read a binary file that
//               consists of an arbitrary header followed by a number
//               of datagrams.
////////////////////////////////////////////////////////////////////

1852 17 DatagramGenerator 0 2049 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 0 0 0 0 0 0 0 0 335
////////////////////////////////////////////////////////////////////
//       Class : DatagramGenerator
// Description : This class defines the abstract interace to any
//               source of datagrams, whether it be from a file or
//               from the net.
////////////////////////////////////////////////////////////////////

1853 14 KeyboardButton 0 141313 14 KeyboardButton 14 KeyboardButton 0 0 0 0 1610 0 52 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 0 0 0 0 0 369
////////////////////////////////////////////////////////////////////
//       Class : KeyboardButton
// Description : This class is just used as a convenient namespace for
//               grouping all of these handy functions that return
//               buttons which map to standard keyboard keys.
////////////////////////////////////////////////////////////////////

1854 10 LineStream 0 141313 10 LineStream 10 LineStream 0 0 0 1 1611 1615 0 3 1612 1613 1614 0 0 1 0 1855 0 0 0 0 761
////////////////////////////////////////////////////////////////////
//       Class : LineStream
// Description : This is a special ostream that writes to a memory
//               buffer, like ostrstream.  However, its contents can
//               be continuously extracted as a sequence of lines of
//               text.
//
//               Unlike ostrstream, which can only be extracted from
//               once (and then the buffer freezes and it can no
//               longer be written to), the LineStream is not
//               otherwise affected when a line of text is extracted.
//               More text can still be written to it and continuously
//               extracted.
////////////////////////////////////////////////////////////////////

1855 7 ostream 0 2049 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1856 15 ModifierButtons 0 26625 15 ModifierButtons 15 ModifierButtons 0 0 0 1 1620 1621 0 23 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1 2111 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : ModifierButtons
// Description : This class monitors the state of a number of
//               individual buttons and tracks whether each button is
//               known to be down or up.
////////////////////////////////////////////////////////////////////

1857 11 MouseButton 0 141313 11 MouseButton 11 MouseButton 0 0 0 0 1656 0 11 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 0 0 0 0 0 366
////////////////////////////////////////////////////////////////////
//       Class : MouseButton
// Description : This class is just used as a convenient namespace for
//               grouping all of these handy functions that return
//               buttons which map to standard mouse buttons.
////////////////////////////////////////////////////////////////////

1858 9 MouseData 0 141313 9 MouseData 9 MouseData 0 0 0 1 1657 1663 0 5 1658 1659 1660 1661 1662 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : MouseData
// Description : Holds the data that might be generated by a 2-d
//               pointer input device, such as the mouse in the
//               GraphicsWindow.
////////////////////////////////////////////////////////////////////

1859 24 NodeCachedReferenceCount 0 43009 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 6 1664 1665 1666 1667 1668 1669 0 0 1 0 1845 0 0 0 1 1860 2143
////////////////////////////////////////////////////////////////////
//       Class : NodeCachedReferenceCount
// Description : This class further specializes
//               CachedTypedWritableReferenceCount to also add a
//               node_ref_count, for the purposes of counting the
//               number of times the object is referenced by a "node",
//               presumably a PandaNode.
//
//               This essentially combines the functionality of
//               NodeReferenceCount and
//               CachedTypedWritableReferenceCount, so that a
//               derivative of this object actually has three
//               counters: the standard reference count, the "cache"
//               reference count, and the "node" reference count.
//               Rather than multiply inheriting from the two
//               reference count classes, we inherit only from
//               CachedTypedWritableReferenceCount and simply
//               duplicate the functionality of NodeReferenceCount, to
//               avoid all of the problems associated with multiple
//               inheritance.
//
//               The intended design is to use this as a base class
//               for RenderState and TransformState, both of which are
//               held by PandaNodes, and also have caches which are
//               independently maintained.  By keeping track of how
//               many nodes hold a pointer to a particular object, we
//               can classify each object into node-referenced,
//               cache-referenced, or other, which is primarily useful
//               for PStats reporting.
//
//               As with CachedTypedWritableReferenceCount's
//               cache_ref() and cache_unref(), the new methods
//               node_ref() and node_unref() automatically increment
//               and decrement the primary reference count as well.
//               In this case, however, there does exist a
//               NodePointerTo<> class to maintain the node_ref
//               counters automatically.
////////////////////////////////////////////////////////////////////

1860 10 Referenced 0 794624 36 NodeCachedReferenceCount::Referenced 36 NodeCachedReferenceCount::Referenced 1859 0 0 0 0 0 0 0 0 0 2 6 R_node 32 NodeCachedReferenceCount::R_node 0
1 7 R_cache 33 NodeCachedReferenceCount::R_cache 0
2 0 0

1861 11 SparseArray 0 26625 11 SparseArray 11 SparseArray 0 0 0 1 1670 1677 0 52 1671 1672 1673 1674 1675 1676 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 0 0 0 0 0 1136
////////////////////////////////////////////////////////////////////
//       Class : SparseArray
// Description : This class records a set of integers, where each
//               integer is either present or not present in the set.
//
//               It is similar in principle and in interface to a
//               BitArray (which can be thought of as a set of
//               integers, one integer corresponding to each different
//               bit position), but the SparseArray is implemented as
//               a list of min/max subrange lists, rather than as a
//               bitmask.  
//
//               This makes it particularly efficient for storing sets
//               which consist of large sections of consecutively
//               included or consecutively excluded elements, with
//               arbitrarily large integers, but particularly
//               inefficient for doing boolean operations such as & or
//               |.
//
//               Also, unlike BitArray, the SparseArray can store
//               negative integers.
////////////////////////////////////////////////////////////////////

1862 14 ParamValueBase 0 75777 14 ParamValueBase 14 ParamValueBase 0 0 0 0 1124 0 3 1724 1725 1726 0 0 1 0 1822 0 0 0 0 348
////////////////////////////////////////////////////////////////////
//       Class : ParamValueBase
// Description : A non-template base class of ParamValue (below),
//               which serves mainly to define the placeholder for the
//               virtual output function.
////////////////////////////////////////////////////////////////////

1863 18 ParamTypedRefCount 0 75777 18 ParamTypedRefCount 18 ParamTypedRefCount 0 0 0 1 1727 1124 0 2 1728 1729 0 0 1 0 1862 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : ParamTypedRefCount
// Description : A class object for storing specifically objects of
//               type TypedReferenceCount, which is different than
//               TypedWritableReferenceCount.
////////////////////////////////////////////////////////////////////

1864 11 ParamString 0 75777 34 ParamValue< basic_string< char > > 34 ParamValue< basic_string< char > > 0 0 0 1 1730 1124 0 3 1731 1732 1733 0 0 1 0 1862 0 0 0 0 0

1865 12 ParamWstring 0 75777 37 ParamValue< basic_string< wchar_t > > 37 ParamValue< basic_string< wchar_t > > 0 0 0 1 1734 1124 0 3 1735 1736 1737 0 0 1 0 1862 0 0 0 0 0

1866 14 ParamVecBase2d 0 75777 24 ParamValue< LVecBase2d > 24 ParamValue< LVecBase2d > 0 0 0 1 1738 1124 0 3 1739 1740 1741 0 0 1 0 1862 0 0 0 0 0

1867 14 ParamVecBase2f 0 75777 24 ParamValue< LVecBase2f > 24 ParamValue< LVecBase2f > 0 0 0 1 1742 1124 0 3 1743 1744 1745 0 0 1 0 1862 0 0 0 0 0

1868 14 ParamVecBase2i 0 75777 24 ParamValue< LVecBase2i > 24 ParamValue< LVecBase2i > 0 0 0 1 1746 1124 0 3 1747 1748 1749 0 0 1 0 1862 0 0 0 0 0

1869 14 ParamVecBase3d 0 75777 24 ParamValue< LVecBase3d > 24 ParamValue< LVecBase3d > 0 0 0 1 1750 1124 0 3 1751 1752 1753 0 0 1 0 1862 0 0 0 0 0

1870 14 ParamVecBase3f 0 75777 24 ParamValue< LVecBase3f > 24 ParamValue< LVecBase3f > 0 0 0 1 1754 1124 0 3 1755 1756 1757 0 0 1 0 1862 0 0 0 0 0

1871 14 ParamVecBase3i 0 75777 24 ParamValue< LVecBase3i > 24 ParamValue< LVecBase3i > 0 0 0 1 1758 1124 0 3 1759 1760 1761 0 0 1 0 1862 0 0 0 0 0

1872 14 ParamVecBase4d 0 75777 24 ParamValue< LVecBase4d > 24 ParamValue< LVecBase4d > 0 0 0 1 1762 1124 0 3 1763 1764 1765 0 0 1 0 1862 0 0 0 0 0

1873 14 ParamVecBase4f 0 75777 24 ParamValue< LVecBase4f > 24 ParamValue< LVecBase4f > 0 0 0 1 1766 1124 0 3 1767 1768 1769 0 0 1 0 1862 0 0 0 0 0

1874 14 ParamVecBase4i 0 75777 24 ParamValue< LVecBase4i > 24 ParamValue< LVecBase4i > 0 0 0 1 1770 1124 0 3 1771 1772 1773 0 0 1 0 1862 0 0 0 0 0

1875 13 ParamMatrix3d 0 75777 23 ParamValue< LMatrix3d > 23 ParamValue< LMatrix3d > 0 0 0 1 1774 1124 0 3 1775 1776 1777 0 0 1 0 1862 0 0 0 0 0

1876 13 ParamMatrix3f 0 75777 23 ParamValue< LMatrix3f > 23 ParamValue< LMatrix3f > 0 0 0 1 1778 1124 0 3 1779 1780 1781 0 0 1 0 1862 0 0 0 0 0

1877 13 ParamMatrix4d 0 75777 23 ParamValue< LMatrix4d > 23 ParamValue< LMatrix4d > 0 0 0 1 1782 1124 0 3 1783 1784 1785 0 0 1 0 1862 0 0 0 0 0

1878 13 ParamMatrix4f 0 75777 23 ParamValue< LMatrix4f > 23 ParamValue< LMatrix4f > 0 0 0 1 1786 1124 0 3 1787 1788 1789 0 0 1 0 1862 0 0 0 0 0

1879 20 PythonCallbackObject 0 75777 20 PythonCallbackObject 20 PythonCallbackObject 0 0 0 1 1790 1505 0 6 1791 1792 1793 1794 1795 1796 0 0 1 0 1844 0 0 0 0 371
////////////////////////////////////////////////////////////////////
//       Class : PythonCallbackObject
// Description : This is a specialization on CallbackObject to allow
//               a callback to directly call an arbitarary Python
//               function.  Powerful!  But use with caution.
////////////////////////////////////////////////////////////////////

1880 20 WritableConfigurable 0 141313 20 WritableConfigurable 20 WritableConfigurable 0 0 0 0 1798 0 1 1797 0 0 1 0 1820 0 0 0 0 666
////////////////////////////////////////////////////////////////////
//       Class : WritableConfigurable
// Description : Defined as a fix to allow creating Configurable and
//               Writable objects.  Otherwise the compiler gets
//               confused since both TypedWritable and Configurable
//               inherit from TypedObject.
//
//               An object that has data or parameters that are set
//               less frequently (at least occasionally) than every
//               frame.  We can cache the configuration info by
//               by using the "dirty" flag.
////////////////////////////////////////////////////////////////////

1881 17 UniqueIdAllocator 0 26625 17 UniqueIdAllocator 17 UniqueIdAllocator 0 0 0 1 1799 1800 0 6 1801 1802 1803 1804 1805 1806 0 0 0 0 0 1207
////////////////////////////////////////////////////////////////////
//       Class : UniqueIdAllocator
// Description : Manage a set of ID values from min to max inclusive.
//               The ID numbers that are freed will be allocated
//               (reused) in the same order.  I.e. the oldest ID numbers
//               will be allocated.
//
//               This implementation will use 4 bytes per id number,
//               plus a few bytes of management data.  e.g. 10,000
//               ID numbers will use 40KB.
//
//               Also be advised that ID -1 and -2 are used internally by
//               the allocator.  If allocate returns IndexEnd (-1) then
//               the allocator is out of free ID numbers.
//
//               There are other implementations that can better leverage
//               runs of used or unused IDs or use bit arrays for the
//               IDs.  But, it takes extra work to track the age of
//               freed IDs, which is required for what we wanted.  If
//               you would like to kick around other implementation
//               ideas, please contact Schuyler.
////////////////////////////////////////////////////////////////////

1882 49 ConstPointerToArray< unsigned short int > const * 0 8576 49 ConstPointerToArray< unsigned short int > const * 49 ConstPointerToArray< unsigned short int > const * 0 0 1883 0 0 0 0 0 0 0 0 0 0

1883 47 ConstPointerToArray< unsigned short int > const 0 8832 47 ConstPointerToArray< unsigned short int > const 47 ConstPointerToArray< unsigned short int > const 0 0 1809 0 0 0 0 0 0 0 0 0 0

1884 43 ConstPointerToArray< unsigned short int > * 0 8576 43 ConstPointerToArray< unsigned short int > * 43 ConstPointerToArray< unsigned short int > * 0 0 1809 0 0 0 0 0 0 0 0 0 0

1885 44 PointerToArray< unsigned short int > const * 0 8576 44 PointerToArray< unsigned short int > const * 44 PointerToArray< unsigned short int > const * 0 0 1886 0 0 0 0 0 0 0 0 0 0

1886 42 PointerToArray< unsigned short int > const 0 8832 42 PointerToArray< unsigned short int > const 42 PointerToArray< unsigned short int > const 0 0 1815 0 0 0 0 0 0 0 0 0 0

1887 9 _object * 0 8576 9 _object * 9 _object * 0 0 1888 0 0 0 0 0 0 0 0 0 0

1888 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1889 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1890 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1891 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1892 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1893 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1894 0 0 0 0 0 0 0 0 0 0

1894 9 Py_buffer 0 1024 9 Py_buffer 9 Py_buffer 0 0 0 0 0 0 0 0 0 0 0 0 0

1895 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1896 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 0 8576 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 0 0 1811 0 0 0 0 0 0 0 0 0 0

1897 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 0 0 1898 0 0 0 0 0 0 0 0 0 0

1898 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 0 8832 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 0 0 1811 0 0 0 0 0 0 0 0 0 0

1899 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1855 0 0 0 0 0 0 0 0 0 0

1900 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 0 8576 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 0 0 1813 0 0 0 0 0 0 0 0 0 0

1901 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 0 8576 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 0 0 1902 0 0 0 0 0 0 0 0 0 0

1902 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 0 8832 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 0 0 1813 0 0 0 0 0 0 0 0 0 0

1903 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1904 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1905 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1904 0 0 0 0 0 0 0 0 0 0

1906 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 0 8576 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 0 0 1814 0 0 0 0 0 0 0 0 0 0

1907 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 0 8576 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 0 0 1908 0 0 0 0 0 0 0 0 0 0

1908 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 0 8832 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 0 0 1814 0 0 0 0 0 0 0 0 0 0

1909 38 PointerToArray< unsigned short int > * 0 8576 38 PointerToArray< unsigned short int > * 38 PointerToArray< unsigned short int > * 0 0 1815 0 0 0 0 0 0 0 0 0 0

1910 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 1817 0 0 0 0 0 0 0 0 0 0

1911 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1912 21 AnimInterface const * 0 8576 21 AnimInterface const * 21 AnimInterface const * 0 0 1913 0 0 0 0 0 0 0 0 0 0

1913 19 AnimInterface const 0 8832 19 AnimInterface const 19 AnimInterface const 0 0 1817 0 0 0 0 0 0 0 0 0 0

1914 11 UpdateSeq * 0 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 1819 0 0 0 0 0 0 0 0 0 0

1915 17 UpdateSeq const * 0 8576 17 UpdateSeq const * 17 UpdateSeq const * 0 0 1916 0 0 0 0 0 0 0 0 0 0

1916 15 UpdateSeq const 0 8832 15 UpdateSeq const 15 UpdateSeq const 0 0 1819 0 0 0 0 0 0 0 0 0 0

1917 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1918 15 TypedWritable * 0 8576 15 TypedWritable * 15 TypedWritable * 0 0 1820 0 0 0 0 0 0 0 0 0 0

1919 21 TypedWritable const * 0 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 1920 0 0 0 0 0 0 0 0 0 0

1920 19 TypedWritable const 0 8832 19 TypedWritable const 19 TypedWritable const 0 0 1820 0 0 0 0 0 0 0 0 0 0

1921 22 basic_string< char > * 0 8576 22 basic_string< char > * 22 basic_string< char > * 0 0 1816 0 0 0 0 0 0 0 0 0 0

1922 11 BamWriter * 0 8576 11 BamWriter * 11 BamWriter * 0 0 1835 0 0 0 0 0 0 0 0 0 0

1923 11 BamReader * 0 8576 11 BamReader * 11 BamReader * 0 0 1834 0 0 0 0 0 0 0 0 0 0

1924 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 1822 0 0 0 0 0 0 0 0 0 0

1925 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1823 0 0 0 0 0 0 0 0 0 0

1926 22 BamCacheRecord const * 0 8576 22 BamCacheRecord const * 22 BamCacheRecord const * 0 0 1927 0 0 0 0 0 0 0 0 0 0

1927 20 BamCacheRecord const 0 8832 20 BamCacheRecord const 20 BamCacheRecord const 0 0 1824 0 0 0 0 0 0 0 0 0 0

1928 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 1824 0 0 0 0 0 0 0 0 0 0

1929 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1930 0 0 0 0 0 0 0 0 0 0

1930 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1931 0 0 0 0 0 0 0 0 0 0

1931 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1932 10 BamCache * 0 8576 10 BamCache * 10 BamCache * 0 0 1826 0 0 0 0 0 0 0 0 0 0

1933 16 BamCache const * 0 8576 16 BamCache const * 16 BamCache const * 0 0 1934 0 0 0 0 0 0 0 0 0 0

1934 14 BamCache const 0 8832 14 BamCache const 14 BamCache const 0 0 1826 0 0 0 0 0 0 0 0 0 0

1935 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1931 0 0 0 0 0 0 0 0 0 0

1936 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 1937 0 0 0 0 0 0 0 0 0 0

1937 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 1831 0 0 0 0 0 0 0 0 0 0

1938 15 LoaderOptions * 0 8576 15 LoaderOptions * 15 LoaderOptions * 0 0 1831 0 0 0 0 0 0 0 0 0 0

1939 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1852 0 0 0 0 0 0 0 0 0 0

1940 9 AuxData * 0 8576 20 BamReader::AuxData * 20 BamReader::AuxData * 0 0 1941 0 0 0 0 0 0 0 0 0 0

1941 7 AuxData 0 1312768 18 BamReader::AuxData 18 BamReader::AuxData 1834 0 0 0 0 0 0 0 0 0 0 0 187
// Inherit from this class to piggyback additional temporary data on
// the bamReader (via set_aux_data() and get_aux_data()) for any
// particular objects during the bam reading process.

1942 17 BamReader const * 0 8576 17 BamReader const * 17 BamReader const * 0 0 1943 0 0 0 0 0 0 0 0 0 0

1943 15 BamReader const 0 8832 15 BamReader const 15 BamReader const 0 0 1834 0 0 0 0 0 0 0 0 0 0

1944 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1945 0 0 0 0 0 0 0 0 0 0

1945 12 DatagramSink 0 2048 12 DatagramSink 12 DatagramSink 0 0 0 0 0 0 0 0 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : DatagramSink
// Description : This class defines the abstract interface to sending
//               datagrams to any target, whether it be into a file
//               or across the net
////////////////////////////////////////////////////////////////////

1946 17 BamWriter const * 0 8576 17 BamWriter const * 17 BamWriter const * 0 0 1947 0 0 0 0 0 0 0 0 0 0

1947 15 BamWriter const 0 8832 15 BamWriter const 15 BamWriter const 0 0 1835 0 0 0 0 0 0 0 0 0 0

1948 35 BitMask< unsigned short int, 16 > * 0 8576 35 BitMask< unsigned short int, 16 > * 35 BitMask< unsigned short int, 16 > * 0 0 1836 0 0 0 0 0 0 0 0 0 0

1949 41 BitMask< unsigned short int, 16 > const * 0 8576 41 BitMask< unsigned short int, 16 > const * 41 BitMask< unsigned short int, 16 > const * 0 0 1950 0 0 0 0 0 0 0 0 0 0

1950 39 BitMask< unsigned short int, 16 > const 0 8832 39 BitMask< unsigned short int, 16 > const 39 BitMask< unsigned short int, 16 > const 0 0 1836 0 0 0 0 0 0 0 0 0 0

1951 29 BitMask< unsigned int, 32 > * 0 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 1837 0 0 0 0 0 0 0 0 0 0

1952 35 BitMask< unsigned int, 32 > const * 0 8576 35 BitMask< unsigned int, 32 > const * 35 BitMask< unsigned int, 32 > const * 0 0 1953 0 0 0 0 0 0 0 0 0 0

1953 33 BitMask< unsigned int, 32 > const 0 8832 33 BitMask< unsigned int, 32 > const 33 BitMask< unsigned int, 32 > const 0 0 1837 0 0 0 0 0 0 0 0 0 0

1954 33 BitMask< unsigned __int64, 64 > * 0 8576 33 BitMask< unsigned __int64, 64 > * 33 BitMask< unsigned __int64, 64 > * 0 0 1838 0 0 0 0 0 0 0 0 0 0

1955 39 BitMask< unsigned __int64, 64 > const * 0 8576 39 BitMask< unsigned __int64, 64 > const * 39 BitMask< unsigned __int64, 64 > const * 0 0 1956 0 0 0 0 0 0 0 0 0 0

1956 37 BitMask< unsigned __int64, 64 > const 0 8832 37 BitMask< unsigned __int64, 64 > const 37 BitMask< unsigned __int64, 64 > const 0 0 1838 0 0 0 0 0 0 0 0 0 0

1957 16 unsigned __int64 0 8230 16 unsigned __int64 16 unsigned __int64 0 8 0 0 0 0 0 0 0 0 0 0 0

1958 10 BitArray * 0 8576 10 BitArray * 10 BitArray * 0 0 1839 0 0 0 0 0 0 0 0 0 0

1959 16 BitArray const * 0 8576 16 BitArray const * 16 BitArray const * 0 0 1960 0 0 0 0 0 0 0 0 0 0

1960 14 BitArray const 0 8832 14 BitArray const 14 BitArray const 0 0 1839 0 0 0 0 0 0 0 0 0 0

1961 19 SparseArray const * 0 8576 19 SparseArray const * 19 SparseArray const * 0 0 1962 0 0 0 0 0 0 0 0 0 0

1962 17 SparseArray const 0 8832 17 SparseArray const 17 SparseArray const 0 0 1861 0 0 0 0 0 0 0 0 0 0

1963 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1840 0 0 0 0 0 0 0 0 0 0

1964 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 1965 0 0 0 0 0 0 0 0 0 0

1965 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 1840 0 0 0 0 0 0 0 0 0 0

1966 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1967 16 ButtonRegistry * 0 8576 16 ButtonRegistry * 16 ButtonRegistry * 0 0 1841 0 0 0 0 0 0 0 0 0 0

1968 22 ButtonRegistry const * 0 8576 22 ButtonRegistry const * 22 ButtonRegistry const * 0 0 1969 0 0 0 0 0 0 0 0 0 0

1969 20 ButtonRegistry const 0 8832 20 ButtonRegistry const 20 ButtonRegistry const 0 0 1841 0 0 0 0 0 0 0 0 0 0

1970 17 ButtonMap const * 0 8576 17 ButtonMap const * 17 ButtonMap const * 0 0 1971 0 0 0 0 0 0 0 0 0 0

1971 15 ButtonMap const 0 8832 15 ButtonMap const 15 ButtonMap const 0 0 1842 0 0 0 0 0 0 0 0 0 0

1972 22 CallbackObject const * 0 8576 22 CallbackObject const * 22 CallbackObject const * 0 0 1973 0 0 0 0 0 0 0 0 0 0

1973 20 CallbackObject const 0 8832 20 CallbackObject const 20 CallbackObject const 0 0 1844 0 0 0 0 0 0 0 0 0 0

1974 41 CachedTypedWritableReferenceCount const * 0 8576 41 CachedTypedWritableReferenceCount const * 41 CachedTypedWritableReferenceCount const * 0 0 1975 0 0 0 0 0 0 0 0 0 0

1975 39 CachedTypedWritableReferenceCount const 0 8832 39 CachedTypedWritableReferenceCount const 39 CachedTypedWritableReferenceCount const 0 0 1845 0 0 0 0 0 0 0 0 0 0

1976 20 CallbackData const * 0 8576 20 CallbackData const * 20 CallbackData const * 0 0 1977 0 0 0 0 0 0 0 0 0 0

1977 18 CallbackData const 0 8832 18 CallbackData const 18 CallbackData const 0 0 1846 0 0 0 0 0 0 0 0 0 0

1978 14 CallbackData * 0 8576 14 CallbackData * 14 CallbackData * 0 0 1846 0 0 0 0 0 0 0 0 0 0

1979 9 TimeVal * 0 8576 9 TimeVal * 9 TimeVal * 0 0 1847 0 0 0 0 0 0 0 0 0 0

1980 15 TimeVal const * 0 8576 15 TimeVal const * 15 TimeVal const * 0 0 1981 0 0 0 0 0 0 0 0 0 0

1981 13 TimeVal const 0 8832 13 TimeVal const 13 TimeVal const 0 0 1847 0 0 0 0 0 0 0 0 0 0

1982 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1983 13 ClockObject * 0 8576 13 ClockObject * 13 ClockObject * 0 0 1848 0 0 0 0 0 0 0 0 0 0

1984 19 ClockObject const * 0 8576 19 ClockObject const * 19 ClockObject const * 0 0 1985 0 0 0 0 0 0 0 0 0 0

1985 17 ClockObject const 0 8832 17 ClockObject const 17 ClockObject const 0 0 1848 0 0 0 0 0 0 0 0 0 0

1986 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 1987 0 0 0 0 0 0 0 0 0 0

1987 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

1988 25 CopyOnWriteObject const * 0 8576 25 CopyOnWriteObject const * 25 CopyOnWriteObject const * 0 0 1989 0 0 0 0 0 0 0 0 0 0

1989 23 CopyOnWriteObject const 0 8832 23 CopyOnWriteObject const 23 CopyOnWriteObject const 0 0 1850 0 0 0 0 0 0 0 0 0 0

1990 19 DatagramInputFile * 0 8576 19 DatagramInputFile * 19 DatagramInputFile * 0 0 1851 0 0 0 0 0 0 0 0 0 0

1991 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 1992 0 0 0 0 0 0 0 0 0 0

1992 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 1993 0 0 0 0 0 0 0 0 0 0

1993 13 FileReference 0 2048 13 FileReference 13 FileReference 0 0 0 0 0 0 0 0 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : FileReference
// Description : Keeps a reference-counted pointer to a file on disk.
//               As long as the FileReference is held, someone
//               presumably has a use for this file.
////////////////////////////////////////////////////////////////////

1994 9 istream * 0 8576 9 istream * 9 istream * 0 0 1995 0 0 0 0 0 0 0 0 0 0

1995 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

1996 12 LineStream * 0 8576 12 LineStream * 12 LineStream * 0 0 1854 0 0 0 0 0 0 0 0 0 0

1997 18 LineStream const * 0 8576 18 LineStream const * 18 LineStream const * 0 0 1998 0 0 0 0 0 0 0 0 0 0

1998 16 LineStream const 0 8832 16 LineStream const 16 LineStream const 0 0 1854 0 0 0 0 0 0 0 0 0 0

1999 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 1856 0 0 0 0 0 0 0 0 0 0

2000 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 2001 0 0 0 0 0 0 0 0 0 0

2001 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 1856 0 0 0 0 0 0 0 0 0 0

2002 11 MouseData * 0 8576 11 MouseData * 11 MouseData * 0 0 1858 0 0 0 0 0 0 0 0 0 0

2003 17 MouseData const * 0 8576 17 MouseData const * 17 MouseData const * 0 0 2004 0 0 0 0 0 0 0 0 0 0

2004 15 MouseData const 0 8832 15 MouseData const 15 MouseData const 0 0 1858 0 0 0 0 0 0 0 0 0 0

2005 32 NodeCachedReferenceCount const * 0 8576 32 NodeCachedReferenceCount const * 32 NodeCachedReferenceCount const * 0 0 2006 0 0 0 0 0 0 0 0 0 0

2006 30 NodeCachedReferenceCount const 0 8832 30 NodeCachedReferenceCount const 30 NodeCachedReferenceCount const 0 0 1859 0 0 0 0 0 0 0 0 0 0

2007 13 SparseArray * 0 8576 13 SparseArray * 13 SparseArray * 0 0 1861 0 0 0 0 0 0 0 0 0 0

2008 22 ParamValueBase const * 0 8576 22 ParamValueBase const * 22 ParamValueBase const * 0 0 2009 0 0 0 0 0 0 0 0 0 0

2009 20 ParamValueBase const 0 8832 20 ParamValueBase const 20 ParamValueBase const 0 0 1862 0 0 0 0 0 0 0 0 0 0

2010 27 TypedReferenceCount const * 0 8576 27 TypedReferenceCount const * 27 TypedReferenceCount const * 0 0 2011 0 0 0 0 0 0 0 0 0 0

2011 25 TypedReferenceCount const 0 8832 25 TypedReferenceCount const 25 TypedReferenceCount const 0 0 1843 0 0 0 0 0 0 0 0 0 0

2012 20 ParamTypedRefCount * 0 8576 20 ParamTypedRefCount * 20 ParamTypedRefCount * 0 0 1863 0 0 0 0 0 0 0 0 0 0

2013 26 ParamTypedRefCount const * 0 8576 26 ParamTypedRefCount const * 26 ParamTypedRefCount const * 0 0 2014 0 0 0 0 0 0 0 0 0 0

2014 24 ParamTypedRefCount const 0 8832 24 ParamTypedRefCount const 24 ParamTypedRefCount const 0 0 1863 0 0 0 0 0 0 0 0 0 0

2015 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1843 0 0 0 0 0 0 0 0 0 0

2016 36 ParamValue< basic_string< char > > * 0 8576 36 ParamValue< basic_string< char > > * 36 ParamValue< basic_string< char > > * 0 0 1864 0 0 0 0 0 0 0 0 0 0

2017 42 ParamValue< basic_string< char > > const * 0 8576 42 ParamValue< basic_string< char > > const * 42 ParamValue< basic_string< char > > const * 0 0 2018 0 0 0 0 0 0 0 0 0 0

2018 40 ParamValue< basic_string< char > > const 0 8832 40 ParamValue< basic_string< char > > const 40 ParamValue< basic_string< char > > const 0 0 1864 0 0 0 0 0 0 0 0 0 0

2019 39 ParamValue< basic_string< wchar_t > > * 0 8576 39 ParamValue< basic_string< wchar_t > > * 39 ParamValue< basic_string< wchar_t > > * 0 0 1865 0 0 0 0 0 0 0 0 0 0

2020 45 ParamValue< basic_string< wchar_t > > const * 0 8576 45 ParamValue< basic_string< wchar_t > > const * 45 ParamValue< basic_string< wchar_t > > const * 0 0 2021 0 0 0 0 0 0 0 0 0 0

2021 43 ParamValue< basic_string< wchar_t > > const 0 8832 43 ParamValue< basic_string< wchar_t > > const 43 ParamValue< basic_string< wchar_t > > const 0 0 1865 0 0 0 0 0 0 0 0 0 0

2022 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2023 0 0 0 0 0 0 0 0 0 0

2023 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2024 0 0 0 0 0 0 0 0 0 0

2024 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2025 26 ParamValue< LVecBase2d > * 0 8576 26 ParamValue< LVecBase2d > * 26 ParamValue< LVecBase2d > * 0 0 1866 0 0 0 0 0 0 0 0 0 0

2026 32 ParamValue< LVecBase2d > const * 0 8576 32 ParamValue< LVecBase2d > const * 32 ParamValue< LVecBase2d > const * 0 0 2027 0 0 0 0 0 0 0 0 0 0

2027 30 ParamValue< LVecBase2d > const 0 8832 30 ParamValue< LVecBase2d > const 30 ParamValue< LVecBase2d > const 0 0 1866 0 0 0 0 0 0 0 0 0 0

2028 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2029 0 0 0 0 0 0 0 0 0 0

2029 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2030 0 0 0 0 0 0 0 0 0 0

2030 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2031 26 ParamValue< LVecBase2f > * 0 8576 26 ParamValue< LVecBase2f > * 26 ParamValue< LVecBase2f > * 0 0 1867 0 0 0 0 0 0 0 0 0 0

2032 32 ParamValue< LVecBase2f > const * 0 8576 32 ParamValue< LVecBase2f > const * 32 ParamValue< LVecBase2f > const * 0 0 2033 0 0 0 0 0 0 0 0 0 0

2033 30 ParamValue< LVecBase2f > const 0 8832 30 ParamValue< LVecBase2f > const 30 ParamValue< LVecBase2f > const 0 0 1867 0 0 0 0 0 0 0 0 0 0

2034 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 2035 0 0 0 0 0 0 0 0 0 0

2035 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 2036 0 0 0 0 0 0 0 0 0 0

2036 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2037 26 ParamValue< LVecBase2i > * 0 8576 26 ParamValue< LVecBase2i > * 26 ParamValue< LVecBase2i > * 0 0 1868 0 0 0 0 0 0 0 0 0 0

2038 32 ParamValue< LVecBase2i > const * 0 8576 32 ParamValue< LVecBase2i > const * 32 ParamValue< LVecBase2i > const * 0 0 2039 0 0 0 0 0 0 0 0 0 0

2039 30 ParamValue< LVecBase2i > const 0 8832 30 ParamValue< LVecBase2i > const 30 ParamValue< LVecBase2i > const 0 0 1868 0 0 0 0 0 0 0 0 0 0

2040 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2041 0 0 0 0 0 0 0 0 0 0

2041 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2042 0 0 0 0 0 0 0 0 0 0

2042 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2043 26 ParamValue< LVecBase3d > * 0 8576 26 ParamValue< LVecBase3d > * 26 ParamValue< LVecBase3d > * 0 0 1869 0 0 0 0 0 0 0 0 0 0

2044 32 ParamValue< LVecBase3d > const * 0 8576 32 ParamValue< LVecBase3d > const * 32 ParamValue< LVecBase3d > const * 0 0 2045 0 0 0 0 0 0 0 0 0 0

2045 30 ParamValue< LVecBase3d > const 0 8832 30 ParamValue< LVecBase3d > const 30 ParamValue< LVecBase3d > const 0 0 1869 0 0 0 0 0 0 0 0 0 0

2046 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2047 0 0 0 0 0 0 0 0 0 0

2047 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2048 0 0 0 0 0 0 0 0 0 0

2048 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2049 26 ParamValue< LVecBase3f > * 0 8576 26 ParamValue< LVecBase3f > * 26 ParamValue< LVecBase3f > * 0 0 1870 0 0 0 0 0 0 0 0 0 0

2050 32 ParamValue< LVecBase3f > const * 0 8576 32 ParamValue< LVecBase3f > const * 32 ParamValue< LVecBase3f > const * 0 0 2051 0 0 0 0 0 0 0 0 0 0

2051 30 ParamValue< LVecBase3f > const 0 8832 30 ParamValue< LVecBase3f > const 30 ParamValue< LVecBase3f > const 0 0 1870 0 0 0 0 0 0 0 0 0 0

2052 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 2053 0 0 0 0 0 0 0 0 0 0

2053 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 2054 0 0 0 0 0 0 0 0 0 0

2054 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2055 26 ParamValue< LVecBase3i > * 0 8576 26 ParamValue< LVecBase3i > * 26 ParamValue< LVecBase3i > * 0 0 1871 0 0 0 0 0 0 0 0 0 0

2056 32 ParamValue< LVecBase3i > const * 0 8576 32 ParamValue< LVecBase3i > const * 32 ParamValue< LVecBase3i > const * 0 0 2057 0 0 0 0 0 0 0 0 0 0

2057 30 ParamValue< LVecBase3i > const 0 8832 30 ParamValue< LVecBase3i > const 30 ParamValue< LVecBase3i > const 0 0 1871 0 0 0 0 0 0 0 0 0 0

2058 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2059 0 0 0 0 0 0 0 0 0 0

2059 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2060 0 0 0 0 0 0 0 0 0 0

2060 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2061 26 ParamValue< LVecBase4d > * 0 8576 26 ParamValue< LVecBase4d > * 26 ParamValue< LVecBase4d > * 0 0 1872 0 0 0 0 0 0 0 0 0 0

2062 32 ParamValue< LVecBase4d > const * 0 8576 32 ParamValue< LVecBase4d > const * 32 ParamValue< LVecBase4d > const * 0 0 2063 0 0 0 0 0 0 0 0 0 0

2063 30 ParamValue< LVecBase4d > const 0 8832 30 ParamValue< LVecBase4d > const 30 ParamValue< LVecBase4d > const 0 0 1872 0 0 0 0 0 0 0 0 0 0

2064 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2065 0 0 0 0 0 0 0 0 0 0

2065 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2066 0 0 0 0 0 0 0 0 0 0

2066 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2067 26 ParamValue< LVecBase4f > * 0 8576 26 ParamValue< LVecBase4f > * 26 ParamValue< LVecBase4f > * 0 0 1873 0 0 0 0 0 0 0 0 0 0

2068 32 ParamValue< LVecBase4f > const * 0 8576 32 ParamValue< LVecBase4f > const * 32 ParamValue< LVecBase4f > const * 0 0 2069 0 0 0 0 0 0 0 0 0 0

2069 30 ParamValue< LVecBase4f > const 0 8832 30 ParamValue< LVecBase4f > const 30 ParamValue< LVecBase4f > const 0 0 1873 0 0 0 0 0 0 0 0 0 0

2070 18 LVecBase4i const * 0 8576 18 LVecBase4i const * 18 LVecBase4i const * 0 0 2071 0 0 0 0 0 0 0 0 0 0

2071 16 LVecBase4i const 0 8832 16 LVecBase4i const 16 LVecBase4i const 0 0 2072 0 0 0 0 0 0 0 0 0 0

2072 10 LVecBase4i 0 2048 10 LVecBase4i 10 LVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2073 26 ParamValue< LVecBase4i > * 0 8576 26 ParamValue< LVecBase4i > * 26 ParamValue< LVecBase4i > * 0 0 1874 0 0 0 0 0 0 0 0 0 0

2074 32 ParamValue< LVecBase4i > const * 0 8576 32 ParamValue< LVecBase4i > const * 32 ParamValue< LVecBase4i > const * 0 0 2075 0 0 0 0 0 0 0 0 0 0

2075 30 ParamValue< LVecBase4i > const 0 8832 30 ParamValue< LVecBase4i > const 30 ParamValue< LVecBase4i > const 0 0 1874 0 0 0 0 0 0 0 0 0 0

2076 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2077 0 0 0 0 0 0 0 0 0 0

2077 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2078 0 0 0 0 0 0 0 0 0 0

2078 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 2112 2113 2114 2115 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2079 25 ParamValue< LMatrix3d > * 0 8576 25 ParamValue< LMatrix3d > * 25 ParamValue< LMatrix3d > * 0 0 1875 0 0 0 0 0 0 0 0 0 0

2080 31 ParamValue< LMatrix3d > const * 0 8576 31 ParamValue< LMatrix3d > const * 31 ParamValue< LMatrix3d > const * 0 0 2081 0 0 0 0 0 0 0 0 0 0

2081 29 ParamValue< LMatrix3d > const 0 8832 29 ParamValue< LMatrix3d > const 29 ParamValue< LMatrix3d > const 0 0 1875 0 0 0 0 0 0 0 0 0 0

2082 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2083 0 0 0 0 0 0 0 0 0 0

2083 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2084 0 0 0 0 0 0 0 0 0 0

2084 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 2116 2117 2118 2119 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2085 25 ParamValue< LMatrix3f > * 0 8576 25 ParamValue< LMatrix3f > * 25 ParamValue< LMatrix3f > * 0 0 1876 0 0 0 0 0 0 0 0 0 0

2086 31 ParamValue< LMatrix3f > const * 0 8576 31 ParamValue< LMatrix3f > const * 31 ParamValue< LMatrix3f > const * 0 0 2087 0 0 0 0 0 0 0 0 0 0

2087 29 ParamValue< LMatrix3f > const 0 8832 29 ParamValue< LMatrix3f > const 29 ParamValue< LMatrix3f > const 0 0 1876 0 0 0 0 0 0 0 0 0 0

2088 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2089 0 0 0 0 0 0 0 0 0 0

2089 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2090 0 0 0 0 0 0 0 0 0 0

2090 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 2120 2121 2122 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2091 25 ParamValue< LMatrix4d > * 0 8576 25 ParamValue< LMatrix4d > * 25 ParamValue< LMatrix4d > * 0 0 1877 0 0 0 0 0 0 0 0 0 0

2092 31 ParamValue< LMatrix4d > const * 0 8576 31 ParamValue< LMatrix4d > const * 31 ParamValue< LMatrix4d > const * 0 0 2093 0 0 0 0 0 0 0 0 0 0

2093 29 ParamValue< LMatrix4d > const 0 8832 29 ParamValue< LMatrix4d > const 29 ParamValue< LMatrix4d > const 0 0 1877 0 0 0 0 0 0 0 0 0 0

2094 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2095 0 0 0 0 0 0 0 0 0 0

2095 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2096 0 0 0 0 0 0 0 0 0 0

2096 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 2123 2124 2125 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2097 25 ParamValue< LMatrix4f > * 0 8576 25 ParamValue< LMatrix4f > * 25 ParamValue< LMatrix4f > * 0 0 1878 0 0 0 0 0 0 0 0 0 0

2098 31 ParamValue< LMatrix4f > const * 0 8576 31 ParamValue< LMatrix4f > const * 31 ParamValue< LMatrix4f > const * 0 0 2099 0 0 0 0 0 0 0 0 0 0

2099 29 ParamValue< LMatrix4f > const 0 8832 29 ParamValue< LMatrix4f > const 29 ParamValue< LMatrix4f > const 0 0 1878 0 0 0 0 0 0 0 0 0 0

2100 22 PythonCallbackObject * 0 8576 22 PythonCallbackObject * 22 PythonCallbackObject * 0 0 1879 0 0 0 0 0 0 0 0 0 0

2101 19 UniqueIdAllocator * 0 8576 19 UniqueIdAllocator * 19 UniqueIdAllocator * 0 0 1881 0 0 0 0 0 0 0 0 0 0

2102 25 UniqueIdAllocator const * 0 8576 25 UniqueIdAllocator const * 25 UniqueIdAllocator const * 0 0 2103 0 0 0 0 0 0 0 0 0 0

2103 23 UniqueIdAllocator const 0 8832 23 UniqueIdAllocator const 23 UniqueIdAllocator const 0 0 1881 0 0 0 0 0 0 0 0 0 0

2104 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2105 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2106 0 0 0 0 0 0 0 0 0 0

2106 24 ConfigVariableSearchPath 0 2048 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 1125
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableSearchPath
// Description : This is similar to a ConfigVariableList, but it
//               returns its list as a DSearchPath, as a list of
//               directories.
//
//               You may locally append directories to the end of the
//               search path with the methods here, or prepend them to
//               the beginning.  Use these methods to make adjustments
//               to the path; do not attempt to directly modify the
//               const DSearchPath object returned by get_value().
//
//               Unlike other ConfigVariable types, local changes
//               (made by calling append_directory() and
//               prepend_directory()) are specific to this particular
//               instance of the ConfigVariableSearchPath.  A separate
//               instance of the same variable, created by using the
//               same name to the constructor, will not reflect the
//               local changes.
////////////////////////////////////////////////////////////////////

2107 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 2108 0 0 0 0 0 0 0 0 0 0

2108 10 ConfigPage 0 2048 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 0 0 0 0 0 0 493
////////////////////////////////////////////////////////////////////
//       Class : ConfigPage
// Description : A page of ConfigDeclarations that may be loaded or
//               unloaded.  Typically this represents a single .prc
//               file that is read from disk at runtime, but it may
//               also represent a list of declarations built up
//               by application code and explicitly loaded.
////////////////////////////////////////////////////////////////////

2109 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 2110 0 0 0 0 0 0 0 0 0 0

2110 7 HashVal 0 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : HashVal
// Description : Stores a 128-bit value that represents the hashed
//               contents (typically MD5) of a file or buffer.
////////////////////////////////////////////////////////////////////

0
0
15
2111 0 0 737 11 get_buttons 15 get_num_buttons 10 get_button 
2112 0 0 2041 8 get_rows 4 size 7 get_row 
2113 0 0 2041 8 get_cols 4 size 7 get_col 
2114 0 0 2041 9 get_col2s 4 size 8 get_col2 
2115 0 0 2041 9 get_row2s 4 size 8 get_row2 
2116 0 0 2051 8 get_rows 4 size 7 get_row 
2117 0 0 2051 8 get_cols 4 size 7 get_col 
2118 0 0 2051 9 get_col2s 4 size 8 get_col2 
2119 0 0 2051 9 get_row2s 4 size 8 get_row2 
2120 0 0 2061 8 get_rows 4 size 7 get_row 
2121 0 0 2061 8 get_cols 4 size 7 get_col 
2122 0 0 2061 9 get_row3s 4 size 8 get_row3 
2123 0 0 2071 8 get_rows 4 size 7 get_row 
2124 0 0 2071 8 get_cols 4 size 7 get_col 
2125 0 0 2071 9 get_row3s 4 size 8 get_row3 
