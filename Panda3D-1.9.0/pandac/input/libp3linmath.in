1422499850
2 3
12 libp3linmath 4 Ns0b 12 panda3d.core 
1508
2034 12 ~MathNumbers 0 4 3542 25 MathNumbers::~MathNumbers 0 0 0
32
MathNumbers::~MathNumbers(void);

2035 9 deg_2_rad 0 1 0 9 deg_2_rad 0 2 1899 1900 0
67
inline double deg_2_rad(double f);
inline float deg_2_rad(float f);

2036 9 rad_2_deg 0 1 0 9 rad_2_deg 0 2 1901 1902 0
67
inline double rad_2_deg(double f);
inline float rad_2_deg(float f);

2037 10 LVecBase2f 0 4 3543 22 LVecBase2f::LVecBase2f 0 4 1 2 3 4 903
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
189
inline LVecBase2f::LVecBase2f(void);
inline LVecBase2f::LVecBase2f(LVecBase2f const &copy);
inline LVecBase2f::LVecBase2f(float fill_value);
inline LVecBase2f::LVecBase2f(float x, float y);

2038 10 operator = 0 4 3543 22 LVecBase2f::operator = 0 2 5 6 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase2f &LVecBase2f::operator =(LVecBase2f const &copy);
inline LVecBase2f &LVecBase2f::operator =(float fill_value);

2039 12 operator new 0 4 3543 24 LVecBase2f::operator new 0 1 7 0
126
inline void *LVecBase2f::operator new(unsigned int size);
inline void *LVecBase2f::operator new(unsigned int size, void *ptr);

2040 15 operator delete 0 4 3543 27 LVecBase2f::operator delete 0 0 0
108
inline void LVecBase2f::operator delete(void *ptr);
inline void LVecBase2f::operator delete(void *, void *);

2041 12 validate_ptr 0 4 3543 24 LVecBase2f::validate_ptr 0 0 0
61
static inline bool LVecBase2f::validate_ptr(void const *ptr);

2042 4 zero 0 4 3543 16 LVecBase2f::zero 0 1 8 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2f const &LVecBase2f::zero(void);

2043 6 unit_x 0 4 3543 18 LVecBase2f::unit_x 0 1 9 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_x(void);

2044 6 unit_y 0 4 3543 18 LVecBase2f::unit_y 0 1 10 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_y(void);

2045 11 ~LVecBase2f 0 4 3543 23 LVecBase2f::~LVecBase2f 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2f::~LVecBase2f(void);

2046 10 __reduce__ 0 4 3543 22 LVecBase2f::__reduce__ 0 1 11 0
60
inline _object *LVecBase2f::__reduce__(_object *self) const;

2047 11 __getattr__ 0 4 3543 23 LVecBase2f::__getattr__ 0 1 12 0
85
inline _object *LVecBase2f::__getattr__(basic_string< char > const &attr_name) const;

2048 11 __setattr__ 0 4 3543 23 LVecBase2f::__setattr__ 0 1 13 0
106
inline int LVecBase2f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2049 11 operator [] 0 4 3543 23 LVecBase2f::operator [] 0 2 14 15 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase2f::operator [](int i) const;
inline float &LVecBase2f::operator [](int i);

2050 11 __setitem__ 0 4 3543 23 LVecBase2f::__setitem__ 0 1 16 0
52
inline void LVecBase2f::__setitem__(int i, float v);

2051 4 size 0 4 3543 16 LVecBase2f::size 0 1 17 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2f::size(void);

2052 6 is_nan 0 4 3543 18 LVecBase2f::is_nan 0 1 18 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2f::is_nan(void) const;

2053 8 get_cell 0 4 3543 20 LVecBase2f::get_cell 0 1 19 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase2f::get_cell(int i) const;

2054 5 get_x 0 4 3543 17 LVecBase2f::get_x 0 1 20 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_x(void) const;

2055 5 get_y 0 4 3543 17 LVecBase2f::get_y 0 1 21 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_y(void) const;

2056 8 set_cell 0 4 3543 20 LVecBase2f::set_cell 0 1 22 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2f::set_cell(int i, float value);

2057 5 set_x 0 4 3543 17 LVecBase2f::set_x 0 1 23 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_x(float value);

2058 5 set_y 0 4 3543 17 LVecBase2f::set_y 0 1 24 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_y(float value);

2059 11 add_to_cell 0 4 3543 23 LVecBase2f::add_to_cell 0 1 25 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase2f::add_to_cell(int i, float value);

2060 5 add_x 0 4 3543 17 LVecBase2f::add_x 0 1 26 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_x(float value);

2061 5 add_y 0 4 3543 17 LVecBase2f::add_y 0 1 27 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_y(float value);

2062 8 get_data 0 4 3543 20 LVecBase2f::get_data 0 1 28 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase2f::get_data(void) const;

2063 18 get_num_components 0 4 3543 30 LVecBase2f::get_num_components 0 1 29 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2f::get_num_components(void) const;

2064 4 fill 0 4 3543 16 LVecBase2f::fill 0 1 30 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase2f::fill(float fill_value);

2065 3 set 0 4 3543 15 LVecBase2f::set 0 1 31 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void LVecBase2f::set(float x, float y);

2066 3 dot 0 4 3543 15 LVecBase2f::dot 0 1 32 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase2f::dot(LVecBase2f const &other) const;

2067 14 length_squared 0 4 3543 26 LVecBase2f::length_squared 0 1 33 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase2f::length_squared(void) const;

2068 6 length 0 4 3543 18 LVecBase2f::length 0 1 34 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase2f::length(void) const;

2069 9 normalize 0 4 3543 21 LVecBase2f::normalize 0 1 35 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2f::normalize(void);

2070 7 project 0 4 3543 19 LVecBase2f::project 0 1 36 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LVecBase2f::project(LVecBase2f const &onto) const;

2071 10 operator < 0 4 3543 22 LVecBase2f::operator < 0 1 37 0
66
inline bool LVecBase2f::operator <(LVecBase2f const &other) const;

2072 11 operator == 0 4 3543 23 LVecBase2f::operator == 0 1 38 0
67
inline bool LVecBase2f::operator ==(LVecBase2f const &other) const;

2073 11 operator != 0 4 3543 23 LVecBase2f::operator != 0 1 39 0
67
inline bool LVecBase2f::operator !=(LVecBase2f const &other) const;

2074 10 compare_to 0 4 3543 22 LVecBase2f::compare_to 0 2 40 41 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase2f::compare_to(LVecBase2f const &other) const;
inline int LVecBase2f::compare_to(LVecBase2f const &other, float threshold) const;

2075 8 get_hash 0 4 3543 20 LVecBase2f::get_hash 0 2 42 43 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase2f::get_hash(void) const;
inline unsigned int LVecBase2f::get_hash(float threshold) const;

2076 8 add_hash 0 4 3543 20 LVecBase2f::add_hash 0 2 44 45 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase2f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2f::add_hash(unsigned int hash, float threshold) const;

2077 13 generate_hash 0 4 3543 25 LVecBase2f::generate_hash 0 2 46 47 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase2f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase2f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2078 10 operator - 0 68 3543 22 LVecBase2f::operator - 0 1 48 0
53
inline LVecBase2f LVecBase2f::operator -(void) const;

2079 10 operator + 0 4 3543 22 LVecBase2f::operator + 0 1 49 0
72
inline LVecBase2f LVecBase2f::operator +(LVecBase2f const &other) const;

2080 10 operator - 0 4 3543 22 LVecBase2f::operator - 0 1 50 0
72
inline LVecBase2f LVecBase2f::operator -(LVecBase2f const &other) const;

2081 10 operator * 0 4 3543 22 LVecBase2f::operator * 0 1 51 0
61
inline LVecBase2f LVecBase2f::operator *(float scalar) const;

2082 10 operator / 0 4 3543 22 LVecBase2f::operator / 0 1 52 0
61
inline LVecBase2f LVecBase2f::operator /(float scalar) const;

2083 11 operator += 0 4 3543 23 LVecBase2f::operator += 0 1 53 0
61
inline void LVecBase2f::operator +=(LVecBase2f const &other);

2084 11 operator -= 0 4 3543 23 LVecBase2f::operator -= 0 1 54 0
61
inline void LVecBase2f::operator -=(LVecBase2f const &other);

2085 11 operator *= 0 4 3543 23 LVecBase2f::operator *= 0 1 55 0
50
inline void LVecBase2f::operator *=(float scalar);

2086 11 operator /= 0 4 3543 23 LVecBase2f::operator /= 0 1 56 0
50
inline void LVecBase2f::operator /=(float scalar);

2087 18 componentwise_mult 0 4 3543 30 LVecBase2f::componentwise_mult 0 1 57 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2f::componentwise_mult(LVecBase2f const &other);

2088 7 __pow__ 0 4 3543 19 LVecBase2f::__pow__ 0 1 58 0
60
inline LVecBase2f LVecBase2f::__pow__(float exponent) const;

2089 8 __ipow__ 0 4 3543 20 LVecBase2f::__ipow__ 0 1 59 0
68
inline _object *LVecBase2f::__ipow__(_object *self, float exponent);

2090 4 fmax 0 4 3543 16 LVecBase2f::fmax 0 1 60 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2f LVecBase2f::fmax(LVecBase2f const &other) const;

2091 4 fmin 0 4 3543 16 LVecBase2f::fmin 0 1 61 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2f LVecBase2f::fmin(LVecBase2f const &other) const;

2092 12 almost_equal 0 4 3543 24 LVecBase2f::almost_equal 0 2 62 63 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase2f::almost_equal(LVecBase2f const &other, float threshold) const;
inline bool LVecBase2f::almost_equal(LVecBase2f const &other) const;

2093 6 output 0 4 3543 18 LVecBase2f::output 0 1 64 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2f::output(ostream &out) const;

2094 11 python_repr 0 4 3543 23 LVecBase2f::python_repr 0 1 65 0
96
inline void LVecBase2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2095 20 write_datagram_fixed 0 4 3543 32 LVecBase2f::write_datagram_fixed 0 1 66 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2f::write_datagram_fixed(Datagram &destination) const;

2096 19 read_datagram_fixed 0 4 3543 31 LVecBase2f::read_datagram_fixed 0 1 67 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2f::read_datagram_fixed(DatagramIterator &source);

2097 14 write_datagram 0 4 3543 26 LVecBase2f::write_datagram 0 1 68 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2f::write_datagram(Datagram &destination) const;

2098 13 read_datagram 0 4 3543 25 LVecBase2f::read_datagram 0 1 69 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2f::read_datagram(DatagramIterator &source);

2099 14 get_class_type 0 4 3543 26 LVecBase2f::get_class_type 0 1 70 0
51
static TypeHandle LVecBase2f::get_class_type(void);

2100 10 LVecBase2d 0 4 3544 22 LVecBase2d::LVecBase2d 0 4 71 72 73 74 903
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
192
inline LVecBase2d::LVecBase2d(void);
inline LVecBase2d::LVecBase2d(LVecBase2d const &copy);
inline LVecBase2d::LVecBase2d(double fill_value);
inline LVecBase2d::LVecBase2d(double x, double y);

2101 10 operator = 0 4 3544 22 LVecBase2d::operator = 0 2 75 76 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase2d &LVecBase2d::operator =(LVecBase2d const &copy);
inline LVecBase2d &LVecBase2d::operator =(double fill_value);

2102 12 operator new 0 4 3544 24 LVecBase2d::operator new 0 1 77 0
126
inline void *LVecBase2d::operator new(unsigned int size);
inline void *LVecBase2d::operator new(unsigned int size, void *ptr);

2103 15 operator delete 0 4 3544 27 LVecBase2d::operator delete 0 0 0
108
inline void LVecBase2d::operator delete(void *ptr);
inline void LVecBase2d::operator delete(void *, void *);

2104 12 validate_ptr 0 4 3544 24 LVecBase2d::validate_ptr 0 0 0
61
static inline bool LVecBase2d::validate_ptr(void const *ptr);

2105 4 zero 0 4 3544 16 LVecBase2d::zero 0 1 78 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2d const &LVecBase2d::zero(void);

2106 6 unit_x 0 4 3544 18 LVecBase2d::unit_x 0 1 79 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_x(void);

2107 6 unit_y 0 4 3544 18 LVecBase2d::unit_y 0 1 80 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_y(void);

2108 11 ~LVecBase2d 0 4 3544 23 LVecBase2d::~LVecBase2d 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2d::~LVecBase2d(void);

2109 10 __reduce__ 0 4 3544 22 LVecBase2d::__reduce__ 0 1 81 0
60
inline _object *LVecBase2d::__reduce__(_object *self) const;

2110 11 __getattr__ 0 4 3544 23 LVecBase2d::__getattr__ 0 1 82 0
85
inline _object *LVecBase2d::__getattr__(basic_string< char > const &attr_name) const;

2111 11 __setattr__ 0 4 3544 23 LVecBase2d::__setattr__ 0 1 83 0
106
inline int LVecBase2d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2112 11 operator [] 0 4 3544 23 LVecBase2d::operator [] 0 2 84 85 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase2d::operator [](int i) const;
inline double &LVecBase2d::operator [](int i);

2113 11 __setitem__ 0 4 3544 23 LVecBase2d::__setitem__ 0 1 86 0
53
inline void LVecBase2d::__setitem__(int i, double v);

2114 4 size 0 4 3544 16 LVecBase2d::size 0 1 87 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2d::size(void);

2115 6 is_nan 0 4 3544 18 LVecBase2d::is_nan 0 1 88 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2d::is_nan(void) const;

2116 8 get_cell 0 4 3544 20 LVecBase2d::get_cell 0 1 89 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase2d::get_cell(int i) const;

2117 5 get_x 0 4 3544 17 LVecBase2d::get_x 0 1 90 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_x(void) const;

2118 5 get_y 0 4 3544 17 LVecBase2d::get_y 0 1 91 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_y(void) const;

2119 8 set_cell 0 4 3544 20 LVecBase2d::set_cell 0 1 92 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2d::set_cell(int i, double value);

2120 5 set_x 0 4 3544 17 LVecBase2d::set_x 0 1 93 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_x(double value);

2121 5 set_y 0 4 3544 17 LVecBase2d::set_y 0 1 94 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_y(double value);

2122 11 add_to_cell 0 4 3544 23 LVecBase2d::add_to_cell 0 1 95 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase2d::add_to_cell(int i, double value);

2123 5 add_x 0 4 3544 17 LVecBase2d::add_x 0 1 96 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_x(double value);

2124 5 add_y 0 4 3544 17 LVecBase2d::add_y 0 1 97 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_y(double value);

2125 8 get_data 0 4 3544 20 LVecBase2d::get_data 0 1 98 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase2d::get_data(void) const;

2126 18 get_num_components 0 4 3544 30 LVecBase2d::get_num_components 0 1 99 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2d::get_num_components(void) const;

2127 4 fill 0 4 3544 16 LVecBase2d::fill 0 1 100 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::fill(double fill_value);

2128 3 set 0 4 3544 15 LVecBase2d::set 0 1 101 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::set(double x, double y);

2129 3 dot 0 4 3544 15 LVecBase2d::dot 0 1 102 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase2d::dot(LVecBase2d const &other) const;

2130 14 length_squared 0 4 3544 26 LVecBase2d::length_squared 0 1 103 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase2d::length_squared(void) const;

2131 6 length 0 4 3544 18 LVecBase2d::length 0 1 104 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase2d::length(void) const;

2132 9 normalize 0 4 3544 21 LVecBase2d::normalize 0 1 105 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2d::normalize(void);

2133 7 project 0 4 3544 19 LVecBase2d::project 0 1 106 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LVecBase2d::project(LVecBase2d const &onto) const;

2134 10 operator < 0 4 3544 22 LVecBase2d::operator < 0 1 107 0
66
inline bool LVecBase2d::operator <(LVecBase2d const &other) const;

2135 11 operator == 0 4 3544 23 LVecBase2d::operator == 0 1 108 0
67
inline bool LVecBase2d::operator ==(LVecBase2d const &other) const;

2136 11 operator != 0 4 3544 23 LVecBase2d::operator != 0 1 109 0
67
inline bool LVecBase2d::operator !=(LVecBase2d const &other) const;

2137 10 compare_to 0 4 3544 22 LVecBase2d::compare_to 0 2 110 111 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase2d::compare_to(LVecBase2d const &other) const;
inline int LVecBase2d::compare_to(LVecBase2d const &other, double threshold) const;

2138 8 get_hash 0 4 3544 20 LVecBase2d::get_hash 0 2 112 113 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase2d::get_hash(void) const;
inline unsigned int LVecBase2d::get_hash(double threshold) const;

2139 8 add_hash 0 4 3544 20 LVecBase2d::add_hash 0 2 114 115 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase2d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2d::add_hash(unsigned int hash, double threshold) const;

2140 13 generate_hash 0 4 3544 25 LVecBase2d::generate_hash 0 2 116 117 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase2d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase2d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2141 10 operator - 0 68 3544 22 LVecBase2d::operator - 0 1 118 0
53
inline LVecBase2d LVecBase2d::operator -(void) const;

2142 10 operator + 0 4 3544 22 LVecBase2d::operator + 0 1 119 0
72
inline LVecBase2d LVecBase2d::operator +(LVecBase2d const &other) const;

2143 10 operator - 0 4 3544 22 LVecBase2d::operator - 0 1 120 0
72
inline LVecBase2d LVecBase2d::operator -(LVecBase2d const &other) const;

2144 10 operator * 0 4 3544 22 LVecBase2d::operator * 0 1 121 0
62
inline LVecBase2d LVecBase2d::operator *(double scalar) const;

2145 10 operator / 0 4 3544 22 LVecBase2d::operator / 0 1 122 0
62
inline LVecBase2d LVecBase2d::operator /(double scalar) const;

2146 11 operator += 0 4 3544 23 LVecBase2d::operator += 0 1 123 0
61
inline void LVecBase2d::operator +=(LVecBase2d const &other);

2147 11 operator -= 0 4 3544 23 LVecBase2d::operator -= 0 1 124 0
61
inline void LVecBase2d::operator -=(LVecBase2d const &other);

2148 11 operator *= 0 4 3544 23 LVecBase2d::operator *= 0 1 125 0
51
inline void LVecBase2d::operator *=(double scalar);

2149 11 operator /= 0 4 3544 23 LVecBase2d::operator /= 0 1 126 0
51
inline void LVecBase2d::operator /=(double scalar);

2150 18 componentwise_mult 0 4 3544 30 LVecBase2d::componentwise_mult 0 1 127 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2d::componentwise_mult(LVecBase2d const &other);

2151 7 __pow__ 0 4 3544 19 LVecBase2d::__pow__ 0 1 128 0
61
inline LVecBase2d LVecBase2d::__pow__(double exponent) const;

2152 8 __ipow__ 0 4 3544 20 LVecBase2d::__ipow__ 0 1 129 0
69
inline _object *LVecBase2d::__ipow__(_object *self, double exponent);

2153 4 fmax 0 4 3544 16 LVecBase2d::fmax 0 1 130 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2d LVecBase2d::fmax(LVecBase2d const &other) const;

2154 4 fmin 0 4 3544 16 LVecBase2d::fmin 0 1 131 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2d LVecBase2d::fmin(LVecBase2d const &other) const;

2155 12 almost_equal 0 4 3544 24 LVecBase2d::almost_equal 0 2 132 133 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase2d::almost_equal(LVecBase2d const &other, double threshold) const;
inline bool LVecBase2d::almost_equal(LVecBase2d const &other) const;

2156 6 output 0 4 3544 18 LVecBase2d::output 0 1 134 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::output(ostream &out) const;

2157 11 python_repr 0 4 3544 23 LVecBase2d::python_repr 0 1 135 0
96
inline void LVecBase2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2158 20 write_datagram_fixed 0 4 3544 32 LVecBase2d::write_datagram_fixed 0 1 136 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2d::write_datagram_fixed(Datagram &destination) const;

2159 19 read_datagram_fixed 0 4 3544 31 LVecBase2d::read_datagram_fixed 0 1 137 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2d::read_datagram_fixed(DatagramIterator &source);

2160 14 write_datagram 0 4 3544 26 LVecBase2d::write_datagram 0 1 138 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2d::write_datagram(Datagram &destination) const;

2161 13 read_datagram 0 4 3544 25 LVecBase2d::read_datagram 0 1 139 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2d::read_datagram(DatagramIterator &source);

2162 14 get_class_type 0 4 3544 26 LVecBase2d::get_class_type 0 1 140 0
51
static TypeHandle LVecBase2d::get_class_type(void);

2163 10 LVecBase2i 0 4 3545 22 LVecBase2i::LVecBase2i 0 4 141 142 143 144 903
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
183
inline LVecBase2i::LVecBase2i(void);
inline LVecBase2i::LVecBase2i(LVecBase2i const &copy);
inline LVecBase2i::LVecBase2i(int fill_value);
inline LVecBase2i::LVecBase2i(int x, int y);

2164 10 operator = 0 4 3545 22 LVecBase2i::operator = 0 2 145 146 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
125
inline LVecBase2i &LVecBase2i::operator =(LVecBase2i const &copy);
inline LVecBase2i &LVecBase2i::operator =(int fill_value);

2165 12 operator new 0 4 3545 24 LVecBase2i::operator new 0 1 147 0
126
inline void *LVecBase2i::operator new(unsigned int size);
inline void *LVecBase2i::operator new(unsigned int size, void *ptr);

2166 15 operator delete 0 4 3545 27 LVecBase2i::operator delete 0 0 0
108
inline void LVecBase2i::operator delete(void *ptr);
inline void LVecBase2i::operator delete(void *, void *);

2167 12 validate_ptr 0 4 3545 24 LVecBase2i::validate_ptr 0 0 0
61
static inline bool LVecBase2i::validate_ptr(void const *ptr);

2168 4 zero 0 4 3545 16 LVecBase2i::zero 0 1 148 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2i const &LVecBase2i::zero(void);

2169 6 unit_x 0 4 3545 18 LVecBase2i::unit_x 0 1 149 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2i const &LVecBase2i::unit_x(void);

2170 6 unit_y 0 4 3545 18 LVecBase2i::unit_y 0 1 150 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2i const &LVecBase2i::unit_y(void);

2171 11 ~LVecBase2i 0 4 3545 23 LVecBase2i::~LVecBase2i 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2i::~LVecBase2i(void);

2172 10 __reduce__ 0 4 3545 22 LVecBase2i::__reduce__ 0 1 151 0
60
inline _object *LVecBase2i::__reduce__(_object *self) const;

2173 11 __getattr__ 0 4 3545 23 LVecBase2i::__getattr__ 0 1 152 0
85
inline _object *LVecBase2i::__getattr__(basic_string< char > const &attr_name) const;

2174 11 __setattr__ 0 4 3545 23 LVecBase2i::__setattr__ 0 1 153 0
106
inline int LVecBase2i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2175 11 operator [] 0 4 3545 23 LVecBase2i::operator [] 0 2 154 155 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
inline int LVecBase2i::operator [](int i) const;
inline int &LVecBase2i::operator [](int i);

2176 11 __setitem__ 0 4 3545 23 LVecBase2i::__setitem__ 0 1 156 0
50
inline void LVecBase2i::__setitem__(int i, int v);

2177 4 size 0 4 3545 16 LVecBase2i::size 0 1 157 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2i::size(void);

2178 6 is_nan 0 4 3545 18 LVecBase2i::is_nan 0 1 158 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2i::is_nan(void) const;

2179 8 get_cell 0 4 3545 20 LVecBase2i::get_cell 0 1 159 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline int LVecBase2i::get_cell(int i) const;

2180 5 get_x 0 4 3545 17 LVecBase2i::get_x 0 1 160 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase2i::get_x(void) const;

2181 5 get_y 0 4 3545 17 LVecBase2i::get_y 0 1 161 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase2i::get_y(void) const;

2182 8 set_cell 0 4 3545 20 LVecBase2i::set_cell 0 1 162 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2i::set_cell(int i, int value);

2183 5 set_x 0 4 3545 17 LVecBase2i::set_x 0 1 163 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::set_x(int value);

2184 5 set_y 0 4 3545 17 LVecBase2i::set_y 0 1 164 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::set_y(int value);

2185 11 add_to_cell 0 4 3545 23 LVecBase2i::add_to_cell 0 1 165 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2i::add_to_cell(int i, int value);

2186 5 add_x 0 4 3545 17 LVecBase2i::add_x 0 1 166 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::add_x(int value);

2187 5 add_y 0 4 3545 17 LVecBase2i::add_y 0 1 167 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::add_y(int value);

2188 8 get_data 0 4 3545 20 LVecBase2i::get_data 0 1 168 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
51
inline int const *LVecBase2i::get_data(void) const;

2189 18 get_num_components 0 4 3545 30 LVecBase2i::get_num_components 0 1 169 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2i::get_num_components(void) const;

2190 4 fill 0 4 3545 16 LVecBase2i::fill 0 1 170 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
45
inline void LVecBase2i::fill(int fill_value);

2191 3 set 0 4 3545 15 LVecBase2i::set 0 1 171 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LVecBase2i::set(int x, int y);

2192 3 dot 0 4 3545 15 LVecBase2i::dot 0 1 172 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline int LVecBase2i::dot(LVecBase2i const &other) const;

2193 14 length_squared 0 4 3545 26 LVecBase2i::length_squared 0 1 173 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
50
inline int LVecBase2i::length_squared(void) const;

2194 10 operator < 0 4 3545 22 LVecBase2i::operator < 0 1 174 0
66
inline bool LVecBase2i::operator <(LVecBase2i const &other) const;

2195 11 operator == 0 4 3545 23 LVecBase2i::operator == 0 1 175 0
67
inline bool LVecBase2i::operator ==(LVecBase2i const &other) const;

2196 11 operator != 0 4 3545 23 LVecBase2i::operator != 0 1 176 0
67
inline bool LVecBase2i::operator !=(LVecBase2i const &other) const;

2197 10 compare_to 0 4 3545 22 LVecBase2i::compare_to 0 1 177 321
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
65
inline int LVecBase2i::compare_to(LVecBase2i const &other) const;

2198 8 get_hash 0 4 3545 20 LVecBase2i::get_hash 0 1 178 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase2i::get_hash(void) const;

2199 8 add_hash 0 4 3545 20 LVecBase2i::add_hash 0 1 179 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase2i::add_hash(unsigned int hash) const;

2200 13 generate_hash 0 4 3545 25 LVecBase2i::generate_hash 0 1 180 272
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
76
inline void LVecBase2i::generate_hash(ChecksumHashGenerator &hashgen) const;

2201 10 operator - 0 68 3545 22 LVecBase2i::operator - 0 1 181 0
53
inline LVecBase2i LVecBase2i::operator -(void) const;

2202 10 operator + 0 4 3545 22 LVecBase2i::operator + 0 1 182 0
72
inline LVecBase2i LVecBase2i::operator +(LVecBase2i const &other) const;

2203 10 operator - 0 4 3545 22 LVecBase2i::operator - 0 1 183 0
72
inline LVecBase2i LVecBase2i::operator -(LVecBase2i const &other) const;

2204 10 operator * 0 4 3545 22 LVecBase2i::operator * 0 1 184 0
59
inline LVecBase2i LVecBase2i::operator *(int scalar) const;

2205 10 operator / 0 4 3545 22 LVecBase2i::operator / 0 1 185 0
59
inline LVecBase2i LVecBase2i::operator /(int scalar) const;

2206 11 operator += 0 4 3545 23 LVecBase2i::operator += 0 1 186 0
61
inline void LVecBase2i::operator +=(LVecBase2i const &other);

2207 11 operator -= 0 4 3545 23 LVecBase2i::operator -= 0 1 187 0
61
inline void LVecBase2i::operator -=(LVecBase2i const &other);

2208 11 operator *= 0 4 3545 23 LVecBase2i::operator *= 0 1 188 0
48
inline void LVecBase2i::operator *=(int scalar);

2209 11 operator /= 0 4 3545 23 LVecBase2i::operator /= 0 1 189 0
48
inline void LVecBase2i::operator /=(int scalar);

2210 18 componentwise_mult 0 4 3545 30 LVecBase2i::componentwise_mult 0 1 190 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2i::componentwise_mult(LVecBase2i const &other);

2211 7 __pow__ 0 4 3545 19 LVecBase2i::__pow__ 0 1 191 0
58
inline LVecBase2i LVecBase2i::__pow__(int exponent) const;

2212 8 __ipow__ 0 4 3545 20 LVecBase2i::__ipow__ 0 1 192 0
66
inline _object *LVecBase2i::__ipow__(_object *self, int exponent);

2213 4 fmax 0 4 3545 16 LVecBase2i::fmax 0 1 193 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2i LVecBase2i::fmax(LVecBase2i const &other) const;

2214 4 fmin 0 4 3545 16 LVecBase2i::fmin 0 1 194 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2i LVecBase2i::fmin(LVecBase2i const &other) const;

2215 12 almost_equal 0 4 3545 24 LVecBase2i::almost_equal 0 2 195 196 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
152
inline bool LVecBase2i::almost_equal(LVecBase2i const &other, int threshold) const;
inline bool LVecBase2i::almost_equal(LVecBase2i const &other) const;

2216 6 output 0 4 3545 18 LVecBase2i::output 0 1 197 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2i::output(ostream &out) const;

2217 11 python_repr 0 4 3545 23 LVecBase2i::python_repr 0 1 198 0
96
inline void LVecBase2i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2218 20 write_datagram_fixed 0 4 3545 32 LVecBase2i::write_datagram_fixed 0 1 199 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2i::write_datagram_fixed(Datagram &destination) const;

2219 19 read_datagram_fixed 0 4 3545 31 LVecBase2i::read_datagram_fixed 0 1 200 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2i::read_datagram_fixed(DatagramIterator &source);

2220 14 write_datagram 0 4 3545 26 LVecBase2i::write_datagram 0 1 201 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2i::write_datagram(Datagram &destination) const;

2221 13 read_datagram 0 4 3545 25 LVecBase2i::read_datagram 0 1 202 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2i::read_datagram(DatagramIterator &source);

2222 14 get_class_type 0 4 3545 26 LVecBase2i::get_class_type 0 1 203 0
51
static TypeHandle LVecBase2i::get_class_type(void);

2223 9 LVector2f 0 4 3546 20 LVector2f::LVector2f 0 4 204 205 206 207 887
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
181
inline LVector2f::LVector2f(void);
inline LVector2f::LVector2f(LVecBase2f const &copy);
inline LVector2f::LVector2f(float fill_value);
inline LVector2f::LVector2f(float x, float y);

2224 10 operator = 0 4 3546 21 LVector2f::operator = 0 2 208 209 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector2f &LVector2f::operator =(LVecBase2f const &copy);
inline LVector2f &LVector2f::operator =(float fill_value);

2225 11 __getattr__ 0 4 3546 22 LVector2f::__getattr__ 0 1 210 0
84
inline _object *LVector2f::__getattr__(basic_string< char > const &attr_name) const;

2226 11 __setattr__ 0 4 3546 22 LVector2f::__setattr__ 0 1 211 0
105
inline int LVector2f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2227 4 zero 0 4 3546 15 LVector2f::zero 0 1 212 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2f const &LVector2f::zero(void);

2228 6 unit_x 0 4 3546 17 LVector2f::unit_x 0 1 213 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_x(void);

2229 6 unit_y 0 4 3546 17 LVector2f::unit_y 0 1 214 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_y(void);

2230 10 operator - 0 68 3546 21 LVector2f::operator - 0 1 215 0
51
inline LVector2f LVector2f::operator -(void) const;

2231 10 operator + 0 4 3546 21 LVector2f::operator + 0 2 216 217 0
141
inline LVecBase2f LVector2f::operator +(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator +(LVector2f const &other) const;

2232 10 operator - 0 4 3546 21 LVector2f::operator - 0 2 218 219 0
141
inline LVecBase2f LVector2f::operator -(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator -(LVector2f const &other) const;

2233 10 operator * 0 4 3546 21 LVector2f::operator * 0 1 220 0
59
inline LVector2f LVector2f::operator *(float scalar) const;

2234 10 operator / 0 4 3546 21 LVector2f::operator / 0 1 221 0
59
inline LVector2f LVector2f::operator /(float scalar) const;

2235 7 project 0 4 3546 18 LVector2f::project 0 1 222 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2f LVector2f::project(LVecBase2f const &onto) const;

2236 16 signed_angle_rad 0 4 3546 27 LVector2f::signed_angle_rad 0 1 223 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_rad(LVector2f const &other) const;

2237 16 signed_angle_deg 0 4 3546 27 LVector2f::signed_angle_deg 0 1 224 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_deg(LVector2f const &other) const;

2238 11 python_repr 0 4 3546 22 LVector2f::python_repr 0 1 225 0
95
inline void LVector2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2239 14 get_class_type 0 4 3546 25 LVector2f::get_class_type 0 1 226 0
50
static TypeHandle LVector2f::get_class_type(void);

2240 10 ~LVector2f 0 4 3546 21 LVector2f::~LVector2f 0 0 0
28
LVector2f::~LVector2f(void);

2241 9 LVector2d 0 4 3547 20 LVector2d::LVector2d 0 4 227 228 229 230 887
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
184
inline LVector2d::LVector2d(void);
inline LVector2d::LVector2d(LVecBase2d const &copy);
inline LVector2d::LVector2d(double fill_value);
inline LVector2d::LVector2d(double x, double y);

2242 10 operator = 0 4 3547 21 LVector2d::operator = 0 2 231 232 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector2d &LVector2d::operator =(LVecBase2d const &copy);
inline LVector2d &LVector2d::operator =(double fill_value);

2243 11 __getattr__ 0 4 3547 22 LVector2d::__getattr__ 0 1 233 0
84
inline _object *LVector2d::__getattr__(basic_string< char > const &attr_name) const;

2244 11 __setattr__ 0 4 3547 22 LVector2d::__setattr__ 0 1 234 0
105
inline int LVector2d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2245 4 zero 0 4 3547 15 LVector2d::zero 0 1 235 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2d const &LVector2d::zero(void);

2246 6 unit_x 0 4 3547 17 LVector2d::unit_x 0 1 236 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_x(void);

2247 6 unit_y 0 4 3547 17 LVector2d::unit_y 0 1 237 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_y(void);

2248 10 operator - 0 68 3547 21 LVector2d::operator - 0 1 238 0
51
inline LVector2d LVector2d::operator -(void) const;

2249 10 operator + 0 4 3547 21 LVector2d::operator + 0 2 239 240 0
141
inline LVecBase2d LVector2d::operator +(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator +(LVector2d const &other) const;

2250 10 operator - 0 4 3547 21 LVector2d::operator - 0 2 241 242 0
141
inline LVecBase2d LVector2d::operator -(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator -(LVector2d const &other) const;

2251 10 operator * 0 4 3547 21 LVector2d::operator * 0 1 243 0
60
inline LVector2d LVector2d::operator *(double scalar) const;

2252 10 operator / 0 4 3547 21 LVector2d::operator / 0 1 244 0
60
inline LVector2d LVector2d::operator /(double scalar) const;

2253 7 project 0 4 3547 18 LVector2d::project 0 1 245 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2d LVector2d::project(LVecBase2d const &onto) const;

2254 16 signed_angle_rad 0 4 3547 27 LVector2d::signed_angle_rad 0 1 246 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_rad(LVector2d const &other) const;

2255 16 signed_angle_deg 0 4 3547 27 LVector2d::signed_angle_deg 0 1 247 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_deg(LVector2d const &other) const;

2256 11 python_repr 0 4 3547 22 LVector2d::python_repr 0 1 248 0
95
inline void LVector2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2257 14 get_class_type 0 4 3547 25 LVector2d::get_class_type 0 1 249 0
50
static TypeHandle LVector2d::get_class_type(void);

2258 10 ~LVector2d 0 4 3547 21 LVector2d::~LVector2d 0 0 0
28
LVector2d::~LVector2d(void);

2259 9 LVector2i 0 4 3548 20 LVector2i::LVector2i 0 4 250 251 252 253 887
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
175
inline LVector2i::LVector2i(void);
inline LVector2i::LVector2i(LVecBase2i const &copy);
inline LVector2i::LVector2i(int fill_value);
inline LVector2i::LVector2i(int x, int y);

2260 10 operator = 0 4 3548 21 LVector2i::operator = 0 2 254 255 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LVector2i &LVector2i::operator =(LVecBase2i const &copy);
inline LVector2i &LVector2i::operator =(int fill_value);

2261 11 __getattr__ 0 4 3548 22 LVector2i::__getattr__ 0 1 256 0
84
inline _object *LVector2i::__getattr__(basic_string< char > const &attr_name) const;

2262 11 __setattr__ 0 4 3548 22 LVector2i::__setattr__ 0 1 257 0
105
inline int LVector2i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2263 4 zero 0 4 3548 15 LVector2i::zero 0 1 258 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2i const &LVector2i::zero(void);

2264 6 unit_x 0 4 3548 17 LVector2i::unit_x 0 1 259 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2i const &LVector2i::unit_x(void);

2265 6 unit_y 0 4 3548 17 LVector2i::unit_y 0 1 260 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2i const &LVector2i::unit_y(void);

2266 10 operator - 0 68 3548 21 LVector2i::operator - 0 1 261 0
51
inline LVector2i LVector2i::operator -(void) const;

2267 10 operator + 0 4 3548 21 LVector2i::operator + 0 2 262 263 0
141
inline LVecBase2i LVector2i::operator +(LVecBase2i const &other) const;
inline LVector2i LVector2i::operator +(LVector2i const &other) const;

2268 10 operator - 0 4 3548 21 LVector2i::operator - 0 2 264 265 0
141
inline LVecBase2i LVector2i::operator -(LVecBase2i const &other) const;
inline LVector2i LVector2i::operator -(LVector2i const &other) const;

2269 10 operator * 0 4 3548 21 LVector2i::operator * 0 1 266 0
57
inline LVector2i LVector2i::operator *(int scalar) const;

2270 10 operator / 0 4 3548 21 LVector2i::operator / 0 1 267 0
57
inline LVector2i LVector2i::operator /(int scalar) const;

2271 11 python_repr 0 4 3548 22 LVector2i::python_repr 0 1 268 0
95
inline void LVector2i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2272 14 get_class_type 0 4 3548 25 LVector2i::get_class_type 0 1 269 0
50
static TypeHandle LVector2i::get_class_type(void);

2273 10 ~LVector2i 0 4 3548 21 LVector2i::~LVector2i 0 0 0
28
LVector2i::~LVector2i(void);

2274 8 LPoint2f 0 4 3549 18 LPoint2f::LPoint2f 0 4 270 271 272 273 883
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
173
inline LPoint2f::LPoint2f(void);
inline LPoint2f::LPoint2f(LVecBase2f const &copy);
inline LPoint2f::LPoint2f(float fill_value);
inline LPoint2f::LPoint2f(float x, float y);

2275 10 operator = 0 4 3549 20 LPoint2f::operator = 0 2 274 275 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint2f &LPoint2f::operator =(LVecBase2f const &copy);
inline LPoint2f &LPoint2f::operator =(float fill_value);

2276 11 __getattr__ 0 4 3549 21 LPoint2f::__getattr__ 0 1 276 0
83
inline _object *LPoint2f::__getattr__(basic_string< char > const &attr_name) const;

2277 11 __setattr__ 0 4 3549 21 LPoint2f::__setattr__ 0 1 277 0
104
inline int LPoint2f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2278 4 zero 0 4 3549 14 LPoint2f::zero 0 1 278 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2f const &LPoint2f::zero(void);

2279 6 unit_x 0 4 3549 16 LPoint2f::unit_x 0 1 279 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_x(void);

2280 6 unit_y 0 4 3549 16 LPoint2f::unit_y 0 1 280 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_y(void);

2281 10 operator - 0 68 3549 20 LPoint2f::operator - 0 1 281 0
49
inline LPoint2f LPoint2f::operator -(void) const;

2282 10 operator + 0 4 3549 20 LPoint2f::operator + 0 2 282 283 0
138
inline LVecBase2f LPoint2f::operator +(LVecBase2f const &other) const;
inline LPoint2f LPoint2f::operator +(LVector2f const &other) const;

2283 10 operator - 0 4 3549 20 LPoint2f::operator - 0 3 284 285 286 0
206
inline LVecBase2f LPoint2f::operator -(LVecBase2f const &other) const;
inline LVector2f LPoint2f::operator -(LPoint2f const &other) const;
inline LPoint2f LPoint2f::operator -(LVector2f const &other) const;

2284 10 operator * 0 4 3549 20 LPoint2f::operator * 0 1 287 0
57
inline LPoint2f LPoint2f::operator *(float scalar) const;

2285 10 operator / 0 4 3549 20 LPoint2f::operator / 0 1 288 0
57
inline LPoint2f LPoint2f::operator /(float scalar) const;

2286 7 project 0 4 3549 17 LPoint2f::project 0 1 289 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2f LPoint2f::project(LVecBase2f const &onto) const;

2287 11 python_repr 0 4 3549 21 LPoint2f::python_repr 0 1 290 0
94
inline void LPoint2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2288 14 get_class_type 0 4 3549 24 LPoint2f::get_class_type 0 1 291 0
49
static TypeHandle LPoint2f::get_class_type(void);

2289 9 ~LPoint2f 0 4 3549 19 LPoint2f::~LPoint2f 0 0 0
26
LPoint2f::~LPoint2f(void);

2290 8 LPoint2d 0 4 3550 18 LPoint2d::LPoint2d 0 4 292 293 294 295 883
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
176
inline LPoint2d::LPoint2d(void);
inline LPoint2d::LPoint2d(LVecBase2d const &copy);
inline LPoint2d::LPoint2d(double fill_value);
inline LPoint2d::LPoint2d(double x, double y);

2291 10 operator = 0 4 3550 20 LPoint2d::operator = 0 2 296 297 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint2d &LPoint2d::operator =(LVecBase2d const &copy);
inline LPoint2d &LPoint2d::operator =(double fill_value);

2292 11 __getattr__ 0 4 3550 21 LPoint2d::__getattr__ 0 1 298 0
83
inline _object *LPoint2d::__getattr__(basic_string< char > const &attr_name) const;

2293 11 __setattr__ 0 4 3550 21 LPoint2d::__setattr__ 0 1 299 0
104
inline int LPoint2d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2294 4 zero 0 4 3550 14 LPoint2d::zero 0 1 300 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2d const &LPoint2d::zero(void);

2295 6 unit_x 0 4 3550 16 LPoint2d::unit_x 0 1 301 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_x(void);

2296 6 unit_y 0 4 3550 16 LPoint2d::unit_y 0 1 302 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_y(void);

2297 10 operator - 0 68 3550 20 LPoint2d::operator - 0 1 303 0
49
inline LPoint2d LPoint2d::operator -(void) const;

2298 10 operator + 0 4 3550 20 LPoint2d::operator + 0 2 304 305 0
138
inline LVecBase2d LPoint2d::operator +(LVecBase2d const &other) const;
inline LPoint2d LPoint2d::operator +(LVector2d const &other) const;

2299 10 operator - 0 4 3550 20 LPoint2d::operator - 0 3 306 307 308 0
206
inline LVecBase2d LPoint2d::operator -(LVecBase2d const &other) const;
inline LVector2d LPoint2d::operator -(LPoint2d const &other) const;
inline LPoint2d LPoint2d::operator -(LVector2d const &other) const;

2300 10 operator * 0 4 3550 20 LPoint2d::operator * 0 1 309 0
58
inline LPoint2d LPoint2d::operator *(double scalar) const;

2301 10 operator / 0 4 3550 20 LPoint2d::operator / 0 1 310 0
58
inline LPoint2d LPoint2d::operator /(double scalar) const;

2302 7 project 0 4 3550 17 LPoint2d::project 0 1 311 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2d LPoint2d::project(LVecBase2d const &onto) const;

2303 11 python_repr 0 4 3550 21 LPoint2d::python_repr 0 1 312 0
94
inline void LPoint2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2304 14 get_class_type 0 4 3550 24 LPoint2d::get_class_type 0 1 313 0
49
static TypeHandle LPoint2d::get_class_type(void);

2305 9 ~LPoint2d 0 4 3550 19 LPoint2d::~LPoint2d 0 0 0
26
LPoint2d::~LPoint2d(void);

2306 8 LPoint2i 0 4 3551 18 LPoint2i::LPoint2i 0 4 314 315 316 317 883
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
167
inline LPoint2i::LPoint2i(void);
inline LPoint2i::LPoint2i(LVecBase2i const &copy);
inline LPoint2i::LPoint2i(int fill_value);
inline LPoint2i::LPoint2i(int x, int y);

2307 10 operator = 0 4 3551 20 LPoint2i::operator = 0 2 318 319 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
117
inline LPoint2i &LPoint2i::operator =(LVecBase2i const &copy);
inline LPoint2i &LPoint2i::operator =(int fill_value);

2308 11 __getattr__ 0 4 3551 21 LPoint2i::__getattr__ 0 1 320 0
83
inline _object *LPoint2i::__getattr__(basic_string< char > const &attr_name) const;

2309 11 __setattr__ 0 4 3551 21 LPoint2i::__setattr__ 0 1 321 0
104
inline int LPoint2i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2310 4 zero 0 4 3551 14 LPoint2i::zero 0 1 322 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2i const &LPoint2i::zero(void);

2311 6 unit_x 0 4 3551 16 LPoint2i::unit_x 0 1 323 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2i const &LPoint2i::unit_x(void);

2312 6 unit_y 0 4 3551 16 LPoint2i::unit_y 0 1 324 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2i const &LPoint2i::unit_y(void);

2313 10 operator - 0 68 3551 20 LPoint2i::operator - 0 1 325 0
49
inline LPoint2i LPoint2i::operator -(void) const;

2314 10 operator + 0 4 3551 20 LPoint2i::operator + 0 2 326 327 0
138
inline LVecBase2i LPoint2i::operator +(LVecBase2i const &other) const;
inline LPoint2i LPoint2i::operator +(LVector2i const &other) const;

2315 10 operator - 0 4 3551 20 LPoint2i::operator - 0 3 328 329 330 0
206
inline LVecBase2i LPoint2i::operator -(LVecBase2i const &other) const;
inline LVector2i LPoint2i::operator -(LPoint2i const &other) const;
inline LPoint2i LPoint2i::operator -(LVector2i const &other) const;

2316 10 operator * 0 4 3551 20 LPoint2i::operator * 0 1 331 0
55
inline LPoint2i LPoint2i::operator *(int scalar) const;

2317 10 operator / 0 4 3551 20 LPoint2i::operator / 0 1 332 0
55
inline LPoint2i LPoint2i::operator /(int scalar) const;

2318 11 python_repr 0 4 3551 21 LPoint2i::python_repr 0 1 333 0
94
inline void LPoint2i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2319 14 get_class_type 0 4 3551 24 LPoint2i::get_class_type 0 1 334 0
49
static TypeHandle LPoint2i::get_class_type(void);

2320 9 ~LPoint2i 0 4 3551 19 LPoint2i::~LPoint2i 0 0 0
26
LPoint2i::~LPoint2i(void);

2321 10 LVecBase3f 0 4 3552 22 LVecBase3f::LVecBase3f 0 5 335 336 337 338 339 1114
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
262
inline LVecBase3f::LVecBase3f(void);
inline LVecBase3f::LVecBase3f(LVecBase3f const &copy);
inline LVecBase3f::LVecBase3f(float fill_value);
inline LVecBase3f::LVecBase3f(float x, float y, float z);
inline LVecBase3f::LVecBase3f(LVecBase2f const &copy, float z);

2322 10 operator = 0 4 3552 22 LVecBase3f::operator = 0 2 340 341 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase3f &LVecBase3f::operator =(LVecBase3f const &copy);
inline LVecBase3f &LVecBase3f::operator =(float fill_value);

2323 12 operator new 0 4 3552 24 LVecBase3f::operator new 0 1 342 0
126
inline void *LVecBase3f::operator new(unsigned int size);
inline void *LVecBase3f::operator new(unsigned int size, void *ptr);

2324 15 operator delete 0 4 3552 27 LVecBase3f::operator delete 0 0 0
108
inline void LVecBase3f::operator delete(void *ptr);
inline void LVecBase3f::operator delete(void *, void *);

2325 12 validate_ptr 0 4 3552 24 LVecBase3f::validate_ptr 0 0 0
61
static inline bool LVecBase3f::validate_ptr(void const *ptr);

2326 4 zero 0 4 3552 16 LVecBase3f::zero 0 1 343 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3f const &LVecBase3f::zero(void);

2327 6 unit_x 0 4 3552 18 LVecBase3f::unit_x 0 1 344 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_x(void);

2328 6 unit_y 0 4 3552 18 LVecBase3f::unit_y 0 1 345 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_y(void);

2329 6 unit_z 0 4 3552 18 LVecBase3f::unit_z 0 1 346 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_z(void);

2330 11 ~LVecBase3f 0 4 3552 23 LVecBase3f::~LVecBase3f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3f::~LVecBase3f(void);

2331 10 __reduce__ 0 4 3552 22 LVecBase3f::__reduce__ 0 1 347 0
60
inline _object *LVecBase3f::__reduce__(_object *self) const;

2332 11 __getattr__ 0 4 3552 23 LVecBase3f::__getattr__ 0 1 348 0
85
inline _object *LVecBase3f::__getattr__(basic_string< char > const &attr_name) const;

2333 11 __setattr__ 0 4 3552 23 LVecBase3f::__setattr__ 0 1 349 0
106
inline int LVecBase3f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2334 11 operator [] 0 4 3552 23 LVecBase3f::operator [] 0 2 350 351 224
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase3f::operator [](int i) const;
inline float &LVecBase3f::operator [](int i);

2335 11 __setitem__ 0 4 3552 23 LVecBase3f::__setitem__ 0 1 352 0
52
inline void LVecBase3f::__setitem__(int i, float v);

2336 4 size 0 4 3552 16 LVecBase3f::size 0 1 353 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3f::size(void);

2337 6 is_nan 0 4 3552 18 LVecBase3f::is_nan 0 1 354 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3f::is_nan(void) const;

2338 8 get_cell 0 4 3552 20 LVecBase3f::get_cell 0 1 355 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase3f::get_cell(int i) const;

2339 5 get_x 0 4 3552 17 LVecBase3f::get_x 0 1 356 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_x(void) const;

2340 5 get_y 0 4 3552 17 LVecBase3f::get_y 0 1 357 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_y(void) const;

2341 5 get_z 0 4 3552 17 LVecBase3f::get_z 0 1 358 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_z(void) const;

2342 8 set_cell 0 4 3552 20 LVecBase3f::set_cell 0 1 359 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3f::set_cell(int i, float value);

2343 5 set_x 0 4 3552 17 LVecBase3f::set_x 0 1 360 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_x(float value);

2344 5 set_y 0 4 3552 17 LVecBase3f::set_y 0 1 361 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_y(float value);

2345 5 set_z 0 4 3552 17 LVecBase3f::set_z 0 1 362 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_z(float value);

2346 6 get_xy 0 4 3552 18 LVecBase3f::get_xy 0 1 363 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xy(void) const;

2347 6 get_xz 0 4 3552 18 LVecBase3f::get_xz 0 1 364 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xz(void) const;

2348 6 get_yz 0 4 3552 18 LVecBase3f::get_yz 0 1 365 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_yz(void) const;

2349 11 add_to_cell 0 4 3552 23 LVecBase3f::add_to_cell 0 1 366 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase3f::add_to_cell(int i, float value);

2350 5 add_x 0 4 3552 17 LVecBase3f::add_x 0 1 367 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_x(float value);

2351 5 add_y 0 4 3552 17 LVecBase3f::add_y 0 1 368 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_y(float value);

2352 5 add_z 0 4 3552 17 LVecBase3f::add_z 0 1 369 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_z(float value);

2353 8 get_data 0 4 3552 20 LVecBase3f::get_data 0 1 370 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase3f::get_data(void) const;

2354 18 get_num_components 0 4 3552 30 LVecBase3f::get_num_components 0 1 371 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3f::get_num_components(void) const;

2355 4 fill 0 4 3552 16 LVecBase3f::fill 0 1 372 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase3f::fill(float fill_value);

2356 3 set 0 4 3552 15 LVecBase3f::set 0 1 373 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void LVecBase3f::set(float x, float y, float z);

2357 3 dot 0 4 3552 15 LVecBase3f::dot 0 1 374 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase3f::dot(LVecBase3f const &other) const;

2358 14 length_squared 0 4 3552 26 LVecBase3f::length_squared 0 1 375 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase3f::length_squared(void) const;

2359 6 length 0 4 3552 18 LVecBase3f::length 0 1 376 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase3f::length(void) const;

2360 9 normalize 0 4 3552 21 LVecBase3f::normalize 0 1 377 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3f::normalize(void);

2361 7 project 0 4 3552 19 LVecBase3f::project 0 1 378 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LVecBase3f::project(LVecBase3f const &onto) const;

2362 5 cross 0 4 3552 17 LVecBase3f::cross 0 1 379 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3f LVecBase3f::cross(LVecBase3f const &other) const;

2363 10 operator < 0 4 3552 22 LVecBase3f::operator < 0 1 380 0
66
inline bool LVecBase3f::operator <(LVecBase3f const &other) const;

2364 11 operator == 0 4 3552 23 LVecBase3f::operator == 0 1 381 0
67
inline bool LVecBase3f::operator ==(LVecBase3f const &other) const;

2365 11 operator != 0 4 3552 23 LVecBase3f::operator != 0 1 382 0
67
inline bool LVecBase3f::operator !=(LVecBase3f const &other) const;

2366 20 get_standardized_hpr 0 4 3552 32 LVecBase3f::get_standardized_hpr 0 1 383 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f LVecBase3f::get_standardized_hpr(void) const;

2367 10 compare_to 0 4 3552 22 LVecBase3f::compare_to 0 2 384 385 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase3f::compare_to(LVecBase3f const &other) const;
inline int LVecBase3f::compare_to(LVecBase3f const &other, float threshold) const;

2368 8 get_hash 0 4 3552 20 LVecBase3f::get_hash 0 2 386 387 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase3f::get_hash(void) const;
inline unsigned int LVecBase3f::get_hash(float threshold) const;

2369 8 add_hash 0 4 3552 20 LVecBase3f::add_hash 0 2 388 389 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase3f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3f::add_hash(unsigned int hash, float threshold) const;

2370 13 generate_hash 0 4 3552 25 LVecBase3f::generate_hash 0 2 390 391 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2371 10 operator - 0 68 3552 22 LVecBase3f::operator - 0 1 392 0
53
inline LVecBase3f LVecBase3f::operator -(void) const;

2372 10 operator + 0 4 3552 22 LVecBase3f::operator + 0 1 393 0
72
inline LVecBase3f LVecBase3f::operator +(LVecBase3f const &other) const;

2373 10 operator - 0 4 3552 22 LVecBase3f::operator - 0 1 394 0
72
inline LVecBase3f LVecBase3f::operator -(LVecBase3f const &other) const;

2374 10 operator * 0 4 3552 22 LVecBase3f::operator * 0 1 395 0
61
inline LVecBase3f LVecBase3f::operator *(float scalar) const;

2375 10 operator / 0 4 3552 22 LVecBase3f::operator / 0 1 396 0
61
inline LVecBase3f LVecBase3f::operator /(float scalar) const;

2376 11 operator += 0 4 3552 23 LVecBase3f::operator += 0 1 397 0
61
inline void LVecBase3f::operator +=(LVecBase3f const &other);

2377 11 operator -= 0 4 3552 23 LVecBase3f::operator -= 0 1 398 0
61
inline void LVecBase3f::operator -=(LVecBase3f const &other);

2378 11 operator *= 0 4 3552 23 LVecBase3f::operator *= 0 1 399 0
50
inline void LVecBase3f::operator *=(float scalar);

2379 11 operator /= 0 4 3552 23 LVecBase3f::operator /= 0 1 400 0
50
inline void LVecBase3f::operator /=(float scalar);

2380 18 componentwise_mult 0 4 3552 30 LVecBase3f::componentwise_mult 0 1 401 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3f::componentwise_mult(LVecBase3f const &other);

2381 7 __pow__ 0 4 3552 19 LVecBase3f::__pow__ 0 1 402 0
60
inline LVecBase3f LVecBase3f::__pow__(float exponent) const;

2382 8 __ipow__ 0 4 3552 20 LVecBase3f::__ipow__ 0 1 403 0
68
inline _object *LVecBase3f::__ipow__(_object *self, float exponent);

2383 4 fmax 0 4 3552 16 LVecBase3f::fmax 0 1 404 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LVecBase3f::fmax(LVecBase3f const &other) const;

2384 4 fmin 0 4 3552 16 LVecBase3f::fmin 0 1 405 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LVecBase3f::fmin(LVecBase3f const &other) const;

2385 10 cross_into 0 4 3552 22 LVecBase3f::cross_into 0 1 406 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3f::cross_into(LVecBase3f const &other);

2386 12 almost_equal 0 4 3552 24 LVecBase3f::almost_equal 0 2 407 408 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase3f::almost_equal(LVecBase3f const &other, float threshold) const;
inline bool LVecBase3f::almost_equal(LVecBase3f const &other) const;

2387 6 output 0 4 3552 18 LVecBase3f::output 0 1 409 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3f::output(ostream &out) const;

2388 11 python_repr 0 4 3552 23 LVecBase3f::python_repr 0 1 410 0
96
inline void LVecBase3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2389 20 write_datagram_fixed 0 4 3552 32 LVecBase3f::write_datagram_fixed 0 1 411 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3f::write_datagram_fixed(Datagram &destination) const;

2390 19 read_datagram_fixed 0 4 3552 31 LVecBase3f::read_datagram_fixed 0 1 412 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3f::read_datagram_fixed(DatagramIterator &source);

2391 14 write_datagram 0 4 3552 26 LVecBase3f::write_datagram 0 1 413 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3f::write_datagram(Datagram &destination) const;

2392 13 read_datagram 0 4 3552 25 LVecBase3f::read_datagram 0 1 414 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3f::read_datagram(DatagramIterator &source);

2393 14 get_class_type 0 4 3552 26 LVecBase3f::get_class_type 0 1 415 0
51
static TypeHandle LVecBase3f::get_class_type(void);

2394 10 LVecBase3d 0 4 3553 22 LVecBase3d::LVecBase3d 0 5 416 417 418 419 420 1114
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
267
inline LVecBase3d::LVecBase3d(void);
inline LVecBase3d::LVecBase3d(LVecBase3d const &copy);
inline LVecBase3d::LVecBase3d(double fill_value);
inline LVecBase3d::LVecBase3d(double x, double y, double z);
inline LVecBase3d::LVecBase3d(LVecBase2d const &copy, double z);

2395 10 operator = 0 4 3553 22 LVecBase3d::operator = 0 2 421 422 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase3d &LVecBase3d::operator =(LVecBase3d const &copy);
inline LVecBase3d &LVecBase3d::operator =(double fill_value);

2396 12 operator new 0 4 3553 24 LVecBase3d::operator new 0 1 423 0
126
inline void *LVecBase3d::operator new(unsigned int size);
inline void *LVecBase3d::operator new(unsigned int size, void *ptr);

2397 15 operator delete 0 4 3553 27 LVecBase3d::operator delete 0 0 0
108
inline void LVecBase3d::operator delete(void *ptr);
inline void LVecBase3d::operator delete(void *, void *);

2398 12 validate_ptr 0 4 3553 24 LVecBase3d::validate_ptr 0 0 0
61
static inline bool LVecBase3d::validate_ptr(void const *ptr);

2399 4 zero 0 4 3553 16 LVecBase3d::zero 0 1 424 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3d const &LVecBase3d::zero(void);

2400 6 unit_x 0 4 3553 18 LVecBase3d::unit_x 0 1 425 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_x(void);

2401 6 unit_y 0 4 3553 18 LVecBase3d::unit_y 0 1 426 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_y(void);

2402 6 unit_z 0 4 3553 18 LVecBase3d::unit_z 0 1 427 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_z(void);

2403 11 ~LVecBase3d 0 4 3553 23 LVecBase3d::~LVecBase3d 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3d::~LVecBase3d(void);

2404 10 __reduce__ 0 4 3553 22 LVecBase3d::__reduce__ 0 1 428 0
60
inline _object *LVecBase3d::__reduce__(_object *self) const;

2405 11 __getattr__ 0 4 3553 23 LVecBase3d::__getattr__ 0 1 429 0
85
inline _object *LVecBase3d::__getattr__(basic_string< char > const &attr_name) const;

2406 11 __setattr__ 0 4 3553 23 LVecBase3d::__setattr__ 0 1 430 0
106
inline int LVecBase3d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2407 11 operator [] 0 4 3553 23 LVecBase3d::operator [] 0 2 431 432 224
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase3d::operator [](int i) const;
inline double &LVecBase3d::operator [](int i);

2408 11 __setitem__ 0 4 3553 23 LVecBase3d::__setitem__ 0 1 433 0
53
inline void LVecBase3d::__setitem__(int i, double v);

2409 4 size 0 4 3553 16 LVecBase3d::size 0 1 434 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3d::size(void);

2410 6 is_nan 0 4 3553 18 LVecBase3d::is_nan 0 1 435 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3d::is_nan(void) const;

2411 8 get_cell 0 4 3553 20 LVecBase3d::get_cell 0 1 436 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase3d::get_cell(int i) const;

2412 5 get_x 0 4 3553 17 LVecBase3d::get_x 0 1 437 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_x(void) const;

2413 5 get_y 0 4 3553 17 LVecBase3d::get_y 0 1 438 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_y(void) const;

2414 5 get_z 0 4 3553 17 LVecBase3d::get_z 0 1 439 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_z(void) const;

2415 8 set_cell 0 4 3553 20 LVecBase3d::set_cell 0 1 440 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3d::set_cell(int i, double value);

2416 5 set_x 0 4 3553 17 LVecBase3d::set_x 0 1 441 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_x(double value);

2417 5 set_y 0 4 3553 17 LVecBase3d::set_y 0 1 442 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_y(double value);

2418 5 set_z 0 4 3553 17 LVecBase3d::set_z 0 1 443 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_z(double value);

2419 6 get_xy 0 4 3553 18 LVecBase3d::get_xy 0 1 444 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xy(void) const;

2420 6 get_xz 0 4 3553 18 LVecBase3d::get_xz 0 1 445 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xz(void) const;

2421 6 get_yz 0 4 3553 18 LVecBase3d::get_yz 0 1 446 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_yz(void) const;

2422 11 add_to_cell 0 4 3553 23 LVecBase3d::add_to_cell 0 1 447 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase3d::add_to_cell(int i, double value);

2423 5 add_x 0 4 3553 17 LVecBase3d::add_x 0 1 448 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_x(double value);

2424 5 add_y 0 4 3553 17 LVecBase3d::add_y 0 1 449 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_y(double value);

2425 5 add_z 0 4 3553 17 LVecBase3d::add_z 0 1 450 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_z(double value);

2426 8 get_data 0 4 3553 20 LVecBase3d::get_data 0 1 451 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase3d::get_data(void) const;

2427 18 get_num_components 0 4 3553 30 LVecBase3d::get_num_components 0 1 452 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3d::get_num_components(void) const;

2428 4 fill 0 4 3553 16 LVecBase3d::fill 0 1 453 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase3d::fill(double fill_value);

2429 3 set 0 4 3553 15 LVecBase3d::set 0 1 454 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void LVecBase3d::set(double x, double y, double z);

2430 3 dot 0 4 3553 15 LVecBase3d::dot 0 1 455 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase3d::dot(LVecBase3d const &other) const;

2431 14 length_squared 0 4 3553 26 LVecBase3d::length_squared 0 1 456 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase3d::length_squared(void) const;

2432 6 length 0 4 3553 18 LVecBase3d::length 0 1 457 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase3d::length(void) const;

2433 9 normalize 0 4 3553 21 LVecBase3d::normalize 0 1 458 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3d::normalize(void);

2434 7 project 0 4 3553 19 LVecBase3d::project 0 1 459 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LVecBase3d::project(LVecBase3d const &onto) const;

2435 5 cross 0 4 3553 17 LVecBase3d::cross 0 1 460 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3d LVecBase3d::cross(LVecBase3d const &other) const;

2436 10 operator < 0 4 3553 22 LVecBase3d::operator < 0 1 461 0
66
inline bool LVecBase3d::operator <(LVecBase3d const &other) const;

2437 11 operator == 0 4 3553 23 LVecBase3d::operator == 0 1 462 0
67
inline bool LVecBase3d::operator ==(LVecBase3d const &other) const;

2438 11 operator != 0 4 3553 23 LVecBase3d::operator != 0 1 463 0
67
inline bool LVecBase3d::operator !=(LVecBase3d const &other) const;

2439 20 get_standardized_hpr 0 4 3553 32 LVecBase3d::get_standardized_hpr 0 1 464 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3d LVecBase3d::get_standardized_hpr(void) const;

2440 10 compare_to 0 4 3553 22 LVecBase3d::compare_to 0 2 465 466 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase3d::compare_to(LVecBase3d const &other) const;
inline int LVecBase3d::compare_to(LVecBase3d const &other, double threshold) const;

2441 8 get_hash 0 4 3553 20 LVecBase3d::get_hash 0 2 467 468 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase3d::get_hash(void) const;
inline unsigned int LVecBase3d::get_hash(double threshold) const;

2442 8 add_hash 0 4 3553 20 LVecBase3d::add_hash 0 2 469 470 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase3d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3d::add_hash(unsigned int hash, double threshold) const;

2443 13 generate_hash 0 4 3553 25 LVecBase3d::generate_hash 0 2 471 472 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase3d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase3d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2444 10 operator - 0 68 3553 22 LVecBase3d::operator - 0 1 473 0
53
inline LVecBase3d LVecBase3d::operator -(void) const;

2445 10 operator + 0 4 3553 22 LVecBase3d::operator + 0 1 474 0
72
inline LVecBase3d LVecBase3d::operator +(LVecBase3d const &other) const;

2446 10 operator - 0 4 3553 22 LVecBase3d::operator - 0 1 475 0
72
inline LVecBase3d LVecBase3d::operator -(LVecBase3d const &other) const;

2447 10 operator * 0 4 3553 22 LVecBase3d::operator * 0 1 476 0
62
inline LVecBase3d LVecBase3d::operator *(double scalar) const;

2448 10 operator / 0 4 3553 22 LVecBase3d::operator / 0 1 477 0
62
inline LVecBase3d LVecBase3d::operator /(double scalar) const;

2449 11 operator += 0 4 3553 23 LVecBase3d::operator += 0 1 478 0
61
inline void LVecBase3d::operator +=(LVecBase3d const &other);

2450 11 operator -= 0 4 3553 23 LVecBase3d::operator -= 0 1 479 0
61
inline void LVecBase3d::operator -=(LVecBase3d const &other);

2451 11 operator *= 0 4 3553 23 LVecBase3d::operator *= 0 1 480 0
51
inline void LVecBase3d::operator *=(double scalar);

2452 11 operator /= 0 4 3553 23 LVecBase3d::operator /= 0 1 481 0
51
inline void LVecBase3d::operator /=(double scalar);

2453 18 componentwise_mult 0 4 3553 30 LVecBase3d::componentwise_mult 0 1 482 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3d::componentwise_mult(LVecBase3d const &other);

2454 7 __pow__ 0 4 3553 19 LVecBase3d::__pow__ 0 1 483 0
61
inline LVecBase3d LVecBase3d::__pow__(double exponent) const;

2455 8 __ipow__ 0 4 3553 20 LVecBase3d::__ipow__ 0 1 484 0
69
inline _object *LVecBase3d::__ipow__(_object *self, double exponent);

2456 4 fmax 0 4 3553 16 LVecBase3d::fmax 0 1 485 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LVecBase3d::fmax(LVecBase3d const &other) const;

2457 4 fmin 0 4 3553 16 LVecBase3d::fmin 0 1 486 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LVecBase3d::fmin(LVecBase3d const &other) const;

2458 10 cross_into 0 4 3553 22 LVecBase3d::cross_into 0 1 487 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3d::cross_into(LVecBase3d const &other);

2459 12 almost_equal 0 4 3553 24 LVecBase3d::almost_equal 0 2 488 489 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase3d::almost_equal(LVecBase3d const &other, double threshold) const;
inline bool LVecBase3d::almost_equal(LVecBase3d const &other) const;

2460 6 output 0 4 3553 18 LVecBase3d::output 0 1 490 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::output(ostream &out) const;

2461 11 python_repr 0 4 3553 23 LVecBase3d::python_repr 0 1 491 0
96
inline void LVecBase3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2462 20 write_datagram_fixed 0 4 3553 32 LVecBase3d::write_datagram_fixed 0 1 492 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3d::write_datagram_fixed(Datagram &destination) const;

2463 19 read_datagram_fixed 0 4 3553 31 LVecBase3d::read_datagram_fixed 0 1 493 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3d::read_datagram_fixed(DatagramIterator &source);

2464 14 write_datagram 0 4 3553 26 LVecBase3d::write_datagram 0 1 494 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3d::write_datagram(Datagram &destination) const;

2465 13 read_datagram 0 4 3553 25 LVecBase3d::read_datagram 0 1 495 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3d::read_datagram(DatagramIterator &source);

2466 14 get_class_type 0 4 3553 26 LVecBase3d::get_class_type 0 1 496 0
51
static TypeHandle LVecBase3d::get_class_type(void);

2467 10 LVecBase3i 0 4 3554 22 LVecBase3i::LVecBase3i 0 5 497 498 499 500 501 1114
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
252
inline LVecBase3i::LVecBase3i(void);
inline LVecBase3i::LVecBase3i(LVecBase3i const &copy);
inline LVecBase3i::LVecBase3i(int fill_value);
inline LVecBase3i::LVecBase3i(int x, int y, int z);
inline LVecBase3i::LVecBase3i(LVecBase2i const &copy, int z);

2468 10 operator = 0 4 3554 22 LVecBase3i::operator = 0 2 502 503 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
125
inline LVecBase3i &LVecBase3i::operator =(LVecBase3i const &copy);
inline LVecBase3i &LVecBase3i::operator =(int fill_value);

2469 12 operator new 0 4 3554 24 LVecBase3i::operator new 0 1 504 0
126
inline void *LVecBase3i::operator new(unsigned int size);
inline void *LVecBase3i::operator new(unsigned int size, void *ptr);

2470 15 operator delete 0 4 3554 27 LVecBase3i::operator delete 0 0 0
108
inline void LVecBase3i::operator delete(void *ptr);
inline void LVecBase3i::operator delete(void *, void *);

2471 12 validate_ptr 0 4 3554 24 LVecBase3i::validate_ptr 0 0 0
61
static inline bool LVecBase3i::validate_ptr(void const *ptr);

2472 4 zero 0 4 3554 16 LVecBase3i::zero 0 1 505 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3i const &LVecBase3i::zero(void);

2473 6 unit_x 0 4 3554 18 LVecBase3i::unit_x 0 1 506 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3i const &LVecBase3i::unit_x(void);

2474 6 unit_y 0 4 3554 18 LVecBase3i::unit_y 0 1 507 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3i const &LVecBase3i::unit_y(void);

2475 6 unit_z 0 4 3554 18 LVecBase3i::unit_z 0 1 508 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3i const &LVecBase3i::unit_z(void);

2476 11 ~LVecBase3i 0 4 3554 23 LVecBase3i::~LVecBase3i 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3i::~LVecBase3i(void);

2477 10 __reduce__ 0 4 3554 22 LVecBase3i::__reduce__ 0 1 509 0
60
inline _object *LVecBase3i::__reduce__(_object *self) const;

2478 11 __getattr__ 0 4 3554 23 LVecBase3i::__getattr__ 0 1 510 0
85
inline _object *LVecBase3i::__getattr__(basic_string< char > const &attr_name) const;

2479 11 __setattr__ 0 4 3554 23 LVecBase3i::__setattr__ 0 1 511 0
106
inline int LVecBase3i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2480 11 operator [] 0 4 3554 23 LVecBase3i::operator [] 0 2 512 513 224
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
92
inline int LVecBase3i::operator [](int i) const;
inline int &LVecBase3i::operator [](int i);

2481 11 __setitem__ 0 4 3554 23 LVecBase3i::__setitem__ 0 1 514 0
50
inline void LVecBase3i::__setitem__(int i, int v);

2482 4 size 0 4 3554 16 LVecBase3i::size 0 1 515 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3i::size(void);

2483 6 is_nan 0 4 3554 18 LVecBase3i::is_nan 0 1 516 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3i::is_nan(void) const;

2484 8 get_cell 0 4 3554 20 LVecBase3i::get_cell 0 1 517 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline int LVecBase3i::get_cell(int i) const;

2485 5 get_x 0 4 3554 17 LVecBase3i::get_x 0 1 518 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase3i::get_x(void) const;

2486 5 get_y 0 4 3554 17 LVecBase3i::get_y 0 1 519 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase3i::get_y(void) const;

2487 5 get_z 0 4 3554 17 LVecBase3i::get_z 0 1 520 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase3i::get_z(void) const;

2488 8 set_cell 0 4 3554 20 LVecBase3i::set_cell 0 1 521 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3i::set_cell(int i, int value);

2489 5 set_x 0 4 3554 17 LVecBase3i::set_x 0 1 522 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::set_x(int value);

2490 5 set_y 0 4 3554 17 LVecBase3i::set_y 0 1 523 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::set_y(int value);

2491 5 set_z 0 4 3554 17 LVecBase3i::set_z 0 1 524 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::set_z(int value);

2492 6 get_xy 0 4 3554 18 LVecBase3i::get_xy 0 1 525 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2i LVecBase3i::get_xy(void) const;

2493 6 get_xz 0 4 3554 18 LVecBase3i::get_xz 0 1 526 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2i LVecBase3i::get_xz(void) const;

2494 6 get_yz 0 4 3554 18 LVecBase3i::get_yz 0 1 527 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2i LVecBase3i::get_yz(void) const;

2495 11 add_to_cell 0 4 3554 23 LVecBase3i::add_to_cell 0 1 528 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3i::add_to_cell(int i, int value);

2496 5 add_x 0 4 3554 17 LVecBase3i::add_x 0 1 529 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::add_x(int value);

2497 5 add_y 0 4 3554 17 LVecBase3i::add_y 0 1 530 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::add_y(int value);

2498 5 add_z 0 4 3554 17 LVecBase3i::add_z 0 1 531 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::add_z(int value);

2499 8 get_data 0 4 3554 20 LVecBase3i::get_data 0 1 532 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
51
inline int const *LVecBase3i::get_data(void) const;

2500 18 get_num_components 0 4 3554 30 LVecBase3i::get_num_components 0 1 533 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3i::get_num_components(void) const;

2501 4 fill 0 4 3554 16 LVecBase3i::fill 0 1 534 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
45
inline void LVecBase3i::fill(int fill_value);

2502 3 set 0 4 3554 15 LVecBase3i::set 0 1 535 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void LVecBase3i::set(int x, int y, int z);

2503 3 dot 0 4 3554 15 LVecBase3i::dot 0 1 536 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline int LVecBase3i::dot(LVecBase3i const &other) const;

2504 14 length_squared 0 4 3554 26 LVecBase3i::length_squared 0 1 537 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
50
inline int LVecBase3i::length_squared(void) const;

2505 5 cross 0 4 3554 17 LVecBase3i::cross 0 1 538 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3i LVecBase3i::cross(LVecBase3i const &other) const;

2506 10 operator < 0 4 3554 22 LVecBase3i::operator < 0 1 539 0
66
inline bool LVecBase3i::operator <(LVecBase3i const &other) const;

2507 11 operator == 0 4 3554 23 LVecBase3i::operator == 0 1 540 0
67
inline bool LVecBase3i::operator ==(LVecBase3i const &other) const;

2508 11 operator != 0 4 3554 23 LVecBase3i::operator != 0 1 541 0
67
inline bool LVecBase3i::operator !=(LVecBase3i const &other) const;

2509 20 get_standardized_hpr 0 4 3554 32 LVecBase3i::get_standardized_hpr 0 1 542 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3i LVecBase3i::get_standardized_hpr(void) const;

2510 10 compare_to 0 4 3554 22 LVecBase3i::compare_to 0 1 543 321
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
65
inline int LVecBase3i::compare_to(LVecBase3i const &other) const;

2511 8 get_hash 0 4 3554 20 LVecBase3i::get_hash 0 1 544 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase3i::get_hash(void) const;

2512 8 add_hash 0 4 3554 20 LVecBase3i::add_hash 0 1 545 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase3i::add_hash(unsigned int hash) const;

2513 13 generate_hash 0 4 3554 25 LVecBase3i::generate_hash 0 1 546 272
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
76
inline void LVecBase3i::generate_hash(ChecksumHashGenerator &hashgen) const;

2514 10 operator - 0 68 3554 22 LVecBase3i::operator - 0 1 547 0
53
inline LVecBase3i LVecBase3i::operator -(void) const;

2515 10 operator + 0 4 3554 22 LVecBase3i::operator + 0 1 548 0
72
inline LVecBase3i LVecBase3i::operator +(LVecBase3i const &other) const;

2516 10 operator - 0 4 3554 22 LVecBase3i::operator - 0 1 549 0
72
inline LVecBase3i LVecBase3i::operator -(LVecBase3i const &other) const;

2517 10 operator * 0 4 3554 22 LVecBase3i::operator * 0 1 550 0
59
inline LVecBase3i LVecBase3i::operator *(int scalar) const;

2518 10 operator / 0 4 3554 22 LVecBase3i::operator / 0 1 551 0
59
inline LVecBase3i LVecBase3i::operator /(int scalar) const;

2519 11 operator += 0 4 3554 23 LVecBase3i::operator += 0 1 552 0
61
inline void LVecBase3i::operator +=(LVecBase3i const &other);

2520 11 operator -= 0 4 3554 23 LVecBase3i::operator -= 0 1 553 0
61
inline void LVecBase3i::operator -=(LVecBase3i const &other);

2521 11 operator *= 0 4 3554 23 LVecBase3i::operator *= 0 1 554 0
48
inline void LVecBase3i::operator *=(int scalar);

2522 11 operator /= 0 4 3554 23 LVecBase3i::operator /= 0 1 555 0
48
inline void LVecBase3i::operator /=(int scalar);

2523 18 componentwise_mult 0 4 3554 30 LVecBase3i::componentwise_mult 0 1 556 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3i::componentwise_mult(LVecBase3i const &other);

2524 7 __pow__ 0 4 3554 19 LVecBase3i::__pow__ 0 1 557 0
58
inline LVecBase3i LVecBase3i::__pow__(int exponent) const;

2525 8 __ipow__ 0 4 3554 20 LVecBase3i::__ipow__ 0 1 558 0
66
inline _object *LVecBase3i::__ipow__(_object *self, int exponent);

2526 4 fmax 0 4 3554 16 LVecBase3i::fmax 0 1 559 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3i LVecBase3i::fmax(LVecBase3i const &other) const;

2527 4 fmin 0 4 3554 16 LVecBase3i::fmin 0 1 560 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3i LVecBase3i::fmin(LVecBase3i const &other) const;

2528 10 cross_into 0 4 3554 22 LVecBase3i::cross_into 0 1 561 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3i::cross_into(LVecBase3i const &other);

2529 12 almost_equal 0 4 3554 24 LVecBase3i::almost_equal 0 2 562 563 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
152
inline bool LVecBase3i::almost_equal(LVecBase3i const &other, int threshold) const;
inline bool LVecBase3i::almost_equal(LVecBase3i const &other) const;

2530 6 output 0 4 3554 18 LVecBase3i::output 0 1 564 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3i::output(ostream &out) const;

2531 11 python_repr 0 4 3554 23 LVecBase3i::python_repr 0 1 565 0
96
inline void LVecBase3i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2532 20 write_datagram_fixed 0 4 3554 32 LVecBase3i::write_datagram_fixed 0 1 566 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3i::write_datagram_fixed(Datagram &destination) const;

2533 19 read_datagram_fixed 0 4 3554 31 LVecBase3i::read_datagram_fixed 0 1 567 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3i::read_datagram_fixed(DatagramIterator &source);

2534 14 write_datagram 0 4 3554 26 LVecBase3i::write_datagram 0 1 568 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3i::write_datagram(Datagram &destination) const;

2535 13 read_datagram 0 4 3554 25 LVecBase3i::read_datagram 0 1 569 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3i::read_datagram(DatagramIterator &source);

2536 14 get_class_type 0 4 3554 26 LVecBase3i::get_class_type 0 1 570 0
51
static TypeHandle LVecBase3i::get_class_type(void);

2537 29 get_default_coordinate_system 0 1 0 29 get_default_coordinate_system 0 1 1903 0
53
CoordinateSystem get_default_coordinate_system(void);

2538 30 parse_coordinate_system_string 0 1 0 30 parse_coordinate_system_string 0 1 1904 0
81
CoordinateSystem parse_coordinate_system_string(basic_string< char > const &str);

2539 24 format_coordinate_system 0 1 0 24 format_coordinate_system 0 1 1905 0
67
basic_string< char > format_coordinate_system(CoordinateSystem cs);

2540 15 is_right_handed 0 1 0 15 is_right_handed 0 2 1906 1907 0
48
bool is_right_handed(CoordinateSystem cs = (0));

2541 9 LVector3f 0 4 3556 20 LVector3f::LVector3f 0 5 571 572 573 574 575 1121
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
252
inline LVector3f::LVector3f(void);
inline LVector3f::LVector3f(LVecBase3f const &copy);
inline LVector3f::LVector3f(float fill_value);
inline LVector3f::LVector3f(float x, float y, float z);
inline LVector3f::LVector3f(LVecBase2f const &copy, float z);

2542 10 operator = 0 4 3556 21 LVector3f::operator = 0 2 576 577 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector3f &LVector3f::operator =(LVecBase3f const &copy);
inline LVector3f &LVector3f::operator =(float fill_value);

2543 11 __getattr__ 0 4 3556 22 LVector3f::__getattr__ 0 1 578 0
84
inline _object *LVector3f::__getattr__(basic_string< char > const &attr_name) const;

2544 11 __setattr__ 0 4 3556 22 LVector3f::__setattr__ 0 1 579 0
105
inline int LVector3f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2545 4 zero 0 4 3556 15 LVector3f::zero 0 1 580 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3f const &LVector3f::zero(void);

2546 6 unit_x 0 4 3556 17 LVector3f::unit_x 0 1 581 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_x(void);

2547 6 unit_y 0 4 3556 17 LVector3f::unit_y 0 1 582 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_y(void);

2548 6 unit_z 0 4 3556 17 LVector3f::unit_z 0 1 583 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_z(void);

2549 6 get_xy 0 4 3556 17 LVector3f::get_xy 0 1 584 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xy(void) const;

2550 6 get_xz 0 4 3556 17 LVector3f::get_xz 0 1 585 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xz(void) const;

2551 6 get_yz 0 4 3556 17 LVector3f::get_yz 0 1 586 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_yz(void) const;

2552 10 operator - 0 68 3556 21 LVector3f::operator - 0 1 587 0
51
inline LVector3f LVector3f::operator -(void) const;

2553 10 operator + 0 4 3556 21 LVector3f::operator + 0 2 588 589 0
141
inline LVecBase3f LVector3f::operator +(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator +(LVector3f const &other) const;

2554 10 operator - 0 4 3556 21 LVector3f::operator - 0 2 590 591 0
141
inline LVecBase3f LVector3f::operator -(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator -(LVector3f const &other) const;

2555 5 cross 0 4 3556 16 LVector3f::cross 0 1 592 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3f LVector3f::cross(LVecBase3f const &other) const;

2556 7 project 0 4 3556 18 LVector3f::project 0 1 593 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3f LVector3f::project(LVecBase3f const &onto) const;

2557 9 angle_rad 0 4 3556 20 LVector3f::angle_rad 0 1 594 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_rad(LVector3f const &other) const;

2558 9 angle_deg 0 4 3556 20 LVector3f::angle_deg 0 1 595 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_deg(LVector3f const &other) const;

2559 16 signed_angle_rad 0 4 3556 27 LVector3f::signed_angle_rad 0 1 596 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_rad(LVector3f const &other, LVector3f const &ref) const;

2560 16 signed_angle_deg 0 4 3556 27 LVector3f::signed_angle_deg 0 1 597 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_deg(LVector3f const &other, LVector3f const &ref) const;

2561 18 relative_angle_rad 0 4 3556 29 LVector3f::relative_angle_rad 0 1 598 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_rad(LVector3f const &other) const;

2562 18 relative_angle_deg 0 4 3556 29 LVector3f::relative_angle_deg 0 1 599 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_deg(LVector3f const &other) const;

2563 10 operator * 0 4 3556 21 LVector3f::operator * 0 1 600 0
59
inline LVector3f LVector3f::operator *(float scalar) const;

2564 10 operator / 0 4 3556 21 LVector3f::operator / 0 1 601 0
59
inline LVector3f LVector3f::operator /(float scalar) const;

2565 2 up 0 4 3556 13 LVector3f::up 0 2 602 603 291
////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
65
static inline LVector3f LVector3f::up(CoordinateSystem cs = (0));

2566 5 right 0 4 3556 16 LVector3f::right 0 2 604 605 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
68
static inline LVector3f LVector3f::right(CoordinateSystem cs = (0));

2567 7 forward 0 4 3556 18 LVector3f::forward 0 2 606 607 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
70
static inline LVector3f LVector3f::forward(CoordinateSystem cs = (0));

2568 4 down 0 4 3556 15 LVector3f::down 0 2 608 609 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3f LVector3f::down(CoordinateSystem cs = (0));

2569 4 left 0 4 3556 15 LVector3f::left 0 2 610 611 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3f LVector3f::left(CoordinateSystem cs = (0));

2570 4 back 0 4 3556 15 LVector3f::back 0 2 612 613 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3f LVector3f::back(CoordinateSystem cs = (0));

2571 3 rfu 0 4 3556 14 LVector3f::rfu 0 2 614 615 523
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3)::
100
static inline LVector3f LVector3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (0));

2572 11 python_repr 0 4 3556 22 LVector3f::python_repr 0 1 616 0
95
inline void LVector3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2573 14 get_class_type 0 4 3556 25 LVector3f::get_class_type 0 1 617 0
50
static TypeHandle LVector3f::get_class_type(void);

2574 10 ~LVector3f 0 4 3556 21 LVector3f::~LVector3f 0 0 0
28
LVector3f::~LVector3f(void);

2575 9 LVector3d 0 4 3557 20 LVector3d::LVector3d 0 5 618 619 620 621 622 1121
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
257
inline LVector3d::LVector3d(void);
inline LVector3d::LVector3d(LVecBase3d const &copy);
inline LVector3d::LVector3d(double fill_value);
inline LVector3d::LVector3d(double x, double y, double z);
inline LVector3d::LVector3d(LVecBase2d const &copy, double z);

2576 10 operator = 0 4 3557 21 LVector3d::operator = 0 2 623 624 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector3d &LVector3d::operator =(LVecBase3d const &copy);
inline LVector3d &LVector3d::operator =(double fill_value);

2577 11 __getattr__ 0 4 3557 22 LVector3d::__getattr__ 0 1 625 0
84
inline _object *LVector3d::__getattr__(basic_string< char > const &attr_name) const;

2578 11 __setattr__ 0 4 3557 22 LVector3d::__setattr__ 0 1 626 0
105
inline int LVector3d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2579 4 zero 0 4 3557 15 LVector3d::zero 0 1 627 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3d const &LVector3d::zero(void);

2580 6 unit_x 0 4 3557 17 LVector3d::unit_x 0 1 628 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_x(void);

2581 6 unit_y 0 4 3557 17 LVector3d::unit_y 0 1 629 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_y(void);

2582 6 unit_z 0 4 3557 17 LVector3d::unit_z 0 1 630 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_z(void);

2583 6 get_xy 0 4 3557 17 LVector3d::get_xy 0 1 631 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xy(void) const;

2584 6 get_xz 0 4 3557 17 LVector3d::get_xz 0 1 632 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xz(void) const;

2585 6 get_yz 0 4 3557 17 LVector3d::get_yz 0 1 633 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_yz(void) const;

2586 10 operator - 0 68 3557 21 LVector3d::operator - 0 1 634 0
51
inline LVector3d LVector3d::operator -(void) const;

2587 10 operator + 0 4 3557 21 LVector3d::operator + 0 2 635 636 0
141
inline LVecBase3d LVector3d::operator +(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator +(LVector3d const &other) const;

2588 10 operator - 0 4 3557 21 LVector3d::operator - 0 2 637 638 0
141
inline LVecBase3d LVector3d::operator -(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator -(LVector3d const &other) const;

2589 5 cross 0 4 3557 16 LVector3d::cross 0 1 639 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3d LVector3d::cross(LVecBase3d const &other) const;

2590 7 project 0 4 3557 18 LVector3d::project 0 1 640 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3d LVector3d::project(LVecBase3d const &onto) const;

2591 9 angle_rad 0 4 3557 20 LVector3d::angle_rad 0 1 641 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_rad(LVector3d const &other) const;

2592 9 angle_deg 0 4 3557 20 LVector3d::angle_deg 0 1 642 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_deg(LVector3d const &other) const;

2593 16 signed_angle_rad 0 4 3557 27 LVector3d::signed_angle_rad 0 1 643 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_rad(LVector3d const &other, LVector3d const &ref) const;

2594 16 signed_angle_deg 0 4 3557 27 LVector3d::signed_angle_deg 0 1 644 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_deg(LVector3d const &other, LVector3d const &ref) const;

2595 18 relative_angle_rad 0 4 3557 29 LVector3d::relative_angle_rad 0 1 645 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_rad(LVector3d const &other) const;

2596 18 relative_angle_deg 0 4 3557 29 LVector3d::relative_angle_deg 0 1 646 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_deg(LVector3d const &other) const;

2597 10 operator * 0 4 3557 21 LVector3d::operator * 0 1 647 0
60
inline LVector3d LVector3d::operator *(double scalar) const;

2598 10 operator / 0 4 3557 21 LVector3d::operator / 0 1 648 0
60
inline LVector3d LVector3d::operator /(double scalar) const;

2599 2 up 0 4 3557 13 LVector3d::up 0 2 649 650 291
////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
65
static inline LVector3d LVector3d::up(CoordinateSystem cs = (0));

2600 5 right 0 4 3557 16 LVector3d::right 0 2 651 652 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
68
static inline LVector3d LVector3d::right(CoordinateSystem cs = (0));

2601 7 forward 0 4 3557 18 LVector3d::forward 0 2 653 654 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
70
static inline LVector3d LVector3d::forward(CoordinateSystem cs = (0));

2602 4 down 0 4 3557 15 LVector3d::down 0 2 655 656 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3d LVector3d::down(CoordinateSystem cs = (0));

2603 4 left 0 4 3557 15 LVector3d::left 0 2 657 658 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3d LVector3d::left(CoordinateSystem cs = (0));

2604 4 back 0 4 3557 15 LVector3d::back 0 2 659 660 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3d LVector3d::back(CoordinateSystem cs = (0));

2605 3 rfu 0 4 3557 14 LVector3d::rfu 0 2 661 662 523
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3)::
103
static inline LVector3d LVector3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (0));

2606 11 python_repr 0 4 3557 22 LVector3d::python_repr 0 1 663 0
95
inline void LVector3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2607 14 get_class_type 0 4 3557 25 LVector3d::get_class_type 0 1 664 0
50
static TypeHandle LVector3d::get_class_type(void);

2608 10 ~LVector3d 0 4 3557 21 LVector3d::~LVector3d 0 0 0
28
LVector3d::~LVector3d(void);

2609 9 LVector3i 0 4 3558 20 LVector3i::LVector3i 0 5 665 666 667 668 669 1121
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
242
inline LVector3i::LVector3i(void);
inline LVector3i::LVector3i(LVecBase3i const &copy);
inline LVector3i::LVector3i(int fill_value);
inline LVector3i::LVector3i(int x, int y, int z);
inline LVector3i::LVector3i(LVecBase2i const &copy, int z);

2610 10 operator = 0 4 3558 21 LVector3i::operator = 0 2 670 671 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LVector3i &LVector3i::operator =(LVecBase3i const &copy);
inline LVector3i &LVector3i::operator =(int fill_value);

2611 11 __getattr__ 0 4 3558 22 LVector3i::__getattr__ 0 1 672 0
84
inline _object *LVector3i::__getattr__(basic_string< char > const &attr_name) const;

2612 11 __setattr__ 0 4 3558 22 LVector3i::__setattr__ 0 1 673 0
105
inline int LVector3i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2613 4 zero 0 4 3558 15 LVector3i::zero 0 1 674 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3i const &LVector3i::zero(void);

2614 6 unit_x 0 4 3558 17 LVector3i::unit_x 0 1 675 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3i const &LVector3i::unit_x(void);

2615 6 unit_y 0 4 3558 17 LVector3i::unit_y 0 1 676 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3i const &LVector3i::unit_y(void);

2616 6 unit_z 0 4 3558 17 LVector3i::unit_z 0 1 677 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3i const &LVector3i::unit_z(void);

2617 6 get_xy 0 4 3558 17 LVector3i::get_xy 0 1 678 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2i LVector3i::get_xy(void) const;

2618 6 get_xz 0 4 3558 17 LVector3i::get_xz 0 1 679 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2i LVector3i::get_xz(void) const;

2619 6 get_yz 0 4 3558 17 LVector3i::get_yz 0 1 680 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2i LVector3i::get_yz(void) const;

2620 10 operator - 0 68 3558 21 LVector3i::operator - 0 1 681 0
51
inline LVector3i LVector3i::operator -(void) const;

2621 10 operator + 0 4 3558 21 LVector3i::operator + 0 2 682 683 0
141
inline LVecBase3i LVector3i::operator +(LVecBase3i const &other) const;
inline LVector3i LVector3i::operator +(LVector3i const &other) const;

2622 10 operator - 0 4 3558 21 LVector3i::operator - 0 2 684 685 0
141
inline LVecBase3i LVector3i::operator -(LVecBase3i const &other) const;
inline LVector3i LVector3i::operator -(LVector3i const &other) const;

2623 5 cross 0 4 3558 16 LVector3i::cross 0 1 686 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3i LVector3i::cross(LVecBase3i const &other) const;

2624 10 operator * 0 4 3558 21 LVector3i::operator * 0 1 687 0
57
inline LVector3i LVector3i::operator *(int scalar) const;

2625 10 operator / 0 4 3558 21 LVector3i::operator / 0 1 688 0
57
inline LVector3i LVector3i::operator /(int scalar) const;

2626 2 up 0 4 3558 13 LVector3i::up 0 2 689 690 291
////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
65
static inline LVector3i LVector3i::up(CoordinateSystem cs = (0));

2627 5 right 0 4 3558 16 LVector3i::right 0 2 691 692 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
68
static inline LVector3i LVector3i::right(CoordinateSystem cs = (0));

2628 7 forward 0 4 3558 18 LVector3i::forward 0 2 693 694 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
70
static inline LVector3i LVector3i::forward(CoordinateSystem cs = (0));

2629 4 down 0 4 3558 15 LVector3i::down 0 2 695 696 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3i LVector3i::down(CoordinateSystem cs = (0));

2630 4 left 0 4 3558 15 LVector3i::left 0 2 697 698 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3i LVector3i::left(CoordinateSystem cs = (0));

2631 4 back 0 4 3558 15 LVector3i::back 0 2 699 700 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3i LVector3i::back(CoordinateSystem cs = (0));

2632 3 rfu 0 4 3558 14 LVector3i::rfu 0 2 701 702 523
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3)::
94
static inline LVector3i LVector3i::rfu(int right, int fwd, int up, CoordinateSystem cs = (0));

2633 11 python_repr 0 4 3558 22 LVector3i::python_repr 0 1 703 0
95
inline void LVector3i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2634 14 get_class_type 0 4 3558 25 LVector3i::get_class_type 0 1 704 0
50
static TypeHandle LVector3i::get_class_type(void);

2635 10 ~LVector3i 0 4 3558 21 LVector3i::~LVector3i 0 0 0
28
LVector3i::~LVector3i(void);

2636 8 LPoint3f 0 4 3559 18 LPoint3f::LPoint3f 0 5 705 706 707 708 709 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
242
inline LPoint3f::LPoint3f(void);
inline LPoint3f::LPoint3f(LVecBase3f const &copy);
inline LPoint3f::LPoint3f(float fill_value);
inline LPoint3f::LPoint3f(float x, float y, float z);
inline LPoint3f::LPoint3f(LVecBase2f const &copy, float z);

2637 10 operator = 0 4 3559 20 LPoint3f::operator = 0 2 710 711 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint3f &LPoint3f::operator =(LVecBase3f const &copy);
inline LPoint3f &LPoint3f::operator =(float fill_value);

2638 11 __getattr__ 0 4 3559 21 LPoint3f::__getattr__ 0 1 712 0
83
inline _object *LPoint3f::__getattr__(basic_string< char > const &attr_name) const;

2639 11 __setattr__ 0 4 3559 21 LPoint3f::__setattr__ 0 1 713 0
104
inline int LPoint3f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2640 4 zero 0 4 3559 14 LPoint3f::zero 0 1 714 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3f const &LPoint3f::zero(void);

2641 6 unit_x 0 4 3559 16 LPoint3f::unit_x 0 1 715 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_x(void);

2642 6 unit_y 0 4 3559 16 LPoint3f::unit_y 0 1 716 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_y(void);

2643 6 unit_z 0 4 3559 16 LPoint3f::unit_z 0 1 717 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_z(void);

2644 6 get_xy 0 4 3559 16 LPoint3f::get_xy 0 1 718 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xy(void) const;

2645 6 get_xz 0 4 3559 16 LPoint3f::get_xz 0 1 719 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xz(void) const;

2646 6 get_yz 0 4 3559 16 LPoint3f::get_yz 0 1 720 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_yz(void) const;

2647 10 operator - 0 68 3559 20 LPoint3f::operator - 0 1 721 0
49
inline LPoint3f LPoint3f::operator -(void) const;

2648 10 operator + 0 4 3559 20 LPoint3f::operator + 0 2 722 723 0
138
inline LVecBase3f LPoint3f::operator +(LVecBase3f const &other) const;
inline LPoint3f LPoint3f::operator +(LVector3f const &other) const;

2649 10 operator - 0 4 3559 20 LPoint3f::operator - 0 3 724 725 726 0
206
inline LVecBase3f LPoint3f::operator -(LVecBase3f const &other) const;
inline LVector3f LPoint3f::operator -(LPoint3f const &other) const;
inline LPoint3f LPoint3f::operator -(LVector3f const &other) const;

2650 5 cross 0 4 3559 15 LPoint3f::cross 0 1 727 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3f LPoint3f::cross(LVecBase3f const &other) const;

2651 7 project 0 4 3559 17 LPoint3f::project 0 1 728 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3f LPoint3f::project(LVecBase3f const &onto) const;

2652 10 operator * 0 4 3559 20 LPoint3f::operator * 0 1 729 0
57
inline LPoint3f LPoint3f::operator *(float scalar) const;

2653 10 operator / 0 4 3559 20 LPoint3f::operator / 0 1 730 0
57
inline LPoint3f LPoint3f::operator /(float scalar) const;

2654 6 origin 0 4 3559 16 LPoint3f::origin 0 2 731 732 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
74
static inline LPoint3f const &LPoint3f::origin(CoordinateSystem cs = (0));

2655 3 rfu 0 4 3559 13 LPoint3f::rfu 0 2 733 734 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
98
static inline LPoint3f LPoint3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (0));

2656 11 python_repr 0 4 3559 21 LPoint3f::python_repr 0 1 735 0
94
inline void LPoint3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2657 14 get_class_type 0 4 3559 24 LPoint3f::get_class_type 0 1 736 0
49
static TypeHandle LPoint3f::get_class_type(void);

2658 9 ~LPoint3f 0 4 3559 19 LPoint3f::~LPoint3f 0 0 0
26
LPoint3f::~LPoint3f(void);

2659 8 LPoint3d 0 4 3560 18 LPoint3d::LPoint3d 0 5 737 738 739 740 741 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
247
inline LPoint3d::LPoint3d(void);
inline LPoint3d::LPoint3d(LVecBase3d const &copy);
inline LPoint3d::LPoint3d(double fill_value);
inline LPoint3d::LPoint3d(double x, double y, double z);
inline LPoint3d::LPoint3d(LVecBase2d const &copy, double z);

2660 10 operator = 0 4 3560 20 LPoint3d::operator = 0 2 742 743 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint3d &LPoint3d::operator =(LVecBase3d const &copy);
inline LPoint3d &LPoint3d::operator =(double fill_value);

2661 11 __getattr__ 0 4 3560 21 LPoint3d::__getattr__ 0 1 744 0
83
inline _object *LPoint3d::__getattr__(basic_string< char > const &attr_name) const;

2662 11 __setattr__ 0 4 3560 21 LPoint3d::__setattr__ 0 1 745 0
104
inline int LPoint3d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2663 4 zero 0 4 3560 14 LPoint3d::zero 0 1 746 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3d const &LPoint3d::zero(void);

2664 6 unit_x 0 4 3560 16 LPoint3d::unit_x 0 1 747 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_x(void);

2665 6 unit_y 0 4 3560 16 LPoint3d::unit_y 0 1 748 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_y(void);

2666 6 unit_z 0 4 3560 16 LPoint3d::unit_z 0 1 749 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_z(void);

2667 6 get_xy 0 4 3560 16 LPoint3d::get_xy 0 1 750 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xy(void) const;

2668 6 get_xz 0 4 3560 16 LPoint3d::get_xz 0 1 751 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xz(void) const;

2669 6 get_yz 0 4 3560 16 LPoint3d::get_yz 0 1 752 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_yz(void) const;

2670 10 operator - 0 68 3560 20 LPoint3d::operator - 0 1 753 0
49
inline LPoint3d LPoint3d::operator -(void) const;

2671 10 operator + 0 4 3560 20 LPoint3d::operator + 0 2 754 755 0
138
inline LVecBase3d LPoint3d::operator +(LVecBase3d const &other) const;
inline LPoint3d LPoint3d::operator +(LVector3d const &other) const;

2672 10 operator - 0 4 3560 20 LPoint3d::operator - 0 3 756 757 758 0
206
inline LVecBase3d LPoint3d::operator -(LVecBase3d const &other) const;
inline LVector3d LPoint3d::operator -(LPoint3d const &other) const;
inline LPoint3d LPoint3d::operator -(LVector3d const &other) const;

2673 5 cross 0 4 3560 15 LPoint3d::cross 0 1 759 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3d LPoint3d::cross(LVecBase3d const &other) const;

2674 7 project 0 4 3560 17 LPoint3d::project 0 1 760 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3d LPoint3d::project(LVecBase3d const &onto) const;

2675 10 operator * 0 4 3560 20 LPoint3d::operator * 0 1 761 0
58
inline LPoint3d LPoint3d::operator *(double scalar) const;

2676 10 operator / 0 4 3560 20 LPoint3d::operator / 0 1 762 0
58
inline LPoint3d LPoint3d::operator /(double scalar) const;

2677 6 origin 0 4 3560 16 LPoint3d::origin 0 2 763 764 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
74
static inline LPoint3d const &LPoint3d::origin(CoordinateSystem cs = (0));

2678 3 rfu 0 4 3560 13 LPoint3d::rfu 0 2 765 766 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
101
static inline LPoint3d LPoint3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (0));

2679 11 python_repr 0 4 3560 21 LPoint3d::python_repr 0 1 767 0
94
inline void LPoint3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2680 14 get_class_type 0 4 3560 24 LPoint3d::get_class_type 0 1 768 0
49
static TypeHandle LPoint3d::get_class_type(void);

2681 9 ~LPoint3d 0 4 3560 19 LPoint3d::~LPoint3d 0 0 0
26
LPoint3d::~LPoint3d(void);

2682 8 LPoint3i 0 4 3561 18 LPoint3i::LPoint3i 0 5 769 770 771 772 773 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
232
inline LPoint3i::LPoint3i(void);
inline LPoint3i::LPoint3i(LVecBase3i const &copy);
inline LPoint3i::LPoint3i(int fill_value);
inline LPoint3i::LPoint3i(int x, int y, int z);
inline LPoint3i::LPoint3i(LVecBase2i const &copy, int z);

2683 10 operator = 0 4 3561 20 LPoint3i::operator = 0 2 774 775 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
117
inline LPoint3i &LPoint3i::operator =(LVecBase3i const &copy);
inline LPoint3i &LPoint3i::operator =(int fill_value);

2684 11 __getattr__ 0 4 3561 21 LPoint3i::__getattr__ 0 1 776 0
83
inline _object *LPoint3i::__getattr__(basic_string< char > const &attr_name) const;

2685 11 __setattr__ 0 4 3561 21 LPoint3i::__setattr__ 0 1 777 0
104
inline int LPoint3i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2686 4 zero 0 4 3561 14 LPoint3i::zero 0 1 778 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3i const &LPoint3i::zero(void);

2687 6 unit_x 0 4 3561 16 LPoint3i::unit_x 0 1 779 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3i const &LPoint3i::unit_x(void);

2688 6 unit_y 0 4 3561 16 LPoint3i::unit_y 0 1 780 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3i const &LPoint3i::unit_y(void);

2689 6 unit_z 0 4 3561 16 LPoint3i::unit_z 0 1 781 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3i const &LPoint3i::unit_z(void);

2690 6 get_xy 0 4 3561 16 LPoint3i::get_xy 0 1 782 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2i LPoint3i::get_xy(void) const;

2691 6 get_xz 0 4 3561 16 LPoint3i::get_xz 0 1 783 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2i LPoint3i::get_xz(void) const;

2692 6 get_yz 0 4 3561 16 LPoint3i::get_yz 0 1 784 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2i LPoint3i::get_yz(void) const;

2693 10 operator - 0 68 3561 20 LPoint3i::operator - 0 1 785 0
49
inline LPoint3i LPoint3i::operator -(void) const;

2694 10 operator + 0 4 3561 20 LPoint3i::operator + 0 2 786 787 0
138
inline LVecBase3i LPoint3i::operator +(LVecBase3i const &other) const;
inline LPoint3i LPoint3i::operator +(LVector3i const &other) const;

2695 10 operator - 0 4 3561 20 LPoint3i::operator - 0 3 788 789 790 0
206
inline LVecBase3i LPoint3i::operator -(LVecBase3i const &other) const;
inline LVector3i LPoint3i::operator -(LPoint3i const &other) const;
inline LPoint3i LPoint3i::operator -(LVector3i const &other) const;

2696 5 cross 0 4 3561 15 LPoint3i::cross 0 1 791 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3i LPoint3i::cross(LVecBase3i const &other) const;

2697 10 operator * 0 4 3561 20 LPoint3i::operator * 0 1 792 0
55
inline LPoint3i LPoint3i::operator *(int scalar) const;

2698 10 operator / 0 4 3561 20 LPoint3i::operator / 0 1 793 0
55
inline LPoint3i LPoint3i::operator /(int scalar) const;

2699 6 origin 0 4 3561 16 LPoint3i::origin 0 2 794 795 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
74
static inline LPoint3i const &LPoint3i::origin(CoordinateSystem cs = (0));

2700 3 rfu 0 4 3561 13 LPoint3i::rfu 0 2 796 797 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
92
static inline LPoint3i LPoint3i::rfu(int right, int fwd, int up, CoordinateSystem cs = (0));

2701 11 python_repr 0 4 3561 21 LPoint3i::python_repr 0 1 798 0
94
inline void LPoint3i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2702 14 get_class_type 0 4 3561 24 LPoint3i::get_class_type 0 1 799 0
49
static TypeHandle LPoint3i::get_class_type(void);

2703 9 ~LPoint3i 0 4 3561 19 LPoint3i::~LPoint3i 0 0 0
26
LPoint3i::~LPoint3i(void);

2704 10 LVecBase4f 0 4 3562 22 LVecBase4f::LVecBase4f 0 6 800 801 802 803 804 805 1351
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
335
inline LVecBase4f::LVecBase4f(void);
inline LVecBase4f::LVecBase4f(LVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(UnalignedLVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(float fill_value);
inline LVecBase4f::LVecBase4f(float x, float y, float z, float w);
inline LVecBase4f::LVecBase4f(LVecBase3f const &copy, float w);

2705 10 operator = 0 4 3562 22 LVecBase4f::operator = 0 3 806 807 808 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
203
inline LVecBase4f &LVecBase4f::operator =(LVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(UnalignedLVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(float fill_value);

2706 12 operator new 0 4 3562 24 LVecBase4f::operator new 0 1 809 0
126
inline void *LVecBase4f::operator new(unsigned int size);
inline void *LVecBase4f::operator new(unsigned int size, void *ptr);

2707 15 operator delete 0 4 3562 27 LVecBase4f::operator delete 0 0 0
108
inline void LVecBase4f::operator delete(void *ptr);
inline void LVecBase4f::operator delete(void *, void *);

2708 12 validate_ptr 0 4 3562 24 LVecBase4f::validate_ptr 0 0 0
61
static inline bool LVecBase4f::validate_ptr(void const *ptr);

2709 4 zero 0 4 3562 16 LVecBase4f::zero 0 1 810 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4f const &LVecBase4f::zero(void);

2710 6 unit_x 0 4 3562 18 LVecBase4f::unit_x 0 1 811 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_x(void);

2711 6 unit_y 0 4 3562 18 LVecBase4f::unit_y 0 1 812 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_y(void);

2712 6 unit_z 0 4 3562 18 LVecBase4f::unit_z 0 1 813 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_z(void);

2713 6 unit_w 0 4 3562 18 LVecBase4f::unit_w 0 1 814 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_w(void);

2714 11 ~LVecBase4f 0 4 3562 23 LVecBase4f::~LVecBase4f 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4f::~LVecBase4f(void);

2715 10 __reduce__ 0 4 3562 22 LVecBase4f::__reduce__ 0 1 815 0
60
inline _object *LVecBase4f::__reduce__(_object *self) const;

2716 11 __getattr__ 0 4 3562 23 LVecBase4f::__getattr__ 0 1 816 0
85
inline _object *LVecBase4f::__getattr__(basic_string< char > const &attr_name) const;

2717 11 __setattr__ 0 4 3562 23 LVecBase4f::__setattr__ 0 1 817 0
106
inline int LVecBase4f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2718 11 operator [] 0 4 3562 23 LVecBase4f::operator [] 0 2 818 819 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase4f::operator [](int i) const;
inline float &LVecBase4f::operator [](int i);

2719 11 __setitem__ 0 4 3562 23 LVecBase4f::__setitem__ 0 1 820 0
52
inline void LVecBase4f::__setitem__(int i, float v);

2720 4 size 0 4 3562 16 LVecBase4f::size 0 1 821 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4f::size(void);

2721 6 is_nan 0 4 3562 18 LVecBase4f::is_nan 0 1 822 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4f::is_nan(void) const;

2722 8 get_cell 0 4 3562 20 LVecBase4f::get_cell 0 1 823 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase4f::get_cell(int i) const;

2723 5 get_x 0 4 3562 17 LVecBase4f::get_x 0 1 824 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_x(void) const;

2724 5 get_y 0 4 3562 17 LVecBase4f::get_y 0 1 825 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_y(void) const;

2725 5 get_z 0 4 3562 17 LVecBase4f::get_z 0 1 826 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_z(void) const;

2726 5 get_w 0 4 3562 17 LVecBase4f::get_w 0 1 827 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_w(void) const;

2727 8 set_cell 0 4 3562 20 LVecBase4f::set_cell 0 1 828 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4f::set_cell(int i, float value);

2728 5 set_x 0 4 3562 17 LVecBase4f::set_x 0 1 829 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_x(float value);

2729 5 set_y 0 4 3562 17 LVecBase4f::set_y 0 1 830 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_y(float value);

2730 5 set_z 0 4 3562 17 LVecBase4f::set_z 0 1 831 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_z(float value);

2731 5 set_w 0 4 3562 17 LVecBase4f::set_w 0 1 832 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_w(float value);

2732 11 add_to_cell 0 4 3562 23 LVecBase4f::add_to_cell 0 1 833 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4f::add_to_cell(int i, float value);

2733 5 add_x 0 4 3562 17 LVecBase4f::add_x 0 1 834 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_x(float value);

2734 5 add_y 0 4 3562 17 LVecBase4f::add_y 0 1 835 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_y(float value);

2735 5 add_z 0 4 3562 17 LVecBase4f::add_z 0 1 836 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_z(float value);

2736 5 add_w 0 4 3562 17 LVecBase4f::add_w 0 1 837 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_w(float value);

2737 8 get_data 0 4 3562 20 LVecBase4f::get_data 0 1 838 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase4f::get_data(void) const;

2738 18 get_num_components 0 4 3562 30 LVecBase4f::get_num_components 0 1 839 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4f::get_num_components(void) const;

2739 4 fill 0 4 3562 16 LVecBase4f::fill 0 1 840 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase4f::fill(float fill_value);

2740 3 set 0 4 3562 15 LVecBase4f::set 0 1 841 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::set(float x, float y, float z, float w);

2741 3 dot 0 4 3562 15 LVecBase4f::dot 0 1 842 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase4f::dot(LVecBase4f const &other) const;

2742 14 length_squared 0 4 3562 26 LVecBase4f::length_squared 0 1 843 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase4f::length_squared(void) const;

2743 6 length 0 4 3562 18 LVecBase4f::length 0 1 844 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase4f::length(void) const;

2744 9 normalize 0 4 3562 21 LVecBase4f::normalize 0 1 845 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4f::normalize(void);

2745 7 project 0 4 3562 19 LVecBase4f::project 0 1 846 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f LVecBase4f::project(LVecBase4f const &onto) const;

2746 10 operator < 0 4 3562 22 LVecBase4f::operator < 0 1 847 0
66
inline bool LVecBase4f::operator <(LVecBase4f const &other) const;

2747 11 operator == 0 4 3562 23 LVecBase4f::operator == 0 1 848 0
67
inline bool LVecBase4f::operator ==(LVecBase4f const &other) const;

2748 11 operator != 0 4 3562 23 LVecBase4f::operator != 0 1 849 0
67
inline bool LVecBase4f::operator !=(LVecBase4f const &other) const;

2749 10 compare_to 0 4 3562 22 LVecBase4f::compare_to 0 2 850 851 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase4f::compare_to(LVecBase4f const &other) const;
inline int LVecBase4f::compare_to(LVecBase4f const &other, float threshold) const;

2750 8 get_hash 0 4 3562 20 LVecBase4f::get_hash 0 2 852 853 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase4f::get_hash(void) const;
inline unsigned int LVecBase4f::get_hash(float threshold) const;

2751 8 add_hash 0 4 3562 20 LVecBase4f::add_hash 0 2 854 855 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase4f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4f::add_hash(unsigned int hash, float threshold) const;

2752 13 generate_hash 0 4 3562 25 LVecBase4f::generate_hash 0 2 856 857 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase4f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase4f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2753 10 operator - 0 68 3562 22 LVecBase4f::operator - 0 1 858 0
53
inline LVecBase4f LVecBase4f::operator -(void) const;

2754 10 operator + 0 4 3562 22 LVecBase4f::operator + 0 1 859 0
72
inline LVecBase4f LVecBase4f::operator +(LVecBase4f const &other) const;

2755 10 operator - 0 4 3562 22 LVecBase4f::operator - 0 1 860 0
72
inline LVecBase4f LVecBase4f::operator -(LVecBase4f const &other) const;

2756 10 operator * 0 4 3562 22 LVecBase4f::operator * 0 1 861 0
61
inline LVecBase4f LVecBase4f::operator *(float scalar) const;

2757 10 operator / 0 4 3562 22 LVecBase4f::operator / 0 1 862 0
61
inline LVecBase4f LVecBase4f::operator /(float scalar) const;

2758 11 operator += 0 4 3562 23 LVecBase4f::operator += 0 1 863 0
61
inline void LVecBase4f::operator +=(LVecBase4f const &other);

2759 11 operator -= 0 4 3562 23 LVecBase4f::operator -= 0 1 864 0
61
inline void LVecBase4f::operator -=(LVecBase4f const &other);

2760 11 operator *= 0 4 3562 23 LVecBase4f::operator *= 0 1 865 0
50
inline void LVecBase4f::operator *=(float scalar);

2761 11 operator /= 0 4 3562 23 LVecBase4f::operator /= 0 1 866 0
50
inline void LVecBase4f::operator /=(float scalar);

2762 18 componentwise_mult 0 4 3562 30 LVecBase4f::componentwise_mult 0 1 867 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4f::componentwise_mult(LVecBase4f const &other);

2763 7 __pow__ 0 4 3562 19 LVecBase4f::__pow__ 0 1 868 0
60
inline LVecBase4f LVecBase4f::__pow__(float exponent) const;

2764 8 __ipow__ 0 4 3562 20 LVecBase4f::__ipow__ 0 1 869 0
68
inline _object *LVecBase4f::__ipow__(_object *self, float exponent);

2765 4 fmax 0 4 3562 16 LVecBase4f::fmax 0 1 870 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f LVecBase4f::fmax(LVecBase4f const &other) const;

2766 4 fmin 0 4 3562 16 LVecBase4f::fmin 0 1 871 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f LVecBase4f::fmin(LVecBase4f const &other) const;

2767 12 almost_equal 0 4 3562 24 LVecBase4f::almost_equal 0 2 872 873 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase4f::almost_equal(LVecBase4f const &other, float threshold) const;
inline bool LVecBase4f::almost_equal(LVecBase4f const &other) const;

2768 6 output 0 4 3562 18 LVecBase4f::output 0 1 874 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4f::output(ostream &out) const;

2769 11 python_repr 0 4 3562 23 LVecBase4f::python_repr 0 1 875 0
96
inline void LVecBase4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2770 20 write_datagram_fixed 0 4 3562 32 LVecBase4f::write_datagram_fixed 0 1 876 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4f::write_datagram_fixed(Datagram &destination) const;

2771 19 read_datagram_fixed 0 4 3562 31 LVecBase4f::read_datagram_fixed 0 1 877 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4f::read_datagram_fixed(DatagramIterator &source);

2772 14 write_datagram 0 4 3562 26 LVecBase4f::write_datagram 0 1 878 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4f::write_datagram(Datagram &destination) const;

2773 13 read_datagram 0 4 3562 25 LVecBase4f::read_datagram 0 1 879 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::read_datagram(DatagramIterator &source);

2774 14 get_class_type 0 4 3562 26 LVecBase4f::get_class_type 0 1 880 0
51
static TypeHandle LVecBase4f::get_class_type(void);

2775 19 UnalignedLVecBase4f 0 4 3563 40 UnalignedLVecBase4f::UnalignedLVecBase4f 0 4 881 882 883 884 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
294
inline UnalignedLVecBase4f::UnalignedLVecBase4f(void);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(LVecBase4f const &copy);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(UnalignedLVecBase4f const &copy);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(float x, float y, float z, float w);

2776 10 operator = 0 4 3563 31 UnalignedLVecBase4f::operator = 0 2 885 886 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4f &UnalignedLVecBase4f::operator =(LVecBase4f const &copy);
inline UnalignedLVecBase4f &UnalignedLVecBase4f::operator =(UnalignedLVecBase4f const &copy);

2777 3 set 0 4 3563 24 UnalignedLVecBase4f::set 0 1 887 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void UnalignedLVecBase4f::set(float x, float y, float z, float w);

2778 11 operator [] 0 4 3563 32 UnalignedLVecBase4f::operator [] 0 2 888 889 233
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
114
inline float UnalignedLVecBase4f::operator [](int i) const;
inline float &UnalignedLVecBase4f::operator [](int i);

2779 11 __setitem__ 0 4 3563 32 UnalignedLVecBase4f::__setitem__ 0 1 890 0
61
inline void UnalignedLVecBase4f::__setitem__(int i, float v);

2780 4 size 0 4 3563 25 UnalignedLVecBase4f::size 0 1 891 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4f::size(void);

2781 8 get_data 0 4 3563 29 UnalignedLVecBase4f::get_data 0 1 892 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
62
inline float const *UnalignedLVecBase4f::get_data(void) const;

2782 18 get_num_components 0 4 3563 39 UnalignedLVecBase4f::get_num_components 0 1 893 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4f::get_num_components(void) const;

2783 14 get_class_type 0 4 3563 35 UnalignedLVecBase4f::get_class_type 0 1 894 0
60
static TypeHandle UnalignedLVecBase4f::get_class_type(void);

2784 20 ~UnalignedLVecBase4f 0 4 3563 41 UnalignedLVecBase4f::~UnalignedLVecBase4f 0 0 0
48
UnalignedLVecBase4f::~UnalignedLVecBase4f(void);

2785 10 LVecBase4d 0 4 3564 22 LVecBase4d::LVecBase4d 0 6 895 896 897 898 899 900 1351
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
341
inline LVecBase4d::LVecBase4d(void);
inline LVecBase4d::LVecBase4d(LVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(UnalignedLVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(double fill_value);
inline LVecBase4d::LVecBase4d(double x, double y, double z, double w);
inline LVecBase4d::LVecBase4d(LVecBase3d const &copy, double w);

2786 10 operator = 0 4 3564 22 LVecBase4d::operator = 0 3 901 902 903 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
204
inline LVecBase4d &LVecBase4d::operator =(LVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(UnalignedLVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(double fill_value);

2787 12 operator new 0 4 3564 24 LVecBase4d::operator new 0 1 904 0
126
inline void *LVecBase4d::operator new(unsigned int size);
inline void *LVecBase4d::operator new(unsigned int size, void *ptr);

2788 15 operator delete 0 4 3564 27 LVecBase4d::operator delete 0 0 0
108
inline void LVecBase4d::operator delete(void *ptr);
inline void LVecBase4d::operator delete(void *, void *);

2789 12 validate_ptr 0 4 3564 24 LVecBase4d::validate_ptr 0 0 0
61
static inline bool LVecBase4d::validate_ptr(void const *ptr);

2790 4 zero 0 4 3564 16 LVecBase4d::zero 0 1 905 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4d const &LVecBase4d::zero(void);

2791 6 unit_x 0 4 3564 18 LVecBase4d::unit_x 0 1 906 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_x(void);

2792 6 unit_y 0 4 3564 18 LVecBase4d::unit_y 0 1 907 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_y(void);

2793 6 unit_z 0 4 3564 18 LVecBase4d::unit_z 0 1 908 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_z(void);

2794 6 unit_w 0 4 3564 18 LVecBase4d::unit_w 0 1 909 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_w(void);

2795 11 ~LVecBase4d 0 4 3564 23 LVecBase4d::~LVecBase4d 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4d::~LVecBase4d(void);

2796 10 __reduce__ 0 4 3564 22 LVecBase4d::__reduce__ 0 1 910 0
60
inline _object *LVecBase4d::__reduce__(_object *self) const;

2797 11 __getattr__ 0 4 3564 23 LVecBase4d::__getattr__ 0 1 911 0
85
inline _object *LVecBase4d::__getattr__(basic_string< char > const &attr_name) const;

2798 11 __setattr__ 0 4 3564 23 LVecBase4d::__setattr__ 0 1 912 0
106
inline int LVecBase4d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2799 11 operator [] 0 4 3564 23 LVecBase4d::operator [] 0 2 913 914 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase4d::operator [](int i) const;
inline double &LVecBase4d::operator [](int i);

2800 11 __setitem__ 0 4 3564 23 LVecBase4d::__setitem__ 0 1 915 0
53
inline void LVecBase4d::__setitem__(int i, double v);

2801 4 size 0 4 3564 16 LVecBase4d::size 0 1 916 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4d::size(void);

2802 6 is_nan 0 4 3564 18 LVecBase4d::is_nan 0 1 917 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4d::is_nan(void) const;

2803 8 get_cell 0 4 3564 20 LVecBase4d::get_cell 0 1 918 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase4d::get_cell(int i) const;

2804 5 get_x 0 4 3564 17 LVecBase4d::get_x 0 1 919 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_x(void) const;

2805 5 get_y 0 4 3564 17 LVecBase4d::get_y 0 1 920 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_y(void) const;

2806 5 get_z 0 4 3564 17 LVecBase4d::get_z 0 1 921 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_z(void) const;

2807 5 get_w 0 4 3564 17 LVecBase4d::get_w 0 1 922 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_w(void) const;

2808 8 set_cell 0 4 3564 20 LVecBase4d::set_cell 0 1 923 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4d::set_cell(int i, double value);

2809 5 set_x 0 4 3564 17 LVecBase4d::set_x 0 1 924 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_x(double value);

2810 5 set_y 0 4 3564 17 LVecBase4d::set_y 0 1 925 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_y(double value);

2811 5 set_z 0 4 3564 17 LVecBase4d::set_z 0 1 926 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_z(double value);

2812 5 set_w 0 4 3564 17 LVecBase4d::set_w 0 1 927 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_w(double value);

2813 11 add_to_cell 0 4 3564 23 LVecBase4d::add_to_cell 0 1 928 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase4d::add_to_cell(int i, double value);

2814 5 add_x 0 4 3564 17 LVecBase4d::add_x 0 1 929 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_x(double value);

2815 5 add_y 0 4 3564 17 LVecBase4d::add_y 0 1 930 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_y(double value);

2816 5 add_z 0 4 3564 17 LVecBase4d::add_z 0 1 931 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_z(double value);

2817 5 add_w 0 4 3564 17 LVecBase4d::add_w 0 1 932 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_w(double value);

2818 8 get_data 0 4 3564 20 LVecBase4d::get_data 0 1 933 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase4d::get_data(void) const;

2819 18 get_num_components 0 4 3564 30 LVecBase4d::get_num_components 0 1 934 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4d::get_num_components(void) const;

2820 4 fill 0 4 3564 16 LVecBase4d::fill 0 1 935 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase4d::fill(double fill_value);

2821 3 set 0 4 3564 15 LVecBase4d::set 0 1 936 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::set(double x, double y, double z, double w);

2822 3 dot 0 4 3564 15 LVecBase4d::dot 0 1 937 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase4d::dot(LVecBase4d const &other) const;

2823 14 length_squared 0 4 3564 26 LVecBase4d::length_squared 0 1 938 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase4d::length_squared(void) const;

2824 6 length 0 4 3564 18 LVecBase4d::length 0 1 939 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase4d::length(void) const;

2825 9 normalize 0 4 3564 21 LVecBase4d::normalize 0 1 940 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4d::normalize(void);

2826 7 project 0 4 3564 19 LVecBase4d::project 0 1 941 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4d LVecBase4d::project(LVecBase4d const &onto) const;

2827 10 operator < 0 4 3564 22 LVecBase4d::operator < 0 1 942 0
66
inline bool LVecBase4d::operator <(LVecBase4d const &other) const;

2828 11 operator == 0 4 3564 23 LVecBase4d::operator == 0 1 943 0
67
inline bool LVecBase4d::operator ==(LVecBase4d const &other) const;

2829 11 operator != 0 4 3564 23 LVecBase4d::operator != 0 1 944 0
67
inline bool LVecBase4d::operator !=(LVecBase4d const &other) const;

2830 10 compare_to 0 4 3564 22 LVecBase4d::compare_to 0 2 945 946 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase4d::compare_to(LVecBase4d const &other) const;
inline int LVecBase4d::compare_to(LVecBase4d const &other, double threshold) const;

2831 8 get_hash 0 4 3564 20 LVecBase4d::get_hash 0 2 947 948 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase4d::get_hash(void) const;
inline unsigned int LVecBase4d::get_hash(double threshold) const;

2832 8 add_hash 0 4 3564 20 LVecBase4d::add_hash 0 2 949 950 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase4d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4d::add_hash(unsigned int hash, double threshold) const;

2833 13 generate_hash 0 4 3564 25 LVecBase4d::generate_hash 0 2 951 952 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase4d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase4d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2834 10 operator - 0 68 3564 22 LVecBase4d::operator - 0 1 953 0
53
inline LVecBase4d LVecBase4d::operator -(void) const;

2835 10 operator + 0 4 3564 22 LVecBase4d::operator + 0 1 954 0
72
inline LVecBase4d LVecBase4d::operator +(LVecBase4d const &other) const;

2836 10 operator - 0 4 3564 22 LVecBase4d::operator - 0 1 955 0
72
inline LVecBase4d LVecBase4d::operator -(LVecBase4d const &other) const;

2837 10 operator * 0 4 3564 22 LVecBase4d::operator * 0 1 956 0
62
inline LVecBase4d LVecBase4d::operator *(double scalar) const;

2838 10 operator / 0 4 3564 22 LVecBase4d::operator / 0 1 957 0
62
inline LVecBase4d LVecBase4d::operator /(double scalar) const;

2839 11 operator += 0 4 3564 23 LVecBase4d::operator += 0 1 958 0
61
inline void LVecBase4d::operator +=(LVecBase4d const &other);

2840 11 operator -= 0 4 3564 23 LVecBase4d::operator -= 0 1 959 0
61
inline void LVecBase4d::operator -=(LVecBase4d const &other);

2841 11 operator *= 0 4 3564 23 LVecBase4d::operator *= 0 1 960 0
51
inline void LVecBase4d::operator *=(double scalar);

2842 11 operator /= 0 4 3564 23 LVecBase4d::operator /= 0 1 961 0
51
inline void LVecBase4d::operator /=(double scalar);

2843 18 componentwise_mult 0 4 3564 30 LVecBase4d::componentwise_mult 0 1 962 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::componentwise_mult(LVecBase4d const &other);

2844 7 __pow__ 0 4 3564 19 LVecBase4d::__pow__ 0 1 963 0
61
inline LVecBase4d LVecBase4d::__pow__(double exponent) const;

2845 8 __ipow__ 0 4 3564 20 LVecBase4d::__ipow__ 0 1 964 0
69
inline _object *LVecBase4d::__ipow__(_object *self, double exponent);

2846 4 fmax 0 4 3564 16 LVecBase4d::fmax 0 1 965 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4d LVecBase4d::fmax(LVecBase4d const &other) const;

2847 4 fmin 0 4 3564 16 LVecBase4d::fmin 0 1 966 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4d LVecBase4d::fmin(LVecBase4d const &other) const;

2848 12 almost_equal 0 4 3564 24 LVecBase4d::almost_equal 0 2 967 968 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase4d::almost_equal(LVecBase4d const &other, double threshold) const;
inline bool LVecBase4d::almost_equal(LVecBase4d const &other) const;

2849 6 output 0 4 3564 18 LVecBase4d::output 0 1 969 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::output(ostream &out) const;

2850 11 python_repr 0 4 3564 23 LVecBase4d::python_repr 0 1 970 0
96
inline void LVecBase4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2851 20 write_datagram_fixed 0 4 3564 32 LVecBase4d::write_datagram_fixed 0 1 971 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4d::write_datagram_fixed(Datagram &destination) const;

2852 19 read_datagram_fixed 0 4 3564 31 LVecBase4d::read_datagram_fixed 0 1 972 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4d::read_datagram_fixed(DatagramIterator &source);

2853 14 write_datagram 0 4 3564 26 LVecBase4d::write_datagram 0 1 973 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::write_datagram(Datagram &destination) const;

2854 13 read_datagram 0 4 3564 25 LVecBase4d::read_datagram 0 1 974 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4d::read_datagram(DatagramIterator &source);

2855 14 get_class_type 0 4 3564 26 LVecBase4d::get_class_type 0 1 975 0
51
static TypeHandle LVecBase4d::get_class_type(void);

2856 19 UnalignedLVecBase4d 0 4 3565 40 UnalignedLVecBase4d::UnalignedLVecBase4d 0 4 976 977 978 979 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
298
inline UnalignedLVecBase4d::UnalignedLVecBase4d(void);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(LVecBase4d const &copy);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(UnalignedLVecBase4d const &copy);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(double x, double y, double z, double w);

2857 10 operator = 0 4 3565 31 UnalignedLVecBase4d::operator = 0 2 980 981 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4d &UnalignedLVecBase4d::operator =(LVecBase4d const &copy);
inline UnalignedLVecBase4d &UnalignedLVecBase4d::operator =(UnalignedLVecBase4d const &copy);

2858 3 set 0 4 3565 24 UnalignedLVecBase4d::set 0 1 982 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline void UnalignedLVecBase4d::set(double x, double y, double z, double w);

2859 11 operator [] 0 4 3565 32 UnalignedLVecBase4d::operator [] 0 2 983 984 233
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline double UnalignedLVecBase4d::operator [](int i) const;
inline double &UnalignedLVecBase4d::operator [](int i);

2860 11 __setitem__ 0 4 3565 32 UnalignedLVecBase4d::__setitem__ 0 1 985 0
62
inline void UnalignedLVecBase4d::__setitem__(int i, double v);

2861 4 size 0 4 3565 25 UnalignedLVecBase4d::size 0 1 986 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4d::size(void);

2862 8 get_data 0 4 3565 29 UnalignedLVecBase4d::get_data 0 1 987 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
63
inline double const *UnalignedLVecBase4d::get_data(void) const;

2863 18 get_num_components 0 4 3565 39 UnalignedLVecBase4d::get_num_components 0 1 988 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4d::get_num_components(void) const;

2864 14 get_class_type 0 4 3565 35 UnalignedLVecBase4d::get_class_type 0 1 989 0
60
static TypeHandle UnalignedLVecBase4d::get_class_type(void);

2865 20 ~UnalignedLVecBase4d 0 4 3565 41 UnalignedLVecBase4d::~UnalignedLVecBase4d 0 0 0
48
UnalignedLVecBase4d::~UnalignedLVecBase4d(void);

2866 10 LVecBase4i 0 4 3566 22 LVecBase4i::LVecBase4i 0 6 990 991 992 993 994 995 1351
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
323
inline LVecBase4i::LVecBase4i(void);
inline LVecBase4i::LVecBase4i(LVecBase4i const &copy);
inline LVecBase4i::LVecBase4i(UnalignedLVecBase4i const &copy);
inline LVecBase4i::LVecBase4i(int fill_value);
inline LVecBase4i::LVecBase4i(int x, int y, int z, int w);
inline LVecBase4i::LVecBase4i(LVecBase3i const &copy, int w);

2867 10 operator = 0 4 3566 22 LVecBase4i::operator = 0 3 996 997 998 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
201
inline LVecBase4i &LVecBase4i::operator =(LVecBase4i const &copy);
inline LVecBase4i &LVecBase4i::operator =(UnalignedLVecBase4i const &copy);
inline LVecBase4i &LVecBase4i::operator =(int fill_value);

2868 12 operator new 0 4 3566 24 LVecBase4i::operator new 0 1 999 0
126
inline void *LVecBase4i::operator new(unsigned int size);
inline void *LVecBase4i::operator new(unsigned int size, void *ptr);

2869 15 operator delete 0 4 3566 27 LVecBase4i::operator delete 0 0 0
108
inline void LVecBase4i::operator delete(void *ptr);
inline void LVecBase4i::operator delete(void *, void *);

2870 12 validate_ptr 0 4 3566 24 LVecBase4i::validate_ptr 0 0 0
61
static inline bool LVecBase4i::validate_ptr(void const *ptr);

2871 4 zero 0 4 3566 16 LVecBase4i::zero 0 1 1000 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4i const &LVecBase4i::zero(void);

2872 6 unit_x 0 4 3566 18 LVecBase4i::unit_x 0 1 1001 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_x(void);

2873 6 unit_y 0 4 3566 18 LVecBase4i::unit_y 0 1 1002 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_y(void);

2874 6 unit_z 0 4 3566 18 LVecBase4i::unit_z 0 1 1003 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_z(void);

2875 6 unit_w 0 4 3566 18 LVecBase4i::unit_w 0 1 1004 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_w(void);

2876 11 ~LVecBase4i 0 4 3566 23 LVecBase4i::~LVecBase4i 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4i::~LVecBase4i(void);

2877 10 __reduce__ 0 4 3566 22 LVecBase4i::__reduce__ 0 1 1005 0
60
inline _object *LVecBase4i::__reduce__(_object *self) const;

2878 11 __getattr__ 0 4 3566 23 LVecBase4i::__getattr__ 0 1 1006 0
85
inline _object *LVecBase4i::__getattr__(basic_string< char > const &attr_name) const;

2879 11 __setattr__ 0 4 3566 23 LVecBase4i::__setattr__ 0 1 1007 0
106
inline int LVecBase4i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2880 11 operator [] 0 4 3566 23 LVecBase4i::operator [] 0 2 1008 1009 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
inline int LVecBase4i::operator [](int i) const;
inline int &LVecBase4i::operator [](int i);

2881 11 __setitem__ 0 4 3566 23 LVecBase4i::__setitem__ 0 1 1010 0
50
inline void LVecBase4i::__setitem__(int i, int v);

2882 4 size 0 4 3566 16 LVecBase4i::size 0 1 1011 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4i::size(void);

2883 6 is_nan 0 4 3566 18 LVecBase4i::is_nan 0 1 1012 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4i::is_nan(void) const;

2884 8 get_cell 0 4 3566 20 LVecBase4i::get_cell 0 1 1013 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline int LVecBase4i::get_cell(int i) const;

2885 5 get_x 0 4 3566 17 LVecBase4i::get_x 0 1 1014 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_x(void) const;

2886 5 get_y 0 4 3566 17 LVecBase4i::get_y 0 1 1015 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_y(void) const;

2887 5 get_z 0 4 3566 17 LVecBase4i::get_z 0 1 1016 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_z(void) const;

2888 5 get_w 0 4 3566 17 LVecBase4i::get_w 0 1 1017 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_w(void) const;

2889 8 set_cell 0 4 3566 20 LVecBase4i::set_cell 0 1 1018 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4i::set_cell(int i, int value);

2890 5 set_x 0 4 3566 17 LVecBase4i::set_x 0 1 1019 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_x(int value);

2891 5 set_y 0 4 3566 17 LVecBase4i::set_y 0 1 1020 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_y(int value);

2892 5 set_z 0 4 3566 17 LVecBase4i::set_z 0 1 1021 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_z(int value);

2893 5 set_w 0 4 3566 17 LVecBase4i::set_w 0 1 1022 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_w(int value);

2894 11 add_to_cell 0 4 3566 23 LVecBase4i::add_to_cell 0 1 1023 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4i::add_to_cell(int i, int value);

2895 5 add_x 0 4 3566 17 LVecBase4i::add_x 0 1 1024 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_x(int value);

2896 5 add_y 0 4 3566 17 LVecBase4i::add_y 0 1 1025 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_y(int value);

2897 5 add_z 0 4 3566 17 LVecBase4i::add_z 0 1 1026 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_z(int value);

2898 5 add_w 0 4 3566 17 LVecBase4i::add_w 0 1 1027 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_w(int value);

2899 8 get_data 0 4 3566 20 LVecBase4i::get_data 0 1 1028 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
51
inline int const *LVecBase4i::get_data(void) const;

2900 18 get_num_components 0 4 3566 30 LVecBase4i::get_num_components 0 1 1029 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4i::get_num_components(void) const;

2901 4 fill 0 4 3566 16 LVecBase4i::fill 0 1 1030 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
45
inline void LVecBase4i::fill(int fill_value);

2902 3 set 0 4 3566 15 LVecBase4i::set 0 1 1031 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4i::set(int x, int y, int z, int w);

2903 3 dot 0 4 3566 15 LVecBase4i::dot 0 1 1032 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline int LVecBase4i::dot(LVecBase4i const &other) const;

2904 14 length_squared 0 4 3566 26 LVecBase4i::length_squared 0 1 1033 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
50
inline int LVecBase4i::length_squared(void) const;

2905 10 operator < 0 4 3566 22 LVecBase4i::operator < 0 1 1034 0
66
inline bool LVecBase4i::operator <(LVecBase4i const &other) const;

2906 11 operator == 0 4 3566 23 LVecBase4i::operator == 0 1 1035 0
67
inline bool LVecBase4i::operator ==(LVecBase4i const &other) const;

2907 11 operator != 0 4 3566 23 LVecBase4i::operator != 0 1 1036 0
67
inline bool LVecBase4i::operator !=(LVecBase4i const &other) const;

2908 10 compare_to 0 4 3566 22 LVecBase4i::compare_to 0 1 1037 321
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
65
inline int LVecBase4i::compare_to(LVecBase4i const &other) const;

2909 8 get_hash 0 4 3566 20 LVecBase4i::get_hash 0 1 1038 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase4i::get_hash(void) const;

2910 8 add_hash 0 4 3566 20 LVecBase4i::add_hash 0 1 1039 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase4i::add_hash(unsigned int hash) const;

2911 13 generate_hash 0 4 3566 25 LVecBase4i::generate_hash 0 1 1040 272
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
76
inline void LVecBase4i::generate_hash(ChecksumHashGenerator &hashgen) const;

2912 10 operator - 0 68 3566 22 LVecBase4i::operator - 0 1 1041 0
53
inline LVecBase4i LVecBase4i::operator -(void) const;

2913 10 operator + 0 4 3566 22 LVecBase4i::operator + 0 1 1042 0
72
inline LVecBase4i LVecBase4i::operator +(LVecBase4i const &other) const;

2914 10 operator - 0 4 3566 22 LVecBase4i::operator - 0 1 1043 0
72
inline LVecBase4i LVecBase4i::operator -(LVecBase4i const &other) const;

2915 10 operator * 0 4 3566 22 LVecBase4i::operator * 0 1 1044 0
59
inline LVecBase4i LVecBase4i::operator *(int scalar) const;

2916 10 operator / 0 4 3566 22 LVecBase4i::operator / 0 1 1045 0
59
inline LVecBase4i LVecBase4i::operator /(int scalar) const;

2917 11 operator += 0 4 3566 23 LVecBase4i::operator += 0 1 1046 0
61
inline void LVecBase4i::operator +=(LVecBase4i const &other);

2918 11 operator -= 0 4 3566 23 LVecBase4i::operator -= 0 1 1047 0
61
inline void LVecBase4i::operator -=(LVecBase4i const &other);

2919 11 operator *= 0 4 3566 23 LVecBase4i::operator *= 0 1 1048 0
48
inline void LVecBase4i::operator *=(int scalar);

2920 11 operator /= 0 4 3566 23 LVecBase4i::operator /= 0 1 1049 0
48
inline void LVecBase4i::operator /=(int scalar);

2921 18 componentwise_mult 0 4 3566 30 LVecBase4i::componentwise_mult 0 1 1050 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4i::componentwise_mult(LVecBase4i const &other);

2922 7 __pow__ 0 4 3566 19 LVecBase4i::__pow__ 0 1 1051 0
58
inline LVecBase4i LVecBase4i::__pow__(int exponent) const;

2923 8 __ipow__ 0 4 3566 20 LVecBase4i::__ipow__ 0 1 1052 0
66
inline _object *LVecBase4i::__ipow__(_object *self, int exponent);

2924 4 fmax 0 4 3566 16 LVecBase4i::fmax 0 1 1053 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4i LVecBase4i::fmax(LVecBase4i const &other) const;

2925 4 fmin 0 4 3566 16 LVecBase4i::fmin 0 1 1054 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4i LVecBase4i::fmin(LVecBase4i const &other) const;

2926 12 almost_equal 0 4 3566 24 LVecBase4i::almost_equal 0 2 1055 1056 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
152
inline bool LVecBase4i::almost_equal(LVecBase4i const &other, int threshold) const;
inline bool LVecBase4i::almost_equal(LVecBase4i const &other) const;

2927 6 output 0 4 3566 18 LVecBase4i::output 0 1 1057 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4i::output(ostream &out) const;

2928 11 python_repr 0 4 3566 23 LVecBase4i::python_repr 0 1 1058 0
96
inline void LVecBase4i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2929 20 write_datagram_fixed 0 4 3566 32 LVecBase4i::write_datagram_fixed 0 1 1059 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4i::write_datagram_fixed(Datagram &destination) const;

2930 19 read_datagram_fixed 0 4 3566 31 LVecBase4i::read_datagram_fixed 0 1 1060 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4i::read_datagram_fixed(DatagramIterator &source);

2931 14 write_datagram 0 4 3566 26 LVecBase4i::write_datagram 0 1 1061 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4i::write_datagram(Datagram &destination) const;

2932 13 read_datagram 0 4 3566 25 LVecBase4i::read_datagram 0 1 1062 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4i::read_datagram(DatagramIterator &source);

2933 14 get_class_type 0 4 3566 26 LVecBase4i::get_class_type 0 1 1063 0
51
static TypeHandle LVecBase4i::get_class_type(void);

2934 19 UnalignedLVecBase4i 0 4 3567 40 UnalignedLVecBase4i::UnalignedLVecBase4i 0 4 1064 1065 1066 1067 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
286
inline UnalignedLVecBase4i::UnalignedLVecBase4i(void);
inline UnalignedLVecBase4i::UnalignedLVecBase4i(LVecBase4i const &copy);
inline UnalignedLVecBase4i::UnalignedLVecBase4i(UnalignedLVecBase4i const &copy);
inline UnalignedLVecBase4i::UnalignedLVecBase4i(int x, int y, int z, int w);

2935 10 operator = 0 4 3567 31 UnalignedLVecBase4i::operator = 0 2 1068 1069 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4i &UnalignedLVecBase4i::operator =(LVecBase4i const &copy);
inline UnalignedLVecBase4i &UnalignedLVecBase4i::operator =(UnalignedLVecBase4i const &copy);

2936 3 set 0 4 3567 24 UnalignedLVecBase4i::set 0 1 1070 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void UnalignedLVecBase4i::set(int x, int y, int z, int w);

2937 11 operator [] 0 4 3567 32 UnalignedLVecBase4i::operator [] 0 2 1071 1072 233
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
110
inline int UnalignedLVecBase4i::operator [](int i) const;
inline int &UnalignedLVecBase4i::operator [](int i);

2938 11 __setitem__ 0 4 3567 32 UnalignedLVecBase4i::__setitem__ 0 1 1073 0
59
inline void UnalignedLVecBase4i::__setitem__(int i, int v);

2939 4 size 0 4 3567 25 UnalignedLVecBase4i::size 0 1 1074 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4i::size(void);

2940 8 get_data 0 4 3567 29 UnalignedLVecBase4i::get_data 0 1 1075 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
60
inline int const *UnalignedLVecBase4i::get_data(void) const;

2941 18 get_num_components 0 4 3567 39 UnalignedLVecBase4i::get_num_components 0 1 1076 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4i::get_num_components(void) const;

2942 14 get_class_type 0 4 3567 35 UnalignedLVecBase4i::get_class_type 0 1 1077 0
60
static TypeHandle UnalignedLVecBase4i::get_class_type(void);

2943 20 ~UnalignedLVecBase4i 0 4 3567 41 UnalignedLVecBase4i::~UnalignedLVecBase4i 0 0 0
48
UnalignedLVecBase4i::~UnalignedLVecBase4i(void);

2944 9 LVector4f 0 4 3568 20 LVector4f::LVector4f 0 5 1078 1079 1080 1081 1082 1109
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
261
inline LVector4f::LVector4f(void);
inline LVector4f::LVector4f(LVecBase4f const &copy);
inline LVector4f::LVector4f(float fill_value);
inline LVector4f::LVector4f(float x, float y, float z, float w);
inline LVector4f::LVector4f(LVecBase3f const &copy, float w);

2945 10 operator = 0 4 3568 21 LVector4f::operator = 0 2 1083 1084 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector4f &LVector4f::operator =(LVecBase4f const &copy);
inline LVector4f &LVector4f::operator =(float fill_value);

2946 11 __getattr__ 0 4 3568 22 LVector4f::__getattr__ 0 1 1085 0
84
inline _object *LVector4f::__getattr__(basic_string< char > const &attr_name) const;

2947 11 __setattr__ 0 4 3568 22 LVector4f::__setattr__ 0 1 1086 0
105
inline int LVector4f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2948 4 zero 0 4 3568 15 LVector4f::zero 0 1 1087 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4f const &LVector4f::zero(void);

2949 6 unit_x 0 4 3568 17 LVector4f::unit_x 0 1 1088 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_x(void);

2950 6 unit_y 0 4 3568 17 LVector4f::unit_y 0 1 1089 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_y(void);

2951 6 unit_z 0 4 3568 17 LVector4f::unit_z 0 1 1090 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_z(void);

2952 6 unit_w 0 4 3568 17 LVector4f::unit_w 0 1 1091 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_w(void);

2953 10 operator - 0 68 3568 21 LVector4f::operator - 0 1 1092 0
51
inline LVector4f LVector4f::operator -(void) const;

2954 10 operator + 0 4 3568 21 LVector4f::operator + 0 2 1093 1094 0
141
inline LVecBase4f LVector4f::operator +(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator +(LVector4f const &other) const;

2955 10 operator - 0 4 3568 21 LVector4f::operator - 0 2 1095 1096 0
141
inline LVecBase4f LVector4f::operator -(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator -(LVector4f const &other) const;

2956 10 operator * 0 4 3568 21 LVector4f::operator * 0 1 1097 0
59
inline LVector4f LVector4f::operator *(float scalar) const;

2957 10 operator / 0 4 3568 21 LVector4f::operator / 0 1 1098 0
59
inline LVector4f LVector4f::operator /(float scalar) const;

2958 7 project 0 4 3568 18 LVector4f::project 0 1 1099 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4f LVector4f::project(LVecBase4f const &onto) const;

2959 11 python_repr 0 4 3568 22 LVector4f::python_repr 0 1 1100 0
95
inline void LVector4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2960 14 get_class_type 0 4 3568 25 LVector4f::get_class_type 0 1 1101 0
50
static TypeHandle LVector4f::get_class_type(void);

2961 10 ~LVector4f 0 4 3568 21 LVector4f::~LVector4f 0 0 0
28
LVector4f::~LVector4f(void);

2962 9 LVector4d 0 4 3569 20 LVector4d::LVector4d 0 5 1102 1103 1104 1105 1106 1109
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
267
inline LVector4d::LVector4d(void);
inline LVector4d::LVector4d(LVecBase4d const &copy);
inline LVector4d::LVector4d(double fill_value);
inline LVector4d::LVector4d(double x, double y, double z, double w);
inline LVector4d::LVector4d(LVecBase3d const &copy, double w);

2963 10 operator = 0 4 3569 21 LVector4d::operator = 0 2 1107 1108 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector4d &LVector4d::operator =(LVecBase4d const &copy);
inline LVector4d &LVector4d::operator =(double fill_value);

2964 11 __getattr__ 0 4 3569 22 LVector4d::__getattr__ 0 1 1109 0
84
inline _object *LVector4d::__getattr__(basic_string< char > const &attr_name) const;

2965 11 __setattr__ 0 4 3569 22 LVector4d::__setattr__ 0 1 1110 0
105
inline int LVector4d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2966 4 zero 0 4 3569 15 LVector4d::zero 0 1 1111 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4d const &LVector4d::zero(void);

2967 6 unit_x 0 4 3569 17 LVector4d::unit_x 0 1 1112 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_x(void);

2968 6 unit_y 0 4 3569 17 LVector4d::unit_y 0 1 1113 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_y(void);

2969 6 unit_z 0 4 3569 17 LVector4d::unit_z 0 1 1114 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_z(void);

2970 6 unit_w 0 4 3569 17 LVector4d::unit_w 0 1 1115 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_w(void);

2971 10 operator - 0 68 3569 21 LVector4d::operator - 0 1 1116 0
51
inline LVector4d LVector4d::operator -(void) const;

2972 10 operator + 0 4 3569 21 LVector4d::operator + 0 2 1117 1118 0
141
inline LVecBase4d LVector4d::operator +(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator +(LVector4d const &other) const;

2973 10 operator - 0 4 3569 21 LVector4d::operator - 0 2 1119 1120 0
141
inline LVecBase4d LVector4d::operator -(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator -(LVector4d const &other) const;

2974 10 operator * 0 4 3569 21 LVector4d::operator * 0 1 1121 0
60
inline LVector4d LVector4d::operator *(double scalar) const;

2975 10 operator / 0 4 3569 21 LVector4d::operator / 0 1 1122 0
60
inline LVector4d LVector4d::operator /(double scalar) const;

2976 7 project 0 4 3569 18 LVector4d::project 0 1 1123 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4d LVector4d::project(LVecBase4d const &onto) const;

2977 11 python_repr 0 4 3569 22 LVector4d::python_repr 0 1 1124 0
95
inline void LVector4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2978 14 get_class_type 0 4 3569 25 LVector4d::get_class_type 0 1 1125 0
50
static TypeHandle LVector4d::get_class_type(void);

2979 10 ~LVector4d 0 4 3569 21 LVector4d::~LVector4d 0 0 0
28
LVector4d::~LVector4d(void);

2980 9 LVector4i 0 4 3570 20 LVector4i::LVector4i 0 5 1126 1127 1128 1129 1130 1109
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
249
inline LVector4i::LVector4i(void);
inline LVector4i::LVector4i(LVecBase4i const &copy);
inline LVector4i::LVector4i(int fill_value);
inline LVector4i::LVector4i(int x, int y, int z, int w);
inline LVector4i::LVector4i(LVecBase3i const &copy, int w);

2981 10 operator = 0 4 3570 21 LVector4i::operator = 0 2 1131 1132 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LVector4i &LVector4i::operator =(LVecBase4i const &copy);
inline LVector4i &LVector4i::operator =(int fill_value);

2982 11 __getattr__ 0 4 3570 22 LVector4i::__getattr__ 0 1 1133 0
84
inline _object *LVector4i::__getattr__(basic_string< char > const &attr_name) const;

2983 11 __setattr__ 0 4 3570 22 LVector4i::__setattr__ 0 1 1134 0
105
inline int LVector4i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2984 4 zero 0 4 3570 15 LVector4i::zero 0 1 1135 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4i const &LVector4i::zero(void);

2985 6 unit_x 0 4 3570 17 LVector4i::unit_x 0 1 1136 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_x(void);

2986 6 unit_y 0 4 3570 17 LVector4i::unit_y 0 1 1137 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_y(void);

2987 6 unit_z 0 4 3570 17 LVector4i::unit_z 0 1 1138 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_z(void);

2988 6 unit_w 0 4 3570 17 LVector4i::unit_w 0 1 1139 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_w(void);

2989 10 operator - 0 68 3570 21 LVector4i::operator - 0 1 1140 0
51
inline LVector4i LVector4i::operator -(void) const;

2990 10 operator + 0 4 3570 21 LVector4i::operator + 0 2 1141 1142 0
141
inline LVecBase4i LVector4i::operator +(LVecBase4i const &other) const;
inline LVector4i LVector4i::operator +(LVector4i const &other) const;

2991 10 operator - 0 4 3570 21 LVector4i::operator - 0 2 1143 1144 0
141
inline LVecBase4i LVector4i::operator -(LVecBase4i const &other) const;
inline LVector4i LVector4i::operator -(LVector4i const &other) const;

2992 10 operator * 0 4 3570 21 LVector4i::operator * 0 1 1145 0
57
inline LVector4i LVector4i::operator *(int scalar) const;

2993 10 operator / 0 4 3570 21 LVector4i::operator / 0 1 1146 0
57
inline LVector4i LVector4i::operator /(int scalar) const;

2994 11 python_repr 0 4 3570 22 LVector4i::python_repr 0 1 1147 0
95
inline void LVector4i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2995 14 get_class_type 0 4 3570 25 LVector4i::get_class_type 0 1 1148 0
50
static TypeHandle LVector4i::get_class_type(void);

2996 10 ~LVector4i 0 4 3570 21 LVector4i::~LVector4i 0 0 0
28
LVector4i::~LVector4i(void);

2997 8 LPoint4f 0 4 3571 18 LPoint4f::LPoint4f 0 5 1149 1150 1151 1152 1153 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
251
inline LPoint4f::LPoint4f(void);
inline LPoint4f::LPoint4f(LVecBase4f const &copy);
inline LPoint4f::LPoint4f(float fill_value);
inline LPoint4f::LPoint4f(float x, float y, float z, float w);
inline LPoint4f::LPoint4f(LVecBase3f const &copy, float w);

2998 10 operator = 0 4 3571 20 LPoint4f::operator = 0 2 1154 1155 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint4f &LPoint4f::operator =(LVecBase4f const &copy);
inline LPoint4f &LPoint4f::operator =(float fill_value);

2999 11 __getattr__ 0 4 3571 21 LPoint4f::__getattr__ 0 1 1156 0
83
inline _object *LPoint4f::__getattr__(basic_string< char > const &attr_name) const;

3000 11 __setattr__ 0 4 3571 21 LPoint4f::__setattr__ 0 1 1157 0
104
inline int LPoint4f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

3001 4 zero 0 4 3571 14 LPoint4f::zero 0 1 1158 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4f const &LPoint4f::zero(void);

3002 6 unit_x 0 4 3571 16 LPoint4f::unit_x 0 1 1159 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_x(void);

3003 6 unit_y 0 4 3571 16 LPoint4f::unit_y 0 1 1160 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_y(void);

3004 6 unit_z 0 4 3571 16 LPoint4f::unit_z 0 1 1161 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_z(void);

3005 6 unit_w 0 4 3571 16 LPoint4f::unit_w 0 1 1162 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_w(void);

3006 10 operator - 0 68 3571 20 LPoint4f::operator - 0 1 1163 0
49
inline LPoint4f LPoint4f::operator -(void) const;

3007 10 operator + 0 4 3571 20 LPoint4f::operator + 0 2 1164 1165 0
138
inline LVecBase4f LPoint4f::operator +(LVecBase4f const &other) const;
inline LPoint4f LPoint4f::operator +(LVector4f const &other) const;

3008 10 operator - 0 4 3571 20 LPoint4f::operator - 0 3 1166 1167 1168 0
206
inline LVecBase4f LPoint4f::operator -(LVecBase4f const &other) const;
inline LVector4f LPoint4f::operator -(LPoint4f const &other) const;
inline LPoint4f LPoint4f::operator -(LVector4f const &other) const;

3009 10 operator * 0 4 3571 20 LPoint4f::operator * 0 1 1169 0
57
inline LPoint4f LPoint4f::operator *(float scalar) const;

3010 10 operator / 0 4 3571 20 LPoint4f::operator / 0 1 1170 0
57
inline LPoint4f LPoint4f::operator /(float scalar) const;

3011 7 project 0 4 3571 17 LPoint4f::project 0 1 1171 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4f LPoint4f::project(LVecBase4f const &onto) const;

3012 11 python_repr 0 4 3571 21 LPoint4f::python_repr 0 1 1172 0
94
inline void LPoint4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

3013 14 get_class_type 0 4 3571 24 LPoint4f::get_class_type 0 1 1173 0
49
static TypeHandle LPoint4f::get_class_type(void);

3014 9 ~LPoint4f 0 4 3571 19 LPoint4f::~LPoint4f 0 0 0
26
LPoint4f::~LPoint4f(void);

3015 8 LPoint4d 0 4 3572 18 LPoint4d::LPoint4d 0 5 1174 1175 1176 1177 1178 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
257
inline LPoint4d::LPoint4d(void);
inline LPoint4d::LPoint4d(LVecBase4d const &copy);
inline LPoint4d::LPoint4d(double fill_value);
inline LPoint4d::LPoint4d(double x, double y, double z, double w);
inline LPoint4d::LPoint4d(LVecBase3d const &copy, double w);

3016 10 operator = 0 4 3572 20 LPoint4d::operator = 0 2 1179 1180 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint4d &LPoint4d::operator =(LVecBase4d const &copy);
inline LPoint4d &LPoint4d::operator =(double fill_value);

3017 11 __getattr__ 0 4 3572 21 LPoint4d::__getattr__ 0 1 1181 0
83
inline _object *LPoint4d::__getattr__(basic_string< char > const &attr_name) const;

3018 11 __setattr__ 0 4 3572 21 LPoint4d::__setattr__ 0 1 1182 0
104
inline int LPoint4d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

3019 4 zero 0 4 3572 14 LPoint4d::zero 0 1 1183 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4d const &LPoint4d::zero(void);

3020 6 unit_x 0 4 3572 16 LPoint4d::unit_x 0 1 1184 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_x(void);

3021 6 unit_y 0 4 3572 16 LPoint4d::unit_y 0 1 1185 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_y(void);

3022 6 unit_z 0 4 3572 16 LPoint4d::unit_z 0 1 1186 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_z(void);

3023 6 unit_w 0 4 3572 16 LPoint4d::unit_w 0 1 1187 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_w(void);

3024 10 operator - 0 68 3572 20 LPoint4d::operator - 0 1 1188 0
49
inline LPoint4d LPoint4d::operator -(void) const;

3025 10 operator + 0 4 3572 20 LPoint4d::operator + 0 2 1189 1190 0
138
inline LVecBase4d LPoint4d::operator +(LVecBase4d const &other) const;
inline LPoint4d LPoint4d::operator +(LVector4d const &other) const;

3026 10 operator - 0 4 3572 20 LPoint4d::operator - 0 3 1191 1192 1193 0
206
inline LVecBase4d LPoint4d::operator -(LVecBase4d const &other) const;
inline LVector4d LPoint4d::operator -(LPoint4d const &other) const;
inline LPoint4d LPoint4d::operator -(LVector4d const &other) const;

3027 10 operator * 0 4 3572 20 LPoint4d::operator * 0 1 1194 0
58
inline LPoint4d LPoint4d::operator *(double scalar) const;

3028 10 operator / 0 4 3572 20 LPoint4d::operator / 0 1 1195 0
58
inline LPoint4d LPoint4d::operator /(double scalar) const;

3029 7 project 0 4 3572 17 LPoint4d::project 0 1 1196 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4d LPoint4d::project(LVecBase4d const &onto) const;

3030 11 python_repr 0 4 3572 21 LPoint4d::python_repr 0 1 1197 0
94
inline void LPoint4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

3031 14 get_class_type 0 4 3572 24 LPoint4d::get_class_type 0 1 1198 0
49
static TypeHandle LPoint4d::get_class_type(void);

3032 9 ~LPoint4d 0 4 3572 19 LPoint4d::~LPoint4d 0 0 0
26
LPoint4d::~LPoint4d(void);

3033 8 LPoint4i 0 4 3573 18 LPoint4i::LPoint4i 0 5 1199 1200 1201 1202 1203 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
239
inline LPoint4i::LPoint4i(void);
inline LPoint4i::LPoint4i(LVecBase4i const &copy);
inline LPoint4i::LPoint4i(int fill_value);
inline LPoint4i::LPoint4i(int x, int y, int z, int w);
inline LPoint4i::LPoint4i(LVecBase3i const &copy, int w);

3034 10 operator = 0 4 3573 20 LPoint4i::operator = 0 2 1204 1205 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
117
inline LPoint4i &LPoint4i::operator =(LVecBase4i const &copy);
inline LPoint4i &LPoint4i::operator =(int fill_value);

3035 11 __getattr__ 0 4 3573 21 LPoint4i::__getattr__ 0 1 1206 0
83
inline _object *LPoint4i::__getattr__(basic_string< char > const &attr_name) const;

3036 11 __setattr__ 0 4 3573 21 LPoint4i::__setattr__ 0 1 1207 0
104
inline int LPoint4i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

3037 4 zero 0 4 3573 14 LPoint4i::zero 0 1 1208 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4i const &LPoint4i::zero(void);

3038 6 unit_x 0 4 3573 16 LPoint4i::unit_x 0 1 1209 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_x(void);

3039 6 unit_y 0 4 3573 16 LPoint4i::unit_y 0 1 1210 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_y(void);

3040 6 unit_z 0 4 3573 16 LPoint4i::unit_z 0 1 1211 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_z(void);

3041 6 unit_w 0 4 3573 16 LPoint4i::unit_w 0 1 1212 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_w(void);

3042 10 operator - 0 68 3573 20 LPoint4i::operator - 0 1 1213 0
49
inline LPoint4i LPoint4i::operator -(void) const;

3043 10 operator + 0 4 3573 20 LPoint4i::operator + 0 2 1214 1215 0
138
inline LVecBase4i LPoint4i::operator +(LVecBase4i const &other) const;
inline LPoint4i LPoint4i::operator +(LVector4i const &other) const;

3044 10 operator - 0 4 3573 20 LPoint4i::operator - 0 3 1216 1217 1218 0
206
inline LVecBase4i LPoint4i::operator -(LVecBase4i const &other) const;
inline LVector4i LPoint4i::operator -(LPoint4i const &other) const;
inline LPoint4i LPoint4i::operator -(LVector4i const &other) const;

3045 10 operator * 0 4 3573 20 LPoint4i::operator * 0 1 1219 0
55
inline LPoint4i LPoint4i::operator *(int scalar) const;

3046 10 operator / 0 4 3573 20 LPoint4i::operator / 0 1 1220 0
55
inline LPoint4i LPoint4i::operator /(int scalar) const;

3047 11 python_repr 0 4 3573 21 LPoint4i::python_repr 0 1 1221 0
94
inline void LPoint4i::python_repr(ostream &out, basic_string< char > const &class_name) const;

3048 14 get_class_type 0 4 3573 24 LPoint4i::get_class_type 0 1 1222 0
49
static TypeHandle LPoint4i::get_class_type(void);

3049 9 ~LPoint4i 0 4 3573 19 LPoint4i::~LPoint4i 0 0 0
26
LPoint4i::~LPoint4i(void);

3050 11 operator [] 0 4 3575 27 LMatrix3f::Row::operator [] 0 2 1333 1334 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
104
inline float LMatrix3f::Row::operator [](int i) const;
inline float &LMatrix3f::Row::operator [](int i);

3051 11 __setitem__ 0 4 3575 27 LMatrix3f::Row::__setitem__ 0 1 1335 0
56
inline void LMatrix3f::Row::__setitem__(int i, float v);

3052 4 size 0 4 3575 20 LMatrix3f::Row::size 0 1 1336 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3f::Row::size(void);

3053 4 ~Row 0 4 3575 20 LMatrix3f::Row::~Row 0 0 0
27
LMatrix3f::Row::~Row(void);

3054 11 operator [] 0 4 3576 28 LMatrix3f::CRow::operator [] 0 1 1337 0
55
inline float LMatrix3f::CRow::operator [](int i) const;

3055 4 size 0 4 3576 21 LMatrix3f::CRow::size 0 1 1338 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3f::CRow::size(void);

3056 5 ~CRow 0 4 3576 22 LMatrix3f::CRow::~CRow 0 0 0
29
LMatrix3f::CRow::~CRow(void);

3057 9 LMatrix3f 0 4 3574 20 LMatrix3f::LMatrix3f 0 3 1223 1224 1225 677
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
215
inline LMatrix3f::LMatrix3f(void);
inline LMatrix3f::LMatrix3f(LMatrix3f const &other);
inline LMatrix3f::LMatrix3f(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

3058 10 operator = 0 4 3574 21 LMatrix3f::operator = 0 2 1226 1227 468
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LMatrix3f &LMatrix3f::operator =(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator =(float fill_value);

3059 12 operator new 0 4 3574 23 LMatrix3f::operator new 0 1 1228 0
124
inline void *LMatrix3f::operator new(unsigned int size);
inline void *LMatrix3f::operator new(unsigned int size, void *ptr);

3060 15 operator delete 0 4 3574 26 LMatrix3f::operator delete 0 0 0
106
inline void LMatrix3f::operator delete(void *ptr);
inline void LMatrix3f::operator delete(void *, void *);

3061 12 validate_ptr 0 4 3574 23 LMatrix3f::validate_ptr 0 0 0
60
static inline bool LMatrix3f::validate_ptr(void const *ptr);

3062 10 __reduce__ 0 4 3574 21 LMatrix3f::__reduce__ 0 1 1229 0
59
inline _object *LMatrix3f::__reduce__(_object *self) const;

3063 4 fill 0 4 3574 15 LMatrix3f::fill 0 1 1230 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
39
void LMatrix3f::fill(float fill_value);

3064 3 set 0 4 3574 14 LMatrix3f::set 0 1 1231 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
126
inline void LMatrix3f::set(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

3065 7 set_row 0 4 3574 18 LMatrix3f::set_row 0 2 1232 1233 636
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_row(int row, LVecBase3f const &v);
inline void LMatrix3f::set_row(int row, LVecBase2f const &v);

3066 7 set_col 0 4 3574 18 LMatrix3f::set_col 0 2 1234 1235 645
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_col(int col, LVecBase3f const &v);
inline void LMatrix3f::set_col(int col, LVecBase2f const &v);

3067 7 get_row 0 4 3574 18 LMatrix3f::get_row 0 2 1236 1237 638
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3f LMatrix3f::get_row(int row) const;
inline void LMatrix3f::get_row(LVecBase3f &result_vec, int row) const;

3068 7 get_col 0 4 3574 18 LMatrix3f::get_col 0 1 1238 305
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3f LMatrix3f::get_col(int col) const;

3069 8 get_row2 0 4 3574 19 LMatrix3f::get_row2 0 1 1239 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_row2(int row) const;

3070 8 get_col2 0 4 3574 19 LMatrix3f::get_col2 0 1 1240 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_col2(int col) const;

3071 11 operator () 0 4 3574 22 LMatrix3f::operator () 0 2 1241 1242 226
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix3f::operator ()(int row, int col);
inline float LMatrix3f::operator ()(int row, int col) const;

3072 11 operator [] 0 4 3574 22 LMatrix3f::operator [] 0 2 1243 1244 0
112
inline LMatrix3f::CRow LMatrix3f::operator [](int i) const;
inline LMatrix3f::Row LMatrix3f::operator [](int i);

3073 4 size 0 4 3574 15 LMatrix3f::size 0 1 1245 266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3f::size(void);

3074 6 is_nan 0 4 3574 17 LMatrix3f::is_nan 0 1 1246 310
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3f::is_nan(void) const;

3075 8 get_cell 0 4 3574 19 LMatrix3f::get_cell 0 1 1247 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix3f::get_cell(int row, int col) const;

3076 8 set_cell 0 4 3574 19 LMatrix3f::set_cell 0 1 1248 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix3f::set_cell(int row, int col, float value);

3077 8 get_data 0 4 3574 19 LMatrix3f::get_data 0 1 1249 401
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix3f::get_data(void) const;

3078 18 get_num_components 0 4 3574 29 LMatrix3f::get_num_components 0 1 1250 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3f::get_num_components(void) const;

3079 10 operator < 0 4 3574 21 LMatrix3f::operator < 0 1 1251 0
64
inline bool LMatrix3f::operator <(LMatrix3f const &other) const;

3080 11 operator == 0 4 3574 22 LMatrix3f::operator == 0 1 1252 0
65
inline bool LMatrix3f::operator ==(LMatrix3f const &other) const;

3081 11 operator != 0 4 3574 22 LMatrix3f::operator != 0 1 1253 0
65
inline bool LMatrix3f::operator !=(LMatrix3f const &other) const;

3082 10 compare_to 0 4 3574 21 LMatrix3f::compare_to 0 2 1254 1255 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix3f::compare_to(LMatrix3f const &other) const;
int LMatrix3f::compare_to(LMatrix3f const &other, float threshold) const;

3083 8 get_hash 0 4 3574 19 LMatrix3f::get_hash 0 2 1256 1257 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix3f::get_hash(void) const;
inline unsigned int LMatrix3f::get_hash(float threshold) const;

3084 8 add_hash 0 4 3574 19 LMatrix3f::add_hash 0 2 1258 1259 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix3f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3f::add_hash(unsigned int hash, float threshold) const;

3085 5 xform 0 4 3574 16 LMatrix3f::xform 0 1 1260 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3f LMatrix3f::xform(LVecBase3f const &v) const;

3086 11 xform_point 0 4 3574 22 LMatrix3f::xform_point 0 1 1261 403
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LMatrix3f::xform_point(LVecBase2f const &v) const;

3087 9 xform_vec 0 4 3574 20 LMatrix3f::xform_vec 0 2 1262 1263 849
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2f LMatrix3f::xform_vec(LVecBase2f const &v) const;
inline LVecBase3f LMatrix3f::xform_vec(LVecBase3f const &v) const;

3088 17 xform_vec_general 0 4 3574 28 LMatrix3f::xform_vec_general 0 1 1264 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix3f::xform_vec_general(LVecBase3f const &v) const;

3089 14 xform_in_place 0 4 3574 25 LMatrix3f::xform_in_place 0 1 1265 265
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix3f::xform_in_place(LVecBase3f &v) const;

3090 20 xform_point_in_place 0 4 3574 31 LMatrix3f::xform_point_in_place 0 1 1266 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix3f::xform_point_in_place(LVecBase2f &v) const;

3091 18 xform_vec_in_place 0 4 3574 29 LMatrix3f::xform_vec_in_place 0 2 1267 1268 804
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
127
inline void LMatrix3f::xform_vec_in_place(LVecBase2f &v) const;
inline void LMatrix3f::xform_vec_in_place(LVecBase3f &v) const;

3092 26 xform_vec_general_in_place 0 4 3574 37 LMatrix3f::xform_vec_general_in_place 0 1 1269 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix3f::xform_vec_general_in_place(LVecBase3f &v) const;

3093 8 multiply 0 4 3574 19 LMatrix3f::multiply 0 1 1270 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3f::multiply(LMatrix3f const &other1, LMatrix3f const &other2);

3094 10 operator * 0 4 3574 21 LMatrix3f::operator * 0 2 1271 1272 0
129
inline LMatrix3f LMatrix3f::operator *(LMatrix3f const &other) const;
inline LMatrix3f LMatrix3f::operator *(float scalar) const;

3095 10 operator / 0 4 3574 21 LMatrix3f::operator / 0 1 1273 0
59
inline LMatrix3f LMatrix3f::operator /(float scalar) const;

3096 11 operator += 0 4 3574 22 LMatrix3f::operator += 0 1 1274 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator +=(LMatrix3f const &other);

3097 11 operator -= 0 4 3574 22 LMatrix3f::operator -= 0 1 1275 281
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator -=(LMatrix3f const &other);

3098 11 operator *= 0 4 3574 22 LMatrix3f::operator *= 0 2 1276 1277 481
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
121
inline LMatrix3f &LMatrix3f::operator *=(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator *=(float scalar);

3099 11 operator /= 0 4 3574 22 LMatrix3f::operator /= 0 1 1278 254
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
55
inline LMatrix3f &LMatrix3f::operator /=(float scalar);

3100 18 componentwise_mult 0 4 3574 29 LMatrix3f::componentwise_mult 0 1 1279 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3f::componentwise_mult(LMatrix3f const &other);

3101 11 determinant 0 4 3574 22 LMatrix3f::determinant 0 1 1280 259
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
48
inline float LMatrix3f::determinant(void) const;

3102 14 transpose_from 0 4 3574 25 LMatrix3f::transpose_from 0 1 1281 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3f::transpose_from(LMatrix3f const &other);

3103 18 transpose_in_place 0 4 3574 29 LMatrix3f::transpose_in_place 0 1 1282 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3f::transpose_in_place(void);

3104 11 invert_from 0 4 3574 22 LMatrix3f::invert_from 0 1 1283 808
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3f::invert_from(LMatrix3f const &other);

3105 15 invert_in_place 0 4 3574 26 LMatrix3f::invert_in_place 0 1 1284 364
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3f::invert_in_place(void);

3106 21 invert_transpose_from 0 4 3574 32 LMatrix3f::invert_transpose_from 0 2 1285 1286 698
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3f::invert_transpose_from(LMatrix3f const &other);
inline bool LMatrix3f::invert_transpose_from(LMatrix4f const &other);

3107 9 ident_mat 0 4 3574 20 LMatrix3f::ident_mat 0 1 1287 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3f const &LMatrix3f::ident_mat(void);

3108 17 set_translate_mat 0 4 3574 28 LMatrix3f::set_translate_mat 0 1 1288 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3f::set_translate_mat(LVecBase2f const &trans);

3109 14 set_rotate_mat 0 4 3574 25 LMatrix3f::set_rotate_mat 0 3 1289 1290 1291 694
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
147
inline void LMatrix3f::set_rotate_mat(float angle);
void LMatrix3f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3110 13 set_scale_mat 0 4 3574 24 LMatrix3f::set_scale_mat 0 2 1292 1293 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3f::set_scale_mat(LVecBase2f const &scale);
inline void LMatrix3f::set_scale_mat(LVecBase3f const &scale);

3111 13 translate_mat 0 4 3574 24 LMatrix3f::translate_mat 0 2 1294 1295 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
144
static inline LMatrix3f LMatrix3f::translate_mat(LVecBase2f const &trans);
static inline LMatrix3f LMatrix3f::translate_mat(float tx, float ty);

3112 10 rotate_mat 0 4 3574 21 LMatrix3f::rotate_mat 0 3 1296 1297 1298 671
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
170
static inline LMatrix3f LMatrix3f::rotate_mat(float angle);
static inline LMatrix3f LMatrix3f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3113 9 scale_mat 0 4 3574 20 LMatrix3f::scale_mat 0 4 1299 1300 1301 1302 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
283
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase2f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy);
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase3f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy, float sz);

3114 23 set_rotate_mat_normaxis 0 4 3574 34 LMatrix3f::set_rotate_mat_normaxis 0 2 1303 1304 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
104
void LMatrix3f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3115 19 rotate_mat_normaxis 0 4 3574 30 LMatrix3f::rotate_mat_normaxis 0 2 1305 1306 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
119
static inline LMatrix3f LMatrix3f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3116 13 set_shear_mat 0 4 3574 24 LMatrix3f::set_shear_mat 0 2 1307 1308 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
89
inline void LMatrix3f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (0));

3117 9 shear_mat 0 4 3574 20 LMatrix3f::shear_mat 0 4 1309 1310 1311 1312 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
206
static inline LMatrix3f LMatrix3f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (0));
static inline LMatrix3f LMatrix3f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (0));

3118 19 set_scale_shear_mat 0 4 3574 30 LMatrix3f::set_scale_shear_mat 0 2 1313 1314 312
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
113
void LMatrix3f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (0));

3119 15 scale_shear_mat 0 4 3574 26 LMatrix3f::scale_shear_mat 0 4 1315 1316 1317 1318 620
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
273
static inline LMatrix3f LMatrix3f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (0));
static inline LMatrix3f LMatrix3f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (0));

3120 11 convert_mat 0 4 3574 22 LMatrix3f::convert_mat 0 1 1319 350
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3f const &LMatrix3f::convert_mat(CoordinateSystem from, CoordinateSystem to);

3121 12 almost_equal 0 4 3574 23 LMatrix3f::almost_equal 0 2 1320 1321 662
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix3f::almost_equal(LMatrix3f const &other, float threshold) const;
inline bool LMatrix3f::almost_equal(LMatrix3f const &other) const;

3122 6 output 0 4 3574 17 LMatrix3f::output 0 1 1322 215
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3f::output(ostream &out) const;

3123 5 write 0 4 3574 16 LMatrix3f::write 0 2 1323 1324 214
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write(ostream &out, int indent_level = (0)) const;

3124 11 python_repr 0 4 3574 22 LMatrix3f::python_repr 0 1 1325 0
95
inline void LMatrix3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

3125 13 generate_hash 0 4 3574 24 LMatrix3f::generate_hash 0 2 1326 1327 544
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
161
inline void LMatrix3f::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

3126 20 write_datagram_fixed 0 4 3574 31 LMatrix3f::write_datagram_fixed 0 1 1328 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write_datagram_fixed(Datagram &destination) const;

3127 19 read_datagram_fixed 0 4 3574 30 LMatrix3f::read_datagram_fixed 0 1 1329 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix3f::read_datagram_fixed(DatagramIterator &scan);

3128 14 write_datagram 0 4 3574 25 LMatrix3f::write_datagram 0 1 1330 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix3f::write_datagram(Datagram &destination) const;

3129 13 read_datagram 0 4 3574 24 LMatrix3f::read_datagram 0 1 1331 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix3f::read_datagram(DatagramIterator &source);

3130 14 get_class_type 0 4 3574 25 LMatrix3f::get_class_type 0 1 1332 0
50
static TypeHandle LMatrix3f::get_class_type(void);

3131 10 ~LMatrix3f 0 4 3574 21 LMatrix3f::~LMatrix3f 0 0 0
28
LMatrix3f::~LMatrix3f(void);

3132 9 transpose 0 1 0 9 transpose 0 4 1908 1909 1910 1911 0
191
inline LMatrix3f transpose(LMatrix3f const &a);
inline LMatrix4f transpose(LMatrix4f const &a);
inline LMatrix3d transpose(LMatrix3d const &a);
inline LMatrix4d transpose(LMatrix4d const &a);

3133 6 invert 0 1 0 6 invert 0 6 1912 1913 1914 1915 1916 1917 0
281
inline LMatrix3f invert(LMatrix3f const &a);
inline LMatrix4f invert(LMatrix4f const &a);
inline LMatrix3d invert(LMatrix3d const &a);
inline LMatrix4d invert(LMatrix4d const &a);
inline LQuaternionf invert(LQuaternionf const &a);
inline LQuaterniond invert(LQuaterniond const &a);

3134 11 operator [] 0 4 3578 27 LMatrix4f::Row::operator [] 0 2 1459 1460 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
104
inline float LMatrix4f::Row::operator [](int i) const;
inline float &LMatrix4f::Row::operator [](int i);

3135 11 __setitem__ 0 4 3578 27 LMatrix4f::Row::__setitem__ 0 1 1461 0
56
inline void LMatrix4f::Row::__setitem__(int i, float v);

3136 4 size 0 4 3578 20 LMatrix4f::Row::size 0 1 1462 271
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4f::Row::size(void);

3137 4 ~Row 0 4 3578 20 LMatrix4f::Row::~Row 0 0 0
27
LMatrix4f::Row::~Row(void);

3138 11 operator [] 0 4 3579 28 LMatrix4f::CRow::operator [] 0 1 1463 0
55
inline float LMatrix4f::CRow::operator [](int i) const;

3139 4 size 0 4 3579 21 LMatrix4f::CRow::size 0 1 1464 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4f::CRow::size(void);

3140 5 ~CRow 0 4 3579 22 LMatrix4f::CRow::~CRow 0 0 0
29
LMatrix4f::CRow::~CRow(void);

3141 9 LMatrix4f 0 4 3577 20 LMatrix4f::LMatrix4f 0 6 1339 1340 1341 1342 1343 1344 1469
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
487
inline LMatrix4f::LMatrix4f(void);
inline LMatrix4f::LMatrix4f(LMatrix4f const &other);
inline LMatrix4f::LMatrix4f(UnalignedLMatrix4f const &other);
inline LMatrix4f::LMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3, LVecBase3f const &trans);

3142 10 operator = 0 4 3577 21 LMatrix4f::operator = 0 3 1345 1346 1347 697
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
197
inline LMatrix4f &LMatrix4f::operator =(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(UnalignedLMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(float fill_value);

3143 12 operator new 0 4 3577 23 LMatrix4f::operator new 0 1 1348 0
124
inline void *LMatrix4f::operator new(unsigned int size);
inline void *LMatrix4f::operator new(unsigned int size, void *ptr);

3144 15 operator delete 0 4 3577 26 LMatrix4f::operator delete 0 0 0
106
inline void LMatrix4f::operator delete(void *ptr);
inline void LMatrix4f::operator delete(void *, void *);

3145 12 validate_ptr 0 4 3577 23 LMatrix4f::validate_ptr 0 0 0
60
static inline bool LMatrix4f::validate_ptr(void const *ptr);

3146 10 __reduce__ 0 4 3577 21 LMatrix4f::__reduce__ 0 1 1349 0
59
inline _object *LMatrix4f::__reduce__(_object *self) const;

3147 4 fill 0 4 3577 15 LMatrix4f::fill 0 1 1350 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
46
inline void LMatrix4f::fill(float fill_value);

3148 3 set 0 4 3577 14 LMatrix4f::set 0 1 1351 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
203
inline void LMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

3149 11 set_upper_3 0 4 3577 22 LMatrix4f::set_upper_3 0 1 1352 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4f::set_upper_3(LMatrix3f const &upper3);

3150 11 get_upper_3 0 4 3577 22 LMatrix4f::get_upper_3 0 1 1353 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3f LMatrix4f::get_upper_3(void) const;

3151 7 set_row 0 4 3577 18 LMatrix4f::set_row 0 2 1354 1355 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_row(int row, LVecBase4f const &v);
inline void LMatrix4f::set_row(int row, LVecBase3f const &v);

3152 7 set_col 0 4 3577 18 LMatrix4f::set_col 0 2 1356 1357 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_col(int col, LVecBase4f const &v);
inline void LMatrix4f::set_col(int col, LVecBase3f const &v);

3153 7 get_row 0 4 3577 18 LMatrix4f::get_row 0 2 1358 1359 626
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4f LMatrix4f::get_row(int row) const;
inline void LMatrix4f::get_row(LVecBase4f &result_vec, int row) const;

3154 7 get_col 0 4 3577 18 LMatrix4f::get_col 0 1 1360 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f LMatrix4f::get_col(int col) const;

3155 8 get_row3 0 4 3577 19 LMatrix4f::get_row3 0 2 1361 1362 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3f LMatrix4f::get_row3(int row) const;
inline void LMatrix4f::get_row3(LVecBase3f &result_vec, int row) const;

3156 8 get_col3 0 4 3577 19 LMatrix4f::get_col3 0 1 1363 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LMatrix4f::get_col3(int col) const;

3157 11 operator () 0 4 3577 22 LMatrix4f::operator () 0 2 1364 1365 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix4f::operator ()(int row, int col);
inline float LMatrix4f::operator ()(int row, int col) const;

3158 11 operator [] 0 4 3577 22 LMatrix4f::operator [] 0 2 1366 1367 0
112
inline LMatrix4f::CRow LMatrix4f::operator [](int i) const;
inline LMatrix4f::Row LMatrix4f::operator [](int i);

3159 4 size 0 4 3577 15 LMatrix4f::size 0 1 1368 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4f::size(void);

3160 6 is_nan 0 4 3577 17 LMatrix4f::is_nan 0 1 1369 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4f::is_nan(void) const;

3161 8 get_cell 0 4 3577 19 LMatrix4f::get_cell 0 1 1370 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix4f::get_cell(int row, int col) const;

3162 8 set_cell 0 4 3577 19 LMatrix4f::set_cell 0 1 1371 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::set_cell(int row, int col, float value);

3163 8 get_data 0 4 3577 19 LMatrix4f::get_data 0 1 1372 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix4f::get_data(void) const;

3164 18 get_num_components 0 4 3577 29 LMatrix4f::get_num_components 0 1 1373 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4f::get_num_components(void) const;

3165 5 begin 0 4 3577 16 LMatrix4f::begin 0 2 1374 1375 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
93
inline float const *LMatrix4f::begin(void);
inline float const *LMatrix4f::begin(void) const;

3166 3 end 0 4 3577 14 LMatrix4f::end 0 2 1376 1377 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
89
inline float const *LMatrix4f::end(void);
inline float const *LMatrix4f::end(void) const;

3167 10 operator < 0 4 3577 21 LMatrix4f::operator < 0 1 1378 0
64
inline bool LMatrix4f::operator <(LMatrix4f const &other) const;

3168 11 operator == 0 4 3577 22 LMatrix4f::operator == 0 1 1379 0
65
inline bool LMatrix4f::operator ==(LMatrix4f const &other) const;

3169 11 operator != 0 4 3577 22 LMatrix4f::operator != 0 1 1380 0
65
inline bool LMatrix4f::operator !=(LMatrix4f const &other) const;

3170 10 compare_to 0 4 3577 21 LMatrix4f::compare_to 0 2 1381 1382 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix4f::compare_to(LMatrix4f const &other) const;
int LMatrix4f::compare_to(LMatrix4f const &other, float threshold) const;

3171 8 get_hash 0 4 3577 19 LMatrix4f::get_hash 0 2 1383 1384 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix4f::get_hash(void) const;
inline unsigned int LMatrix4f::get_hash(float threshold) const;

3172 8 add_hash 0 4 3577 19 LMatrix4f::add_hash 0 2 1385 1386 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix4f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4f::add_hash(unsigned int hash, float threshold) const;

3173 5 xform 0 4 3577 16 LMatrix4f::xform 0 1 1387 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4f LMatrix4f::xform(LVecBase4f const &v) const;

3174 11 xform_point 0 4 3577 22 LMatrix4f::xform_point 0 1 1388 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LMatrix4f::xform_point(LVecBase3f const &v) const;

3175 19 xform_point_general 0 4 3577 30 LMatrix4f::xform_point_general 0 1 1389 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
76
inline LVecBase3f LMatrix4f::xform_point_general(LVecBase3f const &v) const;

3176 9 xform_vec 0 4 3577 20 LMatrix4f::xform_vec 0 1 1390 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LMatrix4f::xform_vec(LVecBase3f const &v) const;

3177 17 xform_vec_general 0 4 3577 28 LMatrix4f::xform_vec_general 0 1 1391 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix4f::xform_vec_general(LVecBase3f const &v) const;

3178 14 xform_in_place 0 4 3577 25 LMatrix4f::xform_in_place 0 1 1392 315
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix4f::xform_in_place(LVecBase4f &v) const;

3179 20 xform_point_in_place 0 4 3577 31 LMatrix4f::xform_point_in_place 0 1 1393 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix4f::xform_point_in_place(LVecBase3f &v) const;

3180 28 xform_point_general_in_place 0 4 3577 39 LMatrix4f::xform_point_general_in_place 0 1 1394 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4f::xform_point_general_in_place(LVecBase3f &v) const;

3181 18 xform_vec_in_place 0 4 3577 29 LMatrix4f::xform_vec_in_place 0 1 1395 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::xform_vec_in_place(LVecBase3f &v) const;

3182 26 xform_vec_general_in_place 0 4 3577 37 LMatrix4f::xform_vec_general_in_place 0 1 1396 355
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix4f::xform_vec_general_in_place(LVecBase3f &v) const;

3183 8 multiply 0 4 3577 19 LMatrix4f::multiply 0 1 1397 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4f::multiply(LMatrix4f const &other1, LMatrix4f const &other2);

3184 10 operator * 0 4 3577 21 LMatrix4f::operator * 0 2 1398 1399 0
129
inline LMatrix4f LMatrix4f::operator *(LMatrix4f const &other) const;
inline LMatrix4f LMatrix4f::operator *(float scalar) const;

3185 10 operator / 0 4 3577 21 LMatrix4f::operator / 0 1 1400 0
59
inline LMatrix4f LMatrix4f::operator /(float scalar) const;

3186 11 operator += 0 4 3577 22 LMatrix4f::operator += 0 1 1401 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator +=(LMatrix4f const &other);

3187 11 operator -= 0 4 3577 22 LMatrix4f::operator -= 0 1 1402 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator -=(LMatrix4f const &other);

3188 11 operator *= 0 4 3577 22 LMatrix4f::operator *= 0 2 1403 1404 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LMatrix4f &LMatrix4f::operator *=(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator *=(float scalar);

3189 11 operator /= 0 4 3577 22 LMatrix4f::operator /= 0 1 1405 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f &LMatrix4f::operator /=(float scalar);

3190 18 componentwise_mult 0 4 3577 29 LMatrix4f::componentwise_mult 0 1 1406 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4f::componentwise_mult(LMatrix4f const &other);

3191 14 transpose_from 0 4 3577 25 LMatrix4f::transpose_from 0 1 1407 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::transpose_from(LMatrix4f const &other);

3192 18 transpose_in_place 0 4 3577 29 LMatrix4f::transpose_in_place 0 1 1408 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4f::transpose_in_place(void);

3193 11 invert_from 0 4 3577 22 LMatrix4f::invert_from 0 1 1409 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4f::invert_from(LMatrix4f const &other);

3194 18 invert_affine_from 0 4 3577 29 LMatrix4f::invert_affine_from 0 1 1410 149
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4f::invert_affine_from(LMatrix4f const &other);

3195 15 invert_in_place 0 4 3577 26 LMatrix4f::invert_in_place 0 1 1411 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4f::invert_in_place(void);

3196 10 accumulate 0 4 3577 21 LMatrix4f::accumulate 0 1 1412 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////
72
inline void LMatrix4f::accumulate(LMatrix4f const &other, float weight);

3197 9 ident_mat 0 4 3577 20 LMatrix4f::ident_mat 0 1 1413 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::ident_mat(void);

3198 8 ones_mat 0 4 3577 19 LMatrix4f::ones_mat 0 1 1414 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4f const &LMatrix4f::ones_mat(void);

3199 9 zeros_mat 0 4 3577 20 LMatrix4f::zeros_mat 0 1 1415 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::zeros_mat(void);

3200 17 set_translate_mat 0 4 3577 28 LMatrix4f::set_translate_mat 0 1 1416 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4f::set_translate_mat(LVecBase3f const &trans);

3201 14 set_rotate_mat 0 4 3577 25 LMatrix4f::set_rotate_mat 0 2 1417 1418 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
95
void LMatrix4f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3202 23 set_rotate_mat_normaxis 0 4 3577 34 LMatrix4f::set_rotate_mat_normaxis 0 2 1419 1420 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
104
void LMatrix4f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3203 13 set_scale_mat 0 4 3577 24 LMatrix4f::set_scale_mat 0 1 1421 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::set_scale_mat(LVecBase3f const &scale);

3204 13 set_shear_mat 0 4 3577 24 LMatrix4f::set_shear_mat 0 2 1422 1423 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
89
inline void LMatrix4f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (0));

3205 19 set_scale_shear_mat 0 4 3577 30 LMatrix4f::set_scale_shear_mat 0 2 1424 1425 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
120
inline void LMatrix4f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (0));

3206 13 translate_mat 0 4 3577 24 LMatrix4f::translate_mat 0 2 1426 1427 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
154
static inline LMatrix4f LMatrix4f::translate_mat(LVecBase3f const &trans);
static inline LMatrix4f LMatrix4f::translate_mat(float tx, float ty, float tz);

3207 10 rotate_mat 0 4 3577 21 LMatrix4f::rotate_mat 0 2 1428 1429 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
110
static inline LMatrix4f LMatrix4f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3208 19 rotate_mat_normaxis 0 4 3577 30 LMatrix4f::rotate_mat_normaxis 0 2 1430 1431 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
119
static inline LMatrix4f LMatrix4f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3209 9 scale_mat 0 4 3577 20 LMatrix4f::scale_mat 0 3 1432 1433 1434 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
205
static inline LMatrix4f LMatrix4f::scale_mat(LVecBase3f const &scale);
static inline LMatrix4f LMatrix4f::scale_mat(float sx, float sy, float sz);
static inline LMatrix4f LMatrix4f::scale_mat(float scale);

3210 9 shear_mat 0 4 3577 20 LMatrix4f::shear_mat 0 4 1435 1436 1437 1438 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
206
static inline LMatrix4f LMatrix4f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (0));
static inline LMatrix4f LMatrix4f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (0));

3211 15 scale_shear_mat 0 4 3577 26 LMatrix4f::scale_shear_mat 0 4 1439 1440 1441 1442 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
273
static inline LMatrix4f LMatrix4f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (0));
static inline LMatrix4f LMatrix4f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (0));

3212 13 y_to_z_up_mat 0 4 3577 24 LMatrix4f::y_to_z_up_mat 0 1 1443 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::y_to_z_up_mat(void);

3213 13 z_to_y_up_mat 0 4 3577 24 LMatrix4f::z_to_y_up_mat 0 1 1444 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::z_to_y_up_mat(void);

3214 11 convert_mat 0 4 3577 22 LMatrix4f::convert_mat 0 1 1445 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4f const &LMatrix4f::convert_mat(CoordinateSystem from, CoordinateSystem to);

3215 12 almost_equal 0 4 3577 23 LMatrix4f::almost_equal 0 2 1446 1447 656
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix4f::almost_equal(LMatrix4f const &other, float threshold) const;
inline bool LMatrix4f::almost_equal(LMatrix4f const &other) const;

3216 6 output 0 4 3577 17 LMatrix4f::output 0 1 1448 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4f::output(ostream &out) const;

3217 5 write 0 4 3577 16 LMatrix4f::write 0 2 1449 1450 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write(ostream &out, int indent_level = (0)) const;

3218 11 python_repr 0 4 3577 22 LMatrix4f::python_repr 0 1 1451 0
95
inline void LMatrix4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

3219 13 generate_hash 0 4 3577 24 LMatrix4f::generate_hash 0 2 1452 1453 538
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
157
inline void LMatrix4f::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix4f::generate_hash(ChecksumHashGenerator &hashgen, float scale) const;

3220 20 write_datagram_fixed 0 4 3577 31 LMatrix4f::write_datagram_fixed 0 1 1454 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write_datagram_fixed(Datagram &destination) const;

3221 19 read_datagram_fixed 0 4 3577 30 LMatrix4f::read_datagram_fixed 0 1 1455 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix4f::read_datagram_fixed(DatagramIterator &scan);

3222 14 write_datagram 0 4 3577 25 LMatrix4f::write_datagram 0 1 1456 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix4f::write_datagram(Datagram &destination) const;

3223 13 read_datagram 0 4 3577 24 LMatrix4f::read_datagram 0 1 1457 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix4f::read_datagram(DatagramIterator &source);

3224 14 get_class_type 0 4 3577 25 LMatrix4f::get_class_type 0 1 1458 0
50
static TypeHandle LMatrix4f::get_class_type(void);

3225 10 ~LMatrix4f 0 4 3577 21 LMatrix4f::~LMatrix4f 0 0 0
28
LMatrix4f::~LMatrix4f(void);

3226 18 UnalignedLMatrix4f 0 4 3580 38 UnalignedLMatrix4f::UnalignedLMatrix4f 0 4 1465 1466 1467 1468 928
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
424
inline UnalignedLMatrix4f::UnalignedLMatrix4f(void);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(LMatrix4f const &copy);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(UnalignedLMatrix4f const &copy);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

3227 10 operator = 0 4 3580 30 UnalignedLMatrix4f::operator = 0 2 1469 1470 480
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
172
inline UnalignedLMatrix4f &UnalignedLMatrix4f::operator =(LMatrix4f const &copy);
inline UnalignedLMatrix4f &UnalignedLMatrix4f::operator =(UnalignedLMatrix4f const &copy);

3228 3 set 0 4 3580 23 UnalignedLMatrix4f::set 0 1 1471 221
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
212
inline void UnalignedLMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

3229 11 operator () 0 4 3580 31 UnalignedLMatrix4f::operator () 0 2 1472 1473 235
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
134
inline float &UnalignedLMatrix4f::operator ()(int row, int col);
inline float UnalignedLMatrix4f::operator ()(int row, int col) const;

3230 8 get_data 0 4 3580 28 UnalignedLMatrix4f::get_data 0 1 1474 410
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
61
inline float const *UnalignedLMatrix4f::get_data(void) const;

3231 18 get_num_components 0 4 3580 38 UnalignedLMatrix4f::get_num_components 0 1 1475 291
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////
62
inline int UnalignedLMatrix4f::get_num_components(void) const;

3232 14 get_class_type 0 4 3580 34 UnalignedLMatrix4f::get_class_type 0 1 1476 0
59
static TypeHandle UnalignedLMatrix4f::get_class_type(void);

3233 19 ~UnalignedLMatrix4f 0 4 3580 39 UnalignedLMatrix4f::~UnalignedLMatrix4f 0 0 0
46
UnalignedLMatrix4f::~UnalignedLMatrix4f(void);

3234 11 operator [] 0 4 3582 27 LMatrix3d::Row::operator [] 0 2 1587 1588 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
106
inline double LMatrix3d::Row::operator [](int i) const;
inline double &LMatrix3d::Row::operator [](int i);

3235 11 __setitem__ 0 4 3582 27 LMatrix3d::Row::__setitem__ 0 1 1589 0
57
inline void LMatrix3d::Row::__setitem__(int i, double v);

3236 4 size 0 4 3582 20 LMatrix3d::Row::size 0 1 1590 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3d::Row::size(void);

3237 4 ~Row 0 4 3582 20 LMatrix3d::Row::~Row 0 0 0
27
LMatrix3d::Row::~Row(void);

3238 11 operator [] 0 4 3583 28 LMatrix3d::CRow::operator [] 0 1 1591 0
56
inline double LMatrix3d::CRow::operator [](int i) const;

3239 4 size 0 4 3583 21 LMatrix3d::CRow::size 0 1 1592 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3d::CRow::size(void);

3240 5 ~CRow 0 4 3583 22 LMatrix3d::CRow::~CRow 0 0 0
29
LMatrix3d::CRow::~CRow(void);

3241 9 LMatrix3d 0 4 3581 20 LMatrix3d::LMatrix3d 0 3 1477 1478 1479 677
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
224
inline LMatrix3d::LMatrix3d(void);
inline LMatrix3d::LMatrix3d(LMatrix3d const &other);
inline LMatrix3d::LMatrix3d(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

3242 10 operator = 0 4 3581 21 LMatrix3d::operator = 0 2 1480 1481 468
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LMatrix3d &LMatrix3d::operator =(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator =(double fill_value);

3243 12 operator new 0 4 3581 23 LMatrix3d::operator new 0 1 1482 0
124
inline void *LMatrix3d::operator new(unsigned int size);
inline void *LMatrix3d::operator new(unsigned int size, void *ptr);

3244 15 operator delete 0 4 3581 26 LMatrix3d::operator delete 0 0 0
106
inline void LMatrix3d::operator delete(void *ptr);
inline void LMatrix3d::operator delete(void *, void *);

3245 12 validate_ptr 0 4 3581 23 LMatrix3d::validate_ptr 0 0 0
60
static inline bool LMatrix3d::validate_ptr(void const *ptr);

3246 10 __reduce__ 0 4 3581 21 LMatrix3d::__reduce__ 0 1 1483 0
59
inline _object *LMatrix3d::__reduce__(_object *self) const;

3247 4 fill 0 4 3581 15 LMatrix3d::fill 0 1 1484 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
40
void LMatrix3d::fill(double fill_value);

3248 3 set 0 4 3581 14 LMatrix3d::set 0 1 1485 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
135
inline void LMatrix3d::set(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

3249 7 set_row 0 4 3581 18 LMatrix3d::set_row 0 2 1486 1487 636
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_row(int row, LVecBase3d const &v);
inline void LMatrix3d::set_row(int row, LVecBase2d const &v);

3250 7 set_col 0 4 3581 18 LMatrix3d::set_col 0 2 1488 1489 645
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_col(int col, LVecBase3d const &v);
inline void LMatrix3d::set_col(int col, LVecBase2d const &v);

3251 7 get_row 0 4 3581 18 LMatrix3d::get_row 0 2 1490 1491 638
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3d LMatrix3d::get_row(int row) const;
inline void LMatrix3d::get_row(LVecBase3d &result_vec, int row) const;

3252 7 get_col 0 4 3581 18 LMatrix3d::get_col 0 1 1492 305
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3d LMatrix3d::get_col(int col) const;

3253 8 get_row2 0 4 3581 19 LMatrix3d::get_row2 0 1 1493 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_row2(int row) const;

3254 8 get_col2 0 4 3581 19 LMatrix3d::get_col2 0 1 1494 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_col2(int col) const;

3255 11 operator () 0 4 3581 22 LMatrix3d::operator () 0 2 1495 1496 226
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix3d::operator ()(int row, int col);
inline double LMatrix3d::operator ()(int row, int col) const;

3256 11 operator [] 0 4 3581 22 LMatrix3d::operator [] 0 2 1497 1498 0
112
inline LMatrix3d::CRow LMatrix3d::operator [](int i) const;
inline LMatrix3d::Row LMatrix3d::operator [](int i);

3257 4 size 0 4 3581 15 LMatrix3d::size 0 1 1499 266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3d::size(void);

3258 6 is_nan 0 4 3581 17 LMatrix3d::is_nan 0 1 1500 310
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3d::is_nan(void) const;

3259 8 get_cell 0 4 3581 19 LMatrix3d::get_cell 0 1 1501 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix3d::get_cell(int row, int col) const;

3260 8 set_cell 0 4 3581 19 LMatrix3d::set_cell 0 1 1502 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix3d::set_cell(int row, int col, double value);

3261 8 get_data 0 4 3581 19 LMatrix3d::get_data 0 1 1503 401
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix3d::get_data(void) const;

3262 18 get_num_components 0 4 3581 29 LMatrix3d::get_num_components 0 1 1504 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3d::get_num_components(void) const;

3263 10 operator < 0 4 3581 21 LMatrix3d::operator < 0 1 1505 0
64
inline bool LMatrix3d::operator <(LMatrix3d const &other) const;

3264 11 operator == 0 4 3581 22 LMatrix3d::operator == 0 1 1506 0
65
inline bool LMatrix3d::operator ==(LMatrix3d const &other) const;

3265 11 operator != 0 4 3581 22 LMatrix3d::operator != 0 1 1507 0
65
inline bool LMatrix3d::operator !=(LMatrix3d const &other) const;

3266 10 compare_to 0 4 3581 21 LMatrix3d::compare_to 0 2 1508 1509 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
138
inline int LMatrix3d::compare_to(LMatrix3d const &other) const;
int LMatrix3d::compare_to(LMatrix3d const &other, double threshold) const;

3267 8 get_hash 0 4 3581 19 LMatrix3d::get_hash 0 2 1510 1511 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix3d::get_hash(void) const;
inline unsigned int LMatrix3d::get_hash(double threshold) const;

3268 8 add_hash 0 4 3581 19 LMatrix3d::add_hash 0 2 1512 1513 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix3d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3d::add_hash(unsigned int hash, double threshold) const;

3269 5 xform 0 4 3581 16 LMatrix3d::xform 0 1 1514 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LMatrix3d::xform(LVecBase3d const &v) const;

3270 11 xform_point 0 4 3581 22 LMatrix3d::xform_point 0 1 1515 403
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LMatrix3d::xform_point(LVecBase2d const &v) const;

3271 9 xform_vec 0 4 3581 20 LMatrix3d::xform_vec 0 2 1516 1517 849
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2d LMatrix3d::xform_vec(LVecBase2d const &v) const;
inline LVecBase3d LMatrix3d::xform_vec(LVecBase3d const &v) const;

3272 17 xform_vec_general 0 4 3581 28 LMatrix3d::xform_vec_general 0 1 1518 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix3d::xform_vec_general(LVecBase3d const &v) const;

3273 14 xform_in_place 0 4 3581 25 LMatrix3d::xform_in_place 0 1 1519 265
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix3d::xform_in_place(LVecBase3d &v) const;

3274 20 xform_point_in_place 0 4 3581 31 LMatrix3d::xform_point_in_place 0 1 1520 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix3d::xform_point_in_place(LVecBase2d &v) const;

3275 18 xform_vec_in_place 0 4 3581 29 LMatrix3d::xform_vec_in_place 0 2 1521 1522 804
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
127
inline void LMatrix3d::xform_vec_in_place(LVecBase2d &v) const;
inline void LMatrix3d::xform_vec_in_place(LVecBase3d &v) const;

3276 26 xform_vec_general_in_place 0 4 3581 37 LMatrix3d::xform_vec_general_in_place 0 1 1523 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix3d::xform_vec_general_in_place(LVecBase3d &v) const;

3277 8 multiply 0 4 3581 19 LMatrix3d::multiply 0 1 1524 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3d::multiply(LMatrix3d const &other1, LMatrix3d const &other2);

3278 10 operator * 0 4 3581 21 LMatrix3d::operator * 0 2 1525 1526 0
130
inline LMatrix3d LMatrix3d::operator *(LMatrix3d const &other) const;
inline LMatrix3d LMatrix3d::operator *(double scalar) const;

3279 10 operator / 0 4 3581 21 LMatrix3d::operator / 0 1 1527 0
60
inline LMatrix3d LMatrix3d::operator /(double scalar) const;

3280 11 operator += 0 4 3581 22 LMatrix3d::operator += 0 1 1528 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator +=(LMatrix3d const &other);

3281 11 operator -= 0 4 3581 22 LMatrix3d::operator -= 0 1 1529 281
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator -=(LMatrix3d const &other);

3282 11 operator *= 0 4 3581 22 LMatrix3d::operator *= 0 2 1530 1531 481
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
122
inline LMatrix3d &LMatrix3d::operator *=(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator *=(double scalar);

3283 11 operator /= 0 4 3581 22 LMatrix3d::operator /= 0 1 1532 254
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
56
inline LMatrix3d &LMatrix3d::operator /=(double scalar);

3284 18 componentwise_mult 0 4 3581 29 LMatrix3d::componentwise_mult 0 1 1533 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3d::componentwise_mult(LMatrix3d const &other);

3285 11 determinant 0 4 3581 22 LMatrix3d::determinant 0 1 1534 259
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
49
inline double LMatrix3d::determinant(void) const;

3286 14 transpose_from 0 4 3581 25 LMatrix3d::transpose_from 0 1 1535 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3d::transpose_from(LMatrix3d const &other);

3287 18 transpose_in_place 0 4 3581 29 LMatrix3d::transpose_in_place 0 1 1536 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3d::transpose_in_place(void);

3288 11 invert_from 0 4 3581 22 LMatrix3d::invert_from 0 1 1537 808
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3d::invert_from(LMatrix3d const &other);

3289 15 invert_in_place 0 4 3581 26 LMatrix3d::invert_in_place 0 1 1538 364
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3d::invert_in_place(void);

3290 21 invert_transpose_from 0 4 3581 32 LMatrix3d::invert_transpose_from 0 2 1539 1540 698
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3d::invert_transpose_from(LMatrix3d const &other);
inline bool LMatrix3d::invert_transpose_from(LMatrix4d const &other);

3291 9 ident_mat 0 4 3581 20 LMatrix3d::ident_mat 0 1 1541 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3d const &LMatrix3d::ident_mat(void);

3292 17 set_translate_mat 0 4 3581 28 LMatrix3d::set_translate_mat 0 1 1542 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3d::set_translate_mat(LVecBase2d const &trans);

3293 14 set_rotate_mat 0 4 3581 25 LMatrix3d::set_rotate_mat 0 3 1543 1544 1545 694
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
149
inline void LMatrix3d::set_rotate_mat(double angle);
void LMatrix3d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3294 13 set_scale_mat 0 4 3581 24 LMatrix3d::set_scale_mat 0 2 1546 1547 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3d::set_scale_mat(LVecBase2d const &scale);
inline void LMatrix3d::set_scale_mat(LVecBase3d const &scale);

3295 13 translate_mat 0 4 3581 24 LMatrix3d::translate_mat 0 2 1548 1549 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
146
static inline LMatrix3d LMatrix3d::translate_mat(LVecBase2d const &trans);
static inline LMatrix3d LMatrix3d::translate_mat(double tx, double ty);

3296 10 rotate_mat 0 4 3581 21 LMatrix3d::rotate_mat 0 3 1550 1551 1552 671
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
172
static inline LMatrix3d LMatrix3d::rotate_mat(double angle);
static inline LMatrix3d LMatrix3d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3297 9 scale_mat 0 4 3581 20 LMatrix3d::scale_mat 0 4 1553 1554 1555 1556 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
288
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase2d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy);
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase3d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy, double sz);

3298 23 set_rotate_mat_normaxis 0 4 3581 34 LMatrix3d::set_rotate_mat_normaxis 0 2 1557 1558 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
105
void LMatrix3d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3299 19 rotate_mat_normaxis 0 4 3581 30 LMatrix3d::rotate_mat_normaxis 0 2 1559 1560 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
120
static inline LMatrix3d LMatrix3d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3300 13 set_shear_mat 0 4 3581 24 LMatrix3d::set_shear_mat 0 2 1561 1562 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
89
inline void LMatrix3d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (0));

3301 9 shear_mat 0 4 3581 20 LMatrix3d::shear_mat 0 4 1563 1564 1565 1566 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix3d LMatrix3d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (0));
static inline LMatrix3d LMatrix3d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (0));

3302 19 set_scale_shear_mat 0 4 3581 30 LMatrix3d::set_scale_shear_mat 0 2 1567 1568 312
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
113
void LMatrix3d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (0));

3303 15 scale_shear_mat 0 4 3581 26 LMatrix3d::scale_shear_mat 0 4 1569 1570 1571 1572 620
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
279
static inline LMatrix3d LMatrix3d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (0));
static inline LMatrix3d LMatrix3d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (0));

3304 11 convert_mat 0 4 3581 22 LMatrix3d::convert_mat 0 1 1573 350
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3d const &LMatrix3d::convert_mat(CoordinateSystem from, CoordinateSystem to);

3305 12 almost_equal 0 4 3581 23 LMatrix3d::almost_equal 0 2 1574 1575 662
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
144
bool LMatrix3d::almost_equal(LMatrix3d const &other, double threshold) const;
inline bool LMatrix3d::almost_equal(LMatrix3d const &other) const;

3306 6 output 0 4 3581 17 LMatrix3d::output 0 1 1576 215
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3d::output(ostream &out) const;

3307 5 write 0 4 3581 16 LMatrix3d::write 0 2 1577 1578 214
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write(ostream &out, int indent_level = (0)) const;

3308 11 python_repr 0 4 3581 22 LMatrix3d::python_repr 0 1 1579 0
95
inline void LMatrix3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

3309 13 generate_hash 0 4 3581 24 LMatrix3d::generate_hash 0 2 1580 1581 544
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
162
inline void LMatrix3d::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix3d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

3310 20 write_datagram_fixed 0 4 3581 31 LMatrix3d::write_datagram_fixed 0 1 1582 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write_datagram_fixed(Datagram &destination) const;

3311 19 read_datagram_fixed 0 4 3581 30 LMatrix3d::read_datagram_fixed 0 1 1583 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix3d::read_datagram_fixed(DatagramIterator &scan);

3312 14 write_datagram 0 4 3581 25 LMatrix3d::write_datagram 0 1 1584 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix3d::write_datagram(Datagram &destination) const;

3313 13 read_datagram 0 4 3581 24 LMatrix3d::read_datagram 0 1 1585 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix3d::read_datagram(DatagramIterator &source);

3314 14 get_class_type 0 4 3581 25 LMatrix3d::get_class_type 0 1 1586 0
50
static TypeHandle LMatrix3d::get_class_type(void);

3315 10 ~LMatrix3d 0 4 3581 21 LMatrix3d::~LMatrix3d 0 0 0
28
LMatrix3d::~LMatrix3d(void);

3316 11 operator [] 0 4 3585 27 LMatrix4d::Row::operator [] 0 2 1713 1714 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
106
inline double LMatrix4d::Row::operator [](int i) const;
inline double &LMatrix4d::Row::operator [](int i);

3317 11 __setitem__ 0 4 3585 27 LMatrix4d::Row::__setitem__ 0 1 1715 0
57
inline void LMatrix4d::Row::__setitem__(int i, double v);

3318 4 size 0 4 3585 20 LMatrix4d::Row::size 0 1 1716 271
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4d::Row::size(void);

3319 4 ~Row 0 4 3585 20 LMatrix4d::Row::~Row 0 0 0
27
LMatrix4d::Row::~Row(void);

3320 11 operator [] 0 4 3586 28 LMatrix4d::CRow::operator [] 0 1 1717 0
56
inline double LMatrix4d::CRow::operator [](int i) const;

3321 4 size 0 4 3586 21 LMatrix4d::CRow::size 0 1 1718 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4d::CRow::size(void);

3322 5 ~CRow 0 4 3586 22 LMatrix4d::CRow::~CRow 0 0 0
29
LMatrix4d::CRow::~CRow(void);

3323 9 LMatrix4d 0 4 3584 20 LMatrix4d::LMatrix4d 0 6 1593 1594 1595 1596 1597 1598 1469
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
503
inline LMatrix4d::LMatrix4d(void);
inline LMatrix4d::LMatrix4d(LMatrix4d const &other);
inline LMatrix4d::LMatrix4d(UnalignedLMatrix4d const &other);
inline LMatrix4d::LMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3, LVecBase3d const &trans);

3324 10 operator = 0 4 3584 21 LMatrix4d::operator = 0 3 1599 1600 1601 697
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
inline LMatrix4d &LMatrix4d::operator =(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(UnalignedLMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(double fill_value);

3325 12 operator new 0 4 3584 23 LMatrix4d::operator new 0 1 1602 0
124
inline void *LMatrix4d::operator new(unsigned int size);
inline void *LMatrix4d::operator new(unsigned int size, void *ptr);

3326 15 operator delete 0 4 3584 26 LMatrix4d::operator delete 0 0 0
106
inline void LMatrix4d::operator delete(void *ptr);
inline void LMatrix4d::operator delete(void *, void *);

3327 12 validate_ptr 0 4 3584 23 LMatrix4d::validate_ptr 0 0 0
60
static inline bool LMatrix4d::validate_ptr(void const *ptr);

3328 10 __reduce__ 0 4 3584 21 LMatrix4d::__reduce__ 0 1 1603 0
59
inline _object *LMatrix4d::__reduce__(_object *self) const;

3329 4 fill 0 4 3584 15 LMatrix4d::fill 0 1 1604 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LMatrix4d::fill(double fill_value);

3330 3 set 0 4 3584 14 LMatrix4d::set 0 1 1605 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
219
inline void LMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

3331 11 set_upper_3 0 4 3584 22 LMatrix4d::set_upper_3 0 1 1606 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4d::set_upper_3(LMatrix3d const &upper3);

3332 11 get_upper_3 0 4 3584 22 LMatrix4d::get_upper_3 0 1 1607 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3d LMatrix4d::get_upper_3(void) const;

3333 7 set_row 0 4 3584 18 LMatrix4d::set_row 0 2 1608 1609 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_row(int row, LVecBase4d const &v);
inline void LMatrix4d::set_row(int row, LVecBase3d const &v);

3334 7 set_col 0 4 3584 18 LMatrix4d::set_col 0 2 1610 1611 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_col(int col, LVecBase4d const &v);
inline void LMatrix4d::set_col(int col, LVecBase3d const &v);

3335 7 get_row 0 4 3584 18 LMatrix4d::get_row 0 2 1612 1613 626
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4d LMatrix4d::get_row(int row) const;
inline void LMatrix4d::get_row(LVecBase4d &result_vec, int row) const;

3336 7 get_col 0 4 3584 18 LMatrix4d::get_col 0 1 1614 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4d LMatrix4d::get_col(int col) const;

3337 8 get_row3 0 4 3584 19 LMatrix4d::get_row3 0 2 1615 1616 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3d LMatrix4d::get_row3(int row) const;
inline void LMatrix4d::get_row3(LVecBase3d &result_vec, int row) const;

3338 8 get_col3 0 4 3584 19 LMatrix4d::get_col3 0 1 1617 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LMatrix4d::get_col3(int col) const;

3339 11 operator () 0 4 3584 22 LMatrix4d::operator () 0 2 1618 1619 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix4d::operator ()(int row, int col);
inline double LMatrix4d::operator ()(int row, int col) const;

3340 11 operator [] 0 4 3584 22 LMatrix4d::operator [] 0 2 1620 1621 0
112
inline LMatrix4d::CRow LMatrix4d::operator [](int i) const;
inline LMatrix4d::Row LMatrix4d::operator [](int i);

3341 4 size 0 4 3584 15 LMatrix4d::size 0 1 1622 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4d::size(void);

3342 6 is_nan 0 4 3584 17 LMatrix4d::is_nan 0 1 1623 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4d::is_nan(void) const;

3343 8 get_cell 0 4 3584 19 LMatrix4d::get_cell 0 1 1624 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix4d::get_cell(int row, int col) const;

3344 8 set_cell 0 4 3584 19 LMatrix4d::set_cell 0 1 1625 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix4d::set_cell(int row, int col, double value);

3345 8 get_data 0 4 3584 19 LMatrix4d::get_data 0 1 1626 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix4d::get_data(void) const;

3346 18 get_num_components 0 4 3584 29 LMatrix4d::get_num_components 0 1 1627 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4d::get_num_components(void) const;

3347 5 begin 0 4 3584 16 LMatrix4d::begin 0 2 1628 1629 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
95
inline double const *LMatrix4d::begin(void);
inline double const *LMatrix4d::begin(void) const;

3348 3 end 0 4 3584 14 LMatrix4d::end 0 2 1630 1631 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
91
inline double const *LMatrix4d::end(void);
inline double const *LMatrix4d::end(void) const;

3349 10 operator < 0 4 3584 21 LMatrix4d::operator < 0 1 1632 0
64
inline bool LMatrix4d::operator <(LMatrix4d const &other) const;

3350 11 operator == 0 4 3584 22 LMatrix4d::operator == 0 1 1633 0
65
inline bool LMatrix4d::operator ==(LMatrix4d const &other) const;

3351 11 operator != 0 4 3584 22 LMatrix4d::operator != 0 1 1634 0
65
inline bool LMatrix4d::operator !=(LMatrix4d const &other) const;

3352 10 compare_to 0 4 3584 21 LMatrix4d::compare_to 0 2 1635 1636 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
138
inline int LMatrix4d::compare_to(LMatrix4d const &other) const;
int LMatrix4d::compare_to(LMatrix4d const &other, double threshold) const;

3353 8 get_hash 0 4 3584 19 LMatrix4d::get_hash 0 2 1637 1638 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix4d::get_hash(void) const;
inline unsigned int LMatrix4d::get_hash(double threshold) const;

3354 8 add_hash 0 4 3584 19 LMatrix4d::add_hash 0 2 1639 1640 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix4d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4d::add_hash(unsigned int hash, double threshold) const;

3355 5 xform 0 4 3584 16 LMatrix4d::xform 0 1 1641 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LMatrix4d::xform(LVecBase4d const &v) const;

3356 11 xform_point 0 4 3584 22 LMatrix4d::xform_point 0 1 1642 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LMatrix4d::xform_point(LVecBase3d const &v) const;

3357 19 xform_point_general 0 4 3584 30 LMatrix4d::xform_point_general 0 1 1643 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
76
inline LVecBase3d LMatrix4d::xform_point_general(LVecBase3d const &v) const;

3358 9 xform_vec 0 4 3584 20 LMatrix4d::xform_vec 0 1 1644 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LMatrix4d::xform_vec(LVecBase3d const &v) const;

3359 17 xform_vec_general 0 4 3584 28 LMatrix4d::xform_vec_general 0 1 1645 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix4d::xform_vec_general(LVecBase3d const &v) const;

3360 14 xform_in_place 0 4 3584 25 LMatrix4d::xform_in_place 0 1 1646 315
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix4d::xform_in_place(LVecBase4d &v) const;

3361 20 xform_point_in_place 0 4 3584 31 LMatrix4d::xform_point_in_place 0 1 1647 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix4d::xform_point_in_place(LVecBase3d &v) const;

3362 28 xform_point_general_in_place 0 4 3584 39 LMatrix4d::xform_point_general_in_place 0 1 1648 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4d::xform_point_general_in_place(LVecBase3d &v) const;

3363 18 xform_vec_in_place 0 4 3584 29 LMatrix4d::xform_vec_in_place 0 1 1649 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4d::xform_vec_in_place(LVecBase3d &v) const;

3364 26 xform_vec_general_in_place 0 4 3584 37 LMatrix4d::xform_vec_general_in_place 0 1 1650 355
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix4d::xform_vec_general_in_place(LVecBase3d &v) const;

3365 8 multiply 0 4 3584 19 LMatrix4d::multiply 0 1 1651 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4d::multiply(LMatrix4d const &other1, LMatrix4d const &other2);

3366 10 operator * 0 4 3584 21 LMatrix4d::operator * 0 2 1652 1653 0
130
inline LMatrix4d LMatrix4d::operator *(LMatrix4d const &other) const;
inline LMatrix4d LMatrix4d::operator *(double scalar) const;

3367 10 operator / 0 4 3584 21 LMatrix4d::operator / 0 1 1654 0
60
inline LMatrix4d LMatrix4d::operator /(double scalar) const;

3368 11 operator += 0 4 3584 22 LMatrix4d::operator += 0 1 1655 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator +=(LMatrix4d const &other);

3369 11 operator -= 0 4 3584 22 LMatrix4d::operator -= 0 1 1656 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator -=(LMatrix4d const &other);

3370 11 operator *= 0 4 3584 22 LMatrix4d::operator *= 0 2 1657 1658 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
122
inline LMatrix4d &LMatrix4d::operator *=(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator *=(double scalar);

3371 11 operator /= 0 4 3584 22 LMatrix4d::operator /= 0 1 1659 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline LMatrix4d &LMatrix4d::operator /=(double scalar);

3372 18 componentwise_mult 0 4 3584 29 LMatrix4d::componentwise_mult 0 1 1660 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4d::componentwise_mult(LMatrix4d const &other);

3373 14 transpose_from 0 4 3584 25 LMatrix4d::transpose_from 0 1 1661 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::transpose_from(LMatrix4d const &other);

3374 18 transpose_in_place 0 4 3584 29 LMatrix4d::transpose_in_place 0 1 1662 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4d::transpose_in_place(void);

3375 11 invert_from 0 4 3584 22 LMatrix4d::invert_from 0 1 1663 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4d::invert_from(LMatrix4d const &other);

3376 18 invert_affine_from 0 4 3584 29 LMatrix4d::invert_affine_from 0 1 1664 149
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4d::invert_affine_from(LMatrix4d const &other);

3377 15 invert_in_place 0 4 3584 26 LMatrix4d::invert_in_place 0 1 1665 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4d::invert_in_place(void);

3378 10 accumulate 0 4 3584 21 LMatrix4d::accumulate 0 1 1666 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4d::accumulate(LMatrix4d const &other, double weight);

3379 9 ident_mat 0 4 3584 20 LMatrix4d::ident_mat 0 1 1667 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::ident_mat(void);

3380 8 ones_mat 0 4 3584 19 LMatrix4d::ones_mat 0 1 1668 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4d const &LMatrix4d::ones_mat(void);

3381 9 zeros_mat 0 4 3584 20 LMatrix4d::zeros_mat 0 1 1669 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::zeros_mat(void);

3382 17 set_translate_mat 0 4 3584 28 LMatrix4d::set_translate_mat 0 1 1670 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4d::set_translate_mat(LVecBase3d const &trans);

3383 14 set_rotate_mat 0 4 3584 25 LMatrix4d::set_rotate_mat 0 2 1671 1672 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
96
void LMatrix4d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3384 23 set_rotate_mat_normaxis 0 4 3584 34 LMatrix4d::set_rotate_mat_normaxis 0 2 1673 1674 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
105
void LMatrix4d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3385 13 set_scale_mat 0 4 3584 24 LMatrix4d::set_scale_mat 0 1 1675 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::set_scale_mat(LVecBase3d const &scale);

3386 13 set_shear_mat 0 4 3584 24 LMatrix4d::set_shear_mat 0 2 1676 1677 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
89
inline void LMatrix4d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (0));

3387 19 set_scale_shear_mat 0 4 3584 30 LMatrix4d::set_scale_shear_mat 0 2 1678 1679 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
120
inline void LMatrix4d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (0));

3388 13 translate_mat 0 4 3584 24 LMatrix4d::translate_mat 0 2 1680 1681 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
157
static inline LMatrix4d LMatrix4d::translate_mat(LVecBase3d const &trans);
static inline LMatrix4d LMatrix4d::translate_mat(double tx, double ty, double tz);

3389 10 rotate_mat 0 4 3584 21 LMatrix4d::rotate_mat 0 2 1682 1683 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
111
static inline LMatrix4d LMatrix4d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3390 19 rotate_mat_normaxis 0 4 3584 30 LMatrix4d::rotate_mat_normaxis 0 2 1684 1685 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
120
static inline LMatrix4d LMatrix4d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3391 9 scale_mat 0 4 3584 20 LMatrix4d::scale_mat 0 3 1686 1687 1688 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix4d LMatrix4d::scale_mat(LVecBase3d const &scale);
static inline LMatrix4d LMatrix4d::scale_mat(double sx, double sy, double sz);
static inline LMatrix4d LMatrix4d::scale_mat(double scale);

3392 9 shear_mat 0 4 3584 20 LMatrix4d::shear_mat 0 4 1689 1690 1691 1692 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix4d LMatrix4d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (0));
static inline LMatrix4d LMatrix4d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (0));

3393 15 scale_shear_mat 0 4 3584 26 LMatrix4d::scale_shear_mat 0 4 1693 1694 1695 1696 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
279
static inline LMatrix4d LMatrix4d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (0));
static inline LMatrix4d LMatrix4d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (0));

3394 13 y_to_z_up_mat 0 4 3584 24 LMatrix4d::y_to_z_up_mat 0 1 1697 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::y_to_z_up_mat(void);

3395 13 z_to_y_up_mat 0 4 3584 24 LMatrix4d::z_to_y_up_mat 0 1 1698 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::z_to_y_up_mat(void);

3396 11 convert_mat 0 4 3584 22 LMatrix4d::convert_mat 0 1 1699 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4d const &LMatrix4d::convert_mat(CoordinateSystem from, CoordinateSystem to);

3397 12 almost_equal 0 4 3584 23 LMatrix4d::almost_equal 0 2 1700 1701 656
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
144
bool LMatrix4d::almost_equal(LMatrix4d const &other, double threshold) const;
inline bool LMatrix4d::almost_equal(LMatrix4d const &other) const;

3398 6 output 0 4 3584 17 LMatrix4d::output 0 1 1702 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4d::output(ostream &out) const;

3399 5 write 0 4 3584 16 LMatrix4d::write 0 2 1703 1704 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write(ostream &out, int indent_level = (0)) const;

3400 11 python_repr 0 4 3584 22 LMatrix4d::python_repr 0 1 1705 0
95
inline void LMatrix4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

3401 13 generate_hash 0 4 3584 24 LMatrix4d::generate_hash 0 2 1706 1707 538
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
158
inline void LMatrix4d::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix4d::generate_hash(ChecksumHashGenerator &hashgen, double scale) const;

3402 20 write_datagram_fixed 0 4 3584 31 LMatrix4d::write_datagram_fixed 0 1 1708 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write_datagram_fixed(Datagram &destination) const;

3403 19 read_datagram_fixed 0 4 3584 30 LMatrix4d::read_datagram_fixed 0 1 1709 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix4d::read_datagram_fixed(DatagramIterator &scan);

3404 14 write_datagram 0 4 3584 25 LMatrix4d::write_datagram 0 1 1710 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix4d::write_datagram(Datagram &destination) const;

3405 13 read_datagram 0 4 3584 24 LMatrix4d::read_datagram 0 1 1711 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix4d::read_datagram(DatagramIterator &source);

3406 14 get_class_type 0 4 3584 25 LMatrix4d::get_class_type 0 1 1712 0
50
static TypeHandle LMatrix4d::get_class_type(void);

3407 10 ~LMatrix4d 0 4 3584 21 LMatrix4d::~LMatrix4d 0 0 0
28
LMatrix4d::~LMatrix4d(void);

3408 18 UnalignedLMatrix4d 0 4 3587 38 UnalignedLMatrix4d::UnalignedLMatrix4d 0 4 1719 1720 1721 1722 928
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
440
inline UnalignedLMatrix4d::UnalignedLMatrix4d(void);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(LMatrix4d const &copy);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(UnalignedLMatrix4d const &copy);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

3409 10 operator = 0 4 3587 30 UnalignedLMatrix4d::operator = 0 2 1723 1724 480
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
172
inline UnalignedLMatrix4d &UnalignedLMatrix4d::operator =(LMatrix4d const &copy);
inline UnalignedLMatrix4d &UnalignedLMatrix4d::operator =(UnalignedLMatrix4d const &copy);

3410 3 set 0 4 3587 23 UnalignedLMatrix4d::set 0 1 1725 221
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
228
inline void UnalignedLMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

3411 11 operator () 0 4 3587 31 UnalignedLMatrix4d::operator () 0 2 1726 1727 235
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
136
inline double &UnalignedLMatrix4d::operator ()(int row, int col);
inline double UnalignedLMatrix4d::operator ()(int row, int col) const;

3412 8 get_data 0 4 3587 28 UnalignedLMatrix4d::get_data 0 1 1728 410
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
62
inline double const *UnalignedLMatrix4d::get_data(void) const;

3413 18 get_num_components 0 4 3587 38 UnalignedLMatrix4d::get_num_components 0 1 1729 291
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////
62
inline int UnalignedLMatrix4d::get_num_components(void) const;

3414 14 get_class_type 0 4 3587 34 UnalignedLMatrix4d::get_class_type 0 1 1730 0
59
static TypeHandle UnalignedLMatrix4d::get_class_type(void);

3415 19 ~UnalignedLMatrix4d 0 4 3587 39 UnalignedLMatrix4d::~UnalignedLMatrix4d 0 0 0
46
UnalignedLMatrix4d::~UnalignedLMatrix4d(void);

3416 10 operator * 0 1 0 10 operator * 0 24 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 0
1659
inline LVecBase3f operator *(LVecBase3f const &v, LMatrix3f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix3f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix3f const &m);
inline LVector2f operator *(LVector2f const &v, LMatrix3f const &m);
inline LPoint2f operator *(LPoint2f const &v, LMatrix3f const &m);
inline LVecBase4f operator *(LVecBase4f const &v, LMatrix4f const &m);
inline LPoint4f operator *(LPoint4f const &v, LMatrix4f const &m);
inline LVector4f operator *(LVector4f const &v, LMatrix4f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix4f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix4f const &m);
inline LVecBase3d operator *(LVecBase3d const &v, LMatrix3d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix3d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix3d const &m);
inline LVector2d operator *(LVector2d const &v, LMatrix3d const &m);
inline LPoint2d operator *(LPoint2d const &v, LMatrix3d const &m);
inline LVecBase4d operator *(LVecBase4d const &v, LMatrix4d const &m);
inline LPoint4d operator *(LPoint4d const &v, LMatrix4d const &m);
inline LVector4d operator *(LVector4d const &v, LMatrix4d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix4d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix4d const &m);
inline LMatrix3f operator *(LMatrix3f const &m, LQuaternionf const &q);
inline LMatrix4f operator *(LMatrix4f const &m, LQuaternionf const &q);
inline LMatrix3d operator *(LMatrix3d const &m, LQuaterniond const &q);
inline LMatrix4d operator *(LMatrix4d const &m, LQuaterniond const &q);

3417 11 operator *= 0 1 0 11 operator *= 0 16 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 0
941
inline void operator *=(LVecBase3f &v, LMatrix3f const &m);
inline void operator *=(LVector3f &v, LMatrix3f const &m);
inline void operator *=(LPoint3f &v, LMatrix3f const &m);
inline void operator *=(LVector2f &v, LMatrix3f const &m);
inline void operator *=(LPoint2f &v, LMatrix3f const &m);
inline void operator *=(LVecBase4f &v, LMatrix4f const &m);
inline void operator *=(LVector3f &v, LMatrix4f const &m);
inline void operator *=(LPoint3f &v, LMatrix4f const &m);
inline void operator *=(LVecBase3d &v, LMatrix3d const &m);
inline void operator *=(LVector3d &v, LMatrix3d const &m);
inline void operator *=(LPoint3d &v, LMatrix3d const &m);
inline void operator *=(LVector2d &v, LMatrix3d const &m);
inline void operator *=(LPoint2d &v, LMatrix3d const &m);
inline void operator *=(LVecBase4d &v, LMatrix4d const &m);
inline void operator *=(LVector3d &v, LMatrix4d const &m);
inline void operator *=(LPoint3d &v, LMatrix4d const &m);

3418 22 generic_write_datagram 0 1 0 22 generic_write_datagram 0 4 1958 1959 1960 1961 0
303
inline void generic_write_datagram(Datagram &dest, LMatrix3f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix3d const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4d const &value);

3419 21 generic_read_datagram 0 1 0 21 generic_read_datagram 0 4 1962 1963 1964 1965 0
319
inline void generic_read_datagram(LMatrix3f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix3d &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4d &result, DatagramIterator &source);

3420 14 compose_matrix 0 1 0 14 compose_matrix 0 16 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 0
1366
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4f &mat, float const components[12], CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4d &mat, double const components[12], CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (0));

3421 16 decompose_matrix 0 1 0 16 decompose_matrix 0 16 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 0
1290
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4f const &mat, float components[12], CoordinateSystem CS = (0));
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4d const &mat, double components[12], CoordinateSystem CS = (0));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (0));

3422 22 compose_matrix_old_hpr 0 1 0 22 compose_matrix_old_hpr 0 8 1998 1999 2000 2001 2002 2003 2004 2005 0
866
void compose_matrix_old_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix_old_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (0));
inline void compose_matrix_old_hpr(LMatrix4f &mat, float const components[12], CoordinateSystem cs = (0));
void compose_matrix_old_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix_old_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (0));
inline void compose_matrix_old_hpr(LMatrix4d &mat, double const components[12], CoordinateSystem cs = (0));

3423 24 decompose_matrix_old_hpr 0 1 0 24 decompose_matrix_old_hpr 0 8 2006 2007 2008 2009 2010 2011 2012 2013 0
818
bool decompose_matrix_old_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, float components[12], CoordinateSystem CS = (0));
bool decompose_matrix_old_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, double components[12], CoordinateSystem CS = (0));

3424 22 compose_matrix_new_hpr 0 1 0 22 compose_matrix_new_hpr 0 8 2014 2015 2016 2017 2018 2019 2020 2021 0
866
void compose_matrix_new_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix_new_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (0));
inline void compose_matrix_new_hpr(LMatrix4f &mat, float const components[12], CoordinateSystem cs = (0));
void compose_matrix_new_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix_new_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (0));
inline void compose_matrix_new_hpr(LMatrix4d &mat, double const components[12], CoordinateSystem cs = (0));

3425 24 decompose_matrix_new_hpr 0 1 0 24 decompose_matrix_new_hpr 0 8 2022 2023 2024 2025 2026 2027 2028 2029 0
818
bool decompose_matrix_new_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, float components[12], CoordinateSystem CS = (0));
bool decompose_matrix_new_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, double components[12], CoordinateSystem CS = (0));

3426 14 old_to_new_hpr 0 1 0 14 old_to_new_hpr 0 2 2030 2031 0
107
LVecBase3f old_to_new_hpr(LVecBase3f const &old_hpr);
LVecBase3d old_to_new_hpr(LVecBase3d const &old_hpr);

3427 14 new_to_old_hpr 0 1 0 14 new_to_old_hpr 0 2 2032 2033 0
107
LVecBase3f new_to_old_hpr(LVecBase3f const &new_hpr);
LVecBase3d new_to_old_hpr(LVecBase3d const &new_hpr);

3428 12 LQuaternionf 0 4 3588 26 LQuaternionf::LQuaternionf 0 4 1731 1732 1733 1734 904
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
233
inline LQuaternionf::LQuaternionf(void);
inline LQuaternionf::LQuaternionf(LVecBase4f const &copy);
inline LQuaternionf::LQuaternionf(float , LVecBase3f const &copy);
inline LQuaternionf::LQuaternionf(float , float , float , float );

3429 14 pure_imaginary 0 4 3588 28 LQuaternionf::pure_imaginary 0 1 1735 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaternionf LQuaternionf::pure_imaginary(LVector3f const &);

3430 9 conjugate 0 4 3588 23 LQuaternionf::conjugate 0 1 1736 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaternionf LQuaternionf::conjugate(void) const;

3431 5 xform 0 4 3588 19 LQuaternionf::xform 0 2 1737 1738 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3f LQuaternionf::xform(LVecBase3f const &v) const;
inline LVecBase4f LQuaternionf::xform(LVecBase4f const &v) const;

3432 8 multiply 0 4 3588 22 LQuaternionf::multiply 0 1 1739 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaternionf LQuaternionf::multiply(LQuaternionf const &rhs) const;

3433 10 operator - 0 68 3588 24 LQuaternionf::operator - 0 1 1740 0
57
inline LQuaternionf LQuaternionf::operator -(void) const;

3434 10 operator + 0 4 3588 24 LQuaternionf::operator + 0 1 1741 0
78
inline LQuaternionf LQuaternionf::operator +(LQuaternionf const &other) const;

3435 10 operator - 0 4 3588 24 LQuaternionf::operator - 0 1 1742 0
78
inline LQuaternionf LQuaternionf::operator -(LQuaternionf const &other) const;

3436 9 angle_rad 0 4 3588 23 LQuaternionf::angle_rad 0 1 1743 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_rad(LQuaternionf const &other) const;

3437 9 angle_deg 0 4 3588 23 LQuaternionf::angle_deg 0 1 1744 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_deg(LQuaternionf const &other) const;

3438 10 operator * 0 4 3588 24 LQuaternionf::operator * 0 4 1745 1746 1747 1748 0
263
inline LQuaternionf LQuaternionf::operator *(float scalar) const;
inline LQuaternionf LQuaternionf::operator *(LQuaternionf const &) const;
inline LMatrix3f LQuaternionf::operator *(LMatrix3f const &);
inline LMatrix4f LQuaternionf::operator *(LMatrix4f const &);

3439 10 operator / 0 4 3588 24 LQuaternionf::operator / 0 1 1749 0
65
inline LQuaternionf LQuaternionf::operator /(float scalar) const;

3440 11 operator *= 0 4 3588 25 LQuaternionf::operator *= 0 1 1750 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaternionf &LQuaternionf::operator *=(LQuaternionf const &);

3441 12 almost_equal 0 4 3588 26 LQuaternionf::almost_equal 0 2 1751 1752 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
162
inline bool LQuaternionf::almost_equal(LQuaternionf const &other) const;
inline bool LQuaternionf::almost_equal(LQuaternionf const &other, float threshold) const;

3442 17 is_same_direction 0 4 3588 31 LQuaternionf::is_same_direction 0 1 1753 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaternionf::is_same_direction(LQuaternionf const &other) const;

3443 21 almost_same_direction 0 4 3588 35 LQuaternionf::almost_same_direction 0 1 1754 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
98
inline bool LQuaternionf::almost_same_direction(LQuaternionf const &other, float threshold) const;

3444 6 output 0 4 3588 20 LQuaternionf::output 0 1 1755 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaternionf::output(ostream &) const;

3445 17 extract_to_matrix 0 4 3588 31 LQuaternionf::extract_to_matrix 0 2 1756 1757 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaternionf::extract_to_matrix(LMatrix3f &m) const;
void LQuaternionf::extract_to_matrix(LMatrix4f &m) const;

3446 15 set_from_matrix 0 4 3588 29 LQuaternionf::set_from_matrix 0 2 1758 1759 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaternionf::set_from_matrix(LMatrix3f const &m);
inline void LQuaternionf::set_from_matrix(LMatrix4f const &m);

3447 7 set_hpr 0 4 3588 21 LQuaternionf::set_hpr 0 2 1760 1761 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
77
void LQuaternionf::set_hpr(LVecBase3f const &hpr, CoordinateSystem cs = (0));

3448 7 get_hpr 0 4 3588 21 LQuaternionf::get_hpr 0 2 1762 1763 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
66
LVecBase3f LQuaternionf::get_hpr(CoordinateSystem cs = (0)) const;

3449 8 get_axis 0 4 3588 22 LQuaternionf::get_axis 0 1 1764 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3f LQuaternionf::get_axis(void) const;

3450 19 get_axis_normalized 0 4 3588 33 LQuaternionf::get_axis_normalized 0 1 1765 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3f LQuaternionf::get_axis_normalized(void) const;

3451 13 get_angle_rad 0 4 3588 27 LQuaternionf::get_angle_rad 0 1 1766 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
53
inline float LQuaternionf::get_angle_rad(void) const;

3452 9 get_angle 0 4 3588 23 LQuaternionf::get_angle 0 1 1767 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
49
inline float LQuaternionf::get_angle(void) const;

3453 23 set_from_axis_angle_rad 0 4 3588 37 LQuaternionf::set_from_axis_angle_rad 0 1 1768 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
90
inline void LQuaternionf::set_from_axis_angle_rad(float angle_rad, LVector3f const &axis);

3454 19 set_from_axis_angle 0 4 3588 33 LQuaternionf::set_from_axis_angle 0 1 1769 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
86
inline void LQuaternionf::set_from_axis_angle(float angle_deg, LVector3f const &axis);

3455 6 get_up 0 4 3588 20 LQuaternionf::get_up 0 2 1770 1771 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
71
inline LVector3f LQuaternionf::get_up(CoordinateSystem cs = (0)) const;

3456 9 get_right 0 4 3588 23 LQuaternionf::get_right 0 2 1772 1773 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
74
inline LVector3f LQuaternionf::get_right(CoordinateSystem cs = (0)) const;

3457 11 get_forward 0 4 3588 25 LQuaternionf::get_forward 0 2 1774 1775 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
76
inline LVector3f LQuaternionf::get_forward(CoordinateSystem cs = (0)) const;

3458 5 get_r 0 4 3588 19 LQuaternionf::get_r 0 1 1776 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_r(void) const;

3459 5 get_i 0 4 3588 19 LQuaternionf::get_i 0 1 1777 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_i(void) const;

3460 5 get_j 0 4 3588 19 LQuaternionf::get_j 0 1 1778 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_j(void) const;

3461 5 get_k 0 4 3588 19 LQuaternionf::get_k 0 1 1779 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_k(void) const;

3462 5 set_r 0 4 3588 19 LQuaternionf::set_r 0 1 1780 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_r(float r);

3463 5 set_i 0 4 3588 19 LQuaternionf::set_i 0 1 1781 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_i(float i);

3464 5 set_j 0 4 3588 19 LQuaternionf::set_j 0 1 1782 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_j(float j);

3465 5 set_k 0 4 3588 19 LQuaternionf::set_k 0 1 1783 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_k(float k);

3466 9 normalize 0 4 3588 23 LQuaternionf::normalize 0 1 1784 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaternionf::normalize(void);

3467 14 conjugate_from 0 4 3588 28 LQuaternionf::conjugate_from 0 1 1785 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::conjugate_from(LQuaternionf const &other);

3468 18 conjugate_in_place 0 4 3588 32 LQuaternionf::conjugate_in_place 0 1 1786 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaternionf::conjugate_in_place(void);

3469 11 invert_from 0 4 3588 25 LQuaternionf::invert_from 0 1 1787 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaternionf::invert_from(LQuaternionf const &other);

3470 15 invert_in_place 0 4 3588 29 LQuaternionf::invert_in_place 0 1 1788 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaternionf::invert_in_place(void);

3471 11 is_identity 0 4 3588 25 LQuaternionf::is_identity 0 1 1789 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaternionf::is_identity(void) const;

3472 18 is_almost_identity 0 4 3588 32 LQuaternionf::is_almost_identity 0 1 1790 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::is_almost_identity(float tolerance) const;

3473 10 ident_quat 0 4 3588 24 LQuaternionf::ident_quat 0 1 1791 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaternionf const &LQuaternionf::ident_quat(void);

3474 14 get_class_type 0 4 3588 28 LQuaternionf::get_class_type 0 1 1792 0
53
static TypeHandle LQuaternionf::get_class_type(void);

3475 13 ~LQuaternionf 0 4 3588 27 LQuaternionf::~LQuaternionf 0 0 0
34
LQuaternionf::~LQuaternionf(void);

3476 12 LQuaterniond 0 4 3589 26 LQuaterniond::LQuaterniond 0 4 1793 1794 1795 1796 904
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
238
inline LQuaterniond::LQuaterniond(void);
inline LQuaterniond::LQuaterniond(LVecBase4d const &copy);
inline LQuaterniond::LQuaterniond(double , LVecBase3d const &copy);
inline LQuaterniond::LQuaterniond(double , double , double , double );

3477 14 pure_imaginary 0 4 3589 28 LQuaterniond::pure_imaginary 0 1 1797 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaterniond LQuaterniond::pure_imaginary(LVector3d const &);

3478 9 conjugate 0 4 3589 23 LQuaterniond::conjugate 0 1 1798 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaterniond LQuaterniond::conjugate(void) const;

3479 5 xform 0 4 3589 19 LQuaterniond::xform 0 2 1799 1800 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3d LQuaterniond::xform(LVecBase3d const &v) const;
inline LVecBase4d LQuaterniond::xform(LVecBase4d const &v) const;

3480 8 multiply 0 4 3589 22 LQuaterniond::multiply 0 1 1801 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaterniond LQuaterniond::multiply(LQuaterniond const &rhs) const;

3481 10 operator - 0 68 3589 24 LQuaterniond::operator - 0 1 1802 0
57
inline LQuaterniond LQuaterniond::operator -(void) const;

3482 10 operator + 0 4 3589 24 LQuaterniond::operator + 0 1 1803 0
78
inline LQuaterniond LQuaterniond::operator +(LQuaterniond const &other) const;

3483 10 operator - 0 4 3589 24 LQuaterniond::operator - 0 1 1804 0
78
inline LQuaterniond LQuaterniond::operator -(LQuaterniond const &other) const;

3484 9 angle_rad 0 4 3589 23 LQuaterniond::angle_rad 0 1 1805 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_rad(LQuaterniond const &other) const;

3485 9 angle_deg 0 4 3589 23 LQuaterniond::angle_deg 0 1 1806 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_deg(LQuaterniond const &other) const;

3486 10 operator * 0 4 3589 24 LQuaterniond::operator * 0 4 1807 1808 1809 1810 0
264
inline LQuaterniond LQuaterniond::operator *(double scalar) const;
inline LQuaterniond LQuaterniond::operator *(LQuaterniond const &) const;
inline LMatrix3d LQuaterniond::operator *(LMatrix3d const &);
inline LMatrix4d LQuaterniond::operator *(LMatrix4d const &);

3487 10 operator / 0 4 3589 24 LQuaterniond::operator / 0 1 1811 0
66
inline LQuaterniond LQuaterniond::operator /(double scalar) const;

3488 11 operator *= 0 4 3589 25 LQuaterniond::operator *= 0 1 1812 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaterniond &LQuaterniond::operator *=(LQuaterniond const &);

3489 12 almost_equal 0 4 3589 26 LQuaterniond::almost_equal 0 2 1813 1814 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
163
inline bool LQuaterniond::almost_equal(LQuaterniond const &other) const;
inline bool LQuaterniond::almost_equal(LQuaterniond const &other, double threshold) const;

3490 17 is_same_direction 0 4 3589 31 LQuaterniond::is_same_direction 0 1 1815 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaterniond::is_same_direction(LQuaterniond const &other) const;

3491 21 almost_same_direction 0 4 3589 35 LQuaterniond::almost_same_direction 0 1 1816 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
99
inline bool LQuaterniond::almost_same_direction(LQuaterniond const &other, double threshold) const;

3492 6 output 0 4 3589 20 LQuaterniond::output 0 1 1817 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaterniond::output(ostream &) const;

3493 17 extract_to_matrix 0 4 3589 31 LQuaterniond::extract_to_matrix 0 2 1818 1819 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaterniond::extract_to_matrix(LMatrix3d &m) const;
void LQuaterniond::extract_to_matrix(LMatrix4d &m) const;

3494 15 set_from_matrix 0 4 3589 29 LQuaterniond::set_from_matrix 0 2 1820 1821 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaterniond::set_from_matrix(LMatrix3d const &m);
inline void LQuaterniond::set_from_matrix(LMatrix4d const &m);

3495 7 set_hpr 0 4 3589 21 LQuaterniond::set_hpr 0 2 1822 1823 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
77
void LQuaterniond::set_hpr(LVecBase3d const &hpr, CoordinateSystem cs = (0));

3496 7 get_hpr 0 4 3589 21 LQuaterniond::get_hpr 0 2 1824 1825 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
66
LVecBase3d LQuaterniond::get_hpr(CoordinateSystem cs = (0)) const;

3497 8 get_axis 0 4 3589 22 LQuaterniond::get_axis 0 1 1826 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3d LQuaterniond::get_axis(void) const;

3498 19 get_axis_normalized 0 4 3589 33 LQuaterniond::get_axis_normalized 0 1 1827 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3d LQuaterniond::get_axis_normalized(void) const;

3499 13 get_angle_rad 0 4 3589 27 LQuaterniond::get_angle_rad 0 1 1828 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
54
inline double LQuaterniond::get_angle_rad(void) const;

3500 9 get_angle 0 4 3589 23 LQuaterniond::get_angle 0 1 1829 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
50
inline double LQuaterniond::get_angle(void) const;

3501 23 set_from_axis_angle_rad 0 4 3589 37 LQuaterniond::set_from_axis_angle_rad 0 1 1830 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
91
inline void LQuaterniond::set_from_axis_angle_rad(double angle_rad, LVector3d const &axis);

3502 19 set_from_axis_angle 0 4 3589 33 LQuaterniond::set_from_axis_angle 0 1 1831 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
87
inline void LQuaterniond::set_from_axis_angle(double angle_deg, LVector3d const &axis);

3503 6 get_up 0 4 3589 20 LQuaterniond::get_up 0 2 1832 1833 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
71
inline LVector3d LQuaterniond::get_up(CoordinateSystem cs = (0)) const;

3504 9 get_right 0 4 3589 23 LQuaterniond::get_right 0 2 1834 1835 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
74
inline LVector3d LQuaterniond::get_right(CoordinateSystem cs = (0)) const;

3505 11 get_forward 0 4 3589 25 LQuaterniond::get_forward 0 2 1836 1837 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
76
inline LVector3d LQuaterniond::get_forward(CoordinateSystem cs = (0)) const;

3506 5 get_r 0 4 3589 19 LQuaterniond::get_r 0 1 1838 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_r(void) const;

3507 5 get_i 0 4 3589 19 LQuaterniond::get_i 0 1 1839 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_i(void) const;

3508 5 get_j 0 4 3589 19 LQuaterniond::get_j 0 1 1840 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_j(void) const;

3509 5 get_k 0 4 3589 19 LQuaterniond::get_k 0 1 1841 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_k(void) const;

3510 5 set_r 0 4 3589 19 LQuaterniond::set_r 0 1 1842 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_r(double r);

3511 5 set_i 0 4 3589 19 LQuaterniond::set_i 0 1 1843 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_i(double i);

3512 5 set_j 0 4 3589 19 LQuaterniond::set_j 0 1 1844 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_j(double j);

3513 5 set_k 0 4 3589 19 LQuaterniond::set_k 0 1 1845 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_k(double k);

3514 9 normalize 0 4 3589 23 LQuaterniond::normalize 0 1 1846 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaterniond::normalize(void);

3515 14 conjugate_from 0 4 3589 28 LQuaterniond::conjugate_from 0 1 1847 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaterniond::conjugate_from(LQuaterniond const &other);

3516 18 conjugate_in_place 0 4 3589 32 LQuaterniond::conjugate_in_place 0 1 1848 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaterniond::conjugate_in_place(void);

3517 11 invert_from 0 4 3589 25 LQuaterniond::invert_from 0 1 1849 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaterniond::invert_from(LQuaterniond const &other);

3518 15 invert_in_place 0 4 3589 29 LQuaterniond::invert_in_place 0 1 1850 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaterniond::invert_in_place(void);

3519 11 is_identity 0 4 3589 25 LQuaterniond::is_identity 0 1 1851 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaterniond::is_identity(void) const;

3520 18 is_almost_identity 0 4 3589 32 LQuaterniond::is_almost_identity 0 1 1852 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
69
inline bool LQuaterniond::is_almost_identity(double tolerance) const;

3521 10 ident_quat 0 4 3589 24 LQuaterniond::ident_quat 0 1 1853 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaterniond const &LQuaterniond::ident_quat(void);

3522 14 get_class_type 0 4 3589 28 LQuaterniond::get_class_type 0 1 1854 0
53
static TypeHandle LQuaterniond::get_class_type(void);

3523 13 ~LQuaterniond 0 4 3589 27 LQuaterniond::~LQuaterniond 0 0 0
34
LQuaterniond::~LQuaterniond(void);

3524 10 LRotationf 0 4 3590 22 LRotationf::LRotationf 0 8 1855 1856 1857 1858 1859 1860 1861 1862 1867
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
420
inline LRotationf::LRotationf(void);
inline LRotationf::LRotationf(LQuaternionf const &);
inline LRotationf::LRotationf(LVecBase4f const &copy);
inline LRotationf::LRotationf(float , float , float , float );
inline LRotationf::LRotationf(LVector3f const &, float );
inline LRotationf::LRotationf(LMatrix3f const &);
inline LRotationf::LRotationf(LMatrix4f const &);
inline LRotationf::LRotationf(float , float , float );

3525 10 operator * 0 4 3590 22 LRotationf::operator * 0 3 1863 1864 1865 0
211
inline LRotationf LRotationf::operator *(float scalar) const;
inline LRotationf LRotationf::operator *(LRotationf const &other) const;
inline LQuaternionf LRotationf::operator *(LQuaternionf const &other) const;

3526 10 operator / 0 4 3590 22 LRotationf::operator / 0 1 1866 0
61
inline LRotationf LRotationf::operator /(float scalar) const;

3527 14 get_class_type 0 4 3590 26 LRotationf::get_class_type 0 1 1867 0
51
static TypeHandle LRotationf::get_class_type(void);

3528 11 ~LRotationf 0 4 3590 23 LRotationf::~LRotationf 0 0 0
30
LRotationf::~LRotationf(void);

3529 10 LRotationd 0 4 3591 22 LRotationd::LRotationd 0 8 1868 1869 1870 1871 1872 1873 1874 1875 1867
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
428
inline LRotationd::LRotationd(void);
inline LRotationd::LRotationd(LQuaterniond const &);
inline LRotationd::LRotationd(LVecBase4d const &copy);
inline LRotationd::LRotationd(double , double , double , double );
inline LRotationd::LRotationd(LVector3d const &, double );
inline LRotationd::LRotationd(LMatrix3d const &);
inline LRotationd::LRotationd(LMatrix4d const &);
inline LRotationd::LRotationd(double , double , double );

3530 10 operator * 0 4 3591 22 LRotationd::operator * 0 3 1876 1877 1878 0
212
inline LRotationd LRotationd::operator *(double scalar) const;
inline LRotationd LRotationd::operator *(LRotationd const &other) const;
inline LQuaterniond LRotationd::operator *(LQuaterniond const &other) const;

3531 10 operator / 0 4 3591 22 LRotationd::operator / 0 1 1879 0
62
inline LRotationd LRotationd::operator /(double scalar) const;

3532 14 get_class_type 0 4 3591 26 LRotationd::get_class_type 0 1 1880 0
51
static TypeHandle LRotationd::get_class_type(void);

3533 11 ~LRotationd 0 4 3591 23 LRotationd::~LRotationd 0 0 0
30
LRotationd::~LRotationd(void);

3534 13 LOrientationf 0 4 3592 28 LOrientationf::LOrientationf 0 6 1881 1882 1883 1884 1885 1886 1380
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
346
inline LOrientationf::LOrientationf(void);
inline LOrientationf::LOrientationf(LQuaternionf const &);
inline LOrientationf::LOrientationf(float , float , float , float );
inline LOrientationf::LOrientationf(LVector3f const &, float );
inline LOrientationf::LOrientationf(LMatrix3f const &);
inline LOrientationf::LOrientationf(LMatrix4f const &);

3535 10 operator * 0 4 3592 25 LOrientationf::operator * 0 2 1887 1888 0
159
inline LOrientationf LOrientationf::operator *(LRotationf const &other) const;
inline LOrientationf LOrientationf::operator *(LQuaternionf const &other) const;

3536 14 get_class_type 0 4 3592 29 LOrientationf::get_class_type 0 1 1889 0
54
static TypeHandle LOrientationf::get_class_type(void);

3537 14 ~LOrientationf 0 4 3592 29 LOrientationf::~LOrientationf 0 0 0
36
LOrientationf::~LOrientationf(void);

3538 13 LOrientationd 0 4 3593 28 LOrientationd::LOrientationd 0 6 1890 1891 1892 1893 1894 1895 1380
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
350
inline LOrientationd::LOrientationd(void);
inline LOrientationd::LOrientationd(LQuaterniond const &);
inline LOrientationd::LOrientationd(double , double , double , double );
inline LOrientationd::LOrientationd(LVector3d const &, float );
inline LOrientationd::LOrientationd(LMatrix3d const &);
inline LOrientationd::LOrientationd(LMatrix4d const &);

3539 10 operator * 0 4 3593 25 LOrientationd::operator * 0 2 1896 1897 0
159
inline LOrientationd LOrientationd::operator *(LRotationd const &other) const;
inline LOrientationd LOrientationd::operator *(LQuaterniond const &other) const;

3540 14 get_class_type 0 4 3593 29 LOrientationd::get_class_type 0 1 1898 0
54
static TypeHandle LOrientationd::get_class_type(void);

3541 14 ~LOrientationd 0 4 3593 29 LOrientationd::~LOrientationd 0 0 0
36
LOrientationd::~LOrientationd(void);

2033
1 14 Dtool_Ns0bgaIU 0 7 6 3594 2045 14 Dtool_Ns0bgaIU 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_Ns0bVQfL 0 7 6 3594 2045 14 Dtool_Ns0bVQfL 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3595  
3 14 Dtool_Ns0blRq3 0 7 6 3594 2045 14 Dtool_Ns0blRq3 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3597  
4 14 Dtool_Ns0boQsK 0 7 6 3594 2045 14 Dtool_Ns0boQsK 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3597  1 y 1 3597  
5 14 Dtool_Ns0b_ub0 0 6 7 3594 0 14 Dtool_Ns0b_ub0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  4 copy 1 3595  
6 14 Dtool_Ns0b_fng 0 6 7 3594 0 14 Dtool_Ns0b_fng 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  10 fill_value 1 3597  
7 14 Dtool_Ns0bxPnZ 0 4 8 3599 0 14 Dtool_Ns0bxPnZ 0 2 4 this 3 3594  4 size 1 3598  
8 14 Dtool_Ns0bfGvP 0 6 11 3595 0 14 Dtool_Ns0bfGvP 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
9 14 Dtool_Ns0baClz 0 6 12 3595 0 14 Dtool_Ns0baClz 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
10 14 Dtool_Ns0bVCzP 0 6 13 3595 0 14 Dtool_Ns0bVCzP 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
11 14 Dtool_Ns0bspV9 0 6 15 3600 0 14 Dtool_Ns0bspV9 0 1 4 this 3 3595  
12 14 Dtool_Ns0bHRz6 0 6 16 3600 0 14 Dtool_Ns0bHRz6 0 2 4 this 3 3595  9 attr_name 1 3602  
13 14 Dtool_Ns0bnHly 0 6 17 3603 0 14 Dtool_Ns0bnHly 0 3 4 this 3 3594  9 attr_name 1 3602  6 assign 1 3600  
14 14 Dtool_Ns0bY1X1 0 4 18 3599 0 14 Dtool_Ns0bY1X1 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  1 i 1 3603  
15 14 Dtool_Ns0b6qLS 0 6 18 3597 0 14 Dtool_Ns0b6qLS 0 2 4 this 3 3595  1 i 1 3603  
16 14 Dtool_Ns0bxNZF 0 4 19 3599 0 14 Dtool_Ns0bxNZF 0 3 4 this 3 3594  1 i 1 3603  1 v 1 3597  
17 14 Dtool_Ns0boYf5 0 6 20 3603 0 14 Dtool_Ns0boYf5 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
18 14 Dtool_Ns0bI5WA 0 6 21 3604 0 14 Dtool_Ns0bI5WA 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3595  
19 14 Dtool_Ns0by_vl 0 6 22 3597 0 14 Dtool_Ns0by_vl 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  1 i 1 3603  
20 14 Dtool_Ns0buYPR 0 6 23 3597 0 14 Dtool_Ns0buYPR 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3595  
21 14 Dtool_Ns0bu8IW 0 6 24 3597 0 14 Dtool_Ns0bu8IW 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3595  
22 14 Dtool_Ns0bnQnT 0 4 25 3599 0 14 Dtool_Ns0bnQnT 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3594  1 i 1 3603  5 value 1 3597  
23 14 Dtool_Ns0bgvpl 0 4 26 3599 0 14 Dtool_Ns0bgvpl 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  5 value 1 3597  
24 14 Dtool_Ns0bgLiq 0 4 27 3599 0 14 Dtool_Ns0bgLiq 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  5 value 1 3597  
25 14 Dtool_Ns0bqznS 0 4 28 3599 0 14 Dtool_Ns0bqznS 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3594  1 i 1 3603  5 value 1 3597  
26 14 Dtool_Ns0bBpGk 0 4 29 3599 0 14 Dtool_Ns0bBpGk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  5 value 1 3597  
27 14 Dtool_Ns0bBN_o 0 4 30 3599 0 14 Dtool_Ns0bBN_o 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  5 value 1 3597  
28 14 Dtool_Ns0bMuTE 0 4 31 3599 0 14 Dtool_Ns0bMuTE 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3595  
29 14 Dtool_Ns0bdEX3 0 6 32 3603 0 14 Dtool_Ns0bdEX3 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3595  
30 14 Dtool_Ns0b91nF 0 4 33 3599 0 14 Dtool_Ns0b91nF 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  10 fill_value 1 3597  
31 14 Dtool_Ns0bmT_9 0 4 34 3599 0 14 Dtool_Ns0bmT_9 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3594  1 x 1 3597  1 y 1 3597  
32 14 Dtool_Ns0b9RXz 0 6 35 3597 0 14 Dtool_Ns0b9RXz 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  5 other 1 3595  
33 14 Dtool_Ns0bIV8b 0 6 36 3597 0 14 Dtool_Ns0bIV8b 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3595  
34 14 Dtool_Ns0bvbI8 0 6 37 3597 0 14 Dtool_Ns0bvbI8 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3595  
35 14 Dtool_Ns0b7siR 0 6 38 3604 0 14 Dtool_Ns0b7siR 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3594  
36 14 Dtool_Ns0bkm2c 0 7 39 3594 2045 14 Dtool_Ns0bkm2c 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  4 onto 1 3595  
37 14 Dtool_Ns0bJkIg 0 6 40 3604 0 14 Dtool_Ns0bJkIg 0 2 4 this 3 3595  5 other 1 3595  
38 14 Dtool_Ns0bssYs 0 6 41 3604 0 14 Dtool_Ns0bssYs 0 2 4 this 3 3595  5 other 1 3595  
39 14 Dtool_Ns0boMAb 0 6 42 3604 0 14 Dtool_Ns0boMAb 0 2 4 this 3 3595  5 other 1 3595  
40 14 Dtool_Ns0bVWAg 0 6 43 3603 0 14 Dtool_Ns0bVWAg 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  5 other 1 3595  
41 14 Dtool_Ns0bgmxE 0 6 43 3603 0 14 Dtool_Ns0bgmxE 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3595  5 other 1 3595  9 threshold 1 3597  
42 14 Dtool_Ns0bit5w 0 6 44 3598 0 14 Dtool_Ns0bit5w 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3595  
43 14 Dtool_Ns0bcmf3 0 6 44 3598 0 14 Dtool_Ns0bcmf3 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  9 threshold 1 3597  
44 14 Dtool_Ns0bT3v_ 0 6 45 3598 0 14 Dtool_Ns0bT3v_ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  4 hash 1 3598  
45 14 Dtool_Ns0bkEhk 0 6 45 3598 0 14 Dtool_Ns0bkEhk 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3595  4 hash 1 3598  9 threshold 1 3597  
46 14 Dtool_Ns0bsW5B 0 4 46 3599 0 14 Dtool_Ns0bsW5B 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  7 hashgen 1 3605  
47 14 Dtool_Ns0biO1N 0 4 46 3599 0 14 Dtool_Ns0biO1N 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3595  7 hashgen 1 3605  9 threshold 1 3597  
48 14 Dtool_Ns0bWPOu 0 7 47 3594 2045 14 Dtool_Ns0bWPOu 0 1 4 this 3 3595  
49 14 Dtool_Ns0bKsJ6 0 7 48 3594 2045 14 Dtool_Ns0bKsJ6 0 2 4 this 3 3595  5 other 1 3595  
50 14 Dtool_Ns0bLcrN 0 7 49 3594 2045 14 Dtool_Ns0bLcrN 0 2 4 this 3 3595  5 other 1 3595  
51 14 Dtool_Ns0b0d1B 0 7 50 3594 2045 14 Dtool_Ns0b0d1B 0 2 4 this 3 3595  6 scalar 1 3597  
52 14 Dtool_Ns0b01py 0 7 51 3594 2045 14 Dtool_Ns0b01py 0 2 4 this 3 3595  6 scalar 1 3597  
53 14 Dtool_Ns0b_q3M 0 6 52 3594 0 14 Dtool_Ns0b_q3M 0 2 4 this 3 3594  5 other 1 3595  
54 14 Dtool_Ns0b_aZg 0 6 53 3594 0 14 Dtool_Ns0b_aZg 0 2 4 this 3 3594  5 other 1 3595  
55 14 Dtool_Ns0biYvI 0 6 54 3594 0 14 Dtool_Ns0biYvI 0 2 4 this 3 3594  6 scalar 1 3597  
56 14 Dtool_Ns0bigj5 0 6 55 3594 0 14 Dtool_Ns0bigj5 0 2 4 this 3 3594  6 scalar 1 3597  
57 14 Dtool_Ns0bMnKH 0 4 56 3599 0 14 Dtool_Ns0bMnKH 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  5 other 1 3595  
58 14 Dtool_Ns0b_JpK 0 7 57 3594 2045 14 Dtool_Ns0b_JpK 0 2 4 this 3 3595  8 exponent 1 3597  
59 14 Dtool_Ns0bjlfD 0 6 58 3600 0 14 Dtool_Ns0bjlfD 0 2 4 this 3 3594  8 exponent 1 3597  
60 14 Dtool_Ns0bljgh 0 7 59 3594 2045 14 Dtool_Ns0bljgh 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  5 other 1 3595  
61 14 Dtool_Ns0bLXBg 0 7 60 3594 2045 14 Dtool_Ns0bLXBg 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  5 other 1 3595  
62 14 Dtool_Ns0bNeTt 0 6 61 3604 0 14 Dtool_Ns0bNeTt 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  5 other 1 3595  
63 14 Dtool_Ns0bnTFd 0 6 61 3604 0 14 Dtool_Ns0bnTFd 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3595  5 other 1 3595  9 threshold 1 3597  
64 14 Dtool_Ns0bpO8G 0 4 62 3599 0 14 Dtool_Ns0bpO8G 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  3 out 1 3607  
65 14 Dtool_Ns0biNXa 0 4 63 3599 0 14 Dtool_Ns0biNXa 0 3 4 this 3 3595  3 out 1 3607  10 class_name 1 3602  
66 14 Dtool_Ns0bO_h0 0 4 64 3599 0 14 Dtool_Ns0bO_h0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  11 destination 1 3609  
67 14 Dtool_Ns0bOJCx 0 4 65 3599 0 14 Dtool_Ns0bOJCx 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  6 source 1 3611  
68 14 Dtool_Ns0b2Mbx 0 4 66 3599 0 14 Dtool_Ns0b2Mbx 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3595  11 destination 1 3609  
69 14 Dtool_Ns0b3ccD 0 4 67 3599 0 14 Dtool_Ns0b3ccD 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3594  6 source 1 3611  
70 14 Dtool_Ns0bKNOA 0 7 68 3614 0 14 Dtool_Ns0bKNOA 0 0 
71 14 Dtool_Ns0bGdnQ 0 7 70 3615 2108 14 Dtool_Ns0bGdnQ 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
72 14 Dtool_Ns0bCUdE 0 7 70 3615 2108 14 Dtool_Ns0bCUdE 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3616  
73 14 Dtool_Ns0bi9B6 0 7 70 3615 2108 14 Dtool_Ns0bi9B6 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3618  
74 14 Dtool_Ns0bCY0M 0 7 70 3615 2108 14 Dtool_Ns0bCY0M 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3618  1 y 1 3618  
75 14 Dtool_Ns0bG77A 0 6 71 3615 0 14 Dtool_Ns0bG77A 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  4 copy 1 3616  
76 14 Dtool_Ns0bjNf2 0 6 71 3615 0 14 Dtool_Ns0bjNf2 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  10 fill_value 1 3618  
77 14 Dtool_Ns0bv7np 0 4 72 3599 0 14 Dtool_Ns0bv7np 0 2 4 this 3 3615  4 size 1 3598  
78 14 Dtool_Ns0bxrvf 0 6 75 3616 0 14 Dtool_Ns0bxrvf 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
79 14 Dtool_Ns0b52lD 0 6 76 3616 0 14 Dtool_Ns0b52lD 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
80 14 Dtool_Ns0b72zf 0 6 77 3616 0 14 Dtool_Ns0b72zf 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
81 14 Dtool_Ns0bGkUN 0 6 79 3600 0 14 Dtool_Ns0bGkUN 0 1 4 this 3 3616  
82 14 Dtool_Ns0b5eyK 0 6 80 3600 0 14 Dtool_Ns0b5eyK 0 2 4 this 3 3616  9 attr_name 1 3602  
83 14 Dtool_Ns0bISlC 0 6 81 3603 0 14 Dtool_Ns0bISlC 0 3 4 this 3 3615  9 attr_name 1 3602  6 assign 1 3600  
84 14 Dtool_Ns0b5ZXF 0 4 82 3599 0 14 Dtool_Ns0b5ZXF 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  1 i 1 3603  
85 14 Dtool_Ns0bcHLi 0 6 82 3618 0 14 Dtool_Ns0bcHLi 0 2 4 this 3 3616  1 i 1 3603  
86 14 Dtool_Ns0bJisN 0 4 83 3599 0 14 Dtool_Ns0bJisN 0 3 4 this 3 3615  1 i 1 3603  1 v 1 3618  
87 14 Dtool_Ns0bP1fJ 0 6 84 3603 0 14 Dtool_Ns0bP1fJ 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
88 14 Dtool_Ns0bmuWQ 0 6 85 3604 0 14 Dtool_Ns0bmuWQ 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3616  
89 14 Dtool_Ns0bUrv1 0 6 86 3618 0 14 Dtool_Ns0bUrv1 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  1 i 1 3603  
90 14 Dtool_Ns0bQsPh 0 6 87 3618 0 14 Dtool_Ns0bQsPh 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3616  
91 14 Dtool_Ns0bQIIm 0 6 88 3618 0 14 Dtool_Ns0bQIIm 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3616  
92 14 Dtool_Ns0b3_g8 0 4 89 3599 0 14 Dtool_Ns0b3_g8 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3615  1 i 1 3603  5 value 1 3618  
93 14 Dtool_Ns0bKZlY 0 4 90 3599 0 14 Dtool_Ns0bKZlY 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  5 value 1 3618  
94 14 Dtool_Ns0bK9dd 0 4 91 3599 0 14 Dtool_Ns0bK9dd 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  5 value 1 3618  
95 14 Dtool_Ns0b0P6a 0 4 92 3599 0 14 Dtool_Ns0b0P6a 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3615  1 i 1 3603  5 value 1 3618  
96 14 Dtool_Ns0brQCX 0 4 93 3599 0 14 Dtool_Ns0brQCX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  5 value 1 3618  
97 14 Dtool_Ns0br06b 0 4 94 3599 0 14 Dtool_Ns0br06b 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  5 value 1 3618  
98 14 Dtool_Ns0bu9TU 0 4 95 3599 0 14 Dtool_Ns0bu9TU 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3616  
99 14 Dtool_Ns0b8xWH 0 6 96 3603 0 14 Dtool_Ns0b8xWH 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3616  
100 14 Dtool_Ns0bsasc 0 4 97 3599 0 14 Dtool_Ns0bsasc 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  10 fill_value 1 3618  
101 14 Dtool_Ns0bbAy_ 0 4 98 3599 0 14 Dtool_Ns0bbAy_ 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3615  1 x 1 3618  1 y 1 3618  
102 14 Dtool_Ns0bcCJC 0 6 99 3618 0 14 Dtool_Ns0bcCJC 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  5 other 1 3616  
103 14 Dtool_Ns0bqI8r 0 6 100 3618 0 14 Dtool_Ns0bqI8r 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3616  
104 14 Dtool_Ns0bMHIM 0 6 101 3618 0 14 Dtool_Ns0bMHIM 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3616  
105 14 Dtool_Ns0bZAih 0 6 102 3604 0 14 Dtool_Ns0bZAih 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3615  
106 14 Dtool_Ns0bmCxs 0 7 103 3615 2108 14 Dtool_Ns0bmCxs 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  4 onto 1 3616  
107 14 Dtool_Ns0bLeos 0 6 104 3604 0 14 Dtool_Ns0bLeos 0 2 4 this 3 3616  5 other 1 3616  
108 14 Dtool_Ns0bgLYM 0 6 105 3604 0 14 Dtool_Ns0bgLYM 0 2 4 this 3 3616  5 other 1 3616  
109 14 Dtool_Ns0btrA7 0 6 106 3604 0 14 Dtool_Ns0btrA7 0 2 4 this 3 3616  5 other 1 3616  
110 14 Dtool_Ns0bcKgs 0 6 107 3603 0 14 Dtool_Ns0bcKgs 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  5 other 1 3616  
111 14 Dtool_Ns0be1W3 0 6 107 3603 0 14 Dtool_Ns0be1W3 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3616  5 other 1 3616  9 threshold 1 3618  
112 14 Dtool_Ns0bF_5A 0 6 108 3598 0 14 Dtool_Ns0bF_5A 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3616  
113 14 Dtool_Ns0b1_3f 0 6 108 3598 0 14 Dtool_Ns0b1_3f 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  9 threshold 1 3618  
114 14 Dtool_Ns0bwrvP 0 6 109 3598 0 14 Dtool_Ns0bwrvP 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  4 hash 1 3598  
115 14 Dtool_Ns0b_Zma 0 6 109 3598 0 14 Dtool_Ns0b_Zma 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3616  4 hash 1 3598  9 threshold 1 3618  
116 14 Dtool_Ns0bC65R 0 4 110 3599 0 14 Dtool_Ns0bC65R 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  7 hashgen 1 3605  
117 14 Dtool_Ns0b1h_1 0 4 110 3599 0 14 Dtool_Ns0b1h_1 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3616  7 hashgen 1 3605  9 threshold 1 3618  
118 14 Dtool_Ns0b4yP_ 0 7 111 3615 2108 14 Dtool_Ns0b4yP_ 0 1 4 this 3 3616  
119 14 Dtool_Ns0bFWpG 0 7 112 3615 2108 14 Dtool_Ns0bFWpG 0 2 4 this 3 3616  5 other 1 3616  
120 14 Dtool_Ns0bFmLa 0 7 113 3615 2108 14 Dtool_Ns0bFmLa 0 2 4 this 3 3616  5 other 1 3616  
121 14 Dtool_Ns0bP52U 0 7 114 3615 2108 14 Dtool_Ns0bP52U 0 2 4 this 3 3616  6 scalar 1 3618  
122 14 Dtool_Ns0bIRtF 0 7 115 3615 2108 14 Dtool_Ns0bIRtF 0 2 4 this 3 3616  6 scalar 1 3618  
123 14 Dtool_Ns0bzz2s 0 6 116 3615 0 14 Dtool_Ns0bzz2s 0 2 4 this 3 3615  5 other 1 3616  
124 14 Dtool_Ns0b8DYA 0 6 117 3615 0 14 Dtool_Ns0b8DYA 0 2 4 this 3 3615  5 other 1 3616  
125 14 Dtool_Ns0bWC3U 0 6 118 3615 0 14 Dtool_Ns0bWC3U 0 2 4 this 3 3615  6 scalar 1 3618  
126 14 Dtool_Ns0bX6rF 0 6 119 3615 0 14 Dtool_Ns0bX6rF 0 2 4 this 3 3615  6 scalar 1 3618  
127 14 Dtool_Ns0bqaaN 0 4 120 3599 0 14 Dtool_Ns0bqaaN 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  5 other 1 3616  
128 14 Dtool_Ns0boOZv 0 7 121 3615 2108 14 Dtool_Ns0boOZv 0 2 4 this 3 3616  8 exponent 1 3618  
129 14 Dtool_Ns0bCSMM 0 6 122 3600 0 14 Dtool_Ns0bCSMM 0 2 4 this 3 3615  8 exponent 1 3618  
130 14 Dtool_Ns0b48dK 0 7 123 3615 2108 14 Dtool_Ns0b48dK 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  5 other 1 3616  
131 14 Dtool_Ns0bWI9I 0 7 124 3615 2108 14 Dtool_Ns0bWI9I 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  5 other 1 3616  
132 14 Dtool_Ns0bnTK9 0 6 125 3604 0 14 Dtool_Ns0bnTK9 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  5 other 1 3616  
133 14 Dtool_Ns0b_OqN 0 6 125 3604 0 14 Dtool_Ns0b_OqN 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3616  5 other 1 3616  9 threshold 1 3618  
134 14 Dtool_Ns0bSB9W 0 4 126 3599 0 14 Dtool_Ns0bSB9W 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  3 out 1 3607  
135 14 Dtool_Ns0bHCWq 0 4 127 3599 0 14 Dtool_Ns0bHCWq 0 3 4 this 3 3616  3 out 1 3607  10 class_name 1 3602  
136 14 Dtool_Ns0bvThE 0 4 128 3599 0 14 Dtool_Ns0bvThE 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  11 destination 1 3609  
137 14 Dtool_Ns0bvkCB 0 4 129 3599 0 14 Dtool_Ns0bvkCB 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  6 source 1 3611  
138 14 Dtool_Ns0bYKaB 0 4 130 3599 0 14 Dtool_Ns0bYKaB 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3616  11 destination 1 3609  
139 14 Dtool_Ns0bYCdT 0 4 131 3599 0 14 Dtool_Ns0bYCdT 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3615  6 source 1 3611  
140 14 Dtool_Ns0bvAPQ 0 7 132 3614 0 14 Dtool_Ns0bvAPQ 0 0 
141 14 Dtool_Ns0btBdZ 0 7 134 3619 2171 14 Dtool_Ns0btBdZ 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
142 14 Dtool_Ns0baaD2 0 7 134 3619 2171 14 Dtool_Ns0baaD2 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3620  
143 14 Dtool_Ns0bjSAD 0 7 134 3619 2171 14 Dtool_Ns0bjSAD 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3603  
144 14 Dtool_Ns0bFeso 0 7 134 3619 2171 14 Dtool_Ns0bFeso 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3603  1 y 1 3603  
145 14 Dtool_Ns0bL5tB 0 6 135 3619 0 14 Dtool_Ns0bL5tB 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  4 copy 1 3620  
146 14 Dtool_Ns0bjjoO 0 6 135 3619 0 14 Dtool_Ns0bjjoO 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  10 fill_value 1 3603  
147 14 Dtool_Ns0bjkpB 0 4 136 3599 0 14 Dtool_Ns0bjkpB 0 2 4 this 3 3619  4 size 1 3598  
148 14 Dtool_Ns0bGJw3 0 6 139 3620 0 14 Dtool_Ns0bGJw3 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
149 14 Dtool_Ns0b63nb 0 6 140 3620 0 14 Dtool_Ns0b63nb 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
150 14 Dtool_Ns0b4313 0 6 141 3620 0 14 Dtool_Ns0b4313 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
151 14 Dtool_Ns0bgYWl 0 6 143 3600 0 14 Dtool_Ns0bgYWl 0 1 4 this 3 3620  
152 14 Dtool_Ns0bxB0i 0 6 144 3600 0 14 Dtool_Ns0bxB0i 0 2 4 this 3 3620  9 attr_name 1 3602  
153 14 Dtool_Ns0biCna 0 6 145 3603 0 14 Dtool_Ns0biCna 0 3 4 this 3 3619  9 attr_name 1 3602  6 assign 1 3600  
154 14 Dtool_Ns0blWYd 0 4 146 3599 0 14 Dtool_Ns0blWYd 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  1 i 1 3603  
155 14 Dtool_Ns0bRlN6 0 6 146 3603 0 14 Dtool_Ns0bRlN6 0 2 4 this 3 3620  1 i 1 3603  
156 14 Dtool_Ns0bon2t 0 4 147 3599 0 14 Dtool_Ns0bon2t 0 3 4 this 3 3619  1 i 1 3603  1 v 1 3603  
157 14 Dtool_Ns0bT6gh 0 6 148 3603 0 14 Dtool_Ns0bT6gh 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
158 14 Dtool_Ns0bceXo 0 6 149 3604 0 14 Dtool_Ns0bceXo 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3620  
159 14 Dtool_Ns0bNawN 0 6 150 3603 0 14 Dtool_Ns0bNawN 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  1 i 1 3603  
160 14 Dtool_Ns0bnKQ5 0 6 151 3603 0 14 Dtool_Ns0bnKQ5 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3620  
161 14 Dtool_Ns0bnmI_ 0 6 152 3603 0 14 Dtool_Ns0bnmI_ 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3620  
162 14 Dtool_Ns0bK9CT 0 4 153 3599 0 14 Dtool_Ns0bK9CT 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3619  1 i 1 3603  5 value 1 3603  
163 14 Dtool_Ns0b5Urw 0 4 154 3599 0 14 Dtool_Ns0b5Urw 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  5 value 1 3603  
164 14 Dtool_Ns0b5wj1 0 4 155 3599 0 14 Dtool_Ns0b5wj1 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  5 value 1 3603  
165 14 Dtool_Ns0bjSE7 0 4 156 3599 0 14 Dtool_Ns0bjSE7 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3619  1 i 1 3603  5 value 1 3603  
166 14 Dtool_Ns0bIsIv 0 4 157 3599 0 14 Dtool_Ns0bIsIv 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  5 value 1 3603  
167 14 Dtool_Ns0bIIB0 0 4 158 3599 0 14 Dtool_Ns0bIIB0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  5 value 1 3603  
168 14 Dtool_Ns0bwQUs 0 4 159 3599 0 14 Dtool_Ns0bwQUs 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3620  
169 14 Dtool_Ns0bKdXf 0 6 160 3603 0 14 Dtool_Ns0bKdXf 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3620  
170 14 Dtool_Ns0bBZvo 0 4 161 3599 0 14 Dtool_Ns0bBZvo 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  10 fill_value 1 3603  
171 14 Dtool_Ns0bbE9S 0 4 162 3599 0 14 Dtool_Ns0bbE9S 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3619  1 x 1 3603  1 y 1 3603  
172 14 Dtool_Ns0b7TNd 0 6 163 3603 0 14 Dtool_Ns0b7TNd 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  5 other 1 3620  
173 14 Dtool_Ns0bsl9D 0 6 164 3603 0 14 Dtool_Ns0bsl9D 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3620  
174 14 Dtool_Ns0bRsZt 0 6 165 3604 0 14 Dtool_Ns0bRsZt 0 2 4 this 3 3620  5 other 1 3620  
175 14 Dtool_Ns0b9Ta8 0 6 166 3604 0 14 Dtool_Ns0b9Ta8 0 2 4 this 3 3620  5 other 1 3620  
176 14 Dtool_Ns0bxzDr 0 6 167 3604 0 14 Dtool_Ns0bxzDr 0 2 4 this 3 3620  5 other 1 3620  
177 14 Dtool_Ns0b9jRt 0 6 168 3603 0 14 Dtool_Ns0b9jRt 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  5 other 1 3620  
178 14 Dtool_Ns0bq87Y 0 6 169 3598 0 14 Dtool_Ns0bq87Y 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3620  
179 14 Dtool_Ns0b9Kwn 0 6 170 3598 0 14 Dtool_Ns0b9Kwn 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  4 hash 1 3598  
180 14 Dtool_Ns0bXD6p 0 4 171 3599 0 14 Dtool_Ns0bXD6p 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  7 hashgen 1 3605  
181 14 Dtool_Ns0bzJQW 0 7 172 3619 2171 14 Dtool_Ns0bzJQW 0 1 4 this 3 3620  
182 14 Dtool_Ns0bfkaH 0 7 173 3619 2171 14 Dtool_Ns0bfkaH 0 2 4 this 3 3620  5 other 1 3620  
183 14 Dtool_Ns0bf08a 0 7 174 3619 2171 14 Dtool_Ns0bf08a 0 2 4 this 3 3620  5 other 1 3620  
184 14 Dtool_Ns0buEBm 0 7 175 3619 2171 14 Dtool_Ns0buEBm 0 2 4 this 3 3620  6 scalar 1 3603  
185 14 Dtool_Ns0bh82W 0 7 176 3619 2171 14 Dtool_Ns0bh82W 0 2 4 this 3 3620  6 scalar 1 3603  
186 14 Dtool_Ns0brr5c 0 6 177 3619 0 14 Dtool_Ns0brr5c 0 2 4 this 3 3619  5 other 1 3620  
187 14 Dtool_Ns0brbaw 0 6 178 3619 0 14 Dtool_Ns0brbaw 0 2 4 this 3 3619  5 other 1 3620  
188 14 Dtool_Ns0bJc9w 0 6 179 3619 0 14 Dtool_Ns0bJc9w 0 2 4 this 3 3619  6 scalar 1 3603  
189 14 Dtool_Ns0bK0xh 0 6 180 3619 0 14 Dtool_Ns0bK0xh 0 2 4 this 3 3619  6 scalar 1 3603  
190 14 Dtool_Ns0bwV29 0 4 181 3599 0 14 Dtool_Ns0bwV29 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  5 other 1 3620  
191 14 Dtool_Ns0b5a3E 0 7 182 3619 2171 14 Dtool_Ns0b5a3E 0 2 4 this 3 3620  8 exponent 1 3603  
192 14 Dtool_Ns0bSrQE 0 6 183 3600 0 14 Dtool_Ns0bSrQE 0 2 4 this 3 3619  8 exponent 1 3603  
193 14 Dtool_Ns0bwfHE 0 7 184 3619 2171 14 Dtool_Ns0bwfHE 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  5 other 1 3620  
194 14 Dtool_Ns0busnC 0 7 185 3619 2171 14 Dtool_Ns0busnC 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  5 other 1 3620  
195 14 Dtool_Ns0bfkiV 0 6 186 3604 0 14 Dtool_Ns0bfkiV 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  5 other 1 3620  
196 14 Dtool_Ns0b_gWE 0 6 186 3604 0 14 Dtool_Ns0b_gWE 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3620  5 other 1 3620  9 threshold 1 3603  
197 14 Dtool_Ns0b019u 0 4 187 3599 0 14 Dtool_Ns0b019u 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  3 out 1 3607  
198 14 Dtool_Ns0bq9YC 0 4 188 3599 0 14 Dtool_Ns0bq9YC 0 3 4 this 3 3620  3 out 1 3607  10 class_name 1 3602  
199 14 Dtool_Ns0bTYic 0 4 189 3599 0 14 Dtool_Ns0bTYic 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  11 destination 1 3609  
200 14 Dtool_Ns0bbIEZ 0 4 190 3599 0 14 Dtool_Ns0bbIEZ 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  6 source 1 3611  
201 14 Dtool_Ns0bu9cZ 0 4 191 3599 0 14 Dtool_Ns0bu9cZ 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3620  11 destination 1 3609  
202 14 Dtool_Ns0bOtdr 0 4 192 3599 0 14 Dtool_Ns0bOtdr 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3619  6 source 1 3611  
203 14 Dtool_Ns0bb8Po 0 7 193 3614 0 14 Dtool_Ns0bb8Po 0 0 
204 14 Dtool_Ns0bQv_8 0 7 195 3622 2240 14 Dtool_Ns0bQv_8 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
205 14 Dtool_Ns0b_wFf 0 7 195 3622 2240 14 Dtool_Ns0b_wFf 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3595  
206 14 Dtool_Ns0btvIb 0 7 195 3622 2240 14 Dtool_Ns0btvIb 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3597  
207 14 Dtool_Ns0bOs00 0 7 195 3622 2240 14 Dtool_Ns0bOs00 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3597  1 y 1 3597  
208 14 Dtool_Ns0brg1b 0 6 196 3622 0 14 Dtool_Ns0brg1b 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3622  4 copy 1 3595  
209 14 Dtool_Ns0bOfPd 0 6 196 3622 0 14 Dtool_Ns0bOfPd 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3622  10 fill_value 1 3597  
210 14 Dtool_Ns0bs393 0 6 197 3600 0 14 Dtool_Ns0bs393 0 2 4 this 3 3623  9 attr_name 1 3602  
211 14 Dtool_Ns0bSIrv 0 6 198 3603 0 14 Dtool_Ns0bSIrv 0 3 4 this 3 3622  9 attr_name 1 3602  6 assign 1 3600  
212 14 Dtool_Ns0bMCtA 0 6 199 3623 0 14 Dtool_Ns0bMCtA 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
213 14 Dtool_Ns0byI1V 0 6 200 3623 0 14 Dtool_Ns0byI1V 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
214 14 Dtool_Ns0bykua 0 6 201 3623 0 14 Dtool_Ns0bykua 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
215 14 Dtool_Ns0bVMph 0 7 202 3622 2240 14 Dtool_Ns0bVMph 0 1 4 this 3 3623  
216 14 Dtool_Ns0bJC_P 0 7 203 3594 2045 14 Dtool_Ns0bJC_P 0 2 4 this 3 3623  5 other 1 3595  
217 14 Dtool_Ns0bjfKg 0 7 203 3622 2240 14 Dtool_Ns0bjfKg 0 2 4 this 3 3623  5 other 1 3623  
218 14 Dtool_Ns0bpPmQ 0 7 204 3594 2045 14 Dtool_Ns0bpPmQ 0 2 4 this 3 3623  5 other 1 3595  
219 14 Dtool_Ns0bDbxg 0 7 204 3622 2240 14 Dtool_Ns0bDbxg 0 2 4 this 3 3623  5 other 1 3623  
220 14 Dtool_Ns0bdPP0 0 7 205 3622 2240 14 Dtool_Ns0bdPP0 0 2 4 this 3 3623  6 scalar 1 3597  
221 14 Dtool_Ns0btnx1 0 7 206 3622 2240 14 Dtool_Ns0btnx1 0 2 4 this 3 3623  6 scalar 1 3597  
222 14 Dtool_Ns0bpiFZ 0 7 207 3622 2240 14 Dtool_Ns0bpiFZ 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3623  4 onto 1 3595  
223 14 Dtool_Ns0be9_x 0 6 208 3597 0 14 Dtool_Ns0be9_x 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3623  5 other 1 3623  
224 14 Dtool_Ns0b_avu 0 6 209 3597 0 14 Dtool_Ns0b_avu 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3623  5 other 1 3623  
225 14 Dtool_Ns0bfA9I 0 4 210 3599 0 14 Dtool_Ns0bfA9I 0 3 4 this 3 3623  3 out 1 3607  10 class_name 1 3602  
226 14 Dtool_Ns0bhYMy 0 7 211 3614 0 14 Dtool_Ns0bhYMy 0 0 
227 14 Dtool_Ns0bwcd5 0 7 214 3625 2258 14 Dtool_Ns0bwcd5 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
228 14 Dtool_Ns0bqdIZ 0 7 214 3625 2258 14 Dtool_Ns0bqdIZ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3616  
229 14 Dtool_Ns0beGDk 0 7 214 3625 2258 14 Dtool_Ns0beGDk 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3618  
230 14 Dtool_Ns0bAy7S 0 7 214 3625 2258 14 Dtool_Ns0bAy7S 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3618  1 y 1 3618  
231 14 Dtool_Ns0bzhOK 0 6 215 3625 0 14 Dtool_Ns0bzhOK 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  4 copy 1 3616  
232 14 Dtool_Ns0b2_5n 0 6 215 3625 0 14 Dtool_Ns0b2_5n 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  10 fill_value 1 3618  
233 14 Dtool_Ns0bH0d0 0 6 216 3600 0 14 Dtool_Ns0bH0d0 0 2 4 this 3 3626  9 attr_name 1 3602  
234 14 Dtool_Ns0bNLLs 0 6 217 3603 0 14 Dtool_Ns0bNLLs 0 3 4 this 3 3625  9 attr_name 1 3602  6 assign 1 3600  
235 14 Dtool_Ns0b0FN9 0 6 218 3626 0 14 Dtool_Ns0b0FN9 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
236 14 Dtool_Ns0bpXVS 0 6 219 3626 0 14 Dtool_Ns0bpXVS 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
237 14 Dtool_Ns0bp7OX 0 6 220 3626 0 14 Dtool_Ns0bp7OX 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
238 14 Dtool_Ns0bONJe 0 7 221 3625 2258 14 Dtool_Ns0bONJe 0 1 4 this 3 3626  
239 14 Dtool_Ns0bgDY_ 0 7 222 3615 2108 14 Dtool_Ns0bgDY_ 0 2 4 this 3 3626  5 other 1 3616  
240 14 Dtool_Ns0bKsOa 0 7 222 3625 2258 14 Dtool_Ns0bKsOa 0 2 4 this 3 3626  5 other 1 3626  
241 14 Dtool_Ns0bAO__ 0 7 223 3615 2108 14 Dtool_Ns0bAO__ 0 2 4 this 3 3626  5 other 1 3616  
242 14 Dtool_Ns0bqo1a 0 7 223 3625 2258 14 Dtool_Ns0bqo1a 0 2 4 this 3 3626  5 other 1 3626  
243 14 Dtool_Ns0b_Z18 0 7 224 3625 2258 14 Dtool_Ns0b_Z18 0 2 4 this 3 3626  6 scalar 1 3618  
244 14 Dtool_Ns0bvwW_ 0 7 225 3625 2258 14 Dtool_Ns0bvwW_ 0 2 4 this 3 3626  6 scalar 1 3618  
245 14 Dtool_Ns0bYmkd 0 7 226 3625 2258 14 Dtool_Ns0bYmkd 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  4 onto 1 3616  
246 14 Dtool_Ns0bH_RS 0 6 227 3618 0 14 Dtool_Ns0bH_RS 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  5 other 1 3626  
247 14 Dtool_Ns0boZBP 0 6 228 3618 0 14 Dtool_Ns0boZBP 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  5 other 1 3626  
248 14 Dtool_Ns0b2DdF 0 4 229 3599 0 14 Dtool_Ns0b2DdF 0 3 4 this 3 3626  3 out 1 3607  10 class_name 1 3602  
249 14 Dtool_Ns0b4Zsu 0 7 230 3614 0 14 Dtool_Ns0b4Zsu 0 0 
250 14 Dtool_Ns0bBXQC 0 7 233 3628 2273 14 Dtool_Ns0bBXQC 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
251 14 Dtool_Ns0bF0Bo 0 7 233 3628 2273 14 Dtool_Ns0bF0Bo 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3620  
252 14 Dtool_Ns0bk5GM 0 7 233 3628 2273 14 Dtool_Ns0bk5GM 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3603  
253 14 Dtool_Ns0bVk_T 0 7 233 3628 2273 14 Dtool_Ns0bVk_T 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3603  1 y 1 3603  
254 14 Dtool_Ns0bXAP2 0 6 234 3628 0 14 Dtool_Ns0bXAP2 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3628  4 copy 1 3620  
255 14 Dtool_Ns0b4eq4 0 6 234 3628 0 14 Dtool_Ns0b4eq4 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3628  10 fill_value 1 3603  
256 14 Dtool_Ns0bp2Nd 0 6 235 3600 0 14 Dtool_Ns0bp2Nd 0 2 4 this 3 3629  9 attr_name 1 3602  
257 14 Dtool_Ns0bvI7U 0 6 236 3603 0 14 Dtool_Ns0bvI7U 0 3 4 this 3 3628  9 attr_name 1 3602  6 assign 1 3600  
258 14 Dtool_Ns0bWD9l 0 6 237 3629 0 14 Dtool_Ns0bWD9l 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
259 14 Dtool_Ns0bIIF7 0 6 238 3629 0 14 Dtool_Ns0bIIF7 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
260 14 Dtool_Ns0bIk__ 0 6 239 3629 0 14 Dtool_Ns0bIk__ 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
261 14 Dtool_Ns0bQP5G 0 7 240 3628 2273 14 Dtool_Ns0bQP5G 0 1 4 this 3 3629  
262 14 Dtool_Ns0bNtaq 0 7 241 3619 2171 14 Dtool_Ns0bNtaq 0 2 4 this 3 3629  5 other 1 3620  
263 14 Dtool_Ns0bs1FJ 0 7 241 3628 2273 14 Dtool_Ns0bs1FJ 0 2 4 this 3 3629  5 other 1 3629  
264 14 Dtool_Ns0btgBr 0 7 242 3619 2171 14 Dtool_Ns0btgBr 0 2 4 this 3 3629  5 other 1 3620  
265 14 Dtool_Ns0bM5qJ 0 7 242 3628 2273 14 Dtool_Ns0bM5qJ 0 2 4 this 3 3629  5 other 1 3629  
266 14 Dtool_Ns0b_wWx 0 7 243 3628 2273 14 Dtool_Ns0b_wWx 0 2 4 this 3 3629  6 scalar 1 3603  
267 14 Dtool_Ns0bPo4y 0 7 244 3628 2273 14 Dtool_Ns0bPo4y 0 2 4 this 3 3629  6 scalar 1 3603  
268 14 Dtool_Ns0bRBNu 0 4 245 3599 0 14 Dtool_Ns0bRBNu 0 3 4 this 3 3629  3 out 1 3607  10 class_name 1 3602  
269 14 Dtool_Ns0bmfcX 0 7 246 3614 0 14 Dtool_Ns0bmfcX 0 0 
270 14 Dtool_Ns0bzKKY 0 7 249 3631 2289 14 Dtool_Ns0bzKKY 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
271 14 Dtool_Ns0btY8N 0 7 249 3631 2289 14 Dtool_Ns0btY8N 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3595  
272 14 Dtool_Ns0bCtvQ 0 7 249 3631 2289 14 Dtool_Ns0bCtvQ 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3597  
273 14 Dtool_Ns0bqlQB 0 7 249 3631 2289 14 Dtool_Ns0bqlQB 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3597  1 y 1 3597  
274 14 Dtool_Ns0b_egO 0 6 250 3631 0 14 Dtool_Ns0b_egO 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3631  4 copy 1 3595  
275 14 Dtool_Ns0bqvjK 0 6 250 3631 0 14 Dtool_Ns0bqvjK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3631  10 fill_value 1 3597  
276 14 Dtool_Ns0bP_UN 0 6 251 3600 0 14 Dtool_Ns0bP_UN 0 2 4 this 3 3632  9 attr_name 1 3602  
277 14 Dtool_Ns0bB4B1 0 6 252 3603 0 14 Dtool_Ns0bB4B1 0 3 4 this 3 3631  9 attr_name 1 3602  6 assign 1 3600  
278 14 Dtool_Ns0bqnt3 0 6 253 3632 0 14 Dtool_Ns0bqnt3 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
279 14 Dtool_Ns0bCGWE 0 6 254 3632 0 14 Dtool_Ns0bCGWE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
280 14 Dtool_Ns0baRgE 0 6 255 3632 0 14 Dtool_Ns0baRgE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
281 14 Dtool_Ns0b01sU 0 7 256 3631 2289 14 Dtool_Ns0b01sU 0 1 4 this 3 3632  
282 14 Dtool_Ns0bsVHw 0 7 257 3594 2045 14 Dtool_Ns0bsVHw 0 2 4 this 3 3632  5 other 1 3595  
283 14 Dtool_Ns0bf_os 0 7 257 3631 2289 14 Dtool_Ns0bf_os 0 2 4 this 3 3632  5 other 1 3623  
284 14 Dtool_Ns0bYCqi 0 7 258 3622 2240 14 Dtool_Ns0bYCqi 0 2 4 this 3 3632  5 other 1 3632  
285 14 Dtool_Ns0b3nIw 0 7 258 3594 2045 14 Dtool_Ns0b3nIw 0 2 4 this 3 3632  5 other 1 3595  
286 14 Dtool_Ns0bggps 0 7 258 3631 2289 14 Dtool_Ns0bggps 0 2 4 this 3 3632  5 other 1 3623  
287 14 Dtool_Ns0bULR7 0 7 259 3631 2289 14 Dtool_Ns0bULR7 0 2 4 this 3 3632  6 scalar 1 3597  
288 14 Dtool_Ns0brFUb 0 7 260 3631 2289 14 Dtool_Ns0brFUb 0 2 4 this 3 3632  6 scalar 1 3597  
289 14 Dtool_Ns0bP_bo 0 7 261 3631 2289 14 Dtool_Ns0bP_bo 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3632  4 onto 1 3595  
290 14 Dtool_Ns0bFi0t 0 4 262 3599 0 14 Dtool_Ns0bFi0t 0 3 4 this 3 3632  3 out 1 3607  10 class_name 1 3602  
291 14 Dtool_Ns0bntNT 0 7 263 3614 0 14 Dtool_Ns0bntNT 0 0 
292 14 Dtool_Ns0btKnR 0 7 266 3634 2305 14 Dtool_Ns0btKnR 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
293 14 Dtool_Ns0bkCZP 0 7 266 3634 2305 14 Dtool_Ns0bkCZP 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3616  
294 14 Dtool_Ns0b38Ro 0 7 266 3634 2305 14 Dtool_Ns0b38Ro 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3618  
295 14 Dtool_Ns0bVLaV 0 7 266 3634 2305 14 Dtool_Ns0bVLaV 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3618  1 y 1 3618  
296 14 Dtool_Ns0b9M99 0 6 267 3634 0 14 Dtool_Ns0b9M99 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3634  4 copy 1 3616  
297 14 Dtool_Ns0bMH4I 0 6 267 3634 0 14 Dtool_Ns0bMH4I 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3634  10 fill_value 1 3618  
298 14 Dtool_Ns0bx_N_ 0 6 268 3600 0 14 Dtool_Ns0bx_N_ 0 2 4 this 3 3635  9 attr_name 1 3602  
299 14 Dtool_Ns0be46m 0 6 269 3603 0 14 Dtool_Ns0be46m 0 3 4 this 3 3634  9 attr_name 1 3602  6 assign 1 3600  
300 14 Dtool_Ns0brnmp 0 6 270 3635 0 14 Dtool_Ns0brnmp 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
301 14 Dtool_Ns0bAGP2 0 6 271 3635 0 14 Dtool_Ns0bAGP2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
302 14 Dtool_Ns0bYRZ2 0 6 272 3635 0 14 Dtool_Ns0bYRZ2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
303 14 Dtool_Ns0b11lG 0 7 273 3634 2305 14 Dtool_Ns0b11lG 0 1 4 this 3 3635  
304 14 Dtool_Ns0bvLkf 0 7 274 3615 2108 14 Dtool_Ns0bvLkf 0 2 4 this 3 3635  5 other 1 3616  
305 14 Dtool_Ns0bCmce 0 7 274 3634 2305 14 Dtool_Ns0bCmce 0 2 4 this 3 3635  5 other 1 3626  
306 14 Dtool_Ns0bNGic 0 7 275 3625 2258 14 Dtool_Ns0bNGic 0 2 4 this 3 3635  5 other 1 3635  
307 14 Dtool_Ns0b0Vlf 0 7 275 3615 2108 14 Dtool_Ns0b0Vlf 0 2 4 this 3 3635  5 other 1 3616  
308 14 Dtool_Ns0bFode 0 7 275 3634 2305 14 Dtool_Ns0bFode 0 2 4 this 3 3635  5 other 1 3626  
309 14 Dtool_Ns0brAiF 0 7 276 3634 2305 14 Dtool_Ns0brAiF 0 2 4 this 3 3635  6 scalar 1 3618  
310 14 Dtool_Ns0b6Vkl 0 7 277 3634 2305 14 Dtool_Ns0b6Vkl 0 2 4 this 3 3635  6 scalar 1 3618  
311 14 Dtool_Ns0bi_k4 0 7 278 3634 2305 14 Dtool_Ns0bi_k4 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3635  4 onto 1 3616  
312 14 Dtool_Ns0bEitf 0 4 279 3599 0 14 Dtool_Ns0bEitf 0 3 4 this 3 3635  3 out 1 3607  10 class_name 1 3602  
313 14 Dtool_Ns0bmtGF 0 7 280 3614 0 14 Dtool_Ns0bmtGF 0 0 
314 14 Dtool_Ns0b8q_h 0 7 283 3637 2320 14 Dtool_Ns0b8q_h 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
315 14 Dtool_Ns0bzLwr 0 7 283 3637 2320 14 Dtool_Ns0bzLwr 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3620  
316 14 Dtool_Ns0bWar6 0 7 283 3637 2320 14 Dtool_Ns0bWar6 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3603  
317 14 Dtool_Ns0b87LW 0 7 283 3637 2320 14 Dtool_Ns0b87LW 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3603  1 y 1 3603  
318 14 Dtool_Ns0b5LVH 0 6 284 3637 0 14 Dtool_Ns0b5LVH 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3637  4 copy 1 3620  
319 14 Dtool_Ns0bP0ar 0 6 284 3637 0 14 Dtool_Ns0bP0ar 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3637  10 fill_value 1 3603  
320 14 Dtool_Ns0bNffC 0 6 285 3600 0 14 Dtool_Ns0bNffC 0 2 4 this 3 3638  9 attr_name 1 3602  
321 14 Dtool_Ns0bDYMq 0 6 286 3603 0 14 Dtool_Ns0bDYMq 0 3 4 this 3 3637  9 attr_name 1 3602  6 assign 1 3600  
322 14 Dtool_Ns0bkH3s 0 6 287 3638 0 14 Dtool_Ns0bkH3s 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
323 14 Dtool_Ns0bDmg5 0 6 288 3638 0 14 Dtool_Ns0bDmg5 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
324 14 Dtool_Ns0bbxq5 0 6 289 3638 0 14 Dtool_Ns0bbxq5 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
325 14 Dtool_Ns0bKV3J 0 7 290 3637 2320 14 Dtool_Ns0bKV3J 0 1 4 this 3 3638  
326 14 Dtool_Ns0bqO8o 0 7 291 3619 2171 14 Dtool_Ns0bqO8o 0 2 4 this 3 3638  5 other 1 3620  
327 14 Dtool_Ns0bDL5h 0 7 291 3637 2320 14 Dtool_Ns0bDL5h 0 2 4 this 3 3638  5 other 1 3629  
328 14 Dtool_Ns0bzw0r 0 7 292 3628 2273 14 Dtool_Ns0bzw0r 0 2 4 this 3 3638  5 other 1 3638  
329 14 Dtool_Ns0bxY9o 0 7 292 3619 2171 14 Dtool_Ns0bxY9o 0 2 4 this 3 3638  5 other 1 3620  
330 14 Dtool_Ns0bI97h 0 7 292 3637 2320 14 Dtool_Ns0bI97h 0 2 4 this 3 3638  5 other 1 3629  
331 14 Dtool_Ns0bwGL3 0 7 293 3637 2320 14 Dtool_Ns0bwGL3 0 2 4 this 3 3638  6 scalar 1 3603  
332 14 Dtool_Ns0beZNX 0 7 294 3637 2320 14 Dtool_Ns0beZNX 0 2 4 this 3 3638  6 scalar 1 3603  
333 14 Dtool_Ns0bDC_i 0 4 295 3599 0 14 Dtool_Ns0bDC_i 0 3 4 this 3 3638  3 out 1 3607  10 class_name 1 3602  
334 14 Dtool_Ns0bpNXI 0 7 296 3614 0 14 Dtool_Ns0bpNXI 0 0 
335 14 Dtool_Ns0b9GM2 0 7 299 3640 2330 14 Dtool_Ns0b9GM2 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
336 14 Dtool_Ns0b5NlT 0 7 299 3640 2330 14 Dtool_Ns0b5NlT 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3595  1 z 1 3597  
337 14 Dtool_Ns0bRRmU 0 7 299 3640 2330 14 Dtool_Ns0bRRmU 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3641  
338 14 Dtool_Ns0bBPuZ 0 7 299 3640 2330 14 Dtool_Ns0bBPuZ 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3597  
339 14 Dtool_Ns0bnj6v 0 7 299 3640 2330 14 Dtool_Ns0bnj6v 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3597  1 y 1 3597  1 z 1 3597  
340 14 Dtool_Ns0bqOP9 0 6 300 3640 0 14 Dtool_Ns0bqOP9 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  4 copy 1 3641  
341 14 Dtool_Ns0brfXC 0 6 300 3640 0 14 Dtool_Ns0brfXC 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  10 fill_value 1 3597  
342 14 Dtool_Ns0bkPX7 0 4 301 3599 0 14 Dtool_Ns0bkPX7 0 2 4 this 3 3640  4 size 1 3598  
343 14 Dtool_Ns0bKGfx 0 6 304 3641 0 14 Dtool_Ns0bKGfx 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
344 14 Dtool_Ns0bmCVV 0 6 305 3641 0 14 Dtool_Ns0bmCVV 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
345 14 Dtool_Ns0bgCjx 0 6 306 3641 0 14 Dtool_Ns0bgCjx 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
346 14 Dtool_Ns0bjCxN 0 6 307 3641 0 14 Dtool_Ns0bjCxN 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
347 14 Dtool_Ns0b4pFf 0 6 309 3600 0 14 Dtool_Ns0b4pFf 0 1 4 this 3 3641  
348 14 Dtool_Ns0brQjc 0 6 310 3600 0 14 Dtool_Ns0brQjc 0 2 4 this 3 3641  9 attr_name 1 3602  
349 14 Dtool_Ns0bzHVU 0 6 311 3603 0 14 Dtool_Ns0bzHVU 0 3 4 this 3 3640  9 attr_name 1 3602  6 assign 1 3600  
350 14 Dtool_Ns0b01HX 0 4 312 3599 0 14 Dtool_Ns0b01HX 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  1 i 1 3603  
351 14 Dtool_Ns0bnq7z 0 6 312 3597 0 14 Dtool_Ns0bnq7z 0 2 4 this 3 3641  1 i 1 3603  
352 14 Dtool_Ns0bCMJn 0 4 313 3599 0 14 Dtool_Ns0bCMJn 0 3 4 this 3 3640  1 i 1 3603  1 v 1 3597  
353 14 Dtool_Ns0bEZPb 0 6 314 3603 0 14 Dtool_Ns0bEZPb 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
354 14 Dtool_Ns0bd5Gi 0 6 315 3604 0 14 Dtool_Ns0bd5Gi 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
355 14 Dtool_Ns0bO_fH 0 6 316 3597 0 14 Dtool_Ns0bO_fH 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  1 i 1 3603  
356 14 Dtool_Ns0bdY_y 0 6 317 3597 0 14 Dtool_Ns0bdY_y 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
357 14 Dtool_Ns0bd843 0 6 318 3597 0 14 Dtool_Ns0bd843 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
358 14 Dtool_Ns0bdQw8 0 6 319 3597 0 14 Dtool_Ns0bdQw8 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
359 14 Dtool_Ns0bUQX1 0 4 320 3599 0 14 Dtool_Ns0bUQX1 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3640  1 i 1 3603  5 value 1 3597  
360 14 Dtool_Ns0bcuZH 0 4 321 3599 0 14 Dtool_Ns0bcuZH 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  5 value 1 3597  
361 14 Dtool_Ns0bcKSM 0 4 322 3599 0 14 Dtool_Ns0bcKSM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  5 value 1 3597  
362 14 Dtool_Ns0bcWKR 0 4 323 3599 0 14 Dtool_Ns0bcWKR 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  5 value 1 3597  
363 14 Dtool_Ns0bWJYp 0 7 324 3594 2045 14 Dtool_Ns0bWJYp 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
364 14 Dtool_Ns0bbJmF 0 7 325 3594 2045 14 Dtool_Ns0bbJmF 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
365 14 Dtool_Ns0bbleK 0 7 326 3594 2045 14 Dtool_Ns0bbleK 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
366 14 Dtool_Ns0bHyX0 0 4 327 3599 0 14 Dtool_Ns0bHyX0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3640  1 i 1 3603  5 value 1 3597  
367 14 Dtool_Ns0b1m2F 0 4 328 3599 0 14 Dtool_Ns0b1m2F 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  5 value 1 3597  
368 14 Dtool_Ns0b1CvK 0 4 329 3599 0 14 Dtool_Ns0b1CvK 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  5 value 1 3597  
369 14 Dtool_Ns0b1unP 0 4 330 3599 0 14 Dtool_Ns0b1unP 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  5 value 1 3597  
370 14 Dtool_Ns0bjRCm 0 4 331 3599 0 14 Dtool_Ns0bjRCm 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
371 14 Dtool_Ns0bpFHZ 0 6 332 3603 0 14 Dtool_Ns0bpFHZ 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
372 14 Dtool_Ns0bq1Xn 0 4 333 3599 0 14 Dtool_Ns0bq1Xn 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  10 fill_value 1 3597  
373 14 Dtool_Ns0bOavy 0 4 334 3599 0 14 Dtool_Ns0bOavy 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3640  1 x 1 3597  1 y 1 3597  1 z 1 3597  
374 14 Dtool_Ns0baDIV 0 6 335 3597 0 14 Dtool_Ns0baDIV 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  5 other 1 3641  
375 14 Dtool_Ns0blUs9 0 6 336 3597 0 14 Dtool_Ns0blUs9 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
376 14 Dtool_Ns0bbb4d 0 6 337 3597 0 14 Dtool_Ns0bbb4d 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
377 14 Dtool_Ns0bOsSz 0 6 338 3604 0 14 Dtool_Ns0bOsSz 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3640  
378 14 Dtool_Ns0bQhma 0 7 339 3640 2330 14 Dtool_Ns0bQhma 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  4 onto 1 3641  
379 14 Dtool_Ns0baJ6l 0 7 340 3640 2330 14 Dtool_Ns0baJ6l 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  5 other 1 3641  
380 14 Dtool_Ns0bdE8o 0 6 341 3604 0 14 Dtool_Ns0bdE8o 0 2 4 this 3 3641  5 other 1 3641  
381 14 Dtool_Ns0bFt4v 0 6 342 3604 0 14 Dtool_Ns0bFt4v 0 2 4 this 3 3641  5 other 1 3641  
382 14 Dtool_Ns0bBNge 0 6 343 3604 0 14 Dtool_Ns0bBNge 0 2 4 this 3 3641  5 other 1 3641  
383 14 Dtool_Ns0bW_5p 0 7 344 3640 2330 14 Dtool_Ns0bW_5p 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
384 14 Dtool_Ns0b53zo 0 6 345 3603 0 14 Dtool_Ns0b53zo 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  5 other 1 3641  
385 14 Dtool_Ns0b8GlN 0 6 345 3603 0 14 Dtool_Ns0b8GlN 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3641  5 other 1 3641  9 threshold 1 3597  
386 14 Dtool_Ns0bOipS 0 6 346 3598 0 14 Dtool_Ns0bOipS 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3641  
387 14 Dtool_Ns0bgnPZ 0 6 346 3598 0 14 Dtool_Ns0bgnPZ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  9 threshold 1 3597  
388 14 Dtool_Ns0bH3fh 0 6 347 3598 0 14 Dtool_Ns0bH3fh 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  4 hash 1 3598  
389 14 Dtool_Ns0bwERG 0 6 347 3598 0 14 Dtool_Ns0bwERG 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3641  4 hash 1 3598  9 threshold 1 3597  
390 14 Dtool_Ns0bZWpj 0 4 348 3599 0 14 Dtool_Ns0bZWpj 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  7 hashgen 1 3605  
391 14 Dtool_Ns0bRJlv 0 4 348 3599 0 14 Dtool_Ns0bRJlv 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3641  7 hashgen 1 3605  9 threshold 1 3597  
392 14 Dtool_Ns0biO_P 0 7 349 3640 2330 14 Dtool_Ns0biO_P 0 1 4 this 3 3641  
393 14 Dtool_Ns0bfM9C 0 7 350 3640 2330 14 Dtool_Ns0bfM9C 0 2 4 this 3 3641  5 other 1 3641  
394 14 Dtool_Ns0bf8eW 0 7 351 3640 2330 14 Dtool_Ns0bf8eW 0 2 4 this 3 3641  5 other 1 3641  
395 14 Dtool_Ns0bHdlj 0 7 352 3640 2330 14 Dtool_Ns0bHdlj 0 2 4 this 3 3641  6 scalar 1 3597  
396 14 Dtool_Ns0bY1ZU 0 7 353 3640 2330 14 Dtool_Ns0bY1ZU 0 2 4 this 3 3641  6 scalar 1 3597  
397 14 Dtool_Ns0bGqXQ 0 6 354 3640 0 14 Dtool_Ns0bGqXQ 0 2 4 this 3 3640  5 other 1 3641  
398 14 Dtool_Ns0bGa5j 0 6 355 3640 0 14 Dtool_Ns0bGa5j 0 2 4 this 3 3640  5 other 1 3641  
399 14 Dtool_Ns0bPZfq 0 6 356 3640 0 14 Dtool_Ns0bPZfq 0 2 4 this 3 3640  6 scalar 1 3597  
400 14 Dtool_Ns0bOhTb 0 6 357 3640 0 14 Dtool_Ns0bOhTb 0 2 4 this 3 3640  6 scalar 1 3597  
401 14 Dtool_Ns0bnVEp 0 4 358 3599 0 14 Dtool_Ns0bnVEp 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  5 other 1 3641  
402 14 Dtool_Ns0bhJZs 0 7 359 3640 2330 14 Dtool_Ns0bhJZs 0 2 4 this 3 3641  8 exponent 1 3597  
403 14 Dtool_Ns0b_lPl 0 6 360 3600 0 14 Dtool_Ns0b_lPl 0 2 4 this 3 3640  8 exponent 1 3597  
404 14 Dtool_Ns0bpn3D 0 7 361 3640 2330 14 Dtool_Ns0bpn3D 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  5 other 1 3641  
405 14 Dtool_Ns0bHaYC 0 7 362 3640 2330 14 Dtool_Ns0bHaYC 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  5 other 1 3641  
406 14 Dtool_Ns0bvCKa 0 4 363 3599 0 14 Dtool_Ns0bvCKa 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  5 other 1 3641  
407 14 Dtool_Ns0b2ADH 0 6 364 3604 0 14 Dtool_Ns0b2ADH 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  5 other 1 3641  
408 14 Dtool_Ns0bjJ12 0 6 364 3604 0 14 Dtool_Ns0bjJ12 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3641  5 other 1 3641  9 threshold 1 3597  
409 14 Dtool_Ns0b8Oso 0 4 365 3599 0 14 Dtool_Ns0b8Oso 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  3 out 1 3607  
410 14 Dtool_Ns0bRMH8 0 4 366 3599 0 14 Dtool_Ns0bRMH8 0 3 4 this 3 3641  3 out 1 3607  10 class_name 1 3602  
411 14 Dtool_Ns0bi_RW 0 4 367 3599 0 14 Dtool_Ns0bi_RW 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  11 destination 1 3609  
412 14 Dtool_Ns0baJyS 0 4 368 3599 0 14 Dtool_Ns0baJyS 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  6 source 1 3611  
413 14 Dtool_Ns0bqMLT 0 4 369 3599 0 14 Dtool_Ns0bqMLT 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3641  11 destination 1 3609  
414 14 Dtool_Ns0bKcMl 0 4 370 3599 0 14 Dtool_Ns0bKcMl 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3640  6 source 1 3611  
415 14 Dtool_Ns0bdN_h 0 7 371 3614 0 14 Dtool_Ns0bdN_h 0 0 
416 14 Dtool_Ns0bjiry 0 7 373 3643 2403 14 Dtool_Ns0bjiry 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
417 14 Dtool_Ns0bOLqf 0 7 373 3643 2403 14 Dtool_Ns0bOLqf 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3616  1 z 1 3618  
418 14 Dtool_Ns0buakN 0 7 373 3643 2403 14 Dtool_Ns0buakN 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3644  
419 14 Dtool_Ns0b_fFc 0 7 373 3643 2403 14 Dtool_Ns0b_fFc 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3618  
420 14 Dtool_Ns0bpccq 0 7 373 3643 2403 14 Dtool_Ns0bpccq 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3618  1 y 1 3618  1 z 1 3618  
421 14 Dtool_Ns0byavJ 0 6 374 3643 0 14 Dtool_Ns0byavJ 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  4 copy 1 3644  
422 14 Dtool_Ns0b_NPY 0 6 374 3643 0 14 Dtool_Ns0b_NPY 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  10 fill_value 1 3618  
423 14 Dtool_Ns0bD6XL 0 4 375 3599 0 14 Dtool_Ns0bD6XL 0 2 4 this 3 3643  4 size 1 3598  
424 14 Dtool_Ns0btrfB 0 6 378 3644 0 14 Dtool_Ns0btrfB 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
425 14 Dtool_Ns0bExVl 0 6 379 3644 0 14 Dtool_Ns0bExVl 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
426 14 Dtool_Ns0bHxjB 0 6 380 3644 0 14 Dtool_Ns0bHxjB 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
427 14 Dtool_Ns0bBxxd 0 6 381 3644 0 14 Dtool_Ns0bBxxd 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
428 14 Dtool_Ns0bTkEv 0 6 383 3600 0 14 Dtool_Ns0bTkEv 0 1 4 this 3 3644  
429 14 Dtool_Ns0bMeis 0 6 384 3600 0 14 Dtool_Ns0bMeis 0 2 4 this 3 3644  9 attr_name 1 3602  
430 14 Dtool_Ns0bVSVk 0 6 385 3603 0 14 Dtool_Ns0bVSVk 0 3 4 this 3 3643  9 attr_name 1 3602  6 assign 1 3600  
431 14 Dtool_Ns0bKmHn 0 4 386 3599 0 14 Dtool_Ns0bKmHn 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  1 i 1 3603  
432 14 Dtool_Ns0bIH7D 0 6 386 3618 0 14 Dtool_Ns0bIH7D 0 2 4 this 3 3644  1 i 1 3603  
433 14 Dtool_Ns0bUicv 0 4 387 3599 0 14 Dtool_Ns0bUicv 0 3 4 this 3 3643  1 i 1 3603  1 v 1 3618  
434 14 Dtool_Ns0b61Pr 0 6 388 3603 0 14 Dtool_Ns0b61Pr 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
435 14 Dtool_Ns0b7uGy 0 6 389 3604 0 14 Dtool_Ns0b7uGy 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
436 14 Dtool_Ns0bgqfX 0 6 390 3618 0 14 Dtool_Ns0bgqfX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  1 i 1 3603  
437 14 Dtool_Ns0b8t_C 0 6 391 3618 0 14 Dtool_Ns0b8t_C 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
438 14 Dtool_Ns0b8J4H 0 6 392 3618 0 14 Dtool_Ns0b8J4H 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
439 14 Dtool_Ns0b8lwM 0 6 393 3618 0 14 Dtool_Ns0b8lwM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
440 14 Dtool_Ns0bj_Qe 0 4 394 3599 0 14 Dtool_Ns0bj_Qe 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3643  1 i 1 3603  5 value 1 3618  
441 14 Dtool_Ns0bfZV6 0 4 395 3599 0 14 Dtool_Ns0bfZV6 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  5 value 1 3618  
442 14 Dtool_Ns0bf9N_ 0 4 396 3599 0 14 Dtool_Ns0bf9N_ 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  5 value 1 3618  
443 14 Dtool_Ns0beBGE 0 4 397 3599 0 14 Dtool_Ns0beBGE 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  5 value 1 3618  
444 14 Dtool_Ns0bwlZ5 0 7 398 3615 2108 14 Dtool_Ns0bwlZ5 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
445 14 Dtool_Ns0b1lnV 0 7 399 3615 2108 14 Dtool_Ns0b1lnV 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
446 14 Dtool_Ns0b1Jfa 0 7 400 3615 2108 14 Dtool_Ns0b1Jfa 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
447 14 Dtool_Ns0bLMq8 0 4 401 3599 0 14 Dtool_Ns0bLMq8 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3643  1 i 1 3603  5 value 1 3618  
448 14 Dtool_Ns0b0Qy4 0 4 402 3599 0 14 Dtool_Ns0b0Qy4 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  5 value 1 3618  
449 14 Dtool_Ns0b00q9 0 4 403 3599 0 14 Dtool_Ns0b00q9 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  5 value 1 3618  
450 14 Dtool_Ns0b3YjC 0 4 404 3599 0 14 Dtool_Ns0b3YjC 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  5 value 1 3618  
451 14 Dtool_Ns0bd9D2 0 4 405 3599 0 14 Dtool_Ns0bd9D2 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
452 14 Dtool_Ns0bLxGp 0 6 406 3603 0 14 Dtool_Ns0bLxGp 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
453 14 Dtool_Ns0bxac_ 0 4 407 3599 0 14 Dtool_Ns0bxac_ 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  10 fill_value 1 3618  
454 14 Dtool_Ns0bL816 0 4 408 3599 0 14 Dtool_Ns0bL816 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3643  1 x 1 3618  1 y 1 3618  1 z 1 3618  
455 14 Dtool_Ns0b4N6j 0 6 409 3618 0 14 Dtool_Ns0b4N6j 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  5 other 1 3644  
456 14 Dtool_Ns0bGIsN 0 6 410 3618 0 14 Dtool_Ns0bGIsN 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
457 14 Dtool_Ns0b5E4t 0 6 411 3618 0 14 Dtool_Ns0b5E4t 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
458 14 Dtool_Ns0btBSD 0 6 412 3604 0 14 Dtool_Ns0btBSD 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3643  
459 14 Dtool_Ns0ba8hq 0 7 413 3643 2403 14 Dtool_Ns0ba8hq 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  4 onto 1 3644  
460 14 Dtool_Ns0bvmLU 0 7 414 3643 2403 14 Dtool_Ns0bvmLU 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  5 other 1 3644  
461 14 Dtool_Ns0bf_c1 0 6 415 3604 0 14 Dtool_Ns0bf_c1 0 2 4 this 3 3644  5 other 1 3644  
462 14 Dtool_Ns0b5E4P 0 6 416 3604 0 14 Dtool_Ns0b5E4P 0 2 4 this 3 3644  5 other 1 3644  
463 14 Dtool_Ns0bCkg_ 0 6 417 3604 0 14 Dtool_Ns0bCkg_ 0 2 4 this 3 3644  5 other 1 3644  
464 14 Dtool_Ns0bwK45 0 7 418 3643 2403 14 Dtool_Ns0bwK45 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
465 14 Dtool_Ns0bAqT1 0 6 419 3603 0 14 Dtool_Ns0bAqT1 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  5 other 1 3644  
466 14 Dtool_Ns0bDVKA 0 6 419 3603 0 14 Dtool_Ns0bDVKA 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3644  5 other 1 3644  9 threshold 1 3618  
467 14 Dtool_Ns0bQ_pi 0 6 420 3598 0 14 Dtool_Ns0bQ_pi 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3644  
468 14 Dtool_Ns0bBwnB 0 6 420 3598 0 14 Dtool_Ns0bBwnB 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  9 threshold 1 3618  
469 14 Dtool_Ns0blrfx 0 6 421 3598 0 14 Dtool_Ns0blrfx 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  4 hash 1 3598  
470 14 Dtool_Ns0bjZW8 0 6 421 3598 0 14 Dtool_Ns0bjZW8 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3644  4 hash 1 3598  9 threshold 1 3618  
471 14 Dtool_Ns0b_lpz 0 4 422 3599 0 14 Dtool_Ns0b_lpz 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  7 hashgen 1 3605  
472 14 Dtool_Ns0bhhvX 0 4 422 3599 0 14 Dtool_Ns0bhhvX 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3644  7 hashgen 1 3605  9 threshold 1 3618  
473 14 Dtool_Ns0bEy_f 0 7 423 3643 2403 14 Dtool_Ns0bEy_f 0 1 4 this 3 3644  
474 14 Dtool_Ns0bZ2dP 0 7 424 3643 2403 14 Dtool_Ns0bZ2dP 0 2 4 this 3 3644  5 other 1 3644  
475 14 Dtool_Ns0bZG_i 0 7 425 3643 2403 14 Dtool_Ns0bZG_i 0 2 4 this 3 3644  5 other 1 3644  
476 14 Dtool_Ns0b6_m2 0 7 426 3643 2403 14 Dtool_Ns0b6_m2 0 2 4 this 3 3644  6 scalar 1 3618  
477 14 Dtool_Ns0b7Wdn 0 7 427 3643 2403 14 Dtool_Ns0b7Wdn 0 2 4 this 3 3644  6 scalar 1 3618  
478 14 Dtool_Ns0bazWw 0 6 428 3643 0 14 Dtool_Ns0bazWw 0 2 4 this 3 3643  5 other 1 3644  
479 14 Dtool_Ns0bbD4D 0 6 429 3643 0 14 Dtool_Ns0bbD4D 0 2 4 this 3 3643  5 other 1 3644  
480 14 Dtool_Ns0bFCn2 0 6 430 3643 0 14 Dtool_Ns0bFCn2 0 2 4 this 3 3643  6 scalar 1 3618  
481 14 Dtool_Ns0bK6bn 0 6 431 3643 0 14 Dtool_Ns0bK6bn 0 2 4 this 3 3643  6 scalar 1 3618  
482 14 Dtool_Ns0bFpUv 0 4 432 3599 0 14 Dtool_Ns0bFpUv 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  5 other 1 3644  
483 14 Dtool_Ns0b0OJR 0 7 433 3643 2403 14 Dtool_Ns0b0OJR 0 2 4 this 3 3644  8 exponent 1 3618  
484 14 Dtool_Ns0bxS8t 0 6 434 3600 0 14 Dtool_Ns0bxS8t 0 2 4 this 3 3643  8 exponent 1 3618  
485 14 Dtool_Ns0bN40s 0 7 435 3643 2403 14 Dtool_Ns0bN40s 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  5 other 1 3644  
486 14 Dtool_Ns0bjFUr 0 7 436 3643 2403 14 Dtool_Ns0bjFUr 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  5 other 1 3644  
487 14 Dtool_Ns0bmWqm 0 4 437 3599 0 14 Dtool_Ns0bmWqm 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  5 other 1 3644  
488 14 Dtool_Ns0bgl6W 0 6 438 3604 0 14 Dtool_Ns0bgl6W 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  5 other 1 3644  
489 14 Dtool_Ns0b6Cbn 0 6 438 3604 0 14 Dtool_Ns0b6Cbn 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3644  5 other 1 3644  9 threshold 1 3618  
490 14 Dtool_Ns0bhBt4 0 4 439 3599 0 14 Dtool_Ns0bhBt4 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  3 out 1 3607  
491 14 Dtool_Ns0brCGM 0 4 440 3599 0 14 Dtool_Ns0brCGM 0 3 4 this 3 3644  3 out 1 3607  10 class_name 1 3602  
492 14 Dtool_Ns0b8TRm 0 4 441 3599 0 14 Dtool_Ns0b8TRm 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  11 destination 1 3609  
493 14 Dtool_Ns0b4kyi 0 4 442 3599 0 14 Dtool_Ns0b4kyi 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  6 source 1 3611  
494 14 Dtool_Ns0bPKKj 0 4 443 3599 0 14 Dtool_Ns0bPKKj 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3644  11 destination 1 3609  
495 14 Dtool_Ns0bkPM1 0 4 444 3599 0 14 Dtool_Ns0bkPM1 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3643  6 source 1 3611  
496 14 Dtool_Ns0byA_x 0 7 445 3614 0 14 Dtool_Ns0byA_x 0 0 
497 14 Dtool_Ns0bIig7 0 7 447 3646 2476 14 Dtool_Ns0bIig7 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
498 14 Dtool_Ns0bWrEZ 0 7 447 3646 2476 14 Dtool_Ns0bWrEZ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3620  1 z 1 3603  
499 14 Dtool_Ns0bWXK_ 0 7 447 3646 2476 14 Dtool_Ns0bWXK_ 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3647  
500 14 Dtool_Ns0bO8Dl 0 7 447 3646 2476 14 Dtool_Ns0bO8Dl 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3603  
501 14 Dtool_Ns0bblMW 0 7 447 3646 2476 14 Dtool_Ns0bblMW 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3603  1 y 1 3603  1 z 1 3603  
502 14 Dtool_Ns0bnZgK 0 6 448 3646 0 14 Dtool_Ns0bnZgK 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  4 copy 1 3647  
503 14 Dtool_Ns0bMjYw 0 6 448 3646 0 14 Dtool_Ns0bMjYw 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  10 fill_value 1 3603  
504 14 Dtool_Ns0bQjZj 0 4 449 3599 0 14 Dtool_Ns0bQjZj 0 2 4 this 3 3646  4 size 1 3598  
505 14 Dtool_Ns0b1EhZ 0 6 452 3647 0 14 Dtool_Ns0b1EhZ 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
506 14 Dtool_Ns0bv3X9 0 6 453 3647 0 14 Dtool_Ns0bv3X9 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
507 14 Dtool_Ns0bs3lZ 0 6 454 3647 0 14 Dtool_Ns0bs3lZ 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
508 14 Dtool_Ns0bS2z1 0 6 455 3647 0 14 Dtool_Ns0bS2z1 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
509 14 Dtool_Ns0bcZGH 0 6 457 3600 0 14 Dtool_Ns0bcZGH 0 1 4 this 3 3647  
510 14 Dtool_Ns0blBkE 0 6 458 3600 0 14 Dtool_Ns0blBkE 0 2 4 this 3 3647  9 attr_name 1 3602  
511 14 Dtool_Ns0bRFX8 0 6 459 3603 0 14 Dtool_Ns0bRFX8 0 3 4 this 3 3646  9 attr_name 1 3602  6 assign 1 3600  
512 14 Dtool_Ns0bwWI_ 0 4 460 3599 0 14 Dtool_Ns0bwWI_ 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  1 i 1 3603  
513 14 Dtool_Ns0bio8b 0 6 460 3603 0 14 Dtool_Ns0bio8b 0 2 4 this 3 3647  1 i 1 3603  
514 14 Dtool_Ns0bEgmP 0 4 461 3599 0 14 Dtool_Ns0bEgmP 0 3 4 this 3 3646  1 i 1 3603  1 v 1 3603  
515 14 Dtool_Ns0bH6QD 0 6 462 3603 0 14 Dtool_Ns0bH6QD 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
516 14 Dtool_Ns0bgfHK 0 6 463 3604 0 14 Dtool_Ns0bgfHK 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
517 14 Dtool_Ns0beagv 0 6 464 3603 0 14 Dtool_Ns0beagv 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  1 i 1 3603  
518 14 Dtool_Ns0bzKAb 0 6 465 3603 0 14 Dtool_Ns0bzKAb 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
519 14 Dtool_Ns0bzm4f 0 6 466 3603 0 14 Dtool_Ns0bzm4f 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
520 14 Dtool_Ns0bzCzk 0 6 467 3603 0 14 Dtool_Ns0bzCzk 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
521 14 Dtool_Ns0b38y0 0 4 468 3599 0 14 Dtool_Ns0b38y0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3646  1 i 1 3603  5 value 1 3603  
522 14 Dtool_Ns0bFVbS 0 4 469 3599 0 14 Dtool_Ns0bFVbS 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 value 1 3603  
523 14 Dtool_Ns0bFxTX 0 4 470 3599 0 14 Dtool_Ns0bFxTX 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 value 1 3603  
524 14 Dtool_Ns0bFdMc 0 4 471 3599 0 14 Dtool_Ns0bFdMc 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 value 1 3603  
525 14 Dtool_Ns0brGaR 0 7 472 3619 2171 14 Dtool_Ns0brGaR 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
526 14 Dtool_Ns0bpGot 0 7 473 3619 2171 14 Dtool_Ns0bpGot 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
527 14 Dtool_Ns0bpigy 0 7 474 3619 2171 14 Dtool_Ns0bpigy 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
528 14 Dtool_Ns0b3S0c 0 4 475 3599 0 14 Dtool_Ns0b3S0c 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3646  1 i 1 3603  5 value 1 3603  
529 14 Dtool_Ns0b8v4Q 0 4 476 3599 0 14 Dtool_Ns0b8v4Q 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 value 1 3603  
530 14 Dtool_Ns0b8LxV 0 4 477 3599 0 14 Dtool_Ns0b8LxV 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 value 1 3603  
531 14 Dtool_Ns0b8Xpa 0 4 478 3599 0 14 Dtool_Ns0b8Xpa 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 value 1 3603  
532 14 Dtool_Ns0bkQEO 0 4 479 3599 0 14 Dtool_Ns0bkQEO 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
533 14 Dtool_Ns0bmaHB 0 6 480 3603 0 14 Dtool_Ns0bmaHB 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
534 14 Dtool_Ns0b1ZfK 0 4 481 3599 0 14 Dtool_Ns0b1ZfK 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  10 fill_value 1 3603  
535 14 Dtool_Ns0bEfm8 0 4 482 3599 0 14 Dtool_Ns0bEfm8 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3646  1 x 1 3603  1 y 1 3603  1 z 1 3603  
536 14 Dtool_Ns0bVa__ 0 6 483 3603 0 14 Dtool_Ns0bVa__ 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
537 14 Dtool_Ns0b7ltl 0 6 484 3603 0 14 Dtool_Ns0b7ltl 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
538 14 Dtool_Ns0bUHkg 0 7 485 3646 2476 14 Dtool_Ns0bUHkg 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
539 14 Dtool_Ns0blNN2 0 6 486 3604 0 14 Dtool_Ns0blNN2 0 2 4 this 3 3647  5 other 1 3647  
540 14 Dtool_Ns0bmU6_ 0 6 487 3604 0 14 Dtool_Ns0bmU6_ 0 2 4 this 3 3647  5 other 1 3647  
541 14 Dtool_Ns0bazju 0 6 488 3604 0 14 Dtool_Ns0bazju 0 2 4 this 3 3647  5 other 1 3647  
542 14 Dtool_Ns0bLd6R 0 7 489 3646 2476 14 Dtool_Ns0bLd6R 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
543 14 Dtool_Ns0bRCE2 0 6 490 3603 0 14 Dtool_Ns0bRCE2 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
544 14 Dtool_Ns0bH9r6 0 6 491 3598 0 14 Dtool_Ns0bH9r6 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
545 14 Dtool_Ns0bRKgJ 0 6 492 3598 0 14 Dtool_Ns0bRKgJ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  4 hash 1 3598  
546 14 Dtool_Ns0bDDqL 0 4 493 3599 0 14 Dtool_Ns0bDDqL 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  7 hashgen 1 3605  
547 14 Dtool_Ns0buJA4 0 7 494 3646 2476 14 Dtool_Ns0buJA4 0 1 4 this 3 3647  
548 14 Dtool_Ns0bjFOQ 0 7 495 3646 2476 14 Dtool_Ns0bjFOQ 0 2 4 this 3 3647  5 other 1 3647  
549 14 Dtool_Ns0bjVwj 0 7 496 3646 2476 14 Dtool_Ns0bjVwj 0 2 4 this 3 3647  5 other 1 3647  
550 14 Dtool_Ns0bSExH 0 7 497 3646 2476 14 Dtool_Ns0bSExH 0 2 4 this 3 3647  6 scalar 1 3603  
551 14 Dtool_Ns0bS8m4 0 7 498 3646 2476 14 Dtool_Ns0bS8m4 0 2 4 this 3 3647  6 scalar 1 3603  
552 14 Dtool_Ns0bSqZg 0 6 499 3646 0 14 Dtool_Ns0bSqZg 0 2 4 this 3 3646  5 other 1 3647  
553 14 Dtool_Ns0bSa6z 0 6 500 3646 0 14 Dtool_Ns0bSa6z 0 2 4 this 3 3646  5 other 1 3647  
554 14 Dtool_Ns0bVctS 0 6 501 3646 0 14 Dtool_Ns0bVctS 0 2 4 this 3 3646  6 scalar 1 3603  
555 14 Dtool_Ns0bW0hD 0 6 502 3646 0 14 Dtool_Ns0bW0hD 0 2 4 this 3 3646  6 scalar 1 3603  
556 14 Dtool_Ns0b0ivf 0 4 503 3599 0 14 Dtool_Ns0b0ivf 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 other 1 3647  
557 14 Dtool_Ns0bsanm 0 7 504 3646 2476 14 Dtool_Ns0bsanm 0 2 4 this 3 3647  8 exponent 1 3603  
558 14 Dtool_Ns0bPrAm 0 6 505 3600 0 14 Dtool_Ns0bPrAm 0 2 4 this 3 3646  8 exponent 1 3603  
559 14 Dtool_Ns0bjjem 0 7 506 3646 2476 14 Dtool_Ns0bjjem 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
560 14 Dtool_Ns0b9W_k 0 7 507 3646 2476 14 Dtool_Ns0b9W_k 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
561 14 Dtool_Ns0biAcn 0 4 508 3599 0 14 Dtool_Ns0biAcn 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 other 1 3647  
562 14 Dtool_Ns0baoTv 0 6 509 3604 0 14 Dtool_Ns0baoTv 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
563 14 Dtool_Ns0byuGe 0 6 509 3604 0 14 Dtool_Ns0byuGe 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3647  5 other 1 3647  9 threshold 1 3603  
564 14 Dtool_Ns0bY6tQ 0 4 510 3599 0 14 Dtool_Ns0bY6tQ 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  3 out 1 3607  
565 14 Dtool_Ns0b_9Ik 0 4 511 3599 0 14 Dtool_Ns0b_9Ik 0 3 4 this 3 3647  3 out 1 3607  10 class_name 1 3602  
566 14 Dtool_Ns0bmYS_ 0 4 512 3599 0 14 Dtool_Ns0bmYS_ 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  11 destination 1 3609  
567 14 Dtool_Ns0bmL06 0 4 513 3599 0 14 Dtool_Ns0bmL06 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  6 source 1 3611  
568 14 Dtool_Ns0bT9M7 0 4 514 3599 0 14 Dtool_Ns0bT9M7 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  11 destination 1 3609  
569 14 Dtool_Ns0bStNN 0 4 515 3599 0 14 Dtool_Ns0bStNN 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  6 source 1 3611  
570 14 Dtool_Ns0bn9_J 0 7 516 3614 0 14 Dtool_Ns0bn9_J 0 0 
571 14 Dtool_Ns0bhACr 0 7 523 3649 2574 14 Dtool_Ns0bhACr 228 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
572 14 Dtool_Ns0bMjgA 0 7 523 3649 2574 14 Dtool_Ns0bMjgA 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3595  1 z 1 3597  
573 14 Dtool_Ns0bZ8LN 0 7 523 3649 2574 14 Dtool_Ns0bZ8LN 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3641  
574 14 Dtool_Ns0b6OMJ 0 7 523 3649 2574 14 Dtool_Ns0b6OMJ 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3597  
575 14 Dtool_Ns0bhp6I 0 7 523 3649 2574 14 Dtool_Ns0bhp6I 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3597  1 y 1 3597  1 z 1 3597  
576 14 Dtool_Ns0bqZGE 0 6 524 3649 0 14 Dtool_Ns0bqZGE 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3649  4 copy 1 3641  
577 14 Dtool_Ns0bR_QE 0 6 524 3649 0 14 Dtool_Ns0bR_QE 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3649  10 fill_value 1 3597  
578 14 Dtool_Ns0bvXBf 0 6 525 3600 0 14 Dtool_Ns0bvXBf 0 2 4 this 3 3650  9 attr_name 1 3602  
579 14 Dtool_Ns0bVouW 0 6 526 3603 0 14 Dtool_Ns0bVouW 0 3 4 this 3 3649  9 attr_name 1 3602  6 assign 1 3600  
580 14 Dtool_Ns0bMixn 0 6 527 3650 0 14 Dtool_Ns0bMixn 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
581 14 Dtool_Ns0byo58 0 6 528 3650 0 14 Dtool_Ns0byo58 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
582 14 Dtool_Ns0bxExB 0 6 529 3650 0 14 Dtool_Ns0bxExB 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
583 14 Dtool_Ns0bxgqG 0 6 530 3650 0 14 Dtool_Ns0bxgqG 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
584 14 Dtool_Ns0b8jfB 0 7 531 3622 2240 14 Dtool_Ns0b8jfB 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3650  
585 14 Dtool_Ns0b8PYG 0 7 532 3622 2240 14 Dtool_Ns0b8PYG 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3650  
586 14 Dtool_Ns0bE_hG 0 7 533 3622 2240 14 Dtool_Ns0bE_hG 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3650  
587 14 Dtool_Ns0bWstI 0 7 534 3649 2574 14 Dtool_Ns0bWstI 0 1 4 this 3 3650  
588 14 Dtool_Ns0bJrR4 0 7 535 3640 2330 14 Dtool_Ns0bJrR4 0 2 4 this 3 3650  5 other 1 3641  
589 14 Dtool_Ns0bciQH 0 7 535 3649 2574 14 Dtool_Ns0bciQH 0 2 4 this 3 3650  5 other 1 3650  
590 14 Dtool_Ns0bpo44 0 7 536 3640 2330 14 Dtool_Ns0bpo44 0 2 4 this 3 3650  5 other 1 3641  
591 14 Dtool_Ns0b8f3H 0 7 536 3649 2574 14 Dtool_Ns0b8f3H 0 2 4 this 3 3650  5 other 1 3650  
592 14 Dtool_Ns0bXSXn 0 7 537 3649 2574 14 Dtool_Ns0bXSXn 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  5 other 1 3641  
593 14 Dtool_Ns0bzCBx 0 7 538 3649 2574 14 Dtool_Ns0bzCBx 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  4 onto 1 3641  
594 14 Dtool_Ns0bi1_1 0 6 539 3597 0 14 Dtool_Ns0bi1_1 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  5 other 1 3650  
595 14 Dtool_Ns0bSe7m 0 6 540 3597 0 14 Dtool_Ns0bSe7m 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  5 other 1 3650  
596 14 Dtool_Ns0bqxe0 0 6 541 3597 0 14 Dtool_Ns0bqxe0 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3650  5 other 1 3650  3 ref 1 3650  
597 14 Dtool_Ns0bDYOx 0 6 542 3597 0 14 Dtool_Ns0bDYOx 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3650  5 other 1 3650  3 ref 1 3650  
598 14 Dtool_Ns0b_dvn 0 6 543 3597 0 14 Dtool_Ns0b_dvn 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  5 other 1 3650  
599 14 Dtool_Ns0bzM2t 0 6 544 3597 0 14 Dtool_Ns0bzM2t 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  5 other 1 3650  
600 14 Dtool_Ns0bcvTb 0 7 545 3649 2574 14 Dtool_Ns0bcvTb 0 2 4 this 3 3650  6 scalar 1 3597  
601 14 Dtool_Ns0bsH0c 0 7 546 3649 2574 14 Dtool_Ns0bsH0c 0 2 4 this 3 3650  6 scalar 1 3597  
602 14 Dtool_Ns0blOZo 0 7 547 3649 2574 14 Dtool_Ns0blOZo 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
603 14 Dtool_Ns0bz_MF 0 7 547 3649 2574 14 Dtool_Ns0bz_MF 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
604 14 Dtool_Ns0b3sup 0 7 548 3649 2574 14 Dtool_Ns0b3sup 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
605 14 Dtool_Ns0bYM3h 0 7 548 3649 2574 14 Dtool_Ns0bYM3h 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
606 14 Dtool_Ns0bn621 0 7 549 3649 2574 14 Dtool_Ns0bn621 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
607 14 Dtool_Ns0boQbv 0 7 549 3649 2574 14 Dtool_Ns0boQbv 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
608 14 Dtool_Ns0b5s4e 0 7 550 3649 2574 14 Dtool_Ns0b5s4e 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
609 14 Dtool_Ns0bjBqg 0 7 550 3649 2574 14 Dtool_Ns0bjBqg 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
610 14 Dtool_Ns0bvT2J 0 7 551 3649 2574 14 Dtool_Ns0bvT2J 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
611 14 Dtool_Ns0b1_pL 0 7 551 3649 2574 14 Dtool_Ns0b1_pL 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
612 14 Dtool_Ns0bxPd_ 0 7 552 3649 2574 14 Dtool_Ns0bxPd_ 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
613 14 Dtool_Ns0bUzPA 0 7 552 3649 2574 14 Dtool_Ns0bUzPA 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
614 14 Dtool_Ns0bhSqR 0 7 553 3649 2574 14 Dtool_Ns0bhSqR 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 4 5 right 1 3597  3 fwd 1 3597  2 up 1 3597  2 cs 1 3555  
615 14 Dtool_Ns0bUW9c 0 7 553 3649 2574 14 Dtool_Ns0bUW9c 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 3 5 right 1 3597  3 fwd 1 3597  2 up 1 3597  
616 14 Dtool_Ns0bfg_v 0 4 554 3599 0 14 Dtool_Ns0bfg_v 0 3 4 this 3 3650  3 out 1 3607  10 class_name 1 3602  
617 14 Dtool_Ns0bg4QZ 0 7 555 3614 0 14 Dtool_Ns0bg4QZ 0 0 
618 14 Dtool_Ns0bDyhn 0 7 558 3652 2608 14 Dtool_Ns0bDyhn 228 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
619 14 Dtool_Ns0b_LFS 0 7 558 3652 2608 14 Dtool_Ns0b_LFS 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3616  1 z 1 3618  
620 14 Dtool_Ns0bvfOH 0 7 558 3652 2608 14 Dtool_Ns0bvfOH 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3644  
621 14 Dtool_Ns0bvhGS 0 7 558 3652 2608 14 Dtool_Ns0bvhGS 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3618  
622 14 Dtool_Ns0b_Wm1 0 7 558 3652 2608 14 Dtool_Ns0b_Wm1 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3618  1 y 1 3618  1 z 1 3618  
623 14 Dtool_Ns0bzYfy 0 6 559 3652 0 14 Dtool_Ns0bzYfy 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3652  4 copy 1 3644  
624 14 Dtool_Ns0bpe8O 0 6 559 3652 0 14 Dtool_Ns0bpe8O 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3652  10 fill_value 1 3618  
625 14 Dtool_Ns0bGUhb 0 6 560 3600 0 14 Dtool_Ns0bGUhb 0 2 4 this 3 3653  9 attr_name 1 3602  
626 14 Dtool_Ns0bMrOT 0 6 561 3603 0 14 Dtool_Ns0bMrOT 0 3 4 this 3 3652  9 attr_name 1 3602  6 assign 1 3600  
627 14 Dtool_Ns0b3lRk 0 6 562 3653 0 14 Dtool_Ns0b3lRk 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
628 14 Dtool_Ns0bp3Z5 0 6 563 3653 0 14 Dtool_Ns0bp3Z5 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
629 14 Dtool_Ns0bpbR_ 0 6 564 3653 0 14 Dtool_Ns0bpbR_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
630 14 Dtool_Ns0bo_KD 0 6 565 3653 0 14 Dtool_Ns0bo_KD 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
631 14 Dtool_Ns0bUj_9 0 7 566 3625 2258 14 Dtool_Ns0bUj_9 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3653  
632 14 Dtool_Ns0bVP4C 0 7 567 3625 2258 14 Dtool_Ns0bVP4C 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3653  
633 14 Dtool_Ns0bt_BD 0 7 568 3625 2258 14 Dtool_Ns0bt_BD 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3653  
634 14 Dtool_Ns0bPtNF 0 7 569 3652 2608 14 Dtool_Ns0bPtNF 0 1 4 this 3 3653  
635 14 Dtool_Ns0bhqqm 0 7 570 3643 2403 14 Dtool_Ns0bhqqm 0 2 4 this 3 3653  5 other 1 3644  
636 14 Dtool_Ns0bzxUB 0 7 570 3652 2608 14 Dtool_Ns0bzxUB 0 2 4 this 3 3653  5 other 1 3653  
637 14 Dtool_Ns0bBpRn 0 7 571 3643 2403 14 Dtool_Ns0bBpRn 0 2 4 this 3 3653  5 other 1 3644  
638 14 Dtool_Ns0bTs7B 0 7 571 3652 2608 14 Dtool_Ns0bTs7B 0 2 4 this 3 3653  5 other 1 3653  
639 14 Dtool_Ns0bPzz8 0 7 572 3652 2608 14 Dtool_Ns0bPzz8 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3653  5 other 1 3644  
640 14 Dtool_Ns0biGg1 0 7 573 3652 2608 14 Dtool_Ns0biGg1 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3653  4 onto 1 3644  
641 14 Dtool_Ns0b_6Zy 0 6 574 3618 0 14 Dtool_Ns0b_6Zy 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3653  5 other 1 3653  
642 14 Dtool_Ns0blnWj 0 6 575 3618 0 14 Dtool_Ns0blnWj 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3653  5 other 1 3653  
643 14 Dtool_Ns0bI_w4 0 6 576 3618 0 14 Dtool_Ns0bI_w4 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3653  5 other 1 3653  3 ref 1 3653  
644 14 Dtool_Ns0blWg1 0 6 577 3618 0 14 Dtool_Ns0blWg1 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3653  5 other 1 3653  3 ref 1 3653  
645 14 Dtool_Ns0bl1PE 0 6 578 3618 0 14 Dtool_Ns0bl1PE 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3653  5 other 1 3653  
646 14 Dtool_Ns0bZkXK 0 6 579 3618 0 14 Dtool_Ns0bZkXK 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3653  5 other 1 3653  
647 14 Dtool_Ns0b_54j 0 7 580 3652 2608 14 Dtool_Ns0b_54j 0 2 4 this 3 3653  6 scalar 1 3618  
648 14 Dtool_Ns0buQal 0 7 581 3652 2608 14 Dtool_Ns0buQal 0 2 4 this 3 3653  6 scalar 1 3618  
649 14 Dtool_Ns0b8N5k 0 7 582 3652 2608 14 Dtool_Ns0b8N5k 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
650 14 Dtool_Ns0bI8sB 0 7 582 3652 2608 14 Dtool_Ns0bI8sB 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
651 14 Dtool_Ns0bQtOm 0 7 583 3652 2608 14 Dtool_Ns0bQtOm 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
652 14 Dtool_Ns0bxMXe 0 7 583 3652 2608 14 Dtool_Ns0bxMXe 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
653 14 Dtool_Ns0b8FXy 0 7 584 3652 2608 14 Dtool_Ns0b8FXy 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
654 14 Dtool_Ns0bPT7r 0 7 584 3652 2608 14 Dtool_Ns0bPT7r 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
655 14 Dtool_Ns0bgtYb 0 7 585 3652 2608 14 Dtool_Ns0bgtYb 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
656 14 Dtool_Ns0bKBKd 0 7 585 3652 2608 14 Dtool_Ns0bKBKd 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
657 14 Dtool_Ns0b2UWG 0 7 586 3652 2608 14 Dtool_Ns0b2UWG 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
658 14 Dtool_Ns0bcxJI 0 7 586 3652 2608 14 Dtool_Ns0bcxJI 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
659 14 Dtool_Ns0bWP96 0 7 587 3652 2608 14 Dtool_Ns0bWP96 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
660 14 Dtool_Ns0bMyv8 0 7 587 3652 2608 14 Dtool_Ns0bMyv8 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
661 14 Dtool_Ns0buPAa 0 7 588 3652 2608 14 Dtool_Ns0buPAa 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 4 5 right 1 3618  3 fwd 1 3618  2 up 1 3618  2 cs 1 3555  
662 14 Dtool_Ns0bnVMh 0 7 588 3652 2608 14 Dtool_Ns0bnVMh 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 3 5 right 1 3618  3 fwd 1 3618  2 up 1 3618  
663 14 Dtool_Ns0b2jes 0 4 589 3599 0 14 Dtool_Ns0b2jes 0 3 4 this 3 3653  3 out 1 3607  10 class_name 1 3602  
664 14 Dtool_Ns0bH5wV 0 7 590 3614 0 14 Dtool_Ns0bH5wV 0 0 
665 14 Dtool_Ns0b30Tw 0 7 593 3655 2635 14 Dtool_Ns0b30Tw 228 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
666 14 Dtool_Ns0bEcgh 0 7 593 3655 2635 14 Dtool_Ns0bEcgh 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3620  1 z 1 3603  
667 14 Dtool_Ns0bCHGW 0 7 593 3655 2635 14 Dtool_Ns0bCHGW 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3647  
668 14 Dtool_Ns0byYJ6 0 7 593 3655 2635 14 Dtool_Ns0byYJ6 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3603  
669 14 Dtool_Ns0bd32R 0 7 593 3655 2635 14 Dtool_Ns0bd32R 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3603  1 y 1 3603  1 z 1 3603  
670 14 Dtool_Ns0bW5he 0 6 594 3655 0 14 Dtool_Ns0bW5he 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3655  4 copy 1 3647  
671 14 Dtool_Ns0b5_uf 0 6 594 3655 0 14 Dtool_Ns0b5_uf 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3655  10 fill_value 1 3603  
672 14 Dtool_Ns0boWRE 0 6 595 3600 0 14 Dtool_Ns0boWRE 0 2 4 this 3 3656  9 attr_name 1 3602  
673 14 Dtool_Ns0bvo_7 0 6 596 3603 0 14 Dtool_Ns0bvo_7 0 3 4 this 3 3655  9 attr_name 1 3602  6 assign 1 3600  
674 14 Dtool_Ns0bRjBN 0 6 597 3656 0 14 Dtool_Ns0bRjBN 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
675 14 Dtool_Ns0bPoJi 0 6 598 3656 0 14 Dtool_Ns0bPoJi 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
676 14 Dtool_Ns0bPEBn 0 6 599 3656 0 14 Dtool_Ns0bPEBn 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
677 14 Dtool_Ns0bPg6r 0 6 600 3656 0 14 Dtool_Ns0bPg6r 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
678 14 Dtool_Ns0b6kvm 0 7 601 3628 2273 14 Dtool_Ns0b6kvm 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3656  
679 14 Dtool_Ns0b6Ior 0 7 602 3628 2273 14 Dtool_Ns0b6Ior 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3656  
680 14 Dtool_Ns0bC4xr 0 7 603 3628 2273 14 Dtool_Ns0bC4xr 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3656  
681 14 Dtool_Ns0bQv9t 0 7 604 3655 2635 14 Dtool_Ns0bQv9t 0 1 4 this 3 3656  
682 14 Dtool_Ns0bKErS 0 7 605 3646 2476 14 Dtool_Ns0bKErS 0 2 4 this 3 3656  5 other 1 3647  
683 14 Dtool_Ns0bSyLw 0 7 605 3655 2635 14 Dtool_Ns0bSyLw 0 2 4 this 3 3656  5 other 1 3656  
684 14 Dtool_Ns0bqHST 0 7 606 3646 2476 14 Dtool_Ns0bqHST 0 2 4 this 3 3656  5 other 1 3647  
685 14 Dtool_Ns0by1ww 0 7 606 3655 2635 14 Dtool_Ns0by1ww 0 2 4 this 3 3656  5 other 1 3656  
686 14 Dtool_Ns0bTBMH 0 7 607 3655 2635 14 Dtool_Ns0bTBMH 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3656  5 other 1 3647  
687 14 Dtool_Ns0b8QaY 0 7 608 3655 2635 14 Dtool_Ns0b8QaY 0 2 4 this 3 3656  6 scalar 1 3603  
688 14 Dtool_Ns0bMI8Z 0 7 609 3655 2635 14 Dtool_Ns0bMI8Z 0 2 4 this 3 3656  6 scalar 1 3603  
689 14 Dtool_Ns0bePpN 0 7 610 3655 2635 14 Dtool_Ns0bePpN 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
690 14 Dtool_Ns0bp_cq 0 7 610 3655 2635 14 Dtool_Ns0bp_cq 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
691 14 Dtool_Ns0byr_O 0 7 611 3655 2635 14 Dtool_Ns0byr_O 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
692 14 Dtool_Ns0bfNHH 0 7 611 3655 2635 14 Dtool_Ns0bfNHH 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
693 14 Dtool_Ns0bi7Gb 0 7 612 3655 2635 14 Dtool_Ns0bi7Gb 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
694 14 Dtool_Ns0btRrU 0 7 612 3655 2635 14 Dtool_Ns0btRrU 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
695 14 Dtool_Ns0bCjIE 0 7 613 3655 2635 14 Dtool_Ns0bCjIE 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
696 14 Dtool_Ns0bkG6F 0 7 613 3655 2635 14 Dtool_Ns0bkG6F 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
697 14 Dtool_Ns0bVTGv 0 7 614 3655 2635 14 Dtool_Ns0bVTGv 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
698 14 Dtool_Ns0bz_5w 0 7 614 3655 2635 14 Dtool_Ns0bz_5w 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
699 14 Dtool_Ns0b0Otj 0 7 615 3655 2635 14 Dtool_Ns0b0Otj 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
700 14 Dtool_Ns0bqzfl 0 7 615 3655 2635 14 Dtool_Ns0bqzfl 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
701 14 Dtool_Ns0b9XC0 0 7 616 3655 2635 14 Dtool_Ns0b9XC0 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 4 5 right 1 3603  3 fwd 1 3603  2 up 1 3603  2 cs 1 3555  
702 14 Dtool_Ns0bS9Qt 0 7 616 3655 2635 14 Dtool_Ns0bS9Qt 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 3 5 right 1 3603  3 fwd 1 3603  2 up 1 3603  
703 14 Dtool_Ns0bQhOV 0 4 617 3599 0 14 Dtool_Ns0bQhOV 0 3 4 this 3 3656  3 out 1 3607  10 class_name 1 3602  
704 14 Dtool_Ns0bm_g_ 0 7 618 3614 0 14 Dtool_Ns0bm_g_ 0 0 
705 14 Dtool_Ns0bz3Qe 0 7 621 3658 2658 14 Dtool_Ns0bz3Qe 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
706 14 Dtool_Ns0bL4E1 0 7 621 3658 2658 14 Dtool_Ns0bL4E1 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3595  1 z 1 3597  
707 14 Dtool_Ns0bb_6E 0 7 621 3658 2658 14 Dtool_Ns0bb_6E 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3641  
708 14 Dtool_Ns0bCO2W 0 7 621 3658 2658 14 Dtool_Ns0bCO2W 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3597  
709 14 Dtool_Ns0bMxu6 0 7 621 3658 2658 14 Dtool_Ns0bMxu6 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3597  1 y 1 3597  1 z 1 3597  
710 14 Dtool_Ns0bJ6xP 0 6 622 3658 0 14 Dtool_Ns0bJ6xP 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3658  4 copy 1 3641  
711 14 Dtool_Ns0bqkxL 0 6 622 3658 0 14 Dtool_Ns0bqkxL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3658  10 fill_value 1 3597  
712 14 Dtool_Ns0bPEjO 0 6 623 3600 0 14 Dtool_Ns0bPEjO 0 2 4 this 3 3659  9 attr_name 1 3602  
713 14 Dtool_Ns0bBBQ2 0 6 624 3603 0 14 Dtool_Ns0bBBQ2 0 3 4 this 3 3658  9 attr_name 1 3602  6 assign 1 3600  
714 14 Dtool_Ns0bqu74 0 6 625 3659 0 14 Dtool_Ns0bqu74 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
715 14 Dtool_Ns0bCPkF 0 6 626 3659 0 14 Dtool_Ns0bCPkF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
716 14 Dtool_Ns0baeuF 0 6 627 3659 0 14 Dtool_Ns0baeuF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
717 14 Dtool_Ns0bSp3F 0 6 628 3659 0 14 Dtool_Ns0bSp3F 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
718 14 Dtool_Ns0bxis3 0 7 629 3631 2289 14 Dtool_Ns0bxis3 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3659  
719 14 Dtool_Ns0bpT23 0 7 630 3631 2289 14 Dtool_Ns0bpT23 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3659  
720 14 Dtool_Ns0bLH2n 0 7 631 3631 2289 14 Dtool_Ns0bLH2n 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3659  
721 14 Dtool_Ns0b0M7V 0 7 632 3658 2658 14 Dtool_Ns0b0M7V 0 1 4 this 3 3659  
722 14 Dtool_Ns0b_4Xx 0 7 633 3640 2330 14 Dtool_Ns0b_4Xx 0 2 4 this 3 3659  5 other 1 3641  
723 14 Dtool_Ns0bg12J 0 7 633 3658 2658 14 Dtool_Ns0bg12J 0 2 4 this 3 3659  5 other 1 3650  
724 14 Dtool_Ns0bSFwU 0 7 634 3649 2574 14 Dtool_Ns0bSFwU 0 2 4 this 3 3659  5 other 1 3659  
725 14 Dtool_Ns0bBLZx 0 7 634 3640 2330 14 Dtool_Ns0bBLZx 0 2 4 this 3 3659  5 other 1 3641  
726 14 Dtool_Ns0bfn3J 0 7 634 3658 2658 14 Dtool_Ns0bfn3J 0 2 4 this 3 3659  5 other 1 3650  
727 14 Dtool_Ns0b3m20 0 7 635 3658 2658 14 Dtool_Ns0b3m20 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  5 other 1 3641  
728 14 Dtool_Ns0bPmL9 0 7 636 3658 2658 14 Dtool_Ns0bPmL9 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  4 onto 1 3641  
729 14 Dtool_Ns0bUCf8 0 7 637 3658 2658 14 Dtool_Ns0bUCf8 0 2 4 this 3 3659  6 scalar 1 3597  
730 14 Dtool_Ns0brOic 0 7 638 3658 2658 14 Dtool_Ns0brOic 0 2 4 this 3 3659  6 scalar 1 3597  
731 14 Dtool_Ns0bVRyH 0 6 639 3659 0 14 Dtool_Ns0bVRyH 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
732 14 Dtool_Ns0bM16_ 0 6 639 3659 0 14 Dtool_Ns0bM16_ 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
733 14 Dtool_Ns0bkaIy 0 7 640 3658 2658 14 Dtool_Ns0bkaIy 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 3597  3 fwd 1 3597  2 up 1 3597  2 cs 1 3555  
734 14 Dtool_Ns0b2tjk 0 7 640 3658 2658 14 Dtool_Ns0b2tjk 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 3597  3 fwd 1 3597  2 up 1 3597  
735 14 Dtool_Ns0bFpCv 0 4 641 3599 0 14 Dtool_Ns0bFpCv 0 3 4 this 3 3659  3 out 1 3607  10 class_name 1 3602  
736 14 Dtool_Ns0bnkbU 0 7 642 3614 0 14 Dtool_Ns0bnkbU 0 0 
737 14 Dtool_Ns0bt3tX 0 7 645 3661 2681 14 Dtool_Ns0bt3tX 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
738 14 Dtool_Ns0b9DSo 0 7 645 3661 2681 14 Dtool_Ns0b9DSo 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3616  1 z 1 3618  
739 14 Dtool_Ns0bSkXG 0 7 645 3661 2681 14 Dtool_Ns0bSkXG 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3644  
740 14 Dtool_Ns0b3ZYu 0 7 645 3661 2681 14 Dtool_Ns0b3ZYu 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3618  
741 14 Dtool_Ns0bk1qU 0 7 645 3661 2681 14 Dtool_Ns0bk1qU 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3618  1 y 1 3618  1 z 1 3618  
742 14 Dtool_Ns0bLoO_ 0 6 646 3661 0 14 Dtool_Ns0bLoO_ 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3661  4 copy 1 3644  
743 14 Dtool_Ns0bMIGK 0 6 646 3661 0 14 Dtool_Ns0bMIGK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3661  10 fill_value 1 3618  
744 14 Dtool_Ns0bOEcA 0 6 647 3600 0 14 Dtool_Ns0bOEcA 0 2 4 this 3 3662  9 attr_name 1 3602  
745 14 Dtool_Ns0beBJo 0 6 648 3603 0 14 Dtool_Ns0beBJo 0 3 4 this 3 3661  9 attr_name 1 3602  6 assign 1 3600  
746 14 Dtool_Ns0bru0q 0 6 649 3662 0 14 Dtool_Ns0bru0q 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
747 14 Dtool_Ns0bAPd3 0 6 650 3662 0 14 Dtool_Ns0bAPd3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
748 14 Dtool_Ns0bYen3 0 6 651 3662 0 14 Dtool_Ns0bYen3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
749 14 Dtool_Ns0bQpw3 0 6 652 3662 0 14 Dtool_Ns0bQpw3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
750 14 Dtool_Ns0bOilp 0 7 653 3634 2305 14 Dtool_Ns0bOilp 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3662  
751 14 Dtool_Ns0bWTvp 0 7 654 3634 2305 14 Dtool_Ns0bWTvp 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3662  
752 14 Dtool_Ns0bIHvZ 0 7 655 3634 2305 14 Dtool_Ns0bIHvZ 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3662  
753 14 Dtool_Ns0b1M0H 0 7 656 3661 2681 14 Dtool_Ns0b1M0H 0 1 4 this 3 3662  
754 14 Dtool_Ns0b9u0g 0 7 657 3643 2403 14 Dtool_Ns0b9u0g 0 2 4 this 3 3662  5 other 1 3644  
755 14 Dtool_Ns0b6tq7 0 7 657 3661 2681 14 Dtool_Ns0b6tq7 0 2 4 this 3 3662  5 other 1 3653  
756 14 Dtool_Ns0bHBoO 0 7 658 3652 2608 14 Dtool_Ns0bHBoO 0 2 4 this 3 3662  5 other 1 3662  
757 14 Dtool_Ns0bC51g 0 7 658 3643 2403 14 Dtool_Ns0bC51g 0 2 4 this 3 3662  5 other 1 3644  
758 14 Dtool_Ns0b9fr7 0 7 658 3661 2681 14 Dtool_Ns0b9fr7 0 2 4 this 3 3662  5 other 1 3653  
759 14 Dtool_Ns0bwvhl 0 7 659 3661 2681 14 Dtool_Ns0bwvhl 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3662  5 other 1 3644  
760 14 Dtool_Ns0bjmUN 0 7 660 3661 2681 14 Dtool_Ns0bjmUN 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3662  4 onto 1 3644  
761 14 Dtool_Ns0brZwG 0 7 661 3661 2681 14 Dtool_Ns0brZwG 0 2 4 this 3 3662  6 scalar 1 3618  
762 14 Dtool_Ns0b6cym 0 7 662 3661 2681 14 Dtool_Ns0b6cym 0 2 4 this 3 3662  6 scalar 1 3618  
763 14 Dtool_Ns0bXRr5 0 6 663 3662 0 14 Dtool_Ns0bXRr5 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
764 14 Dtool_Ns0bN1zx 0 6 663 3662 0 14 Dtool_Ns0bN1zx 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
765 14 Dtool_Ns0bx8Y0 0 7 664 3661 2681 14 Dtool_Ns0bx8Y0 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 3618  3 fwd 1 3618  2 up 1 3618  2 cs 1 3555  
766 14 Dtool_Ns0bs_qG 0 7 664 3661 2681 14 Dtool_Ns0bs_qG 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 3618  3 fwd 1 3618  2 up 1 3618  
767 14 Dtool_Ns0bEp7g 0 4 665 3599 0 14 Dtool_Ns0bEp7g 0 3 4 this 3 3662  3 out 1 3607  10 class_name 1 3602  
768 14 Dtool_Ns0bmkUG 0 7 666 3614 0 14 Dtool_Ns0bmkUG 0 0 
769 14 Dtool_Ns0b8XFo 0 7 669 3664 2703 14 Dtool_Ns0b8XFo 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
770 14 Dtool_Ns0bpsqB 0 7 669 3664 2703 14 Dtool_Ns0bpsqB 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3620  1 z 1 3603  
771 14 Dtool_Ns0bpsvi 0 7 669 3664 2703 14 Dtool_Ns0bpsvi 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3647  
772 14 Dtool_Ns0bX_xA 0 7 669 3664 2703 14 Dtool_Ns0bX_xA 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3603  
773 14 Dtool_Ns0bTdST 0 7 669 3664 2703 14 Dtool_Ns0bTdST 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3603  1 y 1 3603  1 z 1 3603  
774 14 Dtool_Ns0bPnmI 0 6 670 3664 0 14 Dtool_Ns0bPnmI 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3664  4 copy 1 3647  
775 14 Dtool_Ns0bPNos 0 6 670 3664 0 14 Dtool_Ns0bPNos 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3664  10 fill_value 1 3603  
776 14 Dtool_Ns0bNktD 0 6 671 3600 0 14 Dtool_Ns0bNktD 0 2 4 this 3 3665  9 attr_name 1 3602  
777 14 Dtool_Ns0bDhar 0 6 672 3603 0 14 Dtool_Ns0bDhar 0 3 4 this 3 3664  9 attr_name 1 3602  6 assign 1 3600  
778 14 Dtool_Ns0bkOFu 0 6 673 3665 0 14 Dtool_Ns0bkOFu 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
779 14 Dtool_Ns0bDvu6 0 6 674 3665 0 14 Dtool_Ns0bDvu6 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
780 14 Dtool_Ns0bb_46 0 6 675 3665 0 14 Dtool_Ns0bb_46 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
781 14 Dtool_Ns0bTJC7 0 6 676 3665 0 14 Dtool_Ns0bTJC7 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
782 14 Dtool_Ns0bzC3s 0 7 677 3637 2320 14 Dtool_Ns0bzC3s 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3665  
783 14 Dtool_Ns0brzAt 0 7 678 3637 2320 14 Dtool_Ns0brzAt 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3665  
784 14 Dtool_Ns0bNnAd 0 7 679 3637 2320 14 Dtool_Ns0bNnAd 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3665  
785 14 Dtool_Ns0bKsFL 0 7 680 3664 2703 14 Dtool_Ns0bKsFL 0 1 4 this 3 3665  
786 14 Dtool_Ns0b4tMq 0 7 681 3646 2476 14 Dtool_Ns0b4tMq 0 2 4 this 3 3665  5 other 1 3647  
787 14 Dtool_Ns0b7_I_ 0 7 681 3664 2703 14 Dtool_Ns0b7_I_ 0 2 4 this 3 3665  5 other 1 3656  
788 14 Dtool_Ns0bt36d 0 7 682 3655 2635 14 Dtool_Ns0bt36d 0 2 4 this 3 3665  5 other 1 3665  
789 14 Dtool_Ns0bH8Nq 0 7 682 3646 2476 14 Dtool_Ns0bH8Nq 0 2 4 this 3 3665  5 other 1 3647  
790 14 Dtool_Ns0bwoJ_ 0 7 682 3664 2703 14 Dtool_Ns0bwoJ_ 0 2 4 this 3 3665  5 other 1 3656  
791 14 Dtool_Ns0bV42r 0 7 683 3664 2703 14 Dtool_Ns0bV42r 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  5 other 1 3647  
792 14 Dtool_Ns0bwZZ4 0 7 684 3664 2703 14 Dtool_Ns0bwZZ4 0 2 4 this 3 3665  6 scalar 1 3603  
793 14 Dtool_Ns0beebY 0 7 685 3664 2703 14 Dtool_Ns0beebY 0 2 4 this 3 3665  6 scalar 1 3603  
794 14 Dtool_Ns0bUx98 0 6 686 3665 0 14 Dtool_Ns0bUx98 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3555  
795 14 Dtool_Ns0bOVE1 0 6 686 3665 0 14 Dtool_Ns0bOVE1 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
796 14 Dtool_Ns0bShPP 0 7 687 3664 2703 14 Dtool_Ns0bShPP 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 3603  3 fwd 1 3603  2 up 1 3603  2 cs 1 3555  
797 14 Dtool_Ns0brQFh 0 7 687 3664 2703 14 Dtool_Ns0brQFh 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 3603  3 fwd 1 3603  2 up 1 3603  
798 14 Dtool_Ns0bDJMk 0 4 688 3599 0 14 Dtool_Ns0bDJMk 0 3 4 this 3 3665  3 out 1 3607  10 class_name 1 3602  
799 14 Dtool_Ns0bpElJ 0 7 689 3614 0 14 Dtool_Ns0bpElJ 0 0 
800 14 Dtool_Ns0b5kRY 0 7 692 3667 2714 14 Dtool_Ns0b5kRY 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
801 14 Dtool_Ns0b1zsc 0 7 692 3667 2714 14 Dtool_Ns0b1zsc 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3641  1 w 1 3597  
802 14 Dtool_Ns0bdTtd 0 7 692 3667 2714 14 Dtool_Ns0bdTtd 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3668  
803 14 Dtool_Ns0baF0L 0 7 692 3667 2714 14 Dtool_Ns0baF0L 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3670  
804 14 Dtool_Ns0bity7 0 7 692 3667 2714 14 Dtool_Ns0bity7 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3597  
805 14 Dtool_Ns0bDRvG 0 7 692 3667 2714 14 Dtool_Ns0bDRvG 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3597  1 y 1 3597  1 z 1 3597  1 w 1 3597  
806 14 Dtool_Ns0bXuCG 0 6 693 3667 0 14 Dtool_Ns0bXuCG 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  4 copy 1 3668  
807 14 Dtool_Ns0bURI0 0 6 693 3667 0 14 Dtool_Ns0bURI0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  4 copy 1 3670  
808 14 Dtool_Ns0bGYHk 0 6 693 3667 0 14 Dtool_Ns0bGYHk 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  10 fill_value 1 3597  
809 14 Dtool_Ns0bYOHd 0 4 694 3599 0 14 Dtool_Ns0bYOHd 0 2 4 this 3 3667  4 size 1 3598  
810 14 Dtool_Ns0bmHPT 0 6 697 3668 0 14 Dtool_Ns0bmHPT 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
811 14 Dtool_Ns0bxCF3 0 6 698 3668 0 14 Dtool_Ns0bxCF3 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
812 14 Dtool_Ns0bMdTT 0 6 699 3668 0 14 Dtool_Ns0bMdTT 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
813 14 Dtool_Ns0bOdhv 0 6 700 3668 0 14 Dtool_Ns0bOdhv 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
814 14 Dtool_Ns0b3C3a 0 6 701 3668 0 14 Dtool_Ns0b3C3a 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
815 14 Dtool_Ns0bEu1A 0 6 703 3600 0 14 Dtool_Ns0bEu1A 0 1 4 this 3 3668  
816 14 Dtool_Ns0b_QT_ 0 6 704 3600 0 14 Dtool_Ns0b_QT_ 0 2 4 this 3 3668  9 attr_name 1 3602  
817 14 Dtool_Ns0bAGF2 0 6 705 3603 0 14 Dtool_Ns0bAGF2 0 3 4 this 3 3667  9 attr_name 1 3602  6 assign 1 3600  
818 14 Dtool_Ns0bBy34 0 4 706 3599 0 14 Dtool_Ns0bBy34 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  1 i 1 3603  
819 14 Dtool_Ns0bTrrV 0 6 706 3597 0 14 Dtool_Ns0bTrrV 0 2 4 this 3 3668  1 i 1 3603  
820 14 Dtool_Ns0bWM5I 0 4 707 3599 0 14 Dtool_Ns0bWM5I 0 3 4 this 3 3667  1 i 1 3603  1 v 1 3597  
821 14 Dtool_Ns0b3Z_8 0 6 708 3603 0 14 Dtool_Ns0b3Z_8 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
822 14 Dtool_Ns0bx62D 0 6 709 3604 0 14 Dtool_Ns0bx62D 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
823 14 Dtool_Ns0bd_Pp 0 6 710 3597 0 14 Dtool_Ns0bd_Pp 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  1 i 1 3603  
824 14 Dtool_Ns0bJYvU 0 6 711 3597 0 14 Dtool_Ns0bJYvU 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
825 14 Dtool_Ns0bJ8oZ 0 6 712 3597 0 14 Dtool_Ns0bJ8oZ 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
826 14 Dtool_Ns0bJQge 0 6 713 3597 0 14 Dtool_Ns0bJQge 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
827 14 Dtool_Ns0bJE3P 0 6 714 3597 0 14 Dtool_Ns0bJE3P 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
828 14 Dtool_Ns0bAQHX 0 4 715 3599 0 14 Dtool_Ns0bAQHX 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3667  1 i 1 3603  5 value 1 3597  
829 14 Dtool_Ns0bJuJp 0 4 716 3599 0 14 Dtool_Ns0bJuJp 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  5 value 1 3597  
830 14 Dtool_Ns0bJKCu 0 4 717 3599 0 14 Dtool_Ns0bJKCu 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  5 value 1 3597  
831 14 Dtool_Ns0bJW6y 0 4 718 3599 0 14 Dtool_Ns0bJW6y 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  5 value 1 3597  
832 14 Dtool_Ns0bJCRk 0 4 719 3599 0 14 Dtool_Ns0bJCRk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  5 value 1 3597  
833 14 Dtool_Ns0bzyHW 0 4 720 3599 0 14 Dtool_Ns0bzyHW 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3667  1 i 1 3603  5 value 1 3597  
834 14 Dtool_Ns0bmmmn 0 4 721 3599 0 14 Dtool_Ns0bmmmn 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  5 value 1 3597  
835 14 Dtool_Ns0bmCfs 0 4 722 3599 0 14 Dtool_Ns0bmCfs 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  5 value 1 3597  
836 14 Dtool_Ns0bmuXx 0 4 723 3599 0 14 Dtool_Ns0bmuXx 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  5 value 1 3597  
837 14 Dtool_Ns0bmaui 0 4 724 3599 0 14 Dtool_Ns0bmaui 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  5 value 1 3597  
838 14 Dtool_Ns0bXRyH 0 4 725 3599 0 14 Dtool_Ns0bXRyH 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
839 14 Dtool_Ns0b0F36 0 6 726 3603 0 14 Dtool_Ns0b0F36 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
840 14 Dtool_Ns0bW1HJ 0 4 727 3599 0 14 Dtool_Ns0bW1HJ 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  10 fill_value 1 3597  
841 14 Dtool_Ns0b__rX 0 4 728 3599 0 14 Dtool_Ns0b__rX 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3667  1 x 1 3597  1 y 1 3597  1 z 1 3597  1 w 1 3597  
842 14 Dtool_Ns0b2052 0 6 729 3597 0 14 Dtool_Ns0b2052 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  5 other 1 3668  
843 14 Dtool_Ns0bxUcf 0 6 730 3597 0 14 Dtool_Ns0bxUcf 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
844 14 Dtool_Ns0b0Yo_ 0 6 731 3597 0 14 Dtool_Ns0b0Yo_ 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
845 14 Dtool_Ns0bSsCV 0 6 732 3604 0 14 Dtool_Ns0bSsCV 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3667  
846 14 Dtool_Ns0bMsWY 0 7 733 3667 2714 14 Dtool_Ns0bMsWY 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  4 onto 1 3668  
847 14 Dtool_Ns0bxlvx 0 6 734 3604 0 14 Dtool_Ns0bxlvx 0 2 4 this 3 3668  5 other 1 3668  
848 14 Dtool_Ns0bauYz 0 6 735 3604 0 14 Dtool_Ns0bauYz 0 2 4 this 3 3668  5 other 1 3668  
849 14 Dtool_Ns0bmNAi 0 6 736 3604 0 14 Dtool_Ns0bmNAi 0 2 4 this 3 3668  5 other 1 3668  
850 14 Dtool_Ns0btXnx 0 6 737 3603 0 14 Dtool_Ns0btXnx 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  5 other 1 3668  
851 14 Dtool_Ns0bIZYW 0 6 737 3603 0 14 Dtool_Ns0bIZYW 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3668  5 other 1 3668  9 threshold 1 3597  
852 14 Dtool_Ns0bdiZ0 0 6 738 3598 0 14 Dtool_Ns0bdiZ0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3668  
853 14 Dtool_Ns0bzn_6 0 6 738 3598 0 14 Dtool_Ns0bzn_6 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  9 threshold 1 3597  
854 14 Dtool_Ns0br3PD 0 6 739 3598 0 14 Dtool_Ns0br3PD 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  4 hash 1 3598  
855 14 Dtool_Ns0bNEBo 0 6 739 3598 0 14 Dtool_Ns0bNEBo 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3668  4 hash 1 3598  9 threshold 1 3597  
856 14 Dtool_Ns0b1RZF 0 4 740 3599 0 14 Dtool_Ns0b1RZF 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  7 hashgen 1 3605  
857 14 Dtool_Ns0b9JVR 0 4 740 3599 0 14 Dtool_Ns0b9JVR 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3668  7 hashgen 1 3605  9 threshold 1 3597  
858 14 Dtool_Ns0bPOux 0 7 741 3667 2714 14 Dtool_Ns0bPOux 0 1 4 this 3 3668  
859 14 Dtool_Ns0bztwL 0 7 742 3667 2714 14 Dtool_Ns0bztwL 0 2 4 this 3 3668  5 other 1 3668  
860 14 Dtool_Ns0bzdSf 0 7 743 3667 2714 14 Dtool_Ns0bzdSf 0 2 4 this 3 3668  5 other 1 3668  
861 14 Dtool_Ns0breVF 0 7 744 3667 2714 14 Dtool_Ns0breVF 0 2 4 this 3 3668  6 scalar 1 3597  
862 14 Dtool_Ns0br2J2 0 7 745 3667 2714 14 Dtool_Ns0br2J2 0 2 4 this 3 3668  6 scalar 1 3597  
863 14 Dtool_Ns0btr3T 0 6 746 3667 0 14 Dtool_Ns0btr3T 0 2 4 this 3 3667  5 other 1 3668  
864 14 Dtool_Ns0btbZn 0 6 747 3667 0 14 Dtool_Ns0btbZn 0 2 4 this 3 3667  5 other 1 3668  
865 14 Dtool_Ns0b7ZPM 0 6 748 3667 0 14 Dtool_Ns0b7ZPM 0 2 4 this 3 3667  6 scalar 1 3597  
866 14 Dtool_Ns0b7hD9 0 6 749 3667 0 14 Dtool_Ns0b7hD9 0 2 4 this 3 3667  6 scalar 1 3597  
867 14 Dtool_Ns0bDE_K 0 4 750 3599 0 14 Dtool_Ns0bDE_K 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  5 other 1 3668  
868 14 Dtool_Ns0bVJJO 0 7 751 3667 2714 14 Dtool_Ns0bVJJO 0 2 4 this 3 3668  8 exponent 1 3597  
869 14 Dtool_Ns0bKl_G 0 6 752 3600 0 14 Dtool_Ns0bKl_G 0 2 4 this 3 3667  8 exponent 1 3597  
870 14 Dtool_Ns0b6rOm 0 7 753 3667 2714 14 Dtool_Ns0b6rOm 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  5 other 1 3668  
871 14 Dtool_Ns0bUfvk 0 7 754 3667 2714 14 Dtool_Ns0bUfvk 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  5 other 1 3668  
872 14 Dtool_Ns0byKzg 0 6 755 3604 0 14 Dtool_Ns0byKzg 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  5 other 1 3668  
873 14 Dtool_Ns0b__lQ 0 6 755 3604 0 14 Dtool_Ns0b__lQ 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3668  5 other 1 3668  9 threshold 1 3597  
874 14 Dtool_Ns0bQPcK 0 4 756 3599 0 14 Dtool_Ns0bQPcK 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  3 out 1 3607  
875 14 Dtool_Ns0bFM3d 0 4 757 3599 0 14 Dtool_Ns0bFM3d 0 3 4 this 3 3668  3 out 1 3607  10 class_name 1 3602  
876 14 Dtool_Ns0b3_B4 0 4 758 3599 0 14 Dtool_Ns0b3_B4 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  11 destination 1 3609  
877 14 Dtool_Ns0b3Ii0 0 4 759 3599 0 14 Dtool_Ns0b3Ii0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  6 source 1 3611  
878 14 Dtool_Ns0bZM70 0 4 760 3599 0 14 Dtool_Ns0bZM70 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  11 destination 1 3609  
879 14 Dtool_Ns0bec8G 0 4 761 3599 0 14 Dtool_Ns0bec8G 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3667  6 source 1 3611  
880 14 Dtool_Ns0bhKuD 0 7 762 3614 0 14 Dtool_Ns0bhKuD 0 0 
881 14 Dtool_Ns0bfbHX 0 7 764 3672 2784 14 Dtool_Ns0bfbHX 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
882 14 Dtool_Ns0bVhK6 0 7 764 3672 2784 14 Dtool_Ns0bVhK6 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3668  
883 14 Dtool_Ns0bgd2S 0 7 764 3672 2784 14 Dtool_Ns0bgd2S 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3670  
884 14 Dtool_Ns0bl_vc 0 7 764 3672 2784 14 Dtool_Ns0bl_vc 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3597  1 y 1 3597  1 z 1 3597  1 w 1 3597  
885 14 Dtool_Ns0beh2_ 0 6 765 3672 0 14 Dtool_Ns0beh2_ 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  4 copy 1 3668  
886 14 Dtool_Ns0bL5oF 0 6 765 3672 0 14 Dtool_Ns0bL5oF 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  4 copy 1 3670  
887 14 Dtool_Ns0bDDFq 0 4 766 3599 0 14 Dtool_Ns0bDDFq 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3672  1 x 1 3597  1 y 1 3597  1 z 1 3597  1 w 1 3597  
888 14 Dtool_Ns0b_xRe 0 4 767 3599 0 14 Dtool_Ns0b_xRe 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  1 i 1 3603  
889 14 Dtool_Ns0b2P3h 0 6 767 3597 0 14 Dtool_Ns0b2P3h 0 2 4 this 3 3670  1 i 1 3603  
890 14 Dtool_Ns0bU4PA 0 4 768 3599 0 14 Dtool_Ns0bU4PA 0 3 4 this 3 3672  1 i 1 3603  1 v 1 3597  
891 14 Dtool_Ns0btqyW 0 6 769 3603 0 14 Dtool_Ns0btqyW 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
892 14 Dtool_Ns0b7GHI 0 4 770 3599 0 14 Dtool_Ns0b7GHI 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3670  
893 14 Dtool_Ns0bfmbG 0 6 771 3603 0 14 Dtool_Ns0bfmbG 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3670  
894 14 Dtool_Ns0bIBnP 0 7 772 3614 0 14 Dtool_Ns0bIBnP 0 0 
895 14 Dtool_Ns0bfAuU 0 7 775 3673 2795 14 Dtool_Ns0bfAuU 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
896 14 Dtool_Ns0bqJxo 0 7 775 3673 2795 14 Dtool_Ns0bqJxo 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3644  1 w 1 3618  
897 14 Dtool_Ns0bKfrW 0 7 775 3673 2795 14 Dtool_Ns0bKfrW 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3674  
898 14 Dtool_Ns0b6Q3P 0 7 775 3673 2795 14 Dtool_Ns0b6Q3P 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3676  
899 14 Dtool_Ns0b5BJ_ 0 7 775 3673 2795 14 Dtool_Ns0b5BJ_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3618  
900 14 Dtool_Ns0bGENf 0 7 775 3673 2795 14 Dtool_Ns0bGENf 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3618  1 y 1 3618  1 z 1 3618  1 w 1 3618  
901 14 Dtool_Ns0be6iS 0 6 776 3673 0 14 Dtool_Ns0be6iS 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  4 copy 1 3674  
902 14 Dtool_Ns0by8tL 0 6 776 3673 0 14 Dtool_Ns0by8tL 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  4 copy 1 3676  
903 14 Dtool_Ns0bIM_5 0 6 776 3673 0 14 Dtool_Ns0bIM_5 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  10 fill_value 1 3618  
904 14 Dtool_Ns0b26Ht 0 4 777 3599 0 14 Dtool_Ns0b26Ht 0 2 4 this 3 3673  4 size 1 3598  
905 14 Dtool_Ns0bYrPj 0 6 780 3674 0 14 Dtool_Ns0bYrPj 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
906 14 Dtool_Ns0bQxFH 0 6 781 3674 0 14 Dtool_Ns0bQxFH 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
907 14 Dtool_Ns0bSxTj 0 6 782 3674 0 14 Dtool_Ns0bSxTj 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
908 14 Dtool_Ns0bsxh_ 0 6 783 3674 0 14 Dtool_Ns0bsxh_ 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
909 14 Dtool_Ns0bVx3q 0 6 784 3674 0 14 Dtool_Ns0bVx3q 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
910 14 Dtool_Ns0b_k0Q 0 6 786 3600 0 14 Dtool_Ns0b_k0Q 0 1 4 this 3 3674  
911 14 Dtool_Ns0bQeSO 0 6 787 3600 0 14 Dtool_Ns0bQeSO 0 2 4 this 3 3674  9 attr_name 1 3602  
912 14 Dtool_Ns0bhSFG 0 6 788 3603 0 14 Dtool_Ns0bhSFG 0 3 4 this 3 3673  9 attr_name 1 3602  6 assign 1 3600  
913 14 Dtool_Ns0bmm3I 0 4 789 3599 0 14 Dtool_Ns0bmm3I 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  1 i 1 3603  
914 14 Dtool_Ns0b1Hrl 0 6 789 3618 0 14 Dtool_Ns0b1Hrl 0 2 4 this 3 3674  1 i 1 3603  
915 14 Dtool_Ns0bglMR 0 4 790 3599 0 14 Dtool_Ns0bglMR 0 3 4 this 3 3673  1 i 1 3603  1 v 1 3618  
916 14 Dtool_Ns0bWK_M 0 6 791 3603 0 14 Dtool_Ns0bWK_M 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
917 14 Dtool_Ns0bPu2T 0 6 792 3604 0 14 Dtool_Ns0bPu2T 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
918 14 Dtool_Ns0b_qP5 0 6 793 3618 0 14 Dtool_Ns0b_qP5 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  1 i 1 3603  
919 14 Dtool_Ns0brtvk 0 6 794 3618 0 14 Dtool_Ns0brtvk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
920 14 Dtool_Ns0brJop 0 6 795 3618 0 14 Dtool_Ns0brJop 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
921 14 Dtool_Ns0brlgu 0 6 796 3618 0 14 Dtool_Ns0brlgu 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
922 14 Dtool_Ns0brx3f 0 6 797 3618 0 14 Dtool_Ns0brx3f 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
923 14 Dtool_Ns0bf_AA 0 4 798 3599 0 14 Dtool_Ns0bf_AA 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3673  1 i 1 3603  5 value 1 3618  
924 14 Dtool_Ns0bjGFc 0 4 799 3599 0 14 Dtool_Ns0bjGFc 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  5 value 1 3618  
925 14 Dtool_Ns0bji9g 0 4 800 3599 0 14 Dtool_Ns0bji9g 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  5 value 1 3618  
926 14 Dtool_Ns0bje2l 0 4 801 3599 0 14 Dtool_Ns0bje2l 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  5 value 1 3618  
927 14 Dtool_Ns0bjqMX 0 4 802 3599 0 14 Dtool_Ns0bjqMX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  5 value 1 3618  
928 14 Dtool_Ns0bfMae 0 4 803 3599 0 14 Dtool_Ns0bfMae 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3673  1 i 1 3603  5 value 1 3618  
929 14 Dtool_Ns0bARia 0 4 804 3599 0 14 Dtool_Ns0bARia 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  5 value 1 3618  
930 14 Dtool_Ns0bA1af 0 4 805 3599 0 14 Dtool_Ns0bA1af 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  5 value 1 3618  
931 14 Dtool_Ns0bAZTk 0 4 806 3599 0 14 Dtool_Ns0bAZTk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  5 value 1 3618  
932 14 Dtool_Ns0bANqV 0 4 807 3599 0 14 Dtool_Ns0bANqV 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  5 value 1 3618  
933 14 Dtool_Ns0bx8zX 0 4 808 3599 0 14 Dtool_Ns0bx8zX 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
934 14 Dtool_Ns0bXx2K 0 6 809 3603 0 14 Dtool_Ns0bXx2K 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
935 14 Dtool_Ns0bFbMg 0 4 810 3599 0 14 Dtool_Ns0bFbMg 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  10 fill_value 1 3618  
936 14 Dtool_Ns0bdT7O 0 4 811 3599 0 14 Dtool_Ns0bdT7O 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3673  1 x 1 3618  1 y 1 3618  1 z 1 3618  1 w 1 3618  
937 14 Dtool_Ns0bVfrF 0 6 812 3618 0 14 Dtool_Ns0bVfrF 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 other 1 3674  
938 14 Dtool_Ns0bTIcv 0 6 813 3618 0 14 Dtool_Ns0bTIcv 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
939 14 Dtool_Ns0bVEoP 0 6 814 3618 0 14 Dtool_Ns0bVEoP 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
940 14 Dtool_Ns0bwBCl 0 6 815 3604 0 14 Dtool_Ns0bwBCl 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3673  
941 14 Dtool_Ns0bO3Ro 0 7 816 3673 2795 14 Dtool_Ns0bO3Ro 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  4 onto 1 3674  
942 14 Dtool_Ns0bzfP_ 0 6 817 3604 0 14 Dtool_Ns0bzfP_ 0 2 4 this 3 3674  5 other 1 3674  
943 14 Dtool_Ns0beFYT 0 6 818 3604 0 14 Dtool_Ns0beFYT 0 2 4 this 3 3674  5 other 1 3674  
944 14 Dtool_Ns0balAC 0 6 819 3604 0 14 Dtool_Ns0balAC 0 2 4 this 3 3674  5 other 1 3674  
945 14 Dtool_Ns0b0LH_ 0 6 820 3603 0 14 Dtool_Ns0b0LH_ 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 other 1 3674  
946 14 Dtool_Ns0b319I 0 6 820 3603 0 14 Dtool_Ns0b319I 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3674  5 other 1 3674  9 threshold 1 3618  
947 14 Dtool_Ns0b8_ZE 0 6 821 3598 0 14 Dtool_Ns0b8_ZE 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
948 14 Dtool_Ns0bSwXj 0 6 821 3598 0 14 Dtool_Ns0bSwXj 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  9 threshold 1 3618  
949 14 Dtool_Ns0bJoPT 0 6 822 3598 0 14 Dtool_Ns0bJoPT 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  4 hash 1 3598  
950 14 Dtool_Ns0bXZGe 0 6 822 3598 0 14 Dtool_Ns0bXZGe 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3674  4 hash 1 3598  9 threshold 1 3618  
951 14 Dtool_Ns0brlZV 0 4 823 3599 0 14 Dtool_Ns0brlZV 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  7 hashgen 1 3605  
952 14 Dtool_Ns0bMhf5 0 4 823 3599 0 14 Dtool_Ns0bMhf5 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3674  7 hashgen 1 3605  9 threshold 1 3618  
953 14 Dtool_Ns0bQyvB 0 7 824 3673 2795 14 Dtool_Ns0bQyvB 0 1 4 this 3 3674  
954 14 Dtool_Ns0btXQY 0 7 825 3673 2795 14 Dtool_Ns0btXQY 0 2 4 this 3 3674  5 other 1 3674  
955 14 Dtool_Ns0btnyr 0 7 826 3673 2795 14 Dtool_Ns0btnyr 0 2 4 this 3 3674  5 other 1 3674  
956 14 Dtool_Ns0bW_WY 0 7 827 3673 2795 14 Dtool_Ns0bW_WY 0 2 4 this 3 3674  6 scalar 1 3618  
957 14 Dtool_Ns0bXWNJ 0 7 828 3673 2795 14 Dtool_Ns0bXWNJ 0 2 4 this 3 3674  6 scalar 1 3618  
958 14 Dtool_Ns0bhw2z 0 6 829 3673 0 14 Dtool_Ns0bhw2z 0 2 4 this 3 3673  5 other 1 3674  
959 14 Dtool_Ns0biAYH 0 6 830 3673 0 14 Dtool_Ns0biAYH 0 2 4 this 3 3673  5 other 1 3674  
960 14 Dtool_Ns0b5DXY 0 6 831 3673 0 14 Dtool_Ns0b5DXY 0 2 4 this 3 3673  6 scalar 1 3618  
961 14 Dtool_Ns0b_7LJ 0 6 832 3673 0 14 Dtool_Ns0b_7LJ 0 2 4 this 3 3673  6 scalar 1 3618  
962 14 Dtool_Ns0bh_OR 0 4 833 3599 0 14 Dtool_Ns0bh_OR 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  5 other 1 3674  
963 14 Dtool_Ns0bDO5y 0 7 834 3673 2795 14 Dtool_Ns0bDO5y 0 2 4 this 3 3674  8 exponent 1 3618  
964 14 Dtool_Ns0blSsP 0 6 835 3600 0 14 Dtool_Ns0blSsP 0 2 4 this 3 3673  8 exponent 1 3618  
965 14 Dtool_Ns0bR1LP 0 7 836 3673 2795 14 Dtool_Ns0bR1LP 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 other 1 3674  
966 14 Dtool_Ns0b_BrN 0 7 837 3673 2795 14 Dtool_Ns0b_BrN 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 other 1 3674  
967 14 Dtool_Ns0bcoqw 0 6 838 3604 0 14 Dtool_Ns0bcoqw 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 other 1 3674  
968 14 Dtool_Ns0b9ILB 0 6 838 3604 0 14 Dtool_Ns0b9ILB 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3674  5 other 1 3674  9 threshold 1 3618  
969 14 Dtool_Ns0b1Bda 0 4 839 3599 0 14 Dtool_Ns0b1Bda 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  3 out 1 3607  
970 14 Dtool_Ns0beB2t 0 4 840 3599 0 14 Dtool_Ns0beB2t 0 3 4 this 3 3674  3 out 1 3607  10 class_name 1 3602  
971 14 Dtool_Ns0bQsBI 0 4 841 3599 0 14 Dtool_Ns0bQsBI 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  11 destination 1 3609  
972 14 Dtool_Ns0bUkiE 0 4 842 3599 0 14 Dtool_Ns0bUkiE 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  6 source 1 3611  
973 14 Dtool_Ns0bjJ6E 0 4 843 3599 0 14 Dtool_Ns0bjJ6E 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  11 destination 1 3609  
974 14 Dtool_Ns0b4P8W 0 4 844 3599 0 14 Dtool_Ns0b4P8W 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3673  6 source 1 3611  
975 14 Dtool_Ns0bGAvT 0 7 845 3614 0 14 Dtool_Ns0bGAvT 0 0 
976 14 Dtool_Ns0bj4zI 0 7 847 3678 2865 14 Dtool_Ns0bj4zI 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
977 14 Dtool_Ns0bKsyE 0 7 847 3678 2865 14 Dtool_Ns0bKsyE 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3674  
978 14 Dtool_Ns0b1Rq_ 0 7 847 3678 2865 14 Dtool_Ns0b1Rq_ 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3676  
979 14 Dtool_Ns0bKT22 0 7 847 3678 2865 14 Dtool_Ns0bKT22 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3618  1 y 1 3618  1 z 1 3618  1 w 1 3618  
980 14 Dtool_Ns0b5na5 0 6 848 3678 0 14 Dtool_Ns0b5na5 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  4 copy 1 3674  
981 14 Dtool_Ns0b0fkQ 0 6 848 3678 0 14 Dtool_Ns0b0fkQ 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  4 copy 1 3676  
982 14 Dtool_Ns0bB49g 0 4 849 3599 0 14 Dtool_Ns0bB49g 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3678  1 x 1 3618  1 y 1 3618  1 z 1 3618  1 w 1 3618  
983 14 Dtool_Ns0bT8QQ 0 4 850 3599 0 14 Dtool_Ns0bT8QQ 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  1 i 1 3603  
984 14 Dtool_Ns0bSI3T 0 6 850 3618 0 14 Dtool_Ns0bSI3T 0 2 4 this 3 3676  1 i 1 3603  
985 14 Dtool_Ns0bsMSh 0 4 851 3599 0 14 Dtool_Ns0bsMSh 0 3 4 this 3 3678  1 i 1 3603  1 v 1 3618  
986 14 Dtool_Ns0bYnzI 0 6 852 3603 0 14 Dtool_Ns0bYnzI 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
987 14 Dtool_Ns0bY7H6 0 4 853 3599 0 14 Dtool_Ns0bY7H6 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3676  
988 14 Dtool_Ns0bihb4 0 6 854 3603 0 14 Dtool_Ns0bihb4 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3676  
989 14 Dtool_Ns0bkDnB 0 7 855 3614 0 14 Dtool_Ns0bkDnB 0 0 
990 14 Dtool_Ns0bUNkd 0 7 858 3679 2876 14 Dtool_Ns0bUNkd 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
991 14 Dtool_Ns0bauLi 0 7 858 3679 2876 14 Dtool_Ns0bauLi 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3647  1 w 1 3603  
992 14 Dtool_Ns0bTpRI 0 7 858 3679 2876 14 Dtool_Ns0bTpRI 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3680  
993 14 Dtool_Ns0b7tyl 0 7 858 3679 2876 14 Dtool_Ns0b7tyl 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3682  
994 14 Dtool_Ns0bqeHH 0 7 858 3679 2876 14 Dtool_Ns0bqeHH 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3603  
995 14 Dtool_Ns0bdcHP 0 7 858 3679 2876 14 Dtool_Ns0bdcHP 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3603  1 y 1 3603  1 z 1 3603  1 w 1 3603  
996 14 Dtool_Ns0bz5UT 0 6 859 3679 0 14 Dtool_Ns0bz5UT 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  4 copy 1 3680  
997 14 Dtool_Ns0bgz0w 0 6 859 3679 0 14 Dtool_Ns0bgz0w 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  4 copy 1 3682  
998 14 Dtool_Ns0b4iIS 0 6 859 3679 0 14 Dtool_Ns0b4iIS 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  10 fill_value 1 3603  
999 14 Dtool_Ns0bMjJF 0 4 860 3599 0 14 Dtool_Ns0bMjJF 0 2 4 this 3 3679  4 size 1 3598  
1000 14 Dtool_Ns0bmER7 0 6 863 3680 0 14 Dtool_Ns0bmER7 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1001 14 Dtool_Ns0bD2Hf 0 6 864 3680 0 14 Dtool_Ns0bD2Hf 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1002 14 Dtool_Ns0bB2V7 0 6 865 3680 0 14 Dtool_Ns0bB2V7 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1003 14 Dtool_Ns0bG2jX 0 6 866 3680 0 14 Dtool_Ns0bG2jX 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1004 14 Dtool_Ns0bd25C 0 6 867 3680 0 14 Dtool_Ns0bd25C 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1005 14 Dtool_Ns0bLZ2o 0 6 869 3600 0 14 Dtool_Ns0bLZ2o 0 1 4 this 3 3680  
1006 14 Dtool_Ns0bWBUm 0 6 870 3600 0 14 Dtool_Ns0bWBUm 0 2 4 this 3 3680  9 attr_name 1 3602  
1007 14 Dtool_Ns0bNFHe 0 6 871 3603 0 14 Dtool_Ns0bNFHe 0 3 4 this 3 3679  9 attr_name 1 3602  6 assign 1 3600  
1008 14 Dtool_Ns0bcX4g 0 4 872 3599 0 14 Dtool_Ns0bcX4g 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  1 i 1 3603  
1009 14 Dtool_Ns0bxos9 0 6 872 3603 0 14 Dtool_Ns0bxos9 0 2 4 this 3 3680  1 i 1 3603  
1010 14 Dtool_Ns0b3gWx 0 4 873 3599 0 14 Dtool_Ns0b3gWx 0 3 4 this 3 3679  1 i 1 3603  1 v 1 3603  
1011 14 Dtool_Ns0b06Al 0 6 874 3603 0 14 Dtool_Ns0b06Al 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
1012 14 Dtool_Ns0bzf3r 0 6 875 3604 0 14 Dtool_Ns0bzf3r 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3680  
1013 14 Dtool_Ns0bqdQR 0 6 876 3603 0 14 Dtool_Ns0bqdQR 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  1 i 1 3603  
1014 14 Dtool_Ns0bMJw8 0 6 877 3603 0 14 Dtool_Ns0bMJw8 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3680  
1015 14 Dtool_Ns0bPloB 0 6 878 3603 0 14 Dtool_Ns0bPloB 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3680  
1016 14 Dtool_Ns0bPBjG 0 6 879 3603 0 14 Dtool_Ns0bPBjG 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3680  
1017 14 Dtool_Ns0bMt53 0 6 880 3603 0 14 Dtool_Ns0bMt53 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3680  
1018 14 Dtool_Ns0bj8iW 0 4 881 3599 0 14 Dtool_Ns0bj8iW 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3679  1 i 1 3603  5 value 1 3603  
1019 14 Dtool_Ns0bQVL0 0 4 882 3599 0 14 Dtool_Ns0bQVL0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  5 value 1 3603  
1020 14 Dtool_Ns0bQxD5 0 4 883 3599 0 14 Dtool_Ns0bQxD5 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  5 value 1 3603  
1021 14 Dtool_Ns0bQd89 0 4 884 3599 0 14 Dtool_Ns0bQd89 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  5 value 1 3603  
1022 14 Dtool_Ns0bQJTv 0 4 885 3599 0 14 Dtool_Ns0bQJTv 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  5 value 1 3603  
1023 14 Dtool_Ns0baSk_ 0 4 886 3599 0 14 Dtool_Ns0baSk_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3679  1 i 1 3603  5 value 1 3603  
1024 14 Dtool_Ns0bvvoy 0 4 887 3599 0 14 Dtool_Ns0bvvoy 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  5 value 1 3603  
1025 14 Dtool_Ns0bvLh3 0 4 888 3599 0 14 Dtool_Ns0bvLh3 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  5 value 1 3603  
1026 14 Dtool_Ns0bvXZ8 0 4 889 3599 0 14 Dtool_Ns0bvXZ8 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  5 value 1 3603  
1027 14 Dtool_Ns0bvDwt 0 4 890 3599 0 14 Dtool_Ns0bvDwt 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  5 value 1 3603  
1028 14 Dtool_Ns0bJQ0v 0 4 891 3599 0 14 Dtool_Ns0bJQ0v 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3680  
1029 14 Dtool_Ns0bTa3i 0 6 892 3603 0 14 Dtool_Ns0bTa3i 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3680  
1030 14 Dtool_Ns0baaPs 0 4 893 3599 0 14 Dtool_Ns0baaPs 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  10 fill_value 1 3603  
1031 14 Dtool_Ns0bb_Ku 0 4 894 3599 0 14 Dtool_Ns0bb_Ku 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3679  1 x 1 3603  1 y 1 3603  1 z 1 3603  1 w 1 3603  
1032 14 Dtool_Ns0bOIvg 0 6 895 3603 0 14 Dtool_Ns0bOIvg 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  5 other 1 3680  
1033 14 Dtool_Ns0bHldH 0 6 896 3603 0 14 Dtool_Ns0bHldH 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3680  
1034 14 Dtool_Ns0bJtA_ 0 6 897 3604 0 14 Dtool_Ns0bJtA_ 0 2 4 this 3 3680  5 other 1 3680  
1035 14 Dtool_Ns0bOUaD 0 6 898 3604 0 14 Dtool_Ns0bOUaD 0 2 4 this 3 3680  5 other 1 3680  
1036 14 Dtool_Ns0bD0Dy 0 6 899 3604 0 14 Dtool_Ns0bD0Dy 0 2 4 this 3 3680  5 other 1 3680  
1037 14 Dtool_Ns0bli4_ 0 6 900 3603 0 14 Dtool_Ns0bli4_ 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  5 other 1 3680  
1038 14 Dtool_Ns0bz9bc 0 6 901 3598 0 14 Dtool_Ns0bz9bc 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3680  
1039 14 Dtool_Ns0bkLQr 0 6 902 3598 0 14 Dtool_Ns0bkLQr 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  4 hash 1 3598  
1040 14 Dtool_Ns0buCat 0 4 903 3599 0 14 Dtool_Ns0buCat 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  7 hashgen 1 3605  
1041 14 Dtool_Ns0baJwZ 0 7 904 3679 2876 14 Dtool_Ns0baJwZ 0 1 4 this 3 3680  
1042 14 Dtool_Ns0b3lBZ 0 7 905 3679 2876 14 Dtool_Ns0b3lBZ 0 2 4 this 3 3680  5 other 1 3680  
1043 14 Dtool_Ns0b31js 0 7 906 3679 2876 14 Dtool_Ns0b31js 0 2 4 this 3 3680  5 other 1 3680  
1044 14 Dtool_Ns0bHEhp 0 7 907 3679 2876 14 Dtool_Ns0bHEhp 0 2 4 this 3 3680  6 scalar 1 3603  
1045 14 Dtool_Ns0bG8Wa 0 7 908 3679 2876 14 Dtool_Ns0bG8Wa 0 2 4 this 3 3680  6 scalar 1 3603  
1046 14 Dtool_Ns0b1q5j 0 6 909 3679 0 14 Dtool_Ns0b1q5j 0 2 4 this 3 3679  5 other 1 3680  
1047 14 Dtool_Ns0b1aa3 0 6 910 3679 0 14 Dtool_Ns0b1aa3 0 2 4 this 3 3679  5 other 1 3680  
1048 14 Dtool_Ns0bgcd0 0 6 911 3679 0 14 Dtool_Ns0bgcd0 0 2 4 this 3 3679  6 scalar 1 3603  
1049 14 Dtool_Ns0bh0Rl 0 6 912 3679 0 14 Dtool_Ns0bh0Rl 0 2 4 this 3 3679  6 scalar 1 3603  
1050 14 Dtool_Ns0bIzpB 0 4 913 3599 0 14 Dtool_Ns0bIzpB 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  5 other 1 3680  
1051 14 Dtool_Ns0bAdXI 0 7 914 3679 2876 14 Dtool_Ns0bAdXI 0 2 4 this 3 3680  8 exponent 1 3603  
1052 14 Dtool_Ns0b7qwH 0 6 915 3600 0 14 Dtool_Ns0b7qwH 0 2 4 this 3 3679  8 exponent 1 3603  
1053 14 Dtool_Ns0bXn1I 0 7 916 3679 2876 14 Dtool_Ns0bXn1I 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  5 other 1 3680  
1054 14 Dtool_Ns0bJaVH 0 7 917 3679 2876 14 Dtool_Ns0bJaVH 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  5 other 1 3680  
1055 14 Dtool_Ns0bBiDJ 0 6 918 3604 0 14 Dtool_Ns0bBiDJ 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  5 other 1 3680  
1056 14 Dtool_Ns0bxq33 0 6 918 3604 0 14 Dtool_Ns0bxq33 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3680  5 other 1 3680  9 threshold 1 3603  
1057 14 Dtool_Ns0bt6dy 0 4 919 3599 0 14 Dtool_Ns0bt6dy 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  3 out 1 3607  
1058 14 Dtool_Ns0bT94F 0 4 920 3599 0 14 Dtool_Ns0bT94F 0 3 4 this 3 3680  3 out 1 3607  10 class_name 1 3602  
1059 14 Dtool_Ns0bKZCg 0 4 921 3599 0 14 Dtool_Ns0bKZCg 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  11 destination 1 3609  
1060 14 Dtool_Ns0byLkc 0 4 922 3599 0 14 Dtool_Ns0byLkc 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  6 source 1 3611  
1061 14 Dtool_Ns0bH98c 0 4 923 3599 0 14 Dtool_Ns0bH98c 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  11 destination 1 3609  
1062 14 Dtool_Ns0bns9u 0 4 924 3599 0 14 Dtool_Ns0bns9u 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3679  6 source 1 3611  
1063 14 Dtool_Ns0b09vr 0 7 925 3614 0 14 Dtool_Ns0b09vr 0 0 
1064 14 Dtool_Ns0bN2ks 0 7 927 3684 2943 14 Dtool_Ns0bN2ks 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1065 14 Dtool_Ns0bRANK 0 7 927 3684 2943 14 Dtool_Ns0bRANK 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3680  
1066 14 Dtool_Ns0bidov 0 7 927 3684 2943 14 Dtool_Ns0bidov 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3682  
1067 14 Dtool_Ns0bdkQA 0 7 927 3684 2943 14 Dtool_Ns0bdkQA 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3603  1 y 1 3603  1 z 1 3603  1 w 1 3603  
1068 14 Dtool_Ns0b1vhp 0 6 928 3684 0 14 Dtool_Ns0b1vhp 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3684  4 copy 1 3680  
1069 14 Dtool_Ns0b8VMV 0 6 928 3684 0 14 Dtool_Ns0b8VMV 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3684  4 copy 1 3682  
1070 14 Dtool_Ns0b8b3k 0 4 929 3599 0 14 Dtool_Ns0b8b3k 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3684  1 x 1 3603  1 y 1 3603  1 z 1 3603  1 w 1 3603  
1071 14 Dtool_Ns0bU0Rz 0 4 930 3599 0 14 Dtool_Ns0bU0Rz 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3684  1 i 1 3603  
1072 14 Dtool_Ns0bcC32 0 6 930 3603 0 14 Dtool_Ns0bcC32 0 2 4 this 3 3682  1 i 1 3603  
1073 14 Dtool_Ns0beaUF 0 4 931 3599 0 14 Dtool_Ns0beaUF 0 3 4 this 3 3684  1 i 1 3603  1 v 1 3603  
1074 14 Dtool_Ns0bXvyr 0 6 932 3603 0 14 Dtool_Ns0bXvyr 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
1075 14 Dtool_Ns0bBFHd 0 4 933 3599 0 14 Dtool_Ns0bBFHd 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3682  
1076 14 Dtool_Ns0bl7bb 0 6 934 3603 0 14 Dtool_Ns0bl7bb 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3682  
1077 14 Dtool_Ns0beNnk 0 7 935 3614 0 14 Dtool_Ns0beNnk 0 0 
1078 14 Dtool_Ns0b2hGZ 0 7 938 3685 2961 14 Dtool_Ns0b2hGZ 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1079 14 Dtool_Ns0bMmmu 0 7 938 3685 2961 14 Dtool_Ns0bMmmu 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3641  1 w 1 3597  
1080 14 Dtool_Ns0b55R7 0 7 938 3685 2961 14 Dtool_Ns0b55R7 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3668  
1081 14 Dtool_Ns0bIgP3 0 7 938 3685 2961 14 Dtool_Ns0bIgP3 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3597  
1082 14 Dtool_Ns0bGLX9 0 7 938 3685 2961 14 Dtool_Ns0bGLX9 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3597  1 y 1 3597  1 z 1 3597  1 w 1 3597  
1083 14 Dtool_Ns0bq2Ys 0 6 939 3685 0 14 Dtool_Ns0bq2Ys 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3685  4 copy 1 3668  
1084 14 Dtool_Ns0bRfUr 0 6 939 3685 0 14 Dtool_Ns0bRfUr 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3685  10 fill_value 1 3597  
1085 14 Dtool_Ns0bu3EG 0 6 940 3600 0 14 Dtool_Ns0bu3EG 0 2 4 this 3 3686  9 attr_name 1 3602  
1086 14 Dtool_Ns0bVIy9 0 6 941 3603 0 14 Dtool_Ns0bVIy9 0 3 4 this 3 3685  9 attr_name 1 3602  6 assign 1 3600  
1087 14 Dtool_Ns0bPC0O 0 6 942 3686 0 14 Dtool_Ns0bPC0O 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1088 14 Dtool_Ns0bxI8j 0 6 943 3686 0 14 Dtool_Ns0bxI8j 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1089 14 Dtool_Ns0bxk1o 0 6 944 3686 0 14 Dtool_Ns0bxk1o 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1090 14 Dtool_Ns0bxAtt 0 6 945 3686 0 14 Dtool_Ns0bxAtt 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1091 14 Dtool_Ns0bxsEf 0 6 946 3686 0 14 Dtool_Ns0bxsEf 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1092 14 Dtool_Ns0bWMwv 0 7 947 3685 2961 14 Dtool_Ns0bWMwv 0 1 4 this 3 3686  
1093 14 Dtool_Ns0bWUig 0 7 948 3667 2714 14 Dtool_Ns0bWUig 0 2 4 this 3 3686  5 other 1 3668  
1094 14 Dtool_Ns0bOmWu 0 7 948 3685 2961 14 Dtool_Ns0bOmWu 0 2 4 this 3 3686  5 other 1 3686  
1095 14 Dtool_Ns0b2RJh 0 7 949 3667 2714 14 Dtool_Ns0b2RJh 0 2 4 this 3 3686  5 other 1 3668  
1096 14 Dtool_Ns0buj9u 0 7 949 3685 2961 14 Dtool_Ns0buj9u 0 2 4 this 3 3686  5 other 1 3686  
1097 14 Dtool_Ns0bTPWC 0 7 950 3685 2961 14 Dtool_Ns0bTPWC 0 2 4 this 3 3686  6 scalar 1 3597  
1098 14 Dtool_Ns0bjn4D 0 7 951 3685 2961 14 Dtool_Ns0bjn4D 0 2 4 this 3 3686  6 scalar 1 3597  
1099 14 Dtool_Ns0bGh8I 0 7 952 3685 2961 14 Dtool_Ns0bGh8I 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3686  4 onto 1 3668  
1100 14 Dtool_Ns0beACX 0 4 953 3599 0 14 Dtool_Ns0beACX 0 3 4 this 3 3686  3 out 1 3607  10 class_name 1 3602  
1101 14 Dtool_Ns0bvYTA 0 7 954 3614 0 14 Dtool_Ns0bvYTA 0 0 
1102 14 Dtool_Ns0bSTkV 0 7 957 3688 2979 14 Dtool_Ns0bSTkV 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1103 14 Dtool_Ns0bZALA 0 7 957 3688 2979 14 Dtool_Ns0bZALA 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3644  1 w 1 3618  
1104 14 Dtool_Ns0brcU1 0 7 957 3688 2979 14 Dtool_Ns0brcU1 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3674  
1105 14 Dtool_Ns0b8AKA 0 7 957 3688 2979 14 Dtool_Ns0b8AKA 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3618  
1106 14 Dtool_Ns0b72XI 0 7 957 3688 2979 14 Dtool_Ns0b72XI 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3618  1 y 1 3618  1 z 1 3618  1 w 1 3618  
1107 14 Dtool_Ns0by3xa 0 6 958 3688 0 14 Dtool_Ns0by3xa 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  4 copy 1 3674  
1108 14 Dtool_Ns0bp_A2 0 6 958 3688 0 14 Dtool_Ns0bp_A2 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3688  10 fill_value 1 3618  
1109 14 Dtool_Ns0bJ0kC 0 6 959 3600 0 14 Dtool_Ns0bJ0kC 0 2 4 this 3 3689  9 attr_name 1 3602  
1110 14 Dtool_Ns0bMLS6 0 6 960 3603 0 14 Dtool_Ns0bMLS6 0 3 4 this 3 3688  9 attr_name 1 3602  6 assign 1 3600  
1111 14 Dtool_Ns0b2FUL 0 6 961 3689 0 14 Dtool_Ns0b2FUL 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1112 14 Dtool_Ns0boXcg 0 6 962 3689 0 14 Dtool_Ns0boXcg 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1113 14 Dtool_Ns0bo7Vl 0 6 963 3689 0 14 Dtool_Ns0bo7Vl 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1114 14 Dtool_Ns0bofNq 0 6 964 3689 0 14 Dtool_Ns0bofNq 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1115 14 Dtool_Ns0bozkb 0 6 965 3689 0 14 Dtool_Ns0bozkb 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1116 14 Dtool_Ns0bPNQs 0 7 966 3688 2979 14 Dtool_Ns0bPNQs 0 1 4 this 3 3689  
1117 14 Dtool_Ns0buV7O 0 7 967 3673 2795 14 Dtool_Ns0buV7O 0 2 4 this 3 3689  5 other 1 3674  
1118 14 Dtool_Ns0bh1ao 0 7 967 3688 2979 14 Dtool_Ns0bh1ao 0 2 4 this 3 3689  5 other 1 3689  
1119 14 Dtool_Ns0bOQiP 0 7 968 3673 2795 14 Dtool_Ns0bOQiP 0 2 4 this 3 3689  5 other 1 3674  
1120 14 Dtool_Ns0bBwBp 0 7 968 3688 2979 14 Dtool_Ns0bBwBp 0 2 4 this 3 3689  5 other 1 3689  
1121 14 Dtool_Ns0b9Z8K 0 7 969 3688 2979 14 Dtool_Ns0b9Z8K 0 2 4 this 3 3689  6 scalar 1 3618  
1122 14 Dtool_Ns0btwdM 0 7 970 3688 2979 14 Dtool_Ns0btwdM 0 2 4 this 3 3689  6 scalar 1 3618  
1123 14 Dtool_Ns0b1mdN 0 7 971 3688 2979 14 Dtool_Ns0b1mdN 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  4 onto 1 3674  
1124 14 Dtool_Ns0bxDiT 0 4 972 3599 0 14 Dtool_Ns0bxDiT 0 3 4 this 3 3689  3 out 1 3607  10 class_name 1 3602  
1125 14 Dtool_Ns0bHZz8 0 7 973 3614 0 14 Dtool_Ns0bHZz8 0 0 
1126 14 Dtool_Ns0bmVXe 0 7 976 3691 2996 14 Dtool_Ns0bmVXe 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1127 14 Dtool_Ns0bHRmP 0 7 976 3691 2996 14 Dtool_Ns0bHRmP 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3647  1 w 1 3603  
1128 14 Dtool_Ns0b_CME 0 7 976 3691 2996 14 Dtool_Ns0b_CME 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3680  
1129 14 Dtool_Ns0bB_No 0 7 976 3691 2996 14 Dtool_Ns0bB_No 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3603  
1130 14 Dtool_Ns0bxpif 0 7 976 3691 2996 14 Dtool_Ns0bxpif 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3603  1 y 1 3603  1 z 1 3603  1 w 1 3603  
1131 14 Dtool_Ns0bVWyG 0 6 977 3691 0 14 Dtool_Ns0bVWyG 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3691  4 copy 1 3680  
1132 14 Dtool_Ns0b6exG 0 6 977 3691 0 14 Dtool_Ns0b6exG 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3691  10 fill_value 1 3603  
1133 14 Dtool_Ns0bo2Ur 0 6 978 3600 0 14 Dtool_Ns0bo2Ur 0 2 4 this 3 3692  9 attr_name 1 3602  
1134 14 Dtool_Ns0buICj 0 6 979 3603 0 14 Dtool_Ns0buICj 0 3 4 this 3 3691  9 attr_name 1 3602  6 assign 1 3600  
1135 14 Dtool_Ns0bRDE0 0 6 980 3692 0 14 Dtool_Ns0bRDE0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1136 14 Dtool_Ns0bOIMJ 0 6 981 3692 0 14 Dtool_Ns0bOIMJ 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1137 14 Dtool_Ns0bOkFO 0 6 982 3692 0 14 Dtool_Ns0bOkFO 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1138 14 Dtool_Ns0bOA9S 0 6 983 3692 0 14 Dtool_Ns0bOA9S 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1139 14 Dtool_Ns0bOsUE 0 6 984 3692 0 14 Dtool_Ns0bOsUE 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1140 14 Dtool_Ns0bRPAV 0 7 985 3691 2996 14 Dtool_Ns0bRPAV 0 1 4 this 3 3692  
1141 14 Dtool_Ns0bK796 0 7 986 3679 2876 14 Dtool_Ns0bK796 0 2 4 this 3 3692  5 other 1 3680  
1142 14 Dtool_Ns0bDuRX 0 7 986 3691 2996 14 Dtool_Ns0bDuRX 0 2 4 this 3 3692  5 other 1 3692  
1143 14 Dtool_Ns0bq_k7 0 7 987 3679 2876 14 Dtool_Ns0bq_k7 0 2 4 this 3 3692  5 other 1 3680  
1144 14 Dtool_Ns0bjx2X 0 7 987 3691 2996 14 Dtool_Ns0bjx2X 0 2 4 this 3 3692  5 other 1 3692  
1145 14 Dtool_Ns0b8wf_ 0 7 988 3691 2996 14 Dtool_Ns0b8wf_ 0 2 4 this 3 3692  6 scalar 1 3603  
1146 14 Dtool_Ns0bNoBB 0 7 989 3691 2996 14 Dtool_Ns0bNoBB 0 2 4 this 3 3692  6 scalar 1 3603  
1147 14 Dtool_Ns0bQBS8 0 4 990 3599 0 14 Dtool_Ns0bQBS8 0 3 4 this 3 3692  3 out 1 3607  10 class_name 1 3602  
1148 14 Dtool_Ns0blfjl 0 7 991 3614 0 14 Dtool_Ns0blfjl 0 0 
1149 14 Dtool_Ns0bzUXk 0 7 994 3694 3014 14 Dtool_Ns0bzUXk 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1150 14 Dtool_Ns0b9aCs 0 7 994 3694 3014 14 Dtool_Ns0b9aCs 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3641  1 w 1 3597  
1151 14 Dtool_Ns0bSD57 0 7 994 3694 3014 14 Dtool_Ns0bSD57 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3668  
1152 14 Dtool_Ns0bCj8c 0 7 994 3694 3014 14 Dtool_Ns0bCj8c 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3597  
1153 14 Dtool_Ns0bzr8M 0 7 994 3694 3014 14 Dtool_Ns0bzr8M 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3597  1 y 1 3597  1 z 1 3597  1 w 1 3597  
1154 14 Dtool_Ns0bbZBR 0 6 995 3694 0 14 Dtool_Ns0bbZBR 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3694  4 copy 1 3668  
1155 14 Dtool_Ns0bqdAN 0 6 995 3694 0 14 Dtool_Ns0bqdAN 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3694  10 fill_value 1 3597  
1156 14 Dtool_Ns0bPNxP 0 6 996 3600 0 14 Dtool_Ns0bPNxP 0 2 4 this 3 3695  9 attr_name 1 3602  
1157 14 Dtool_Ns0bBOe3 0 6 997 3603 0 14 Dtool_Ns0bBOe3 0 3 4 this 3 3694  9 attr_name 1 3602  6 assign 1 3600  
1158 14 Dtool_Ns0bq1J6 0 6 998 3695 0 14 Dtool_Ns0bq1J6 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
1159 14 Dtool_Ns0bC0yG 0 6 999 3695 0 14 Dtool_Ns0bC0yG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
1160 14 Dtool_Ns0baH8G 0 6 1000 3695 0 14 Dtool_Ns0baH8G 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
1161 14 Dtool_Ns0bSWGH 0 6 1001 3695 0 14 Dtool_Ns0bSWGH 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
1162 14 Dtool_Ns0bKloG 0 6 1002 3695 0 14 Dtool_Ns0bKloG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
1163 14 Dtool_Ns0b0LJX 0 7 1003 3694 3014 14 Dtool_Ns0b0LJX 0 1 4 this 3 3695  
1164 14 Dtool_Ns0bIcoy 0 7 1004 3667 2714 14 Dtool_Ns0bIcoy 0 2 4 this 3 3695  5 other 1 3668  
1165 14 Dtool_Ns0bopEn 0 7 1004 3694 3014 14 Dtool_Ns0bopEn 0 2 4 this 3 3695  5 other 1 3686  
1166 14 Dtool_Ns0bMM2G 0 7 1005 3685 2961 14 Dtool_Ns0bMM2G 0 2 4 this 3 3695  5 other 1 3695  
1167 14 Dtool_Ns0bTupy 0 7 1005 3667 2714 14 Dtool_Ns0bTupy 0 2 4 this 3 3695  5 other 1 3668  
1168 14 Dtool_Ns0bXbFn 0 7 1005 3694 3014 14 Dtool_Ns0bXbFn 0 2 4 this 3 3695  5 other 1 3686  
1169 14 Dtool_Ns0bUdt9 0 7 1006 3694 3014 14 Dtool_Ns0bUdt9 0 2 4 this 3 3695  6 scalar 1 3597  
1170 14 Dtool_Ns0brXwd 0 7 1007 3694 3014 14 Dtool_Ns0brXwd 0 2 4 this 3 3695  6 scalar 1 3597  
1171 14 Dtool_Ns0bIt7R 0 7 1008 3694 3014 14 Dtool_Ns0bIt7R 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  4 onto 1 3668  
1172 14 Dtool_Ns0bFwQw 0 4 1009 3599 0 14 Dtool_Ns0bFwQw 0 3 4 this 3 3695  3 out 1 3607  10 class_name 1 3602  
1173 14 Dtool_Ns0bnbpV 0 7 1010 3614 0 14 Dtool_Ns0bnbpV 0 0 
1174 14 Dtool_Ns0btU0d 0 7 1013 3697 3032 14 Dtool_Ns0btU0d 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1175 14 Dtool_Ns0bzkRf 0 7 1013 3697 3032 14 Dtool_Ns0bzkRf 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3644  1 w 1 3618  
1176 14 Dtool_Ns0bJZW9 0 7 1013 3697 3032 14 Dtool_Ns0bJZW9 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3674  
1177 14 Dtool_Ns0b36e0 0 7 1013 3697 3032 14 Dtool_Ns0b36e0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3618  
1178 14 Dtool_Ns0bCpeG 0 7 1013 3697 3032 14 Dtool_Ns0bCpeG 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3618  1 y 1 3618  1 z 1 3618  1 w 1 3618  
1179 14 Dtool_Ns0bYHeA 0 6 1014 3697 0 14 Dtool_Ns0bYHeA 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3697  4 copy 1 3674  
1180 14 Dtool_Ns0bMxVL 0 6 1014 3697 0 14 Dtool_Ns0bMxVL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3697  10 fill_value 1 3618  
1181 14 Dtool_Ns0bONqB 0 6 1015 3600 0 14 Dtool_Ns0bONqB 0 2 4 this 3 3698  9 attr_name 1 3602  
1182 14 Dtool_Ns0beOXp 0 6 1016 3603 0 14 Dtool_Ns0beOXp 0 3 4 this 3 3697  9 attr_name 1 3602  6 assign 1 3600  
1183 14 Dtool_Ns0br1Cs 0 6 1017 3698 0 14 Dtool_Ns0br1Cs 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
1184 14 Dtool_Ns0bA0r4 0 6 1018 3698 0 14 Dtool_Ns0bA0r4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
1185 14 Dtool_Ns0bYH14 0 6 1019 3698 0 14 Dtool_Ns0bYH14 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
1186 14 Dtool_Ns0bQW_4 0 6 1020 3698 0 14 Dtool_Ns0bQW_4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
1187 14 Dtool_Ns0bIlh4 0 6 1021 3698 0 14 Dtool_Ns0bIlh4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
1188 14 Dtool_Ns0b1LCJ 0 7 1022 3697 3032 14 Dtool_Ns0b1LCJ 0 1 4 this 3 3698  
1189 14 Dtool_Ns0bLSFi 0 7 1023 3673 2795 14 Dtool_Ns0bLSFi 0 2 4 this 3 3698  5 other 1 3674  
1190 14 Dtool_Ns0bzh4Y 0 7 1023 3697 3032 14 Dtool_Ns0bzh4Y 0 2 4 this 3 3698  5 other 1 3689  
1191 14 Dtool_Ns0bxIuA 0 7 1024 3688 2979 14 Dtool_Ns0bxIuA 0 2 4 this 3 3698  5 other 1 3698  
1192 14 Dtool_Ns0bQcGi 0 7 1024 3673 2795 14 Dtool_Ns0bQcGi 0 2 4 this 3 3698  5 other 1 3674  
1193 14 Dtool_Ns0b0T5Y 0 7 1024 3697 3032 14 Dtool_Ns0b0T5Y 0 2 4 this 3 3698  5 other 1 3689  
1194 14 Dtool_Ns0bre_H 0 7 1025 3697 3032 14 Dtool_Ns0bre_H 0 2 4 this 3 3698  6 scalar 1 3618  
1195 14 Dtool_Ns0b6DAo 0 7 1026 3697 3032 14 Dtool_Ns0b6DAo 0 2 4 this 3 3698  6 scalar 1 3618  
1196 14 Dtool_Ns0bjtEi 0 7 1027 3697 3032 14 Dtool_Ns0bjtEi 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  4 onto 1 3674  
1197 14 Dtool_Ns0bEwJi 0 4 1028 3599 0 14 Dtool_Ns0bEwJi 0 3 4 this 3 3698  3 out 1 3607  10 class_name 1 3602  
1198 14 Dtool_Ns0bmbiH 0 7 1029 3614 0 14 Dtool_Ns0bmbiH 0 0 
1199 14 Dtool_Ns0b80Lu 0 7 1032 3700 3049 14 Dtool_Ns0b80Lu 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1200 14 Dtool_Ns0bwJp4 0 7 1032 3700 3049 14 Dtool_Ns0bwJp4 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3647  1 w 1 3603  
1201 14 Dtool_Ns0bnRtZ 0 7 1032 3700 3049 14 Dtool_Ns0bnRtZ 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3680  
1202 14 Dtool_Ns0bXc4G 0 7 1032 3700 3049 14 Dtool_Ns0bXc4G 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3603  
1203 14 Dtool_Ns0bl_bH 0 7 1032 3700 3049 14 Dtool_Ns0bl_bH 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3603  1 y 1 3603  1 z 1 3603  1 w 1 3603  
1204 14 Dtool_Ns0bdC2J 0 6 1033 3700 0 14 Dtool_Ns0bdC2J 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  4 copy 1 3680  
1205 14 Dtool_Ns0bPC2t 0 6 1033 3700 0 14 Dtool_Ns0bPC2t 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3700  10 fill_value 1 3603  
1206 14 Dtool_Ns0bNt7E 0 6 1034 3600 0 14 Dtool_Ns0bNt7E 0 2 4 this 3 3701  9 attr_name 1 3602  
1207 14 Dtool_Ns0bDuos 0 6 1035 3603 0 14 Dtool_Ns0bDuos 0 3 4 this 3 3700  9 attr_name 1 3602  6 assign 1 3600  
1208 14 Dtool_Ns0bkVTv 0 6 1036 3701 0 14 Dtool_Ns0bkVTv 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
1209 14 Dtool_Ns0bDU97 0 6 1037 3701 0 14 Dtool_Ns0bDU97 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
1210 14 Dtool_Ns0bbnG8 0 6 1038 3701 0 14 Dtool_Ns0bbnG8 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
1211 14 Dtool_Ns0bT2Q8 0 6 1039 3701 0 14 Dtool_Ns0bT2Q8 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
1212 14 Dtool_Ns0bLFz7 0 6 1040 3701 0 14 Dtool_Ns0bLFz7 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
1213 14 Dtool_Ns0bKrTM 0 7 1041 3700 3049 14 Dtool_Ns0bKrTM 0 1 4 this 3 3701  
1214 14 Dtool_Ns0bORdr 0 7 1042 3679 2876 14 Dtool_Ns0bORdr 0 2 4 this 3 3701  5 other 1 3680  
1215 14 Dtool_Ns0bw0Wc 0 7 1042 3700 3049 14 Dtool_Ns0bw0Wc 0 2 4 this 3 3701  5 other 1 3692  
1216 14 Dtool_Ns0bn_AQ 0 7 1043 3691 2996 14 Dtool_Ns0bn_AQ 0 2 4 this 3 3701  5 other 1 3701  
1217 14 Dtool_Ns0bVjer 0 7 1043 3679 2876 14 Dtool_Ns0bVjer 0 2 4 this 3 3701  5 other 1 3680  
1218 14 Dtool_Ns0b7mXc 0 7 1043 3700 3049 14 Dtool_Ns0b7mXc 0 2 4 this 3 3701  5 other 1 3692  
1219 14 Dtool_Ns0bwQn5 0 7 1044 3700 3049 14 Dtool_Ns0bwQn5 0 2 4 this 3 3701  6 scalar 1 3603  
1220 14 Dtool_Ns0beHpZ 0 7 1045 3700 3049 14 Dtool_Ns0beHpZ 0 2 4 this 3 3701  6 scalar 1 3603  
1221 14 Dtool_Ns0bDQal 0 4 1046 3599 0 14 Dtool_Ns0bDQal 0 3 4 this 3 3701  3 out 1 3607  10 class_name 1 3602  
1222 14 Dtool_Ns0bp70K 0 7 1047 3614 0 14 Dtool_Ns0bp70K 0 0 
1223 14 Dtool_Ns0bl0PU 0 7 1059 3703 3131 14 Dtool_Ns0bl0PU 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1224 14 Dtool_Ns0bsN2u 0 7 1059 3703 3131 14 Dtool_Ns0bsN2u 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3704  
1225 14 Dtool_Ns0bQz8c 0 7 1059 3703 3131 14 Dtool_Ns0bQz8c 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 3597  3 e01 1 3597  3 e02 1 3597  3 e10 1 3597  3 e11 1 3597  3 e12 1 3597  3 e20 1 3597  3 e21 1 3597  3 e22 1 3597  
1226 14 Dtool_Ns0bWGVN 0 6 1060 3703 0 14 Dtool_Ns0bWGVN 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 other 1 3704  
1227 14 Dtool_Ns0bOZp_ 0 6 1060 3703 0 14 Dtool_Ns0bOZp_ 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  10 fill_value 1 3597  
1228 14 Dtool_Ns0bxIaw 0 4 1061 3599 0 14 Dtool_Ns0bxIaw 0 2 4 this 3 3703  4 size 1 3598  
1229 14 Dtool_Ns0bXYgB 0 6 1064 3600 0 14 Dtool_Ns0bXYgB 0 1 4 this 3 3704  
1230 14 Dtool_Ns0bgH0z 0 4 1065 3599 0 14 Dtool_Ns0bgH0z 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  10 fill_value 1 3597  
1231 14 Dtool_Ns0bz3qU 0 4 1066 3599 0 14 Dtool_Ns0bz3qU 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 3703  3 e00 1 3597  3 e01 1 3597  3 e02 1 3597  3 e10 1 3597  3 e11 1 3597  3 e12 1 3597  3 e20 1 3597  3 e21 1 3597  3 e22 1 3597  
1232 14 Dtool_Ns0bN5w9 0 4 1067 3599 0 14 Dtool_Ns0bN5w9 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3703  3 row 1 3603  1 v 1 3595  
1233 14 Dtool_Ns0b55gf 0 4 1067 3599 0 14 Dtool_Ns0b55gf 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3703  3 row 1 3603  1 v 1 3641  
1234 14 Dtool_Ns0bvDEF 0 4 1068 3599 0 14 Dtool_Ns0bvDEF 332 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3703  3 col 1 3603  1 v 1 3595  
1235 14 Dtool_Ns0bac0m 0 4 1068 3599 0 14 Dtool_Ns0bac0m 311 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3703  3 col 1 3603  1 v 1 3641  
1236 14 Dtool_Ns0bdfDX 0 4 1069 3599 0 14 Dtool_Ns0bdfDX 301 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3704  10 result_vec 1 3640  3 row 1 3603  
1237 14 Dtool_Ns0bwROZ 0 7 1069 3640 2330 14 Dtool_Ns0bwROZ 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  3 row 1 3603  
1238 14 Dtool_Ns0bFuhg 0 7 1070 3640 2330 14 Dtool_Ns0bFuhg 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  3 col 1 3603  
1239 14 Dtool_Ns0b7qSI 0 7 1071 3594 2045 14 Dtool_Ns0b7qSI 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  3 row 1 3603  
1240 14 Dtool_Ns0bWJmP 0 7 1072 3594 2045 14 Dtool_Ns0bWJmP 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  3 col 1 3603  
1241 14 Dtool_Ns0bHBvR 0 4 1073 3599 0 14 Dtool_Ns0bHBvR 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3703  3 row 1 3603  3 col 1 3603  
1242 14 Dtool_Ns0b_Fgz 0 6 1073 3597 0 14 Dtool_Ns0b_Fgz 0 3 4 this 3 3704  3 row 1 3603  3 col 1 3603  
1243 14 Dtool_Ns0bn3T3 0 7 1074 3706 3053 14 Dtool_Ns0bn3T3 0 2 4 this 3 3703  1 i 1 3603  
1244 14 Dtool_Ns0bcUMI 0 7 1074 3707 3056 14 Dtool_Ns0bcUMI 0 2 4 this 3 3704  1 i 1 3603  
1245 14 Dtool_Ns0bkTdF 0 6 1075 3603 0 14 Dtool_Ns0bkTdF 266 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1246 14 Dtool_Ns0bR3pT 0 6 1076 3604 0 14 Dtool_Ns0bR3pT 310 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3704  
1247 14 Dtool_Ns0bH4Zy 0 6 1077 3597 0 14 Dtool_Ns0bH4Zy 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3704  3 row 1 3603  3 col 1 3603  
1248 14 Dtool_Ns0bl0_H 0 4 1078 3599 0 14 Dtool_Ns0bl0_H 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3703  3 row 1 3603  3 col 1 3603  5 value 1 3597  
1249 14 Dtool_Ns0bWvxR 0 4 1079 3599 0 14 Dtool_Ns0bWvxR 401 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3704  
1250 14 Dtool_Ns0bbMUR 0 6 1080 3603 0 14 Dtool_Ns0bbMUR 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3704  
1251 14 Dtool_Ns0bvhzu 0 6 1081 3604 0 14 Dtool_Ns0bvhzu 0 2 4 this 3 3704  5 other 1 3704  
1252 14 Dtool_Ns0bJQr_ 0 6 1082 3604 0 14 Dtool_Ns0bJQr_ 0 2 4 this 3 3704  5 other 1 3704  
1253 14 Dtool_Ns0bJhJ3 0 6 1083 3604 0 14 Dtool_Ns0bJhJ3 0 2 4 this 3 3704  5 other 1 3704  
1254 14 Dtool_Ns0bKM0m 0 6 1084 3603 0 14 Dtool_Ns0bKM0m 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 other 1 3704  
1255 14 Dtool_Ns0bxCZj 0 6 1084 3603 0 14 Dtool_Ns0bxCZj 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3704  5 other 1 3704  9 threshold 1 3597  
1256 14 Dtool_Ns0bW4In 0 6 1085 3598 0 14 Dtool_Ns0bW4In 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3704  
1257 14 Dtool_Ns0bG8W5 0 6 1085 3598 0 14 Dtool_Ns0bG8W5 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  9 threshold 1 3597  
1258 14 Dtool_Ns0bpcnj 0 6 1086 3598 0 14 Dtool_Ns0bpcnj 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  4 hash 1 3598  
1259 14 Dtool_Ns0bGmv2 0 6 1086 3598 0 14 Dtool_Ns0bGmv2 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3704  4 hash 1 3598  9 threshold 1 3597  
1260 14 Dtool_Ns0bHzw6 0 7 1087 3640 2330 14 Dtool_Ns0bHzw6 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 v 1 3641  
1261 14 Dtool_Ns0bE0BQ 0 7 1088 3594 2045 14 Dtool_Ns0bE0BQ 403 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 v 1 3595  
1262 14 Dtool_Ns0bI3MJ 0 7 1089 3594 2045 14 Dtool_Ns0bI3MJ 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 v 1 3595  
1263 14 Dtool_Ns0babOJ 0 7 1089 3640 2330 14 Dtool_Ns0babOJ 447 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 v 1 3641  
1264 14 Dtool_Ns0bJ0pj 0 7 1090 3640 2330 14 Dtool_Ns0bJ0pj 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 v 1 3641  
1265 14 Dtool_Ns0bBsdm 0 4 1091 3599 0 14 Dtool_Ns0bBsdm 265 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 v 1 3640  
1266 14 Dtool_Ns0bWmBi 0 4 1092 3599 0 14 Dtool_Ns0bWmBi 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 v 1 3594  
1267 14 Dtool_Ns0b3Y53 0 4 1093 3599 0 14 Dtool_Ns0b3Y53 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 v 1 3594  
1268 14 Dtool_Ns0bV04n 0 4 1093 3599 0 14 Dtool_Ns0bV04n 416 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 v 1 3640  
1269 14 Dtool_Ns0bYYwa 0 4 1094 3599 0 14 Dtool_Ns0bYYwa 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 v 1 3640  
1270 14 Dtool_Ns0bSR6_ 0 4 1095 3599 0 14 Dtool_Ns0bSR6_ 25 // this = other1 * other2 3 4 this 3 3703  6 other1 1 3704  6 other2 1 3704  
1271 14 Dtool_Ns0bPBTp 0 7 1096 3703 3131 14 Dtool_Ns0bPBTp 0 2 4 this 3 3704  5 other 1 3704  
1272 14 Dtool_Ns0bcFqV 0 7 1096 3703 3131 14 Dtool_Ns0bcFqV 0 2 4 this 3 3704  6 scalar 1 3597  
1273 14 Dtool_Ns0bMqMX 0 7 1097 3703 3131 14 Dtool_Ns0bMqMX 0 2 4 this 3 3704  6 scalar 1 3597  
1274 14 Dtool_Ns0bE0iA 0 6 1098 3703 0 14 Dtool_Ns0bE0iA 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 other 1 3704  
1275 14 Dtool_Ns0bkIJB 0 6 1099 3703 0 14 Dtool_Ns0bkIJB 281 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 other 1 3704  
1276 14 Dtool_Ns0b0XOA 0 6 1100 3703 0 14 Dtool_Ns0b0XOA 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 other 1 3704  
1277 14 Dtool_Ns0bMH5p 0 6 1100 3703 0 14 Dtool_Ns0bMH5p 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  6 scalar 1 3597  
1278 14 Dtool_Ns0bc8ar 0 6 1101 3703 0 14 Dtool_Ns0bc8ar 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  6 scalar 1 3597  
1279 14 Dtool_Ns0bdt4i 0 4 1102 3599 0 14 Dtool_Ns0bdt4i 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 other 1 3704  
1280 14 Dtool_Ns0b3zlL 0 6 1103 3597 0 14 Dtool_Ns0b3zlL 259 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3704  
1281 14 Dtool_Ns0blS3s 0 4 1104 3599 0 14 Dtool_Ns0blS3s 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 other 1 3704  
1282 14 Dtool_Ns0b8Ojo 0 4 1105 3599 0 14 Dtool_Ns0b8Ojo 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3703  
1283 14 Dtool_Ns0bUKZ2 0 6 1106 3604 0 14 Dtool_Ns0bUKZ2 808 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 other 1 3704  
1284 14 Dtool_Ns0bhuLY 0 6 1107 3604 0 14 Dtool_Ns0bhuLY 364 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3703  
1285 14 Dtool_Ns0bKfCp 0 6 1108 3604 0 14 Dtool_Ns0bKfCp 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 other 1 3704  
1286 14 Dtool_Ns0bKD6t 0 6 1108 3604 0 14 Dtool_Ns0bKD6t 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 other 1 3708  
1287 14 Dtool_Ns0bq8vo 0 6 1109 3704 0 14 Dtool_Ns0bq8vo 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1288 14 Dtool_Ns0boByR 0 4 1110 3599 0 14 Dtool_Ns0boByR 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 trans 1 3595  
1289 14 Dtool_Ns0bd4J2 0 4 1111 3599 0 14 Dtool_Ns0bd4J2 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 angle 1 3597  
1290 14 Dtool_Ns0bPymL 0 4 1111 3599 0 14 Dtool_Ns0bPymL 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3703  5 angle 1 3597  4 axis 1 3641  2 cs 1 3555  
1291 14 Dtool_Ns0bdiBV 0 4 1111 3599 0 14 Dtool_Ns0bdiBV 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3703  5 angle 1 3597  4 axis 1 3641  
1292 14 Dtool_Ns0bSAXQ 0 4 1112 3599 0 14 Dtool_Ns0bSAXQ 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 scale 1 3595  
1293 14 Dtool_Ns0bB2WI 0 4 1112 3599 0 14 Dtool_Ns0bB2WI 322 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 scale 1 3641  
1294 14 Dtool_Ns0b9Yv7 0 7 1113 3703 3131 14 Dtool_Ns0b9Yv7 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3595  
1295 14 Dtool_Ns0b1aHR 0 7 1113 3703 3131 14 Dtool_Ns0b1aHR 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 3597  2 ty 1 3597  
1296 14 Dtool_Ns0bwS2A 0 7 1114 3703 3131 14 Dtool_Ns0bwS2A 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 3597  
1297 14 Dtool_Ns0bzgNZ 0 7 1114 3703 3131 14 Dtool_Ns0bzgNZ 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3597  4 axis 1 3641  2 cs 1 3555  
1298 14 Dtool_Ns0by0rv 0 7 1114 3703 3131 14 Dtool_Ns0by0rv 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3597  4 axis 1 3641  
1299 14 Dtool_Ns0bfF2k 0 7 1115 3703 3131 14 Dtool_Ns0bfF2k 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3595  
1300 14 Dtool_Ns0bNp4k 0 7 1115 3703 3131 14 Dtool_Ns0bNp4k 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3641  
1301 14 Dtool_Ns0bKKk6 0 7 1115 3703 3131 14 Dtool_Ns0bKKk6 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 3597  2 sy 1 3597  
1302 14 Dtool_Ns0bx6ng 0 7 1115 3703 3131 14 Dtool_Ns0bx6ng 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3597  2 sy 1 3597  2 sz 1 3597  
1303 14 Dtool_Ns0bA7ca 0 4 1116 3599 0 14 Dtool_Ns0bA7ca 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3703  5 angle 1 3597  4 axis 1 3641  2 cs 1 3555  
1304 14 Dtool_Ns0biLqT 0 4 1116 3599 0 14 Dtool_Ns0biLqT 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3703  5 angle 1 3597  4 axis 1 3641  
1305 14 Dtool_Ns0bSl9G 0 7 1117 3703 3131 14 Dtool_Ns0bSl9G 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3597  4 axis 1 3641  2 cs 1 3555  
1306 14 Dtool_Ns0bif2Z 0 7 1117 3703 3131 14 Dtool_Ns0bif2Z 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3597  4 axis 1 3641  
1307 14 Dtool_Ns0b_oI_ 0 4 1118 3599 0 14 Dtool_Ns0b_oI_ 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3703  5 shear 1 3641  2 cs 1 3555  
1308 14 Dtool_Ns0b5pyk 0 4 1118 3599 0 14 Dtool_Ns0b5pyk 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  5 shear 1 3641  
1309 14 Dtool_Ns0b4aMC 0 7 1119 3703 3131 14 Dtool_Ns0b4aMC 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3641  2 cs 1 3555  
1310 14 Dtool_Ns0bKUWr 0 7 1119 3703 3131 14 Dtool_Ns0bKUWr 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3641  
1311 14 Dtool_Ns0biw5Z 0 7 1119 3703 3131 14 Dtool_Ns0biw5Z 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3597  4 shxz 1 3597  4 shyz 1 3597  2 cs 1 3555  
1312 14 Dtool_Ns0bwRFn 0 7 1119 3703 3131 14 Dtool_Ns0bwRFn 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 3597  4 shxz 1 3597  4 shyz 1 3597  
1313 14 Dtool_Ns0bZjM_ 0 4 1120 3599 0 14 Dtool_Ns0bZjM_ 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3703  5 scale 1 3641  5 shear 1 3641  2 cs 1 3555  
1314 14 Dtool_Ns0bFn4k 0 4 1120 3599 0 14 Dtool_Ns0bFn4k 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3703  5 scale 1 3641  5 shear 1 3641  
1315 14 Dtool_Ns0baF0T 0 7 1121 3703 3131 14 Dtool_Ns0baF0T 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3641  5 shear 1 3641  2 cs 1 3555  
1316 14 Dtool_Ns0b_Jjt 0 7 1121 3703 3131 14 Dtool_Ns0b_Jjt 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 3641  5 shear 1 3641  
1317 14 Dtool_Ns0biFf9 0 7 1121 3703 3131 14 Dtool_Ns0biFf9 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3597  2 sy 1 3597  2 sz 1 3597  4 shxy 1 3597  4 shxz 1 3597  4 shyz 1 3597  2 cs 1 3555  
1318 14 Dtool_Ns0bie6G 0 7 1121 3703 3131 14 Dtool_Ns0bie6G 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 3597  2 sy 1 3597  2 sz 1 3597  4 shxy 1 3597  4 shxz 1 3597  4 shyz 1 3597  
1319 14 Dtool_Ns0bjv0p 0 6 1122 3704 0 14 Dtool_Ns0bjv0p 350 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3555  2 to 1 3555  
1320 14 Dtool_Ns0b5LZV 0 6 1123 3604 0 14 Dtool_Ns0b5LZV 342 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 other 1 3704  
1321 14 Dtool_Ns0bjSL6 0 6 1123 3604 0 14 Dtool_Ns0bjSL6 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3704  5 other 1 3704  9 threshold 1 3597  
1322 14 Dtool_Ns0bzE1n 0 4 1124 3599 0 14 Dtool_Ns0bzE1n 215 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  3 out 1 3607  
1323 14 Dtool_Ns0bxi6e 0 4 1125 3599 0 14 Dtool_Ns0bxi6e 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3704  3 out 1 3607  12 indent_level 1 3603  
1324 14 Dtool_Ns0bt5Vo 0 4 1125 3599 0 14 Dtool_Ns0bt5Vo 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  3 out 1 3607  
1325 14 Dtool_Ns0bf4Xq 0 4 1126 3599 0 14 Dtool_Ns0bf4Xq 0 3 4 this 3 3704  3 out 1 3607  10 class_name 1 3602  
1326 14 Dtool_Ns0bOVov 0 4 1127 3599 0 14 Dtool_Ns0bOVov 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  7 hashgen 1 3605  
1327 14 Dtool_Ns0bm__V 0 4 1127 3599 0 14 Dtool_Ns0bm__V 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3704  7 hashgen 1 3605  9 threshold 1 3597  
1328 14 Dtool_Ns0brNOZ 0 4 1128 3599 0 14 Dtool_Ns0brNOZ 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  11 destination 1 3609  
1329 14 Dtool_Ns0bhdF9 0 4 1129 3599 0 14 Dtool_Ns0bhdF9 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  4 scan 1 3611  
1330 14 Dtool_Ns0bZmJJ 0 4 1130 3599 0 14 Dtool_Ns0bZmJJ 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  11 destination 1 3609  
1331 14 Dtool_Ns0b4drJ 0 4 1131 3599 0 14 Dtool_Ns0b4drJ 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  6 source 1 3611  
1332 14 Dtool_Ns0bIXnT 0 7 1132 3614 0 14 Dtool_Ns0bIXnT 0 0 
1333 14 Dtool_Ns0bsICl 0 4 1051 3599 0 14 Dtool_Ns0bsICl 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3706  1 i 1 3603  
1334 14 Dtool_Ns0bUN1G 0 6 1051 3597 0 14 Dtool_Ns0bUN1G 0 2 4 this 3 3710  1 i 1 3603  
1335 14 Dtool_Ns0bg9AW 0 4 1052 3599 0 14 Dtool_Ns0bg9AW 0 3 4 this 3 3706  1 i 1 3603  1 v 1 3597  
1336 14 Dtool_Ns0bOlSB 0 6 1053 3603 0 14 Dtool_Ns0bOlSB 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1337 14 Dtool_Ns0bKWHJ 0 6 1056 3597 0 14 Dtool_Ns0bKWHJ 0 2 4 this 3 3712  1 i 1 3603  
1338 14 Dtool_Ns0bS_uX 0 6 1057 3603 0 14 Dtool_Ns0bS_uX 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1339 14 Dtool_Ns0b0VSC 0 7 1146 3714 3225 14 Dtool_Ns0b0VSC 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1340 14 Dtool_Ns0bfs5c 0 7 1146 3714 3225 14 Dtool_Ns0bfs5c 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 3704  
1341 14 Dtool_Ns0b6_z9 0 7 1146 3714 3225 14 Dtool_Ns0b6_z9 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 3704  5 trans 1 3641  
1342 14 Dtool_Ns0bX354 0 7 1146 3714 3225 14 Dtool_Ns0bX354 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3708  
1343 14 Dtool_Ns0b2Ai0 0 7 1146 3714 3225 14 Dtool_Ns0b2Ai0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3715  
1344 14 Dtool_Ns0bkfiq 0 7 1146 3714 3225 14 Dtool_Ns0bkfiq 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3597  3 e01 1 3597  3 e02 1 3597  3 e03 1 3597  3 e10 1 3597  3 e11 1 3597  3 e12 1 3597  3 e13 1 3597  3 e20 1 3597  3 e21 1 3597  3 e22 1 3597  3 e23 1 3597  3 e30 1 3597  3 e31 1 3597  3 e32 1 3597  3 e33 1 3597  
1345 14 Dtool_Ns0bkLb0 0 6 1147 3714 0 14 Dtool_Ns0bkLb0 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 other 1 3708  
1346 14 Dtool_Ns0b2l3p 0 6 1147 3714 0 14 Dtool_Ns0b2l3p 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 other 1 3715  
1347 14 Dtool_Ns0bJ5tl 0 6 1147 3714 0 14 Dtool_Ns0bJ5tl 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  10 fill_value 1 3597  
1348 14 Dtool_Ns0b2oeX 0 4 1148 3599 0 14 Dtool_Ns0b2oeX 0 2 4 this 3 3714  4 size 1 3598  
1349 14 Dtool_Ns0bX4ko 0 6 1151 3600 0 14 Dtool_Ns0bX4ko 0 1 4 this 3 3708  
1350 14 Dtool_Ns0bhn3a 0 4 1152 3599 0 14 Dtool_Ns0bhn3a 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  10 fill_value 1 3597  
1351 14 Dtool_Ns0bb_Gk 0 4 1153 3599 0 14 Dtool_Ns0bb_Gk 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3714  3 e00 1 3597  3 e01 1 3597  3 e02 1 3597  3 e03 1 3597  3 e10 1 3597  3 e11 1 3597  3 e12 1 3597  3 e13 1 3597  3 e20 1 3597  3 e21 1 3597  3 e22 1 3597  3 e23 1 3597  3 e30 1 3597  3 e31 1 3597  3 e32 1 3597  3 e33 1 3597  
1352 14 Dtool_Ns0bQITa 0 4 1154 3599 0 14 Dtool_Ns0bQITa 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  6 upper3 1 3704  
1353 14 Dtool_Ns0b1ZhQ 0 7 1155 3703 3131 14 Dtool_Ns0b1ZhQ 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3708  
1354 14 Dtool_Ns0b2ZkG 0 4 1156 3599 0 14 Dtool_Ns0b2ZkG 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3714  3 row 1 3603  1 v 1 3641  
1355 14 Dtool_Ns0blZUo 0 4 1156 3599 0 14 Dtool_Ns0blZUo 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3714  3 row 1 3603  1 v 1 3668  
1356 14 Dtool_Ns0bb83N 0 4 1157 3599 0 14 Dtool_Ns0bb83N 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3714  3 col 1 3603  1 v 1 3641  
1357 14 Dtool_Ns0b28nv 0 4 1157 3599 0 14 Dtool_Ns0b28nv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3714  3 col 1 3603  1 v 1 3668  
1358 14 Dtool_Ns0bn__u 0 4 1158 3599 0 14 Dtool_Ns0bn__u 294 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3708  10 result_vec 1 3667  3 row 1 3603  
1359 14 Dtool_Ns0bxxRA 0 7 1158 3667 2714 14 Dtool_Ns0bxxRA 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  3 row 1 3603  
1360 14 Dtool_Ns0bCOlH 0 7 1159 3667 2714 14 Dtool_Ns0bCOlH 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  3 col 1 3603  
1361 14 Dtool_Ns0bdF7x 0 4 1160 3599 0 14 Dtool_Ns0bdF7x 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3708  10 result_vec 1 3640  3 row 1 3603  
1362 14 Dtool_Ns0bJMW2 0 7 1160 3640 2330 14 Dtool_Ns0bJMW2 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  3 row 1 3603  
1363 14 Dtool_Ns0bkop9 0 7 1161 3640 2330 14 Dtool_Ns0bkop9 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  3 col 1 3603  
1364 14 Dtool_Ns0bHhy4 0 4 1162 3599 0 14 Dtool_Ns0bHhy4 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3714  3 row 1 3603  3 col 1 3603  
1365 14 Dtool_Ns0b_lka 0 6 1162 3597 0 14 Dtool_Ns0b_lka 0 3 4 this 3 3708  3 row 1 3603  3 col 1 3603  
1366 14 Dtool_Ns0bkXWe 0 7 1163 3717 3137 14 Dtool_Ns0bkXWe 0 2 4 this 3 3714  1 i 1 3603  
1367 14 Dtool_Ns0bc0Pv 0 7 1163 3718 3140 14 Dtool_Ns0bc0Pv 0 2 4 this 3 3708  1 i 1 3603  
1368 14 Dtool_Ns0bkzgs 0 6 1164 3603 0 14 Dtool_Ns0bkzgs 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1369 14 Dtool_Ns0bRXs6 0 6 1165 3604 0 14 Dtool_Ns0bRXs6 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3708  
1370 14 Dtool_Ns0bGYcZ 0 6 1166 3597 0 14 Dtool_Ns0bGYcZ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3708  3 row 1 3603  3 col 1 3603  
1371 14 Dtool_Ns0blUBv 0 4 1167 3599 0 14 Dtool_Ns0blUBv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3714  3 row 1 3603  3 col 1 3603  5 value 1 3597  
1372 14 Dtool_Ns0bWP14 0 4 1168 3599 0 14 Dtool_Ns0bWP14 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3708  
1373 14 Dtool_Ns0bbsX4 0 6 1169 3603 0 14 Dtool_Ns0bbsX4 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3708  
1374 14 Dtool_Ns0bKK3S 0 4 1170 3599 0 14 Dtool_Ns0bKK3S 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3714  
1375 14 Dtool_Ns0bBQDa 0 4 1170 3599 0 14 Dtool_Ns0bBQDa 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3708  
1376 14 Dtool_Ns0bm_kL 0 4 1171 3599 0 14 Dtool_Ns0bm_kL 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3714  
1377 14 Dtool_Ns0bgxNr 0 4 1171 3599 0 14 Dtool_Ns0bgxNr 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3708  
1378 14 Dtool_Ns0b8l5V 0 6 1172 3604 0 14 Dtool_Ns0b8l5V 0 2 4 this 3 3708  5 other 1 3708  
1379 14 Dtool_Ns0bI59n 0 6 1173 3604 0 14 Dtool_Ns0bI59n 0 2 4 this 3 3708  5 other 1 3708  
1380 14 Dtool_Ns0bIOaf 0 6 1174 3604 0 14 Dtool_Ns0bIOaf 0 2 4 this 3 3708  5 other 1 3708  
1381 14 Dtool_Ns0bzB6N 0 6 1175 3603 0 14 Dtool_Ns0bzB6N 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  5 other 1 3708  
1382 14 Dtool_Ns0bmOfK 0 6 1175 3603 0 14 Dtool_Ns0bmOfK 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3708  5 other 1 3708  9 threshold 1 3597  
1383 14 Dtool_Ns0bVYMO 0 6 1176 3598 0 14 Dtool_Ns0bVYMO 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3708  
1384 14 Dtool_Ns0bFcZg 0 6 1176 3598 0 14 Dtool_Ns0bFcZg 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  9 threshold 1 3597  
1385 14 Dtool_Ns0bo8oK 0 6 1177 3598 0 14 Dtool_Ns0bo8oK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  4 hash 1 3598  
1386 14 Dtool_Ns0bJGyd 0 6 1177 3598 0 14 Dtool_Ns0bJGyd 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3708  4 hash 1 3598  9 threshold 1 3597  
1387 14 Dtool_Ns0bmWbi 0 7 1178 3667 2714 14 Dtool_Ns0bmWbi 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  1 v 1 3668  
1388 14 Dtool_Ns0bF0Ie 0 7 1179 3640 2330 14 Dtool_Ns0bF0Ie 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  1 v 1 3641  
1389 14 Dtool_Ns0bSxet 0 7 1180 3640 2330 14 Dtool_Ns0bSxet 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  1 v 1 3641  
1390 14 Dtool_Ns0ba7Sw 0 7 1181 3640 2330 14 Dtool_Ns0ba7Sw 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  1 v 1 3641  
1391 14 Dtool_Ns0bIUtK 0 7 1182 3640 2330 14 Dtool_Ns0bIUtK 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  1 v 1 3641  
1392 14 Dtool_Ns0buEmN 0 4 1183 3599 0 14 Dtool_Ns0buEmN 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  1 v 1 3667  
1393 14 Dtool_Ns0bXa9N 0 4 1184 3599 0 14 Dtool_Ns0bXa9N 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  1 v 1 3640  
1394 14 Dtool_Ns0b9QYo 0 4 1185 3599 0 14 Dtool_Ns0b9QYo 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  1 v 1 3640  
1395 14 Dtool_Ns0bUU8O 0 4 1186 3599 0 14 Dtool_Ns0bUU8O 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  1 v 1 3640  
1396 14 Dtool_Ns0bf4zB 0 4 1187 3599 0 14 Dtool_Ns0bf4zB 355 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  1 v 1 3640  
1397 14 Dtool_Ns0bcv3G 0 4 1188 3599 0 14 Dtool_Ns0bcv3G 25 // this = other1 * other2 3 4 this 3 3714  6 other1 1 3708  6 other2 1 3708  
1398 14 Dtool_Ns0bcFZQ 0 7 1189 3714 3225 14 Dtool_Ns0bcFZQ 0 2 4 this 3 3708  5 other 1 3708  
1399 14 Dtool_Ns0bclu8 0 7 1189 3714 3225 14 Dtool_Ns0bclu8 0 2 4 this 3 3708  6 scalar 1 3597  
1400 14 Dtool_Ns0bMKP_ 0 7 1190 3714 3225 14 Dtool_Ns0bMKP_ 0 2 4 this 3 3708  6 scalar 1 3597  
1401 14 Dtool_Ns0bEv0o 0 6 1191 3714 0 14 Dtool_Ns0bEv0o 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 other 1 3708  
1402 14 Dtool_Ns0bkjbp 0 6 1192 3714 0 14 Dtool_Ns0bkjbp 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 other 1 3708  
1403 14 Dtool_Ns0b0Ogo 0 6 1193 3714 0 14 Dtool_Ns0b0Ogo 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 other 1 3708  
1404 14 Dtool_Ns0bNn8Q 0 6 1193 3714 0 14 Dtool_Ns0bNn8Q 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  6 scalar 1 3597  
1405 14 Dtool_Ns0bdceS 0 6 1194 3714 0 14 Dtool_Ns0bdceS 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  6 scalar 1 3597  
1406 14 Dtool_Ns0blNcN 0 4 1195 3599 0 14 Dtool_Ns0blNcN 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 other 1 3708  
1407 14 Dtool_Ns0brI6L 0 4 1196 3599 0 14 Dtool_Ns0brI6L 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 other 1 3708  
1408 14 Dtool_Ns0b9umP 0 4 1197 3599 0 14 Dtool_Ns0b9umP 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3714  
1409 14 Dtool_Ns0bVtqe 0 6 1198 3604 0 14 Dtool_Ns0bVtqe 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 other 1 3708  
1410 14 Dtool_Ns0bKvHn 0 6 1199 3604 0 14 Dtool_Ns0bKvHn 149 // bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 3714  5 other 1 3708  
1411 14 Dtool_Ns0bhOP_ 0 6 1200 3604 0 14 Dtool_Ns0bhOP_ 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3714  
1412 14 Dtool_Ns0bWTTf 0 4 1201 3599 0 14 Dtool_Ns0bWTTf 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3714  5 other 1 3708  6 weight 1 3597  
1413 14 Dtool_Ns0brczP 0 6 1202 3708 0 14 Dtool_Ns0brczP 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1414 14 Dtool_Ns0bmxV_ 0 6 1203 3708 0 14 Dtool_Ns0bmxV_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
1415 14 Dtool_Ns0bLEvk 0 6 1204 3708 0 14 Dtool_Ns0bLEvk 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1416 14 Dtool_Ns0bTiW8 0 4 1205 3599 0 14 Dtool_Ns0bTiW8 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 trans 1 3641  
1417 14 Dtool_Ns0bPSpy 0 4 1206 3599 0 14 Dtool_Ns0bPSpy 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3714  5 angle 1 3597  4 axis 1 3641  2 cs 1 3555  
1418 14 Dtool_Ns0bdCF8 0 4 1206 3599 0 14 Dtool_Ns0bdCF8 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3714  5 angle 1 3597  4 axis 1 3641  
1419 14 Dtool_Ns0bBbgB 0 4 1207 3599 0 14 Dtool_Ns0bBbgB 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3714  5 angle 1 3597  4 axis 1 3641  2 cs 1 3555  
1420 14 Dtool_Ns0biru6 0 4 1207 3599 0 14 Dtool_Ns0biru6 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3714  5 angle 1 3597  4 axis 1 3641  
1421 14 Dtool_Ns0bBWav 0 4 1208 3599 0 14 Dtool_Ns0bBWav 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 scale 1 3641  
1422 14 Dtool_Ns0b_IMl 0 4 1209 3599 0 14 Dtool_Ns0b_IMl 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3714  5 shear 1 3641  2 cs 1 3555  
1423 14 Dtool_Ns0b6J2L 0 4 1209 3599 0 14 Dtool_Ns0b6J2L 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  5 shear 1 3641  
1424 14 Dtool_Ns0baDQm 0 4 1210 3599 0 14 Dtool_Ns0baDQm 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3714  5 scale 1 3641  5 shear 1 3641  2 cs 1 3555  
1425 14 Dtool_Ns0bCH7L 0 4 1210 3599 0 14 Dtool_Ns0bCH7L 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3714  5 scale 1 3641  5 shear 1 3641  
1426 14 Dtool_Ns0bjyza 0 7 1211 3714 3225 14 Dtool_Ns0bjyza 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3641  
1427 14 Dtool_Ns0bQ9hS 0 7 1211 3714 3225 14 Dtool_Ns0bQ9hS 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 3597  2 ty 1 3597  2 tz 1 3597  
1428 14 Dtool_Ns0b8AQA 0 7 1212 3714 3225 14 Dtool_Ns0b8AQA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3597  4 axis 1 3641  2 cs 1 3555  
1429 14 Dtool_Ns0bzUuW 0 7 1212 3714 3225 14 Dtool_Ns0bzUuW 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3597  4 axis 1 3641  
1430 14 Dtool_Ns0bSFBu 0 7 1213 3714 3225 14 Dtool_Ns0bSFBu 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3597  4 axis 1 3641  2 cs 1 3555  
1431 14 Dtool_Ns0bl_5A 0 7 1213 3714 3225 14 Dtool_Ns0bl_5A 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3597  4 axis 1 3641  
1432 14 Dtool_Ns0bOJ8L 0 7 1214 3714 3225 14 Dtool_Ns0bOJ8L 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3641  
1433 14 Dtool_Ns0bgj9H 0 7 1214 3714 3225 14 Dtool_Ns0bgj9H 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3597  
1434 14 Dtool_Ns0bwaqH 0 7 1214 3714 3225 14 Dtool_Ns0bwaqH 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3597  2 sy 1 3597  2 sz 1 3597  
1435 14 Dtool_Ns0b46Pp 0 7 1215 3714 3225 14 Dtool_Ns0b46Pp 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3641  2 cs 1 3555  
1436 14 Dtool_Ns0bJ0aS 0 7 1215 3714 3225 14 Dtool_Ns0bJ0aS 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3641  
1437 14 Dtool_Ns0blQ9A 0 7 1215 3714 3225 14 Dtool_Ns0blQ9A 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3597  4 shxz 1 3597  4 shyz 1 3597  2 cs 1 3555  
1438 14 Dtool_Ns0bxxJO 0 7 1215 3714 3225 14 Dtool_Ns0bxxJO 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 3597  4 shxz 1 3597  4 shyz 1 3597  
1439 14 Dtool_Ns0bal56 0 7 1216 3714 3225 14 Dtool_Ns0bal56 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3641  5 shear 1 3641  2 cs 1 3555  
1440 14 Dtool_Ns0bgpnU 0 7 1216 3714 3225 14 Dtool_Ns0bgpnU 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 3641  5 shear 1 3641  
1441 14 Dtool_Ns0b9lik 0 7 1216 3714 3225 14 Dtool_Ns0b9lik 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3597  2 sy 1 3597  2 sz 1 3597  4 shxy 1 3597  4 shxz 1 3597  4 shyz 1 3597  2 cs 1 3555  
1442 14 Dtool_Ns0bi__t 0 7 1216 3714 3225 14 Dtool_Ns0bi__t 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 3597  2 sy 1 3597  2 sz 1 3597  4 shxy 1 3597  4 shxz 1 3597  4 shyz 1 3597  
1443 14 Dtool_Ns0blIST 0 6 1217 3708 0 14 Dtool_Ns0blIST 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1444 14 Dtool_Ns0blG2Q 0 6 1218 3708 0 14 Dtool_Ns0blG2Q 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1445 14 Dtool_Ns0bgP4Q 0 6 1219 3708 0 14 Dtool_Ns0bgP4Q 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3555  2 to 1 3555  
1446 14 Dtool_Ns0b4Lgj 0 6 1220 3604 0 14 Dtool_Ns0b4Lgj 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  5 other 1 3708  
1447 14 Dtool_Ns0b9SSI 0 6 1220 3604 0 14 Dtool_Ns0b9SSI 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3708  5 other 1 3708  9 threshold 1 3597  
1448 14 Dtool_Ns0b0k4O 0 4 1221 3599 0 14 Dtool_Ns0b0k4O 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  3 out 1 3607  
1449 14 Dtool_Ns0bwC_F 0 4 1222 3599 0 14 Dtool_Ns0bwC_F 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3708  3 out 1 3607  12 indent_level 1 3603  
1450 14 Dtool_Ns0bsZZP 0 4 1222 3599 0 14 Dtool_Ns0bsZZP 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  3 out 1 3607  
1451 14 Dtool_Ns0beYaR 0 4 1223 3599 0 14 Dtool_Ns0beYaR 0 3 4 this 3 3708  3 out 1 3607  10 class_name 1 3602  
1452 14 Dtool_Ns0bJ1rW 0 4 1224 3599 0 14 Dtool_Ns0bJ1rW 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  7 hashgen 1 3605  
1453 14 Dtool_Ns0bmfB9 0 4 1224 3599 0 14 Dtool_Ns0bmfB9 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3708  7 hashgen 1 3605  5 scale 1 3597  
1454 14 Dtool_Ns0bstRA 0 4 1225 3599 0 14 Dtool_Ns0bstRA 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  11 destination 1 3609  
1455 14 Dtool_Ns0bg9Jk 0 4 1226 3599 0 14 Dtool_Ns0bg9Jk 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  4 scan 1 3611  
1456 14 Dtool_Ns0bZGNw 0 4 1227 3599 0 14 Dtool_Ns0bZGNw 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3708  11 destination 1 3609  
1457 14 Dtool_Ns0b49vw 0 4 1228 3599 0 14 Dtool_Ns0b49vw 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3714  6 source 1 3611  
1458 14 Dtool_Ns0bI3r6 0 7 1229 3614 0 14 Dtool_Ns0bI3r6 0 0 
1459 14 Dtool_Ns0broGM 0 4 1138 3599 0 14 Dtool_Ns0broGM 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  1 i 1 3603  
1460 14 Dtool_Ns0bUt2t 0 6 1138 3597 0 14 Dtool_Ns0bUt2t 0 2 4 this 3 3719  1 i 1 3603  
1461 14 Dtool_Ns0bgdD9 0 4 1139 3599 0 14 Dtool_Ns0bgdD9 0 3 4 this 3 3717  1 i 1 3603  1 v 1 3597  
1462 14 Dtool_Ns0bOFWo 0 6 1140 3603 0 14 Dtool_Ns0bOFWo 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1463 14 Dtool_Ns0bK2Kw 0 6 1143 3597 0 14 Dtool_Ns0bK2Kw 0 2 4 this 3 3721  1 i 1 3603  
1464 14 Dtool_Ns0bSfy_ 0 6 1144 3603 0 14 Dtool_Ns0bSfy_ 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1465 14 Dtool_Ns0bcyhV 0 7 1232 3723 3233 14 Dtool_Ns0bcyhV 234 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1466 14 Dtool_Ns0b7kWw 0 7 1232 3723 3233 14 Dtool_Ns0b7kWw 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3708  
1467 14 Dtool_Ns0bFuRt 0 7 1232 3723 3233 14 Dtool_Ns0bFuRt 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3715  
1468 14 Dtool_Ns0bS52S 0 7 1232 3723 3233 14 Dtool_Ns0bS52S 226 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3597  3 e01 1 3597  3 e02 1 3597  3 e03 1 3597  3 e10 1 3597  3 e11 1 3597  3 e12 1 3597  3 e13 1 3597  3 e20 1 3597  3 e21 1 3597  3 e22 1 3597  3 e23 1 3597  3 e30 1 3597  3 e31 1 3597  3 e32 1 3597  3 e33 1 3597  
1469 14 Dtool_Ns0bs_r9 0 6 1233 3723 0 14 Dtool_Ns0bs_r9 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3723  4 copy 1 3708  
1470 14 Dtool_Ns0bdaVs 0 6 1233 3723 0 14 Dtool_Ns0bdaVs 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3723  4 copy 1 3715  
1471 14 Dtool_Ns0bkKYz 0 4 1234 3599 0 14 Dtool_Ns0bkKYz 221 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3723  3 e00 1 3597  3 e01 1 3597  3 e02 1 3597  3 e03 1 3597  3 e10 1 3597  3 e11 1 3597  3 e12 1 3597  3 e13 1 3597  3 e20 1 3597  3 e21 1 3597  3 e22 1 3597  3 e23 1 3597  3 e30 1 3597  3 e31 1 3597  3 e32 1 3597  3 e33 1 3597  
1472 14 Dtool_Ns0biXNG 0 4 1235 3599 0 14 Dtool_Ns0biXNG 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3723  3 row 1 3603  3 col 1 3603  
1473 14 Dtool_Ns0b6Ka6 0 6 1235 3597 0 14 Dtool_Ns0b6Ka6 0 3 4 this 3 3715  3 row 1 3603  3 col 1 3603  
1474 14 Dtool_Ns0bk_OW 0 4 1236 3599 0 14 Dtool_Ns0bk_OW 410 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3715  
1475 14 Dtool_Ns0biJJW 0 6 1237 3603 0 14 Dtool_Ns0biJJW 291 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3715  
1476 14 Dtool_Ns0bX_d_ 0 7 1238 3614 0 14 Dtool_Ns0bX_d_ 0 0 
1477 14 Dtool_Ns0bHKtQ 0 7 1250 3724 3315 14 Dtool_Ns0bHKtQ 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1478 14 Dtool_Ns0bgwPr 0 7 1250 3724 3315 14 Dtool_Ns0bgwPr 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3725  
1479 14 Dtool_Ns0b1oPv 0 7 1250 3724 3315 14 Dtool_Ns0b1oPv 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 3618  3 e01 1 3618  3 e02 1 3618  3 e10 1 3618  3 e11 1 3618  3 e12 1 3618  3 e20 1 3618  3 e21 1 3618  3 e22 1 3618  
1480 14 Dtool_Ns0b9QZH 0 6 1251 3724 0 14 Dtool_Ns0b9QZH 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 other 1 3725  
1481 14 Dtool_Ns0bByUJ 0 6 1251 3724 0 14 Dtool_Ns0bByUJ 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  10 fill_value 1 3618  
1482 14 Dtool_Ns0beI6s 0 4 1252 3599 0 14 Dtool_Ns0beI6s 0 2 4 this 3 3724  4 size 1 3598  
1483 14 Dtool_Ns0bvZA_ 0 6 1255 3600 0 14 Dtool_Ns0bvZA_ 0 1 4 this 3 3725  
1484 14 Dtool_Ns0btMiW 0 4 1256 3599 0 14 Dtool_Ns0btMiW 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  10 fill_value 1 3618  
1485 14 Dtool_Ns0bYSjO 0 4 1257 3599 0 14 Dtool_Ns0bYSjO 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 3724  3 e00 1 3618  3 e01 1 3618  3 e02 1 3618  3 e10 1 3618  3 e11 1 3618  3 e12 1 3618  3 e20 1 3618  3 e21 1 3618  3 e22 1 3618  
1486 14 Dtool_Ns0bMjRK 0 4 1258 3599 0 14 Dtool_Ns0bMjRK 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3724  3 row 1 3603  1 v 1 3616  
1487 14 Dtool_Ns0b7jBs 0 4 1258 3599 0 14 Dtool_Ns0b7jBs 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3724  3 row 1 3603  1 v 1 3644  
1488 14 Dtool_Ns0bhFlR 0 4 1259 3599 0 14 Dtool_Ns0bhFlR 332 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3724  3 col 1 3603  1 v 1 3616  
1489 14 Dtool_Ns0bcGVz 0 4 1259 3599 0 14 Dtool_Ns0bcGVz 311 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3724  3 col 1 3603  1 v 1 3644  
1490 14 Dtool_Ns0bFRjb 0 4 1260 3599 0 14 Dtool_Ns0bFRjb 301 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3725  10 result_vec 1 3643  3 row 1 3603  
1491 14 Dtool_Ns0bpQuV 0 7 1260 3643 2403 14 Dtool_Ns0bpQuV 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  3 row 1 3603  
1492 14 Dtool_Ns0bqvBd 0 7 1261 3643 2403 14 Dtool_Ns0bqvBd 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  3 col 1 3603  
1493 14 Dtool_Ns0bCqyE 0 7 1262 3615 2108 14 Dtool_Ns0bCqyE 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  3 row 1 3603  
1494 14 Dtool_Ns0bxKGM 0 7 1263 3615 2108 14 Dtool_Ns0bxKGM 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  3 col 1 3603  
1495 14 Dtool_Ns0bYAPO 0 4 1264 3599 0 14 Dtool_Ns0bYAPO 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3724  3 row 1 3603  3 col 1 3603  
1496 14 Dtool_Ns0bnEAw 0 6 1264 3618 0 14 Dtool_Ns0bnEAw 0 3 4 this 3 3725  3 row 1 3603  3 col 1 3603  
1497 14 Dtool_Ns0b80zz 0 7 1265 3727 3237 14 Dtool_Ns0b80zz 0 2 4 this 3 3724  1 i 1 3603  
1498 14 Dtool_Ns0b1LsE 0 7 1265 3728 3240 14 Dtool_Ns0b1LsE 0 2 4 this 3 3725  1 i 1 3603  
1499 14 Dtool_Ns0bDT9B 0 6 1266 3603 0 14 Dtool_Ns0bDT9B 266 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1500 14 Dtool_Ns0bu3JQ 0 6 1267 3604 0 14 Dtool_Ns0bu3JQ 310 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3725  
1501 14 Dtool_Ns0bu75u 0 6 1268 3618 0 14 Dtool_Ns0bu75u 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3725  3 row 1 3603  3 col 1 3603  
1502 14 Dtool_Ns0bYWBO 0 4 1269 3599 0 14 Dtool_Ns0bYWBO 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3724  3 row 1 3603  3 col 1 3603  5 value 1 3618  
1503 14 Dtool_Ns0btvRO 0 4 1270 3599 0 14 Dtool_Ns0btvRO 401 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3725  
1504 14 Dtool_Ns0bwP0N 0 6 1271 3603 0 14 Dtool_Ns0bwP0N 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3725  
1505 14 Dtool_Ns0bGv3o 0 6 1272 3604 0 14 Dtool_Ns0bGv3o 0 2 4 this 3 3725  5 other 1 3725  
1506 14 Dtool_Ns0bRREu 0 6 1273 3604 0 14 Dtool_Ns0bRREu 0 2 4 this 3 3725  5 other 1 3725  
1507 14 Dtool_Ns0bRgil 0 6 1274 3604 0 14 Dtool_Ns0bRgil 0 2 4 this 3 3725  5 other 1 3725  
1508 14 Dtool_Ns0bt_3g 0 6 1275 3603 0 14 Dtool_Ns0bt_3g 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  5 other 1 3725  
1509 14 Dtool_Ns0bSbnp 0 6 1275 3603 0 14 Dtool_Ns0bSbnp 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3725  5 other 1 3725  9 threshold 1 3618  
1510 14 Dtool_Ns0bt7oj 0 6 1276 3598 0 14 Dtool_Ns0bt7oj 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3725  
1511 14 Dtool_Ns0bACnK 0 6 1276 3598 0 14 Dtool_Ns0bACnK 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  9 threshold 1 3618  
1512 14 Dtool_Ns0bQfHg 0 6 1277 3598 0 14 Dtool_Ns0bQfHg 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  4 hash 1 3598  
1513 14 Dtool_Ns0be2a4 0 6 1277 3598 0 14 Dtool_Ns0be2a4 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3725  4 hash 1 3598  9 threshold 1 3618  
1514 14 Dtool_Ns0buQNQ 0 7 1278 3643 2403 14 Dtool_Ns0buQNQ 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  1 v 1 3644  
1515 14 Dtool_Ns0bS1BJ 0 7 1279 3615 2108 14 Dtool_Ns0bS1BJ 403 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  1 v 1 3616  
1516 14 Dtool_Ns0bRGPD 0 7 1280 3615 2108 14 Dtool_Ns0bRGPD 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  1 v 1 3616  
1517 14 Dtool_Ns0bDiSD 0 7 1280 3643 2403 14 Dtool_Ns0bDiSD 447 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  1 v 1 3644  
1518 14 Dtool_Ns0bsKJA 0 7 1281 3643 2403 14 Dtool_Ns0bsKJA 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  1 v 1 3644  
1519 14 Dtool_Ns0bqJFe 0 4 1282 3599 0 14 Dtool_Ns0bqJFe 265 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  1 v 1 3643  
1520 14 Dtool_Ns0bqhFm 0 4 1283 3599 0 14 Dtool_Ns0bqhFm 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  1 v 1 3615  
1521 14 Dtool_Ns0bu6G0 0 4 1284 3599 0 14 Dtool_Ns0bu6G0 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  1 v 1 3615  
1522 14 Dtool_Ns0bMVHk 0 4 1284 3599 0 14 Dtool_Ns0bMVHk 416 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  1 v 1 3643  
1523 14 Dtool_Ns0bhQR7 0 4 1285 3599 0 14 Dtool_Ns0bhQR7 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  1 v 1 3643  
1524 14 Dtool_Ns0bZ5GD 0 4 1286 3599 0 14 Dtool_Ns0bZ5GD 25 // this = other1 * other2 3 4 this 3 3724  6 other1 1 3725  6 other2 1 3725  
1525 14 Dtool_Ns0bmPXj 0 7 1287 3724 3315 14 Dtool_Ns0bmPXj 0 2 4 this 3 3725  5 other 1 3725  
1526 14 Dtool_Ns0b_fQe 0 7 1287 3724 3315 14 Dtool_Ns0b_fQe 0 2 4 this 3 3725  6 scalar 1 3618  
1527 14 Dtool_Ns0bOoxf 0 7 1288 3724 3315 14 Dtool_Ns0bOoxf 0 2 4 this 3 3725  6 scalar 1 3618  
1528 14 Dtool_Ns0b_07u 0 6 1289 3724 0 14 Dtool_Ns0b_07u 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 other 1 3725  
1529 14 Dtool_Ns0bfIiv 0 6 1290 3724 0 14 Dtool_Ns0bfIiv 281 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 other 1 3725  
1530 14 Dtool_Ns0bPXnu 0 6 1291 3724 0 14 Dtool_Ns0bPXnu 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 other 1 3725  
1531 14 Dtool_Ns0bX0Qs 0 6 1291 3724 0 14 Dtool_Ns0bX0Qs 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  6 scalar 1 3618  
1532 14 Dtool_Ns0bndyt 0 6 1292 3724 0 14 Dtool_Ns0bndyt 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  6 scalar 1 3618  
1533 14 Dtool_Ns0bxLY_ 0 4 1293 3599 0 14 Dtool_Ns0bxLY_ 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 other 1 3725  
1534 14 Dtool_Ns0bsyFI 0 6 1294 3618 0 14 Dtool_Ns0bsyFI 259 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3725  
1535 14 Dtool_Ns0baONp 0 4 1295 3599 0 14 Dtool_Ns0baONp 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 other 1 3725  
1536 14 Dtool_Ns0blPDl 0 4 1296 3599 0 14 Dtool_Ns0blPDl 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3724  
1537 14 Dtool_Ns0bMJyk 0 6 1297 3604 0 14 Dtool_Ns0bMJyk 808 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 other 1 3725  
1538 14 Dtool_Ns0bIurU 0 6 1298 3604 0 14 Dtool_Ns0bIurU 364 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3724  
1539 14 Dtool_Ns0bmeGt 0 6 1299 3604 0 14 Dtool_Ns0bmeGt 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 other 1 3725  
1540 14 Dtool_Ns0bmC_x 0 6 1299 3604 0 14 Dtool_Ns0bmC_x 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 other 1 3729  
1541 14 Dtool_Ns0bD_Pl 0 6 1300 3725 0 14 Dtool_Ns0bD_Pl 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1542 14 Dtool_Ns0b9pSu 0 4 1301 3599 0 14 Dtool_Ns0b9pSu 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 trans 1 3616  
1543 14 Dtool_Ns0b9uiL 0 4 1302 3599 0 14 Dtool_Ns0b9uiL 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 angle 1 3618  
1544 14 Dtool_Ns0b58U8 0 4 1302 3599 0 14 Dtool_Ns0b58U8 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3724  5 angle 1 3618  4 axis 1 3644  2 cs 1 3555  
1545 14 Dtool_Ns0bHjMp 0 4 1302 3599 0 14 Dtool_Ns0bHjMp 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3724  5 angle 1 3618  4 axis 1 3644  
1546 14 Dtool_Ns0bhzuM 0 4 1303 3599 0 14 Dtool_Ns0bhzuM 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 scale 1 3616  
1547 14 Dtool_Ns0bwFvE 0 4 1303 3599 0 14 Dtool_Ns0bwFvE 322 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 scale 1 3644  
1548 14 Dtool_Ns0bcpG4 0 7 1304 3724 3315 14 Dtool_Ns0bcpG4 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3616  
1549 14 Dtool_Ns0bZis7 0 7 1304 3724 3315 14 Dtool_Ns0bZis7 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 3618  2 ty 1 3618  
1550 14 Dtool_Ns0bB6hL 0 7 1305 3724 3315 14 Dtool_Ns0bB6hL 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 3618  
1551 14 Dtool_Ns0baFgZ 0 7 1305 3724 3315 14 Dtool_Ns0baFgZ 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3618  4 axis 1 3644  2 cs 1 3555  
1552 14 Dtool_Ns0bz6sm 0 7 1305 3724 3315 14 Dtool_Ns0bz6sm 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3618  4 axis 1 3644  
1553 14 Dtool_Ns0bkw5e 0 7 1306 3724 3315 14 Dtool_Ns0bkw5e 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3616  
1554 14 Dtool_Ns0b2c8e 0 7 1306 3724 3315 14 Dtool_Ns0b2c8e 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3644  
1555 14 Dtool_Ns0bKYtY 0 7 1306 3724 3315 14 Dtool_Ns0bKYtY 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 3618  2 sy 1 3618  
1556 14 Dtool_Ns0bXTVN 0 7 1306 3724 3315 14 Dtool_Ns0bXTVN 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3618  2 sy 1 3618  2 sz 1 3618  
1557 14 Dtool_Ns0boZc9 0 4 1307 3599 0 14 Dtool_Ns0boZc9 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3724  5 angle 1 3618  4 axis 1 3644  2 cs 1 3555  
1558 14 Dtool_Ns0br2Hj 0 4 1307 3599 0 14 Dtool_Ns0br2Hj 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3724  5 angle 1 3618  4 axis 1 3644  
1559 14 Dtool_Ns0byh6r 0 7 1308 3724 3315 14 Dtool_Ns0byh6r 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3618  4 axis 1 3644  2 cs 1 3555  
1560 14 Dtool_Ns0bYlqF 0 7 1308 3724 3315 14 Dtool_Ns0bYlqF 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3618  4 axis 1 3644  
1561 14 Dtool_Ns0bf5e6 0 4 1309 3599 0 14 Dtool_Ns0bf5e6 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3724  5 shear 1 3644  2 cs 1 3555  
1562 14 Dtool_Ns0ba_Ih 0 4 1309 3599 0 14 Dtool_Ns0ba_Ih 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  5 shear 1 3644  
1563 14 Dtool_Ns0bQoP8 0 7 1310 3724 3315 14 Dtool_Ns0bQoP8 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3644  2 cs 1 3555  
1564 14 Dtool_Ns0bxJal 0 7 1310 3724 3315 14 Dtool_Ns0bxJal 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3644  
1565 14 Dtool_Ns0b1tYK 0 7 1310 3724 3315 14 Dtool_Ns0b1tYK 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3618  4 shxz 1 3618  4 shyz 1 3618  2 cs 1 3555  
1566 14 Dtool_Ns0bn6zT 0 7 1310 3724 3315 14 Dtool_Ns0bn6zT 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 3618  4 shxz 1 3618  4 shyz 1 3618  
1567 14 Dtool_Ns0bon65 0 4 1311 3599 0 14 Dtool_Ns0bon65 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3724  5 scale 1 3644  5 shear 1 3644  2 cs 1 3555  
1568 14 Dtool_Ns0b9Qnf 0 4 1311 3599 0 14 Dtool_Ns0b9Qnf 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3724  5 scale 1 3644  5 shear 1 3644  
1569 14 Dtool_Ns0bipF0 0 7 1312 3724 3315 14 Dtool_Ns0bipF0 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3644  5 shear 1 3644  2 cs 1 3555  
1570 14 Dtool_Ns0bEtzN 0 7 1312 3724 3315 14 Dtool_Ns0bEtzN 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 3644  5 shear 1 3644  
1571 14 Dtool_Ns0berao 0 7 1312 3724 3315 14 Dtool_Ns0berao 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3618  2 sy 1 3618  2 sz 1 3618  4 shxy 1 3618  4 shxz 1 3618  4 shyz 1 3618  2 cs 1 3555  
1572 14 Dtool_Ns0bkqKC 0 7 1312 3724 3315 14 Dtool_Ns0bkqKC 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 3618  2 sy 1 3618  2 sz 1 3618  4 shxy 1 3618  4 shxz 1 3618  4 shyz 1 3618  
1573 14 Dtool_Ns0b4uUm 0 6 1313 3725 0 14 Dtool_Ns0b4uUm 350 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3555  2 to 1 3555  
1574 14 Dtool_Ns0brIZO 0 6 1314 3604 0 14 Dtool_Ns0brIZO 342 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  5 other 1 3725  
1575 14 Dtool_Ns0bpOQZ 0 6 1314 3604 0 14 Dtool_Ns0bpOQZ 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3725  5 other 1 3725  9 threshold 1 3618  
1576 14 Dtool_Ns0bcEVk 0 4 1315 3599 0 14 Dtool_Ns0bcEVk 215 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  3 out 1 3607  
1577 14 Dtool_Ns0bIhab 0 4 1316 3599 0 14 Dtool_Ns0bIhab 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3725  3 out 1 3607  12 indent_level 1 3603  
1578 14 Dtool_Ns0bU41k 0 4 1316 3599 0 14 Dtool_Ns0bU41k 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  3 out 1 3607  
1579 14 Dtool_Ns0b253m 0 4 1317 3599 0 14 Dtool_Ns0b253m 0 3 4 this 3 3725  3 out 1 3607  10 class_name 1 3602  
1580 14 Dtool_Ns0bRKIs 0 4 1318 3599 0 14 Dtool_Ns0bRKIs 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  7 hashgen 1 3605  
1581 14 Dtool_Ns0bjVPD 0 4 1318 3599 0 14 Dtool_Ns0bjVPD 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3725  7 hashgen 1 3605  9 threshold 1 3618  
1582 14 Dtool_Ns0b0SuV 0 4 1319 3599 0 14 Dtool_Ns0b0SuV 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  11 destination 1 3609  
1583 14 Dtool_Ns0bYdl5 0 4 1320 3599 0 14 Dtool_Ns0bYdl5 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  4 scan 1 3611  
1584 14 Dtool_Ns0bAnpF 0 4 1321 3599 0 14 Dtool_Ns0bAnpF 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  11 destination 1 3609  
1585 14 Dtool_Ns0bTdLG 0 4 1322 3599 0 14 Dtool_Ns0bTdLG 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3724  6 source 1 3611  
1586 14 Dtool_Ns0bnXHQ 0 7 1323 3614 0 14 Dtool_Ns0bnXHQ 0 0 
1587 14 Dtool_Ns0bDIih 0 4 1242 3599 0 14 Dtool_Ns0bDIih 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3727  1 i 1 3603  
1588 14 Dtool_Ns0b7NVD 0 6 1242 3618 0 14 Dtool_Ns0b7NVD 0 2 4 this 3 3731  1 i 1 3603  
1589 14 Dtool_Ns0brNBq 0 4 1243 3599 0 14 Dtool_Ns0brNBq 0 3 4 this 3 3727  1 i 1 3603  1 v 1 3618  
1590 14 Dtool_Ns0bmly9 0 6 1244 3603 0 14 Dtool_Ns0bmly9 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1591 14 Dtool_Ns0bjWnF 0 6 1247 3618 0 14 Dtool_Ns0bjWnF 0 2 4 this 3 3733  1 i 1 3603  
1592 14 Dtool_Ns0b98OU 0 6 1248 3603 0 14 Dtool_Ns0b98OU 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1593 14 Dtool_Ns0bVrx_ 0 7 1335 3735 3407 14 Dtool_Ns0bVrx_ 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1594 14 Dtool_Ns0bRSTZ 0 7 1335 3735 3407 14 Dtool_Ns0bRSTZ 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 3725  
1595 14 Dtool_Ns0by2xB 0 7 1335 3735 3407 14 Dtool_Ns0by2xB 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 3725  5 trans 1 3644  
1596 14 Dtool_Ns0bpOT1 0 7 1335 3735 3407 14 Dtool_Ns0bpOT1 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3729  
1597 14 Dtool_Ns0baNAR 0 7 1335 3735 3407 14 Dtool_Ns0baNAR 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3736  
1598 14 Dtool_Ns0bLfZS 0 7 1335 3735 3407 14 Dtool_Ns0bLfZS 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3618  3 e01 1 3618  3 e02 1 3618  3 e03 1 3618  3 e10 1 3618  3 e11 1 3618  3 e12 1 3618  3 e13 1 3618  3 e20 1 3618  3 e21 1 3618  3 e22 1 3618  3 e23 1 3618  3 e30 1 3618  3 e31 1 3618  3 e32 1 3618  3 e33 1 3618  
1599 14 Dtool_Ns0bPVfu 0 6 1336 3735 0 14 Dtool_Ns0bPVfu 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 other 1 3729  
1600 14 Dtool_Ns0bPKEm 0 6 1336 3735 0 14 Dtool_Ns0bPKEm 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 other 1 3736  
1601 14 Dtool_Ns0bBSXw 0 6 1336 3735 0 14 Dtool_Ns0bBSXw 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  10 fill_value 1 3618  
1602 14 Dtool_Ns0bfo_T 0 4 1337 3599 0 14 Dtool_Ns0bfo_T 0 2 4 this 3 3735  4 size 1 3598  
1603 14 Dtool_Ns0bu5El 0 6 1340 3600 0 14 Dtool_Ns0bu5El 0 1 4 this 3 3729  
1604 14 Dtool_Ns0btsm9 0 4 1341 3599 0 14 Dtool_Ns0btsm9 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  10 fill_value 1 3618  
1605 14 Dtool_Ns0bE5Uz 0 4 1342 3599 0 14 Dtool_Ns0bE5Uz 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3735  3 e00 1 3618  3 e01 1 3618  3 e02 1 3618  3 e03 1 3618  3 e10 1 3618  3 e11 1 3618  3 e12 1 3618  3 e13 1 3618  3 e20 1 3618  3 e21 1 3618  3 e22 1 3618  3 e23 1 3618  3 e30 1 3618  3 e31 1 3618  3 e32 1 3618  3 e33 1 3618  
1606 14 Dtool_Ns0b4JsI 0 4 1343 3599 0 14 Dtool_Ns0b4JsI 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  6 upper3 1 3725  
1607 14 Dtool_Ns0bcZBN 0 7 1344 3724 3315 14 Dtool_Ns0bcZBN 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3729  
1608 14 Dtool_Ns0b4DFT 0 4 1345 3599 0 14 Dtool_Ns0b4DFT 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  3 row 1 3603  1 v 1 3644  
1609 14 Dtool_Ns0bnD10 0 4 1345 3599 0 14 Dtool_Ns0bnD10 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  3 row 1 3603  1 v 1 3674  
1610 14 Dtool_Ns0bdmWa 0 4 1346 3599 0 14 Dtool_Ns0bdmWa 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  3 col 1 3603  1 v 1 3644  
1611 14 Dtool_Ns0bImG8 0 4 1346 3599 0 14 Dtool_Ns0bImG8 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  3 col 1 3603  1 v 1 3674  
1612 14 Dtool_Ns0bPxez 0 4 1347 3599 0 14 Dtool_Ns0bPxez 294 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3729  10 result_vec 1 3673  3 row 1 3603  
1613 14 Dtool_Ns0bpwx8 0 7 1347 3673 2795 14 Dtool_Ns0bpwx8 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  3 row 1 3603  
1614 14 Dtool_Ns0brPFE 0 7 1348 3673 2795 14 Dtool_Ns0brPFE 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  3 col 1 3603  
1615 14 Dtool_Ns0beTWu 0 4 1349 3599 0 14 Dtool_Ns0beTWu 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3729  10 result_vec 1 3643  3 row 1 3603  
1616 14 Dtool_Ns0bQL2y 0 7 1349 3643 2403 14 Dtool_Ns0bQL2y 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  3 row 1 3603  
1617 14 Dtool_Ns0b_pJ6 0 7 1350 3643 2403 14 Dtool_Ns0b_pJ6 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  3 col 1 3603  
1618 14 Dtool_Ns0bYgS1 0 4 1351 3599 0 14 Dtool_Ns0bYgS1 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  3 row 1 3603  3 col 1 3603  
1619 14 Dtool_Ns0bgkEX 0 6 1351 3618 0 14 Dtool_Ns0bgkEX 0 3 4 this 3 3729  3 row 1 3603  3 col 1 3603  
1620 14 Dtool_Ns0b9U2a 0 7 1352 3738 3319 14 Dtool_Ns0b9U2a 0 2 4 this 3 3735  1 i 1 3603  
1621 14 Dtool_Ns0b1rvr 0 7 1352 3739 3322 14 Dtool_Ns0b1rvr 0 2 4 this 3 3729  1 i 1 3603  
1622 14 Dtool_Ns0bDzAp 0 6 1353 3603 0 14 Dtool_Ns0bDzAp 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1623 14 Dtool_Ns0buXM3 0 6 1354 3604 0 14 Dtool_Ns0buXM3 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3729  
1624 14 Dtool_Ns0btb8V 0 6 1355 3618 0 14 Dtool_Ns0btb8V 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3729  3 row 1 3603  3 col 1 3603  
1625 14 Dtool_Ns0bY2F1 0 4 1356 3599 0 14 Dtool_Ns0bY2F1 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3735  3 row 1 3603  3 col 1 3603  5 value 1 3618  
1626 14 Dtool_Ns0btPV1 0 4 1357 3599 0 14 Dtool_Ns0btPV1 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3729  
1627 14 Dtool_Ns0bwv30 0 6 1358 3603 0 14 Dtool_Ns0bwv30 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3729  
1628 14 Dtool_Ns0bjKXP 0 4 1359 3599 0 14 Dtool_Ns0bjKXP 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3735  
1629 14 Dtool_Ns0bmQjW 0 4 1359 3599 0 14 Dtool_Ns0bmQjW 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3729  
1630 14 Dtool_Ns0bPBFI 0 4 1360 3599 0 14 Dtool_Ns0bPBFI 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3735  
1631 14 Dtool_Ns0b5wtn 0 4 1360 3599 0 14 Dtool_Ns0b5wtn 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3729  
1632 14 Dtool_Ns0bXz9P 0 6 1361 3604 0 14 Dtool_Ns0bXz9P 0 2 4 this 3 3729  5 other 1 3729  
1633 14 Dtool_Ns0bQ4WW 0 6 1362 3604 0 14 Dtool_Ns0bQ4WW 0 2 4 this 3 3729  5 other 1 3729  
1634 14 Dtool_Ns0bQPzN 0 6 1363 3604 0 14 Dtool_Ns0bQPzN 0 2 4 this 3 3729  5 other 1 3729  
1635 14 Dtool_Ns0baz9H 0 6 1364 3603 0 14 Dtool_Ns0baz9H 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  5 other 1 3729  
1636 14 Dtool_Ns0blGtQ 0 6 1364 3603 0 14 Dtool_Ns0blGtQ 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3729  5 other 1 3729  9 threshold 1 3618  
1637 14 Dtool_Ns0bsbsK 0 6 1365 3598 0 14 Dtool_Ns0bsbsK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3729  
1638 14 Dtool_Ns0bAiqx 0 6 1365 3598 0 14 Dtool_Ns0bAiqx 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  9 threshold 1 3618  
1639 14 Dtool_Ns0bT_IH 0 6 1366 3598 0 14 Dtool_Ns0bT_IH 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  4 hash 1 3598  
1640 14 Dtool_Ns0bdWef 0 6 1366 3598 0 14 Dtool_Ns0bdWef 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3729  4 hash 1 3598  9 threshold 1 3618  
1641 14 Dtool_Ns0bO133 0 7 1367 3673 2795 14 Dtool_Ns0bO133 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  1 v 1 3674  
1642 14 Dtool_Ns0bT1IX 0 7 1368 3643 2403 14 Dtool_Ns0bT1IX 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  1 v 1 3644  
1643 14 Dtool_Ns0brmNg 0 7 1369 3643 2403 14 Dtool_Ns0brmNg 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  1 v 1 3644  
1644 14 Dtool_Ns0bDCVq 0 7 1370 3643 2403 14 Dtool_Ns0bDCVq 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  1 v 1 3644  
1645 14 Dtool_Ns0bsqNn 0 7 1371 3643 2403 14 Dtool_Ns0bsqNn 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  1 v 1 3644  
1646 14 Dtool_Ns0bHhNF 0 4 1372 3599 0 14 Dtool_Ns0bHhNF 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  1 v 1 3673  
1647 14 Dtool_Ns0brdBS 0 4 1373 3599 0 14 Dtool_Ns0brdBS 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  1 v 1 3643  
1648 14 Dtool_Ns0bkWqj 0 4 1374 3599 0 14 Dtool_Ns0bkWqj 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  1 v 1 3643  
1649 14 Dtool_Ns0bL1IL 0 4 1375 3599 0 14 Dtool_Ns0bL1IL 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  1 v 1 3643  
1650 14 Dtool_Ns0bgwSi 0 4 1376 3599 0 14 Dtool_Ns0bgwSi 355 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  1 v 1 3643  
1651 14 Dtool_Ns0bU8DL 0 4 1377 3599 0 14 Dtool_Ns0bU8DL 25 // this = other1 * other2 3 4 this 3 3735  6 other1 1 3729  6 other2 1 3729  
1652 14 Dtool_Ns0b3TdK 0 7 1378 3735 3407 14 Dtool_Ns0b3TdK 0 2 4 this 3 3729  5 other 1 3729  
1653 14 Dtool_Ns0b9_TF 0 7 1378 3735 3407 14 Dtool_Ns0b9_TF 0 2 4 this 3 3729  6 scalar 1 3618  
1654 14 Dtool_Ns0bNI1G 0 7 1379 3735 3407 14 Dtool_Ns0bNI1G 0 2 4 this 3 3729  6 scalar 1 3618  
1655 14 Dtool_Ns0b8vNX 0 6 1380 3735 0 14 Dtool_Ns0b8vNX 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 other 1 3729  
1656 14 Dtool_Ns0bcj0X 0 6 1381 3735 0 14 Dtool_Ns0bcj0X 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 other 1 3729  
1657 14 Dtool_Ns0bMO5W 0 6 1382 3735 0 14 Dtool_Ns0bMO5W 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 other 1 3729  
1658 14 Dtool_Ns0bWUUT 0 6 1382 3735 0 14 Dtool_Ns0bWUUT 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  6 scalar 1 3618  
1659 14 Dtool_Ns0bm93U 0 6 1383 3735 0 14 Dtool_Ns0bm93U 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  6 scalar 1 3618  
1660 14 Dtool_Ns0bZk8p 0 4 1384 3599 0 14 Dtool_Ns0bZk8p 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 other 1 3729  
1661 14 Dtool_Ns0boYQI 0 4 1385 3599 0 14 Dtool_Ns0boYQI 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 other 1 3729  
1662 14 Dtool_Ns0bivGM 0 4 1386 3599 0 14 Dtool_Ns0bivGM 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3735  
1663 14 Dtool_Ns0bNuDN 0 6 1387 3604 0 14 Dtool_Ns0bNuDN 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 other 1 3729  
1664 14 Dtool_Ns0bg2mD 0 6 1388 3604 0 14 Dtool_Ns0bg2mD 149 // bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 3735  5 other 1 3729  
1665 14 Dtool_Ns0bIOv7 0 6 1389 3604 0 14 Dtool_Ns0bIOv7 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3735  
1666 14 Dtool_Ns0brA3w 0 4 1390 3599 0 14 Dtool_Ns0brA3w 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  5 other 1 3729  6 weight 1 3618  
1667 14 Dtool_Ns0bAfTM 0 6 1391 3729 0 14 Dtool_Ns0bAfTM 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1668 14 Dtool_Ns0bNy16 0 6 1392 3729 0 14 Dtool_Ns0bNy16 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
1669 14 Dtool_Ns0bQFPh 0 6 1393 3729 0 14 Dtool_Ns0bQFPh 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1670 14 Dtool_Ns0blK2Y 0 4 1394 3599 0 14 Dtool_Ns0blK2Y 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 trans 1 3644  
1671 14 Dtool_Ns0b4cXj 0 4 1395 3599 0 14 Dtool_Ns0b4cXj 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3735  5 angle 1 3618  4 axis 1 3644  2 cs 1 3555  
1672 14 Dtool_Ns0bEDQQ 0 4 1395 3599 0 14 Dtool_Ns0bEDQQ 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  5 angle 1 3618  4 axis 1 3644  
1673 14 Dtool_Ns0br5fk 0 4 1396 3599 0 14 Dtool_Ns0br5fk 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3735  5 angle 1 3618  4 axis 1 3644  2 cs 1 3555  
1674 14 Dtool_Ns0bqWLK 0 4 1396 3599 0 14 Dtool_Ns0bqWLK 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  5 angle 1 3618  4 axis 1 3644  
1675 14 Dtool_Ns0bwlwr 0 4 1397 3599 0 14 Dtool_Ns0bwlwr 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 scale 1 3644  
1676 14 Dtool_Ns0bcZih 0 4 1398 3599 0 14 Dtool_Ns0bcZih 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  5 shear 1 3644  2 cs 1 3555  
1677 14 Dtool_Ns0bbfMI 0 4 1398 3599 0 14 Dtool_Ns0bbfMI 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 shear 1 3644  
1678 14 Dtool_Ns0bpH_g 0 4 1399 3599 0 14 Dtool_Ns0bpH_g 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3735  5 scale 1 3644  5 shear 1 3644  2 cs 1 3555  
1679 14 Dtool_Ns0b6wrG 0 4 1399 3599 0 14 Dtool_Ns0b6wrG 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  5 scale 1 3644  5 shear 1 3644  
1680 14 Dtool_Ns0bSDJX 0 7 1400 3735 3407 14 Dtool_Ns0bSDJX 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3644  
1681 14 Dtool_Ns0btfAu 0 7 1400 3735 3407 14 Dtool_Ns0btfAu 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 3618  2 ty 1 3618  2 tz 1 3618  
1682 14 Dtool_Ns0bblkA 0 7 1401 3735 3407 14 Dtool_Ns0bblkA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3618  4 axis 1 3644  2 cs 1 3555  
1683 14 Dtool_Ns0byawN 0 7 1401 3735 3407 14 Dtool_Ns0byawN 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3618  4 axis 1 3644  
1684 14 Dtool_Ns0b9B_S 0 7 1402 3735 3407 14 Dtool_Ns0b9B_S 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3618  4 axis 1 3644  2 cs 1 3555  
1685 14 Dtool_Ns0bYFts 0 7 1402 3735 3407 14 Dtool_Ns0bYFts 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3618  4 axis 1 3644  
1686 14 Dtool_Ns0b38_F 0 7 1403 3735 3407 14 Dtool_Ns0b38_F 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3644  
1687 14 Dtool_Ns0bH84Q 0 7 1403 3735 3407 14 Dtool_Ns0bH84Q 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3618  
1688 14 Dtool_Ns0bXzZ0 0 7 1403 3735 3407 14 Dtool_Ns0bXzZ0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3618  2 sy 1 3618  2 sz 1 3618  
1689 14 Dtool_Ns0bfITj 0 7 1404 3735 3407 14 Dtool_Ns0bfITj 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3644  2 cs 1 3555  
1690 14 Dtool_Ns0bwpeM 0 7 1404 3735 3407 14 Dtool_Ns0bwpeM 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3644  
1691 14 Dtool_Ns0b1Nbx 0 7 1404 3735 3407 14 Dtool_Ns0b1Nbx 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3618  4 shxz 1 3618  4 shyz 1 3618  2 cs 1 3555  
1692 14 Dtool_Ns0bna36 0 7 1404 3735 3407 14 Dtool_Ns0bna36 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 3618  4 shxz 1 3618  4 shyz 1 3618  
1693 14 Dtool_Ns0bjJJb 0 7 1405 3735 3407 14 Dtool_Ns0bjJJb 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3644  5 shear 1 3644  2 cs 1 3555  
1694 14 Dtool_Ns0bEN20 0 7 1405 3735 3407 14 Dtool_Ns0bEN20 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 3644  5 shear 1 3644  
1695 14 Dtool_Ns0bfLeP 0 7 1405 3735 3407 14 Dtool_Ns0bfLeP 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3618  2 sy 1 3618  2 sz 1 3618  4 shxy 1 3618  4 shxz 1 3618  4 shyz 1 3618  2 cs 1 3555  
1696 14 Dtool_Ns0bkKNp 0 7 1405 3735 3407 14 Dtool_Ns0bkKNp 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 3618  2 sy 1 3618  2 sz 1 3618  4 shxy 1 3618  4 shxz 1 3618  4 shyz 1 3618  
1697 14 Dtool_Ns0bMIyP 0 6 1406 3729 0 14 Dtool_Ns0bMIyP 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1698 14 Dtool_Ns0bMGWN 0 6 1407 3729 0 14 Dtool_Ns0bMGWN 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1699 14 Dtool_Ns0b5OYN 0 6 1408 3729 0 14 Dtool_Ns0b5OYN 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3555  2 to 1 3555  
1700 14 Dtool_Ns0bqIgc 0 6 1409 3604 0 14 Dtool_Ns0bqIgc 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  5 other 1 3729  
1701 14 Dtool_Ns0boOXn 0 6 1409 3604 0 14 Dtool_Ns0boOXn 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3729  5 other 1 3729  9 threshold 1 3618  
1702 14 Dtool_Ns0bdkYL 0 4 1410 3599 0 14 Dtool_Ns0bdkYL 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  3 out 1 3607  
1703 14 Dtool_Ns0bXBeC 0 4 1411 3599 0 14 Dtool_Ns0bXBeC 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3729  3 out 1 3607  12 indent_level 1 3603  
1704 14 Dtool_Ns0bXY5L 0 4 1411 3599 0 14 Dtool_Ns0bXY5L 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  3 out 1 3607  
1705 14 Dtool_Ns0b5Z6N 0 4 1412 3599 0 14 Dtool_Ns0b5Z6N 0 3 4 this 3 3729  3 out 1 3607  10 class_name 1 3602  
1706 14 Dtool_Ns0bQqLT 0 4 1413 3599 0 14 Dtool_Ns0bQqLT 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  7 hashgen 1 3605  
1707 14 Dtool_Ns0bj1Tq 0 4 1413 3599 0 14 Dtool_Ns0bj1Tq 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3729  7 hashgen 1 3605  5 scale 1 3618  
1708 14 Dtool_Ns0b0yx8 0 4 1414 3599 0 14 Dtool_Ns0b0yx8 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  11 destination 1 3609  
1709 14 Dtool_Ns0bb9pg 0 4 1415 3599 0 14 Dtool_Ns0bb9pg 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  4 scan 1 3611  
1710 14 Dtool_Ns0bAHts 0 4 1416 3599 0 14 Dtool_Ns0bAHts 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  11 destination 1 3609  
1711 14 Dtool_Ns0bT9Pt 0 4 1417 3599 0 14 Dtool_Ns0bT9Pt 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  6 source 1 3611  
1712 14 Dtool_Ns0bn3L3 0 7 1418 3614 0 14 Dtool_Ns0bn3L3 0 0 
1713 14 Dtool_Ns0bComI 0 4 1327 3599 0 14 Dtool_Ns0bComI 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3738  1 i 1 3603  
1714 14 Dtool_Ns0b7tWq 0 6 1327 3618 0 14 Dtool_Ns0b7tWq 0 2 4 this 3 3740  1 i 1 3603  
1715 14 Dtool_Ns0bstFR 0 4 1328 3599 0 14 Dtool_Ns0bstFR 0 3 4 this 3 3738  1 i 1 3603  1 v 1 3618  
1716 14 Dtool_Ns0blF2k 0 6 1329 3603 0 14 Dtool_Ns0blF2k 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1717 14 Dtool_Ns0bj2qs 0 6 1332 3618 0 14 Dtool_Ns0bj2qs 0 2 4 this 3 3742  1 i 1 3603  
1718 14 Dtool_Ns0b9cS7 0 6 1333 3603 0 14 Dtool_Ns0b9cS7 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1719 14 Dtool_Ns0bz1FW 0 7 1421 3744 3415 14 Dtool_Ns0bz1FW 234 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1720 14 Dtool_Ns0bGu6U 0 7 1421 3744 3415 14 Dtool_Ns0bGu6U 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3729  
1721 14 Dtool_Ns0b_vVq 0 7 1421 3744 3415 14 Dtool_Ns0b_vVq 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3736  
1722 14 Dtool_Ns0bF1Im 0 7 1421 3744 3415 14 Dtool_Ns0bF1Im 226 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3618  3 e01 1 3618  3 e02 1 3618  3 e03 1 3618  3 e10 1 3618  3 e11 1 3618  3 e12 1 3618  3 e13 1 3618  3 e20 1 3618  3 e21 1 3618  3 e22 1 3618  3 e23 1 3618  3 e30 1 3618  3 e31 1 3618  3 e32 1 3618  3 e33 1 3618  
1723 14 Dtool_Ns0b4c8E 0 6 1422 3744 0 14 Dtool_Ns0b4c8E 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3744  4 copy 1 3729  
1724 14 Dtool_Ns0byn3z 0 6 1422 3744 0 14 Dtool_Ns0byn3z 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3744  4 copy 1 3736  
1725 14 Dtool_Ns0bn_Mt 0 4 1423 3599 0 14 Dtool_Ns0bn_Mt 221 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3744  3 e00 1 3618  3 e01 1 3618  3 e02 1 3618  3 e03 1 3618  3 e10 1 3618  3 e11 1 3618  3 e12 1 3618  3 e13 1 3618  3 e20 1 3618  3 e21 1 3618  3 e22 1 3618  3 e23 1 3618  3 e30 1 3618  3 e31 1 3618  3 e32 1 3618  3 e33 1 3618  
1726 14 Dtool_Ns0bnXxN 0 4 1424 3599 0 14 Dtool_Ns0bnXxN 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3744  3 row 1 3603  3 col 1 3603  
1727 14 Dtool_Ns0b_K_B 0 6 1424 3618 0 14 Dtool_Ns0b_K_B 0 3 4 this 3 3736  3 row 1 3603  3 col 1 3603  
1728 14 Dtool_Ns0bf_yd 0 4 1425 3599 0 14 Dtool_Ns0bf_yd 410 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3736  
1729 14 Dtool_Ns0blJtd 0 6 1426 3603 0 14 Dtool_Ns0blJtd 291 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3736  
1730 14 Dtool_Ns0br_BG 0 7 1427 3614 0 14 Dtool_Ns0br_BG 0 0 
1731 14 Dtool_Ns0brtd_ 0 7 1442 3745 3475 14 Dtool_Ns0brtd_ 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1732 14 Dtool_Ns0bvDxK 0 7 1442 3745 3475 14 Dtool_Ns0bvDxK 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3668  
1733 14 Dtool_Ns0bM1Wm 0 7 1442 3745 3475 14 Dtool_Ns0bM1Wm 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3597  4 copy 1 3641  
1734 14 Dtool_Ns0bzNTV 0 7 1442 3745 3475 14 Dtool_Ns0bzNTV 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3597  6 param1 0 3597  6 param2 0 3597  6 param3 0 3597  
1735 14 Dtool_Ns0bQoeb 0 7 1443 3745 3475 14 Dtool_Ns0bQoeb 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3650  
1736 14 Dtool_Ns0b_F9y 0 7 1444 3745 3475 14 Dtool_Ns0b_F9y 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1737 14 Dtool_Ns0brkOj 0 7 1445 3640 2330 14 Dtool_Ns0brkOj 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  1 v 1 3641  
1738 14 Dtool_Ns0bjhO_ 0 7 1445 3667 2714 14 Dtool_Ns0bjhO_ 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  1 v 1 3668  
1739 14 Dtool_Ns0beJuF 0 7 1446 3745 3475 14 Dtool_Ns0beJuF 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  3 rhs 1 3746  
1740 14 Dtool_Ns0bXaQp 0 7 1447 3745 3475 14 Dtool_Ns0bXaQp 0 1 4 this 3 3746  
1741 14 Dtool_Ns0bI56X 0 7 1448 3745 3475 14 Dtool_Ns0bI56X 0 2 4 this 3 3746  5 other 1 3746  
1742 14 Dtool_Ns0bb27z 0 7 1449 3745 3475 14 Dtool_Ns0bb27z 0 2 4 this 3 3746  5 other 1 3746  
1743 14 Dtool_Ns0b3Uhy 0 6 1450 3597 0 14 Dtool_Ns0b3Uhy 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  5 other 1 3746  
1744 14 Dtool_Ns0bmSn_ 0 6 1451 3597 0 14 Dtool_Ns0bmSn_ 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  5 other 1 3746  
1745 14 Dtool_Ns0bj8YK 0 7 1452 3703 3131 14 Dtool_Ns0bj8YK 0 2 4 this 3 3745  6 param0 0 3704  
1746 14 Dtool_Ns0be9Is 0 7 1452 3714 3225 14 Dtool_Ns0be9Is 0 2 4 this 3 3745  6 param0 0 3708  
1747 14 Dtool_Ns0bU_6J 0 7 1452 3745 3475 14 Dtool_Ns0bU_6J 0 2 4 this 3 3746  6 param0 0 3746  
1748 14 Dtool_Ns0bppqj 0 7 1452 3745 3475 14 Dtool_Ns0bppqj 0 2 4 this 3 3746  6 scalar 1 3597  
1749 14 Dtool_Ns0be9qp 0 7 1453 3745 3475 14 Dtool_Ns0be9qp 0 2 4 this 3 3746  6 scalar 1 3597  
1750 14 Dtool_Ns0bMJVd 0 6 1454 3745 0 14 Dtool_Ns0bMJVd 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  6 param0 0 3746  
1751 14 Dtool_Ns0brHMU 0 6 1455 3604 0 14 Dtool_Ns0brHMU 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  5 other 1 3746  
1752 14 Dtool_Ns0blDKH 0 6 1455 3604 0 14 Dtool_Ns0blDKH 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3746  5 other 1 3746  9 threshold 1 3597  
1753 14 Dtool_Ns0bi2zi 0 6 1456 3604 0 14 Dtool_Ns0bi2zi 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  5 other 1 3746  
1754 14 Dtool_Ns0bgEa5 0 6 1457 3604 0 14 Dtool_Ns0bgEa5 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3746  5 other 1 3746  9 threshold 1 3597  
1755 14 Dtool_Ns0bclzP 0 4 1458 3599 0 14 Dtool_Ns0bclzP 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  6 param0 0 3607  
1756 14 Dtool_Ns0bQnH2 0 4 1459 3599 0 14 Dtool_Ns0bQnH2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  1 m 1 3703  
1757 14 Dtool_Ns0bIWR2 0 4 1459 3599 0 14 Dtool_Ns0bIWR2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  1 m 1 3714  
1758 14 Dtool_Ns0badwD 0 4 1460 3599 0 14 Dtool_Ns0badwD 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  1 m 1 3704  
1759 14 Dtool_Ns0b1eQH 0 4 1460 3599 0 14 Dtool_Ns0b1eQH 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  1 m 1 3708  
1760 14 Dtool_Ns0bRc8G 0 4 1461 3599 0 14 Dtool_Ns0bRc8G 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  3 hpr 1 3641  2 cs 1 3555  
1761 14 Dtool_Ns0bghkq 0 4 1461 3599 0 14 Dtool_Ns0bghkq 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  3 hpr 1 3641  
1762 14 Dtool_Ns0bWRZg 0 7 1462 3640 2330 14 Dtool_Ns0bWRZg 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  2 cs 1 3555  
1763 14 Dtool_Ns0bO1A0 0 7 1462 3640 2330 14 Dtool_Ns0bO1A0 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1764 14 Dtool_Ns0bYcKh 0 7 1463 3649 2574 14 Dtool_Ns0bYcKh 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1765 14 Dtool_Ns0bNIeK 0 7 1464 3649 2574 14 Dtool_Ns0bNIeK 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1766 14 Dtool_Ns0bZTUN 0 6 1465 3597 0 14 Dtool_Ns0bZTUN 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1767 14 Dtool_Ns0beAIg 0 6 1466 3597 0 14 Dtool_Ns0beAIg 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1768 14 Dtool_Ns0byPe0 0 4 1467 3599 0 14 Dtool_Ns0byPe0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  9 angle_rad 1 3597  4 axis 1 3650  
1769 14 Dtool_Ns0bYkah 0 4 1468 3599 0 14 Dtool_Ns0bYkah 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  9 angle_deg 1 3597  4 axis 1 3650  
1770 14 Dtool_Ns0b3KoZ 0 7 1469 3649 2574 14 Dtool_Ns0b3KoZ 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  2 cs 1 3555  
1771 14 Dtool_Ns0brwSS 0 7 1469 3649 2574 14 Dtool_Ns0brwSS 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1772 14 Dtool_Ns0bMxzz 0 7 1470 3649 2574 14 Dtool_Ns0bMxzz 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  2 cs 1 3555  
1773 14 Dtool_Ns0b86me 0 7 1470 3649 2574 14 Dtool_Ns0b86me 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1774 14 Dtool_Ns0b6X_p 0 7 1471 3649 2574 14 Dtool_Ns0b6X_p 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  2 cs 1 3555  
1775 14 Dtool_Ns0bIjTb 0 7 1471 3649 2574 14 Dtool_Ns0bIjTb 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1776 14 Dtool_Ns0bk8aD 0 6 1472 3597 0 14 Dtool_Ns0bk8aD 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1777 14 Dtool_Ns0bjxaE 0 6 1473 3597 0 14 Dtool_Ns0bjxaE 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1778 14 Dtool_Ns0b1yaL 0 6 1474 3597 0 14 Dtool_Ns0b1yaL 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1779 14 Dtool_Ns0bH0aS 0 6 1475 3597 0 14 Dtool_Ns0bH0aS 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1780 14 Dtool_Ns0b3PLX 0 4 1476 3599 0 14 Dtool_Ns0b3PLX 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  1 r 1 3597  
1781 14 Dtool_Ns0b04KY 0 4 1477 3599 0 14 Dtool_Ns0b04KY 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  1 i 1 3597  
1782 14 Dtool_Ns0bm5Kf 0 4 1478 3599 0 14 Dtool_Ns0bm5Kf 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  1 j 1 3597  
1783 14 Dtool_Ns0bYGLm 0 4 1479 3599 0 14 Dtool_Ns0bYGLm 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  1 k 1 3597  
1784 14 Dtool_Ns0baBWQ 0 6 1480 3604 0 14 Dtool_Ns0baBWQ 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3745  
1785 14 Dtool_Ns0bMknV 0 6 1481 3604 0 14 Dtool_Ns0bMknV 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 other 1 3746  
1786 14 Dtool_Ns0bDgwh 0 6 1482 3604 0 14 Dtool_Ns0bDgwh 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3745  
1787 14 Dtool_Ns0bed84 0 6 1483 3604 0 14 Dtool_Ns0bed84 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 other 1 3746  
1788 14 Dtool_Ns0bvLqt 0 6 1484 3604 0 14 Dtool_Ns0bvLqt 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3745  
1789 14 Dtool_Ns0bJkak 0 6 1485 3604 0 14 Dtool_Ns0bJkak 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1790 14 Dtool_Ns0b4P4N 0 6 1486 3604 0 14 Dtool_Ns0b4P4N 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3746  9 tolerance 1 3597  
1791 14 Dtool_Ns0bmmMR 0 6 1487 3746 0 14 Dtool_Ns0bmmMR 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1792 14 Dtool_Ns0bndKd 0 7 1488 3614 0 14 Dtool_Ns0bndKd 0 0 
1793 14 Dtool_Ns0brOX4 0 7 1491 3748 3523 14 Dtool_Ns0brOX4 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1794 14 Dtool_Ns0bwmdo 0 7 1491 3748 3523 14 Dtool_Ns0bwmdo 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3674  
1795 14 Dtool_Ns0bBaVV 0 7 1491 3748 3523 14 Dtool_Ns0bBaVV 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3618  4 copy 1 3644  
1796 14 Dtool_Ns0b6Z6w 0 7 1491 3748 3523 14 Dtool_Ns0b6Z6w 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3618  6 param1 0 3618  6 param2 0 3618  6 param3 0 3618  
1797 14 Dtool_Ns0bOPmP 0 7 1492 3748 3523 14 Dtool_Ns0bOPmP 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3653  
1798 14 Dtool_Ns0b_hFu 0 7 1493 3748 3523 14 Dtool_Ns0b_hFu 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1799 14 Dtool_Ns0bPTTe 0 7 1494 3643 2403 14 Dtool_Ns0bPTTe 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  1 v 1 3644  
1800 14 Dtool_Ns0bHWT6 0 7 1494 3673 2795 14 Dtool_Ns0bHWT6 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  1 v 1 3674  
1801 14 Dtool_Ns0bGGsA 0 7 1495 3748 3523 14 Dtool_Ns0bGGsA 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  3 rhs 1 3749  
1802 14 Dtool_Ns0bX_Xk 0 7 1496 3748 3523 14 Dtool_Ns0bX_Xk 0 1 4 this 3 3749  
1803 14 Dtool_Ns0bPV02 0 7 1497 3748 3523 14 Dtool_Ns0bPV02 0 2 4 this 3 3749  5 other 1 3749  
1804 14 Dtool_Ns0bZa1S 0 7 1498 3748 3523 14 Dtool_Ns0bZa1S 0 2 4 this 3 3749  5 other 1 3749  
1805 14 Dtool_Ns0b3sxo 0 6 1499 3618 0 14 Dtool_Ns0b3sxo 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  5 other 1 3749  
1806 14 Dtool_Ns0bmq30 0 6 1500 3618 0 14 Dtool_Ns0bmq30 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  5 other 1 3749  
1807 14 Dtool_Ns0bBNgV 0 7 1501 3724 3315 14 Dtool_Ns0bBNgV 0 2 4 this 3 3748  6 param0 0 3725  
1808 14 Dtool_Ns0b8NQ3 0 7 1501 3735 3407 14 Dtool_Ns0b8NQ3 0 2 4 this 3 3748  6 param0 0 3729  
1809 14 Dtool_Ns0brQ0o 0 7 1501 3748 3523 14 Dtool_Ns0brQ0o 0 2 4 this 3 3749  6 param0 0 3749  
1810 14 Dtool_Ns0bA0TI 0 7 1501 3748 3523 14 Dtool_Ns0bA0TI 0 2 4 this 3 3749  6 scalar 1 3618  
1811 14 Dtool_Ns0bPASO 0 7 1502 3748 3523 14 Dtool_Ns0bPASO 0 2 4 this 3 3749  6 scalar 1 3618  
1812 14 Dtool_Ns0b6vdR 0 6 1503 3748 0 14 Dtool_Ns0b6vdR 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  6 param0 0 3749  
1813 14 Dtool_Ns0bsATv 0 6 1504 3604 0 14 Dtool_Ns0bsATv 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  5 other 1 3749  
1814 14 Dtool_Ns0bKRVo 0 6 1504 3604 0 14 Dtool_Ns0bKRVo 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3749  5 other 1 3749  9 threshold 1 3618  
1815 14 Dtool_Ns0bZg5d 0 6 1505 3604 0 14 Dtool_Ns0bZg5d 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  5 other 1 3749  
1816 14 Dtool_Ns0bUNTJ 0 6 1506 3604 0 14 Dtool_Ns0bUNTJ 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3749  5 other 1 3749  9 threshold 1 3618  
1817 14 Dtool_Ns0bcZ7K 0 4 1507 3599 0 14 Dtool_Ns0bcZ7K 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  6 param0 0 3607  
1818 14 Dtool_Ns0bQLcn 0 4 1508 3599 0 14 Dtool_Ns0bQLcn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  1 m 1 3724  
1819 14 Dtool_Ns0bI6nn 0 4 1508 3599 0 14 Dtool_Ns0bI6nn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  1 m 1 3735  
1820 14 Dtool_Ns0bea4e 0 4 1509 3599 0 14 Dtool_Ns0bea4e 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  1 m 1 3725  
1821 14 Dtool_Ns0b5bYi 0 4 1509 3599 0 14 Dtool_Ns0b5bYi 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  1 m 1 3729  
1822 14 Dtool_Ns0bX48z 0 4 1510 3599 0 14 Dtool_Ns0bX48z 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 3748  3 hpr 1 3644  2 cs 1 3555  
1823 14 Dtool_Ns0bhFnX 0 4 1510 3599 0 14 Dtool_Ns0bhFnX 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  3 hpr 1 3644  
1824 14 Dtool_Ns0bW1gb 0 7 1511 3643 2403 14 Dtool_Ns0bW1gb 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  2 cs 1 3555  
1825 14 Dtool_Ns0bORIv 0 7 1511 3643 2403 14 Dtool_Ns0bORIv 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1826 14 Dtool_Ns0bY4Rc 0 7 1512 3652 2608 14 Dtool_Ns0bY4Rc 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1827 14 Dtool_Ns0bNkmF 0 7 1513 3652 2608 14 Dtool_Ns0bNkmF 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1828 14 Dtool_Ns0bZ_bI 0 6 1514 3618 0 14 Dtool_Ns0bZ_bI 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1829 14 Dtool_Ns0be8Rb 0 6 1515 3618 0 14 Dtool_Ns0be8Rb 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1830 14 Dtool_Ns0bZ91x 0 4 1516 3599 0 14 Dtool_Ns0bZ91x 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3748  9 angle_rad 1 3618  4 axis 1 3653  
1831 14 Dtool_Ns0bVKOA 0 4 1517 3599 0 14 Dtool_Ns0bVKOA 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3748  9 angle_deg 1 3618  4 axis 1 3653  
1832 14 Dtool_Ns0b3uwU 0 7 1518 3652 2608 14 Dtool_Ns0b3uwU 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  2 cs 1 3555  
1833 14 Dtool_Ns0brsaN 0 7 1518 3652 2608 14 Dtool_Ns0brsaN 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1834 14 Dtool_Ns0bMt7u 0 7 1519 3652 2608 14 Dtool_Ns0bMt7u 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  2 cs 1 3555  
1835 14 Dtool_Ns0b8etZ 0 7 1519 3652 2608 14 Dtool_Ns0b8etZ 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1836 14 Dtool_Ns0b6zHl 0 7 1520 3652 2608 14 Dtool_Ns0b6zHl 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  2 cs 1 3555  
1837 14 Dtool_Ns0bIPaW 0 7 1520 3652 2608 14 Dtool_Ns0bIPaW 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1838 14 Dtool_Ns0blYi_ 0 6 1521 3618 0 14 Dtool_Ns0blYi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1839 14 Dtool_Ns0bkVi_ 0 6 1522 3618 0 14 Dtool_Ns0bkVi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1840 14 Dtool_Ns0b1WiG 0 6 1523 3618 0 14 Dtool_Ns0b1WiG 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1841 14 Dtool_Ns0bHQiN 0 6 1524 3618 0 14 Dtool_Ns0bHQiN 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1842 14 Dtool_Ns0b2srU 0 4 1525 3599 0 14 Dtool_Ns0b2srU 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  1 r 1 3618  
1843 14 Dtool_Ns0b3hrV 0 4 1526 3599 0 14 Dtool_Ns0b3hrV 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  1 i 1 3618  
1844 14 Dtool_Ns0b5irc 0 4 1527 3599 0 14 Dtool_Ns0b5irc 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  1 j 1 3618  
1845 14 Dtool_Ns0bLjrj 0 4 1528 3599 0 14 Dtool_Ns0bLjrj 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  1 k 1 3618  
1846 14 Dtool_Ns0baleL 0 6 1529 3604 0 14 Dtool_Ns0baleL 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3748  
1847 14 Dtool_Ns0bMw_G 0 6 1530 3604 0 14 Dtool_Ns0bMw_G 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  5 other 1 3749  
1848 14 Dtool_Ns0bDM3c 0 6 1531 3604 0 14 Dtool_Ns0bDM3c 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3748  
1849 14 Dtool_Ns0bIgEt 0 6 1532 3604 0 14 Dtool_Ns0bIgEt 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  5 other 1 3749  
1850 14 Dtool_Ns0bv3zo 0 6 1533 3604 0 14 Dtool_Ns0bv3zo 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3748  
1851 14 Dtool_Ns0bJIif 0 6 1534 3604 0 14 Dtool_Ns0bJIif 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3749  
1852 14 Dtool_Ns0bZ4KV 0 6 1535 3604 0 14 Dtool_Ns0bZ4KV 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3749  9 tolerance 1 3618  
1853 14 Dtool_Ns0bmaTM 0 6 1536 3749 0 14 Dtool_Ns0bmaTM 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1854 14 Dtool_Ns0bnxRY 0 7 1537 3614 0 14 Dtool_Ns0bnxRY 0 0 
1855 14 Dtool_Ns0b1ufs 0 7 1540 3751 3528 14 Dtool_Ns0b1ufs 226 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1856 14 Dtool_Ns0boHWm 0 7 1540 3751 3528 14 Dtool_Ns0boHWm 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3704  
1857 14 Dtool_Ns0boMkn 0 7 1540 3751 3528 14 Dtool_Ns0boMkn 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3708  
1858 14 Dtool_Ns0bdC6k 0 7 1540 3751 3528 14 Dtool_Ns0bdC6k 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3746  
1859 14 Dtool_Ns0bZE8x 0 7 1540 3751 3528 14 Dtool_Ns0bZE8x 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3668  
1860 14 Dtool_Ns0bzssT 0 7 1540 3751 3528 14 Dtool_Ns0bzssT 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3650  6 param1 0 3597  
1861 14 Dtool_Ns0bLwNm 0 7 1540 3751 3528 14 Dtool_Ns0bLwNm 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 3597  6 param1 0 3597  6 param2 0 3597  
1862 14 Dtool_Ns0b6t_a 0 7 1540 3751 3528 14 Dtool_Ns0b6t_a 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3597  6 param1 0 3597  6 param2 0 3597  6 param3 0 3597  
1863 14 Dtool_Ns0bcT59 0 7 1541 3745 3475 14 Dtool_Ns0bcT59 0 2 4 this 3 3752  5 other 1 3746  
1864 14 Dtool_Ns0bttc8 0 7 1541 3751 3528 14 Dtool_Ns0bttc8 0 2 4 this 3 3752  5 other 1 3752  
1865 14 Dtool_Ns0bmMpJ 0 7 1541 3751 3528 14 Dtool_Ns0bmMpJ 0 2 4 this 3 3752  6 scalar 1 3597  
1866 14 Dtool_Ns0bmkd6 0 7 1542 3751 3528 14 Dtool_Ns0bmkd6 0 2 4 this 3 3752  6 scalar 1 3597  
1867 14 Dtool_Ns0bscCI 0 7 1543 3614 0 14 Dtool_Ns0bscCI 0 0 
1868 14 Dtool_Ns0bXT9o 0 7 1546 3754 3533 14 Dtool_Ns0bXT9o 226 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1869 14 Dtool_Ns0b1jtU 0 7 1546 3754 3533 14 Dtool_Ns0b1jtU 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3725  
1870 14 Dtool_Ns0b1o7V 0 7 1546 3754 3533 14 Dtool_Ns0b1o7V 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3729  
1871 14 Dtool_Ns0b71Oh 0 7 1546 3754 3533 14 Dtool_Ns0b71Oh 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3749  
1872 14 Dtool_Ns0bbq7q 0 7 1546 3754 3533 14 Dtool_Ns0bbq7q 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3674  
1873 14 Dtool_Ns0bLdpy 0 7 1546 3754 3533 14 Dtool_Ns0bLdpy 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3653  6 param1 0 3618  
1874 14 Dtool_Ns0b4Iug 0 7 1546 3754 3533 14 Dtool_Ns0b4Iug 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 3618  6 param1 0 3618  6 param2 0 3618  
1875 14 Dtool_Ns0bA9cz 0 7 1546 3754 3533 14 Dtool_Ns0bA9cz 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3618  6 param1 0 3618  6 param2 0 3618  6 param3 0 3618  
1876 14 Dtool_Ns0bukuN 0 7 1547 3748 3523 14 Dtool_Ns0bukuN 0 2 4 this 3 3755  5 other 1 3749  
1877 14 Dtool_Ns0b1Z8I 0 7 1547 3754 3533 14 Dtool_Ns0b1Z8I 0 2 4 this 3 3755  5 other 1 3755  
1878 14 Dtool_Ns0by_rc 0 7 1547 3754 3533 14 Dtool_Ns0by_rc 0 2 4 this 3 3755  6 scalar 1 3618  
1879 14 Dtool_Ns0bzWgN 0 7 1548 3754 3533 14 Dtool_Ns0bzWgN 0 2 4 this 3 3755  6 scalar 1 3618  
1880 14 Dtool_Ns0bKPCY 0 7 1549 3614 0 14 Dtool_Ns0bKPCY 0 0 
1881 14 Dtool_Ns0bcX4n 0 7 1552 3757 3537 14 Dtool_Ns0bcX4n 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1882 14 Dtool_Ns0bkodg 0 7 1552 3757 3537 14 Dtool_Ns0bkodg 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3704  
1883 14 Dtool_Ns0bloku 0 7 1552 3757 3537 14 Dtool_Ns0bloku 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3708  
1884 14 Dtool_Ns0b_eNF 0 7 1552 3757 3537 14 Dtool_Ns0b_eNF 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3746  
1885 14 Dtool_Ns0bOs13 0 7 1552 3757 3537 14 Dtool_Ns0bOs13 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3650  6 param1 0 3597  
1886 14 Dtool_Ns0bWFbK 0 7 1552 3757 3537 14 Dtool_Ns0bWFbK 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3597  6 param1 0 3597  6 param2 0 3597  6 param3 0 3597  
1887 14 Dtool_Ns0b1nPz 0 7 1553 3757 3537 14 Dtool_Ns0b1nPz 0 2 4 this 3 3758  5 other 1 3746  
1888 14 Dtool_Ns0byr_X 0 7 1553 3757 3537 14 Dtool_Ns0byr_X 0 2 4 this 3 3758  5 other 1 3752  
1889 14 Dtool_Ns0byKEa 0 7 1554 3614 0 14 Dtool_Ns0byKEa 0 0 
1890 14 Dtool_Ns0b2Y6p 0 7 1557 3760 3541 14 Dtool_Ns0b2Y6p 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1891 14 Dtool_Ns0bYrfb 0 7 1557 3760 3541 14 Dtool_Ns0bYrfb 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3725  
1892 14 Dtool_Ns0bZrmp 0 7 1557 3760 3541 14 Dtool_Ns0bZrmp 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3729  
1893 14 Dtool_Ns0bRFe9 0 7 1557 3760 3541 14 Dtool_Ns0bRFe9 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3749  
1894 14 Dtool_Ns0byi3y 0 7 1557 3760 3541 14 Dtool_Ns0byi3y 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3653  6 param1 0 3597  
1895 14 Dtool_Ns0bQOxM 0 7 1557 3760 3541 14 Dtool_Ns0bQOxM 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3618  6 param1 0 3618  6 param2 0 3618  6 param3 0 3618  
1896 14 Dtool_Ns0blgBQ 0 7 1558 3760 3541 14 Dtool_Ns0blgBQ 0 2 4 this 3 3761  5 other 1 3749  
1897 14 Dtool_Ns0b9P52 0 7 1558 3760 3541 14 Dtool_Ns0b9P52 0 2 4 this 3 3761  5 other 1 3755  
1898 14 Dtool_Ns0bxK29 0 7 1559 3614 0 14 Dtool_Ns0bxK29 0 0 
1899 14 Dtool_Ns0baTo4 0 6 3 3618 0 14 Dtool_Ns0baTo4 0 1 1 f 1 3618  
1900 14 Dtool_Ns0bRKCI 0 6 3 3597 0 14 Dtool_Ns0bRKCI 0 1 1 f 1 3597  
1901 14 Dtool_Ns0bgpRs 0 6 4 3618 0 14 Dtool_Ns0bgpRs 0 1 1 f 1 3618  
1902 14 Dtool_Ns0bIbq7 0 6 4 3597 0 14 Dtool_Ns0bIbq7 0 1 1 f 1 3597  
1903 14 Dtool_Ns0bt1jy 0 6 518 3555 0 14 Dtool_Ns0bt1jy 0 0 
1904 14 Dtool_Ns0bVyE0 0 6 519 3555 0 14 Dtool_Ns0bVyE0 0 1 3 str 1 3602  
1905 14 Dtool_Ns0bblcZ 0 6 520 3602 0 14 Dtool_Ns0bblcZ 0 1 2 cs 1 3555  
1906 14 Dtool_Ns0b14II 0 6 521 3604 0 14 Dtool_Ns0b14II 0 1 2 cs 1 3555  
1907 14 Dtool_Ns0bvd7J 0 6 521 3604 0 14 Dtool_Ns0bvd7J 0 0 
1908 14 Dtool_Ns0bp_eQ 0 7 1134 3724 3315 14 Dtool_Ns0bp_eQ 0 1 1 a 1 3725  
1909 14 Dtool_Ns0bN4ee 0 7 1134 3703 3131 14 Dtool_Ns0bN4ee 0 1 1 a 1 3704  
1910 14 Dtool_Ns0bn_ss 0 7 1134 3735 3407 14 Dtool_Ns0bn_ss 0 1 1 a 1 3729  
1911 14 Dtool_Ns0bL4s6 0 7 1134 3714 3225 14 Dtool_Ns0bL4s6 0 1 1 a 1 3708  
1912 14 Dtool_Ns0b9Gem 0 7 1135 3724 3315 14 Dtool_Ns0b9Gem 0 1 1 a 1 3725  
1913 14 Dtool_Ns0bNgym 0 7 1135 3703 3131 14 Dtool_Ns0bNgym 0 1 1 a 1 3704  
1914 14 Dtool_Ns0bYJfW 0 7 1135 3735 3407 14 Dtool_Ns0bYJfW 0 1 1 a 1 3729  
1915 14 Dtool_Ns0borzW 0 7 1135 3714 3225 14 Dtool_Ns0borzW 0 1 1 a 1 3708  
1916 14 Dtool_Ns0bG8wm 0 7 1135 3748 3523 14 Dtool_Ns0bG8wm 0 1 1 a 1 3749  
1917 14 Dtool_Ns0bqBx0 0 7 1135 3745 3475 14 Dtool_Ns0bqBx0 0 1 1 a 1 3746  
1918 14 Dtool_Ns0bDzjX 0 7 1429 3724 3315 14 Dtool_Ns0bDzjX 0 2 1 m 1 3725  1 q 1 3749  
1919 14 Dtool_Ns0bkolH 0 7 1429 3703 3131 14 Dtool_Ns0bkolH 0 2 1 m 1 3704  1 q 1 3746  
1920 14 Dtool_Ns0bRsje 0 7 1429 3735 3407 14 Dtool_Ns0bRsje 0 2 1 m 1 3729  1 q 1 3749  
1921 14 Dtool_Ns0bqplO 0 7 1429 3714 3225 14 Dtool_Ns0bqplO 0 2 1 m 1 3708  1 q 1 3746  
1922 14 Dtool_Ns0byfKI 0 7 1429 3634 2305 14 Dtool_Ns0byfKI 0 2 1 v 1 3635  1 m 1 3725  
1923 14 Dtool_Ns0bSCRW 0 7 1429 3631 2289 14 Dtool_Ns0bSCRW 0 2 1 v 1 3632  1 m 1 3704  
1924 14 Dtool_Ns0bwfYk 0 7 1429 3661 2681 14 Dtool_Ns0bwfYk 0 2 1 v 1 3662  1 m 1 3725  
1925 14 Dtool_Ns0bmWZA 0 7 1429 3661 2681 14 Dtool_Ns0bmWZA 0 2 1 v 1 3662  1 m 1 3729  
1926 14 Dtool_Ns0bQCfy 0 7 1429 3658 2658 14 Dtool_Ns0bQCfy 0 2 1 v 1 3659  1 m 1 3704  
1927 14 Dtool_Ns0beNeO 0 7 1429 3658 2658 14 Dtool_Ns0beNeO 0 2 1 v 1 3659  1 m 1 3708  
1928 14 Dtool_Ns0bkWnc 0 7 1429 3697 3032 14 Dtool_Ns0bkWnc 0 2 1 v 1 3698  1 m 1 3729  
1929 14 Dtool_Ns0bcNsq 0 7 1429 3694 3014 14 Dtool_Ns0bcNsq 0 2 1 v 1 3695  1 m 1 3708  
1930 14 Dtool_Ns0b6f4W 0 7 1429 3643 2403 14 Dtool_Ns0b6f4W 0 2 1 v 1 3644  1 m 1 3725  
1931 14 Dtool_Ns0bZSml 0 7 1429 3640 2330 14 Dtool_Ns0bZSml 0 2 1 v 1 3641  1 m 1 3704  
1932 14 Dtool_Ns0bHpH4 0 7 1429 3673 2795 14 Dtool_Ns0bHpH4 0 2 1 v 1 3674  1 m 1 3729  
1933 14 Dtool_Ns0blt1G 0 7 1429 3667 2714 14 Dtool_Ns0blt1G 0 2 1 v 1 3668  1 m 1 3708  
1934 14 Dtool_Ns0bQlWf 0 7 1429 3625 2258 14 Dtool_Ns0bQlWf 0 2 1 v 1 3626  1 m 1 3725  
1935 14 Dtool_Ns0bfZ0h 0 7 1429 3622 2240 14 Dtool_Ns0bfZ0h 0 2 1 v 1 3623  1 m 1 3704  
1936 14 Dtool_Ns0bmnWm 0 7 1429 3652 2608 14 Dtool_Ns0bmnWm 0 2 1 v 1 3653  1 m 1 3725  
1937 14 Dtool_Ns0bwbZm 0 7 1429 3652 2608 14 Dtool_Ns0bwbZm 0 2 1 v 1 3653  1 m 1 3729  
1938 14 Dtool_Ns0bpb0o 0 7 1429 3649 2574 14 Dtool_Ns0bpb0o 0 2 1 v 1 3650  1 m 1 3704  
1939 14 Dtool_Ns0b7_2o 0 7 1429 3649 2574 14 Dtool_Ns0b7_2o 0 2 1 v 1 3650  1 m 1 3708  
1940 14 Dtool_Ns0biUZt 0 7 1429 3688 2979 14 Dtool_Ns0biUZt 0 2 1 v 1 3689  1 m 1 3729  
1941 14 Dtool_Ns0bpw2v 0 7 1429 3685 2961 14 Dtool_Ns0bpw2v 0 2 1 v 1 3686  1 m 1 3708  
1942 14 Dtool_Ns0blh4s 0 4 1430 3599 0 14 Dtool_Ns0blh4s 0 2 1 v 1 3634  1 m 1 3725  
1943 14 Dtool_Ns0bHtbw 0 4 1430 3599 0 14 Dtool_Ns0bHtbw 0 2 1 v 1 3631  1 m 1 3704  
1944 14 Dtool_Ns0bXi4z 0 4 1430 3599 0 14 Dtool_Ns0bXi4z 0 2 1 v 1 3661  1 m 1 3725  
1945 14 Dtool_Ns0bUC8a 0 4 1430 3599 0 14 Dtool_Ns0bUC8a 0 2 1 v 1 3661  1 m 1 3729  
1946 14 Dtool_Ns0bVsb3 0 4 1430 3599 0 14 Dtool_Ns0bVsb3 0 2 1 v 1 3658  1 m 1 3704  
1947 14 Dtool_Ns0bUMfe 0 4 1430 3599 0 14 Dtool_Ns0bUMfe 0 2 1 v 1 3658  1 m 1 3708  
1948 14 Dtool_Ns0bbnYb 0 4 1430 3599 0 14 Dtool_Ns0bbnYb 0 2 1 v 1 3643  1 m 1 3725  
1949 14 Dtool_Ns0bTAEv 0 4 1430 3599 0 14 Dtool_Ns0bTAEv 0 2 1 v 1 3640  1 m 1 3704  
1950 14 Dtool_Ns0b6LsT 0 4 1430 3599 0 14 Dtool_Ns0b6LsT 0 2 1 v 1 3673  1 m 1 3729  
1951 14 Dtool_Ns0byoXn 0 4 1430 3599 0 14 Dtool_Ns0byoXn 0 2 1 v 1 3667  1 m 1 3708  
1952 14 Dtool_Ns0bSP7Z 0 4 1430 3599 0 14 Dtool_Ns0bSP7Z 0 2 1 v 1 3625  1 m 1 3725  
1953 14 Dtool_Ns0bQFiK 0 4 1430 3599 0 14 Dtool_Ns0bQFiK 0 2 1 v 1 3622  1 m 1 3704  
1954 14 Dtool_Ns0bXk75 0 4 1430 3599 0 14 Dtool_Ns0bXk75 0 2 1 v 1 3652  1 m 1 3725  
1955 14 Dtool_Ns0b7krb 0 4 1430 3599 0 14 Dtool_Ns0b7krb 0 2 1 v 1 3652  1 m 1 3729  
1956 14 Dtool_Ns0bVsiq 0 4 1430 3599 0 14 Dtool_Ns0bVsiq 0 2 1 v 1 3649  1 m 1 3704  
1957 14 Dtool_Ns0b5tSM 0 4 1430 3599 0 14 Dtool_Ns0b5tSM 0 2 1 v 1 3649  1 m 1 3708  
1958 14 Dtool_Ns0bJ63D 0 4 1431 3599 0 14 Dtool_Ns0bJ63D 0 2 4 dest 1 3609  5 value 1 3725  
1959 14 Dtool_Ns0bQo4D 0 4 1431 3599 0 14 Dtool_Ns0bQo4D 0 2 4 dest 1 3609  5 value 1 3704  
1960 14 Dtool_Ns0bb53K 0 4 1431 3599 0 14 Dtool_Ns0bb53K 0 2 4 dest 1 3609  5 value 1 3729  
1961 14 Dtool_Ns0bCr4K 0 4 1431 3599 0 14 Dtool_Ns0bCr4K 0 2 4 dest 1 3609  5 value 1 3708  
1962 14 Dtool_Ns0bG74L 0 4 1432 3599 0 14 Dtool_Ns0bG74L 0 2 6 result 1 3724  6 source 1 3611  
1963 14 Dtool_Ns0bGpUO 0 4 1432 3599 0 14 Dtool_Ns0bGpUO 0 2 6 result 1 3703  6 source 1 3611  
1964 14 Dtool_Ns0b0f6L 0 4 1432 3599 0 14 Dtool_Ns0b0f6L 0 2 6 result 1 3735  6 source 1 3611  
1965 14 Dtool_Ns0b0NWO 0 4 1432 3599 0 14 Dtool_Ns0b0NWO 0 2 6 result 1 3714  6 source 1 3611  
1966 14 Dtool_Ns0byVzC 0 4 1433 3599 0 14 Dtool_Ns0byVzC 0 4 3 mat 1 3724  5 scale 1 3644  3 hpr 1 3644  2 cs 1 3555  
1967 14 Dtool_Ns0bhQb3 0 4 1433 3599 0 14 Dtool_Ns0bhQb3 0 3 3 mat 1 3724  5 scale 1 3644  3 hpr 1 3644  
1968 14 Dtool_Ns0b3KHb 0 4 1433 3599 0 14 Dtool_Ns0b3KHb 0 5 3 mat 1 3724  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  2 cs 1 3555  
1969 14 Dtool_Ns0bRK2_ 0 4 1433 3599 0 14 Dtool_Ns0bRK2_ 0 4 3 mat 1 3724  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  
1970 14 Dtool_Ns0b4aBn 0 4 1433 3599 0 14 Dtool_Ns0b4aBn 0 4 3 mat 1 3703  5 scale 1 3641  3 hpr 1 3641  2 cs 1 3555  
1971 14 Dtool_Ns0b6xpb 0 4 1433 3599 0 14 Dtool_Ns0b6xpb 0 3 3 mat 1 3703  5 scale 1 3641  3 hpr 1 3641  
1972 14 Dtool_Ns0bs_WG 0 4 1433 3599 0 14 Dtool_Ns0bs_WG 0 5 3 mat 1 3703  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  2 cs 1 3555  
1973 14 Dtool_Ns0bk7Er 0 4 1433 3599 0 14 Dtool_Ns0bk7Er 0 4 3 mat 1 3703  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  
1974 14 Dtool_Ns0b8KjT 0 4 1433 3599 0 14 Dtool_Ns0b8KjT 0 5 3 mat 1 3735  5 scale 1 3644  3 hpr 1 3644  9 translate 1 3644  2 cs 1 3555  
1975 14 Dtool_Ns0bUKS4 0 4 1433 3599 0 14 Dtool_Ns0bUKS4 0 4 3 mat 1 3735  5 scale 1 3644  3 hpr 1 3644  9 translate 1 3644  
1976 14 Dtool_Ns0boQjw 0 4 1433 3599 0 14 Dtool_Ns0boQjw 0 6 3 mat 1 3735  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  9 translate 1 3644  2 cs 1 3555  
1977 14 Dtool_Ns0b9vLl 0 4 1433 3599 0 14 Dtool_Ns0b9vLl 0 5 3 mat 1 3735  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  9 translate 1 3644  
1978 14 Dtool_Ns0bQ_y_ 0 4 1433 3599 0 14 Dtool_Ns0bQ_y_ 0 5 3 mat 1 3714  5 scale 1 3641  3 hpr 1 3641  9 translate 1 3641  2 cs 1 3555  
1979 14 Dtool_Ns0b77gj 0 4 1433 3599 0 14 Dtool_Ns0b77gj 0 4 3 mat 1 3714  5 scale 1 3641  3 hpr 1 3641  9 translate 1 3641  
1980 14 Dtool_Ns0b1X_c 0 4 1433 3599 0 14 Dtool_Ns0b1X_c 0 6 3 mat 1 3714  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  9 translate 1 3641  2 cs 1 3555  
1981 14 Dtool_Ns0bCknR 0 4 1433 3599 0 14 Dtool_Ns0bCknR 0 5 3 mat 1 3714  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  9 translate 1 3641  
1982 14 Dtool_Ns0brGAD 0 6 1434 3604 0 14 Dtool_Ns0brGAD 0 4 3 mat 1 3725  5 scale 1 3643  3 hpr 1 3643  2 cs 1 3555  
1983 14 Dtool_Ns0bVxX2 0 6 1434 3604 0 14 Dtool_Ns0bVxX2 0 3 3 mat 1 3725  5 scale 1 3643  3 hpr 1 3643  
1984 14 Dtool_Ns0bwk1_ 0 6 1434 3604 0 14 Dtool_Ns0bwk1_ 0 5 3 mat 1 3725  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  2 cs 1 3555  
1985 14 Dtool_Ns0bsyts 0 6 1434 3604 0 14 Dtool_Ns0bsyts 0 4 3 mat 1 3725  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  
1986 14 Dtool_Ns0bKI_s 0 6 1434 3604 0 14 Dtool_Ns0bKI_s 0 4 3 mat 1 3704  5 scale 1 3640  3 hpr 1 3640  2 cs 1 3555  
1987 14 Dtool_Ns0bzJVg 0 6 1434 3604 0 14 Dtool_Ns0bzJVg 0 3 3 mat 1 3704  5 scale 1 3640  3 hpr 1 3640  
1988 14 Dtool_Ns0bb5Pi 0 6 1434 3604 0 14 Dtool_Ns0bb5Pi 0 5 3 mat 1 3704  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  2 cs 1 3555  
1989 14 Dtool_Ns0bFoHP 0 6 1434 3604 0 14 Dtool_Ns0bFoHP 0 4 3 mat 1 3704  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  
1990 14 Dtool_Ns0b7y0_ 0 6 1434 3604 0 14 Dtool_Ns0b7y0_ 0 5 3 mat 1 3729  5 scale 1 3643  3 hpr 1 3643  9 translate 1 3643  2 cs 1 3555  
1991 14 Dtool_Ns0b1gus 0 6 1434 3604 0 14 Dtool_Ns0b1gus 0 4 3 mat 1 3729  5 scale 1 3643  3 hpr 1 3643  9 translate 1 3643  
1992 14 Dtool_Ns0bFy__ 0 6 1434 3604 0 14 Dtool_Ns0bFy__ 0 6 3 mat 1 3729  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  9 translate 1 3643  2 cs 1 3555  
1993 14 Dtool_Ns0bioSK 0 6 1434 3604 0 14 Dtool_Ns0bioSK 0 5 3 mat 1 3729  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  9 translate 1 3643  
1994 14 Dtool_Ns0bQLRi 0 6 1434 3604 0 14 Dtool_Ns0bQLRi 0 5 3 mat 1 3708  5 scale 1 3640  3 hpr 1 3640  9 translate 1 3640  2 cs 1 3555  
1995 14 Dtool_Ns0bcmIP 0 6 1434 3604 0 14 Dtool_Ns0bcmIP 0 4 3 mat 1 3708  5 scale 1 3640  3 hpr 1 3640  9 translate 1 3640  
1996 14 Dtool_Ns0bt1gv 0 6 1434 3604 0 14 Dtool_Ns0bt1gv 0 6 3 mat 1 3708  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  9 translate 1 3640  2 cs 1 3555  
1997 14 Dtool_Ns0bJlz6 0 6 1434 3604 0 14 Dtool_Ns0bJlz6 0 5 3 mat 1 3708  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  9 translate 1 3640  
1998 14 Dtool_Ns0b5kiD 0 4 1435 3599 0 14 Dtool_Ns0b5kiD 0 5 3 mat 1 3724  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  2 cs 1 3555  
1999 14 Dtool_Ns0bTMeM 0 4 1435 3599 0 14 Dtool_Ns0bTMeM 0 4 3 mat 1 3724  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  
2000 14 Dtool_Ns0bURso 0 4 1435 3599 0 14 Dtool_Ns0bURso 0 5 3 mat 1 3703  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  2 cs 1 3555  
2001 14 Dtool_Ns0b_Rpx 0 4 1435 3599 0 14 Dtool_Ns0b_Rpx 0 4 3 mat 1 3703  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  
2002 14 Dtool_Ns0baU0J 0 4 1435 3599 0 14 Dtool_Ns0baU0J 0 6 3 mat 1 3735  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  9 translate 1 3644  2 cs 1 3555  
2003 14 Dtool_Ns0b_LGV 0 4 1435 3599 0 14 Dtool_Ns0b_LGV 0 5 3 mat 1 3735  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  9 translate 1 3644  
2004 14 Dtool_Ns0bXr_e 0 4 1435 3599 0 14 Dtool_Ns0bXr_e 0 6 3 mat 1 3714  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  9 translate 1 3641  2 cs 1 3555  
2005 14 Dtool_Ns0bgMRq 0 4 1435 3599 0 14 Dtool_Ns0bgMRq 0 5 3 mat 1 3714  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  9 translate 1 3641  
2006 14 Dtool_Ns0btC1N 0 6 1436 3604 0 14 Dtool_Ns0btC1N 0 5 3 mat 1 3725  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  2 cs 1 3555  
2007 14 Dtool_Ns0bz5DH 0 6 1436 3604 0 14 Dtool_Ns0bz5DH 0 4 3 mat 1 3725  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  
2008 14 Dtool_Ns0bPOdX 0 6 1436 3604 0 14 Dtool_Ns0bPOdX 0 5 3 mat 1 3704  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  2 cs 1 3555  
2009 14 Dtool_Ns0bRWrQ 0 6 1436 3604 0 14 Dtool_Ns0bRWrQ 0 4 3 mat 1 3704  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  
2010 14 Dtool_Ns0bvhAZ 0 6 1436 3604 0 14 Dtool_Ns0bvhAZ 0 6 3 mat 1 3729  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  9 translate 1 3643  2 cs 1 3555  
2011 14 Dtool_Ns0bPJWn 0 6 1436 3604 0 14 Dtool_Ns0bPJWn 0 5 3 mat 1 3729  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  9 translate 1 3643  
2012 14 Dtool_Ns0bST9i 0 6 1436 3604 0 14 Dtool_Ns0bST9i 0 6 3 mat 1 3708  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  9 translate 1 3640  2 cs 1 3555  
2013 14 Dtool_Ns0b95Tx 0 6 1436 3604 0 14 Dtool_Ns0b95Tx 0 5 3 mat 1 3708  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  9 translate 1 3640  
2014 14 Dtool_Ns0b2yX5 0 4 1437 3599 0 14 Dtool_Ns0b2yX5 0 5 3 mat 1 3724  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  2 cs 1 3555  
2015 14 Dtool_Ns0bZHTC 0 4 1437 3599 0 14 Dtool_Ns0bZHTC 0 4 3 mat 1 3724  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  
2016 14 Dtool_Ns0bSFhe 0 4 1437 3599 0 14 Dtool_Ns0bSFhe 0 5 3 mat 1 3703  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  2 cs 1 3555  
2017 14 Dtool_Ns0b1Zen 0 4 1437 3599 0 14 Dtool_Ns0b1Zen 0 4 3 mat 1 3703  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  
2018 14 Dtool_Ns0bXOp_ 0 4 1437 3599 0 14 Dtool_Ns0bXOp_ 0 6 3 mat 1 3735  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  9 translate 1 3644  2 cs 1 3555  
2019 14 Dtool_Ns0bIA7K 0 4 1437 3599 0 14 Dtool_Ns0bIA7K 0 5 3 mat 1 3735  5 scale 1 3644  5 shear 1 3644  3 hpr 1 3644  9 translate 1 3644  
2020 14 Dtool_Ns0bR3yU 0 4 1437 3599 0 14 Dtool_Ns0bR3yU 0 6 3 mat 1 3714  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  9 translate 1 3641  2 cs 1 3555  
2021 14 Dtool_Ns0bKHGg 0 4 1437 3599 0 14 Dtool_Ns0bKHGg 0 5 3 mat 1 3714  5 scale 1 3641  5 shear 1 3641  3 hpr 1 3641  9 translate 1 3641  
2022 14 Dtool_Ns0b0nyg 0 6 1438 3604 0 14 Dtool_Ns0b0nyg 0 5 3 mat 1 3725  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  2 cs 1 3555  
2023 14 Dtool_Ns0bWfBa 0 6 1438 3604 0 14 Dtool_Ns0bWfBa 0 4 3 mat 1 3725  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  
2024 14 Dtool_Ns0bSuaq 0 6 1438 3604 0 14 Dtool_Ns0bSuaq 0 5 3 mat 1 3704  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  2 cs 1 3555  
2025 14 Dtool_Ns0b7noj 0 6 1438 3604 0 14 Dtool_Ns0b7noj 0 4 3 mat 1 3704  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  
2026 14 Dtool_Ns0bBw_r 0 6 1438 3604 0 14 Dtool_Ns0bBw_r 0 6 3 mat 1 3729  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  9 translate 1 3643  2 cs 1 3555  
2027 14 Dtool_Ns0b1_T6 0 6 1438 3604 0 14 Dtool_Ns0b1_T6 0 5 3 mat 1 3729  5 scale 1 3643  5 shear 1 3643  3 hpr 1 3643  9 translate 1 3643  
2028 14 Dtool_Ns0b3x61 0 6 1438 3604 0 14 Dtool_Ns0b3x61 0 6 3 mat 1 3708  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  9 translate 1 3640  2 cs 1 3555  
2029 14 Dtool_Ns0bGpPE 0 6 1438 3604 0 14 Dtool_Ns0bGpPE 0 5 3 mat 1 3708  5 scale 1 3640  5 shear 1 3640  3 hpr 1 3640  9 translate 1 3640  
2030 14 Dtool_Ns0b2peC 0 7 1439 3643 2403 14 Dtool_Ns0b2peC 0 1 7 old_hpr 1 3644  
2031 14 Dtool_Ns0bI0gC 0 7 1439 3640 2330 14 Dtool_Ns0bI0gC 0 1 7 old_hpr 1 3641  
2032 14 Dtool_Ns0bPgfc 0 7 1440 3643 2403 14 Dtool_Ns0bPgfc 0 1 7 new_hpr 1 3644  
2033 14 Dtool_Ns0bZEhc 0 7 1440 3640 2330 14 Dtool_Ns0bZEhc 0 1 7 new_hpr 1 3641  
221
3542 11 MathNumbers 0 141313 11 MathNumbers 11 MathNumbers 0 0 0 0 2034 0 0 0 0 0 0 0 0

3543 10 LVecBase2f 0 26625 10 LVecBase2f 10 LVecBase2f 0 0 0 1 2037 2045 0 61 2038 2039 2040 2041 2042 2043 2044 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3544 10 LVecBase2d 0 26625 10 LVecBase2d 10 LVecBase2d 0 0 0 1 2100 2108 0 61 2101 2102 2103 2104 2105 2106 2107 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3545 10 LVecBase2i 0 26625 10 LVecBase2i 10 LVecBase2i 0 0 0 1 2163 2171 0 58 2164 2165 2166 2167 2168 2169 2170 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3546 9 LVector2f 0 141313 9 LVector2f 9 LVector2f 0 0 0 1 2223 2240 0 16 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 0 0 1 0 3543 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

3547 9 LVector2d 0 141313 9 LVector2d 9 LVector2d 0 0 0 1 2241 2258 0 16 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 0 0 1 0 3544 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

3548 9 LVector2i 0 141313 9 LVector2i 9 LVector2i 0 0 0 1 2259 2273 0 13 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 0 0 1 0 3545 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

3549 8 LPoint2f 0 141313 8 LPoint2f 8 LPoint2f 0 0 0 1 2274 2289 0 14 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 0 0 1 0 3543 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3550 8 LPoint2d 0 141313 8 LPoint2d 8 LPoint2d 0 0 0 1 2290 2305 0 14 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 0 0 1 0 3544 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3551 8 LPoint2i 0 141313 8 LPoint2i 8 LPoint2i 0 0 0 1 2306 2320 0 13 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 0 0 1 0 3545 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3552 10 LVecBase3f 0 26625 10 LVecBase3f 10 LVecBase3f 0 0 0 1 2321 2330 0 71 2322 2323 2324 2325 2326 2327 2328 2329 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3553 10 LVecBase3d 0 26625 10 LVecBase3d 10 LVecBase3d 0 0 0 1 2394 2403 0 71 2395 2396 2397 2398 2399 2400 2401 2402 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3554 10 LVecBase3i 0 26625 10 LVecBase3i 10 LVecBase3i 0 0 0 1 2467 2476 0 68 2468 2469 2470 2471 2472 2473 2474 2475 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3555 16 CoordinateSystem 0 532481 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

3556 9 LVector3f 0 141313 9 LVector3f 9 LVector3f 0 0 0 1 2541 2574 0 32 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 0 0 1 0 3552 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3557 9 LVector3d 0 141313 9 LVector3d 9 LVector3d 0 0 0 1 2575 2608 0 32 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 0 0 1 0 3553 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3558 9 LVector3i 0 141313 9 LVector3i 9 LVector3i 0 0 0 1 2609 2635 0 25 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 0 0 1 0 3554 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3559 8 LPoint3f 0 141313 8 LPoint3f 8 LPoint3f 0 0 0 1 2636 2658 0 21 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 0 0 1 0 3552 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3560 8 LPoint3d 0 141313 8 LPoint3d 8 LPoint3d 0 0 0 1 2659 2681 0 21 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 0 0 1 0 3553 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3561 8 LPoint3i 0 141313 8 LPoint3i 8 LPoint3i 0 0 0 1 2682 2703 0 20 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 0 0 1 0 3554 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3562 10 LVecBase4f 0 26625 10 LVecBase4f 10 LVecBase4f 0 0 0 1 2704 2714 0 69 2705 2706 2707 2708 2709 2710 2711 2712 2713 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3563 19 UnalignedLVecBase4f 0 141313 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 1 2775 2784 0 8 2776 2777 2778 2779 2780 2781 2782 2783 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3564 10 LVecBase4d 0 26625 10 LVecBase4d 10 LVecBase4d 0 0 0 1 2785 2795 0 69 2786 2787 2788 2789 2790 2791 2792 2793 2794 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3565 19 UnalignedLVecBase4d 0 141313 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 1 2856 2865 0 8 2857 2858 2859 2860 2861 2862 2863 2864 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3566 10 LVecBase4i 0 26625 10 LVecBase4i 10 LVecBase4i 0 0 0 1 2866 2876 0 66 2867 2868 2869 2870 2871 2872 2873 2874 2875 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3567 19 UnalignedLVecBase4i 0 141313 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 1 2934 2943 0 8 2935 2936 2937 2938 2939 2940 2941 2942 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3568 9 LVector4f 0 141313 9 LVector4f 9 LVector4f 0 0 0 1 2944 2961 0 16 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 0 0 1 0 3562 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

3569 9 LVector4d 0 141313 9 LVector4d 9 LVector4d 0 0 0 1 2962 2979 0 16 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 0 0 1 0 3564 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

3570 9 LVector4i 0 141313 9 LVector4i 9 LVector4i 0 0 0 1 2980 2996 0 15 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 0 0 1 0 3566 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

3571 8 LPoint4f 0 141313 8 LPoint4f 8 LPoint4f 0 0 0 1 2997 3014 0 16 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 0 0 1 0 3562 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3572 8 LPoint4d 0 141313 8 LPoint4d 8 LPoint4d 0 0 0 1 3015 3032 0 16 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 0 0 1 0 3564 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3573 8 LPoint4i 0 141313 8 LPoint4i 8 LPoint4i 0 0 0 1 3033 3049 0 15 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 0 0 1 0 3566 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3574 9 LMatrix3f 0 141313 9 LMatrix3f 9 LMatrix3f 0 0 0 1 3057 3131 0 73 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 4 3763 3764 3765 3766 0 0 0 2 3575 3576 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3575 3 Row 0 403457 14 LMatrix3f::Row 14 LMatrix3f::Row 3574 0 0 0 3053 0 3 3050 3051 3052 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3576 4 CRow 0 403457 15 LMatrix3f::CRow 15 LMatrix3f::CRow 3574 0 0 0 3056 0 2 3054 3055 0 0 0 0 0 0

3577 9 LMatrix4f 0 141313 9 LMatrix4f 9 LMatrix4f 0 0 0 1 3141 3225 0 83 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3 3767 3768 3769 0 0 0 2 3578 3579 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3578 3 Row 0 403457 14 LMatrix4f::Row 14 LMatrix4f::Row 3577 0 0 0 3137 0 3 3134 3135 3136 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3579 4 CRow 0 403457 15 LMatrix4f::CRow 15 LMatrix4f::CRow 3577 0 0 0 3140 0 2 3138 3139 0 0 0 0 0 0

3580 18 UnalignedLMatrix4f 0 141313 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 1 3226 3233 0 6 3227 3228 3229 3230 3231 3232 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3581 9 LMatrix3d 0 141313 9 LMatrix3d 9 LMatrix3d 0 0 0 1 3241 3315 0 73 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 4 3770 3771 3772 3773 0 0 0 2 3582 3583 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3582 3 Row 0 403457 14 LMatrix3d::Row 14 LMatrix3d::Row 3581 0 0 0 3237 0 3 3234 3235 3236 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3583 4 CRow 0 403457 15 LMatrix3d::CRow 15 LMatrix3d::CRow 3581 0 0 0 3240 0 2 3238 3239 0 0 0 0 0 0

3584 9 LMatrix4d 0 141313 9 LMatrix4d 9 LMatrix4d 0 0 0 1 3323 3407 0 83 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3 3774 3775 3776 0 0 0 2 3585 3586 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3585 3 Row 0 403457 14 LMatrix4d::Row 14 LMatrix4d::Row 3584 0 0 0 3319 0 3 3316 3317 3318 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3586 4 CRow 0 403457 15 LMatrix4d::CRow 15 LMatrix4d::CRow 3584 0 0 0 3322 0 2 3320 3321 0 0 0 0 0 0

3587 18 UnalignedLMatrix4d 0 141313 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 1 3408 3415 0 6 3409 3410 3411 3412 3413 3414 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3588 12 LQuaternionf 0 141313 12 LQuaternionf 12 LQuaternionf 0 0 0 1 3428 3475 0 46 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 0 0 1 0 3562 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

3589 12 LQuaterniond 0 141313 12 LQuaterniond 12 LQuaterniond 0 0 0 1 3476 3523 0 46 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 3496 3497 3498 3499 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 0 0 1 0 3564 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

3590 10 LRotationf 0 141313 10 LRotationf 10 LRotationf 0 0 0 1 3524 3528 0 3 3525 3526 3527 0 0 1 0 3588 0 0 0 0 240
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

3591 10 LRotationd 0 141313 10 LRotationd 10 LRotationd 0 0 0 1 3529 3533 0 3 3530 3531 3532 0 0 1 0 3589 0 0 0 0 240
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

3592 13 LOrientationf 0 141313 13 LOrientationf 13 LOrientationf 0 0 0 1 3534 3537 0 2 3535 3536 0 0 1 0 3588 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

3593 13 LOrientationd 0 141313 13 LOrientationd 13 LOrientationd 0 0 0 1 3538 3541 0 2 3539 3540 0 0 1 0 3589 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

3594 12 LVecBase2f * 0 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 3543 0 0 0 0 0 0 0 0 0 0

3595 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 3596 0 0 0 0 0 0 0 0 0 0

3596 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 3543 0 0 0 0 0 0 0 0 0 0

3597 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

3598 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

3599 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

3600 9 _object * 0 8576 9 _object * 9 _object * 0 0 3601 0 0 0 0 0 0 0 0 0 0

3601 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

3602 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

3603 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

3604 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

3605 23 ChecksumHashGenerator * 0 8576 23 ChecksumHashGenerator * 23 ChecksumHashGenerator * 0 0 3606 0 0 0 0 0 0 0 0 0 0

3606 21 ChecksumHashGenerator 0 2048 21 ChecksumHashGenerator 21 ChecksumHashGenerator 0 0 0 0 0 0 0 0 0 0 0 0 339
////////////////////////////////////////////////////////////////////
//       Class : ChecksumHashGenerator
// Description : This is a specific kind of HashGenerator that simply
//               adds up all of the ints.  Nothing fancy, and pretty
//               quick.
////////////////////////////////////////////////////////////////////

3607 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 3608 0 0 0 0 0 0 0 0 0 0

3608 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

3609 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 3610 0 0 0 0 0 0 0 0 0 0

3610 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

3611 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 3612 0 0 0 0 0 0 0 0 0 0

3612 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

3613 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

3614 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 3613 0 0 0 0 0 0 0 0 0 0

3615 12 LVecBase2d * 0 8576 12 LVecBase2d * 12 LVecBase2d * 0 0 3544 0 0 0 0 0 0 0 0 0 0

3616 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 3617 0 0 0 0 0 0 0 0 0 0

3617 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 3544 0 0 0 0 0 0 0 0 0 0

3618 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

3619 12 LVecBase2i * 0 8576 12 LVecBase2i * 12 LVecBase2i * 0 0 3545 0 0 0 0 0 0 0 0 0 0

3620 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 3621 0 0 0 0 0 0 0 0 0 0

3621 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 3545 0 0 0 0 0 0 0 0 0 0

3622 11 LVector2f * 0 8576 11 LVector2f * 11 LVector2f * 0 0 3546 0 0 0 0 0 0 0 0 0 0

3623 17 LVector2f const * 0 8576 17 LVector2f const * 17 LVector2f const * 0 0 3624 0 0 0 0 0 0 0 0 0 0

3624 15 LVector2f const 0 8832 15 LVector2f const 15 LVector2f const 0 0 3546 0 0 0 0 0 0 0 0 0 0

3625 11 LVector2d * 0 8576 11 LVector2d * 11 LVector2d * 0 0 3547 0 0 0 0 0 0 0 0 0 0

3626 17 LVector2d const * 0 8576 17 LVector2d const * 17 LVector2d const * 0 0 3627 0 0 0 0 0 0 0 0 0 0

3627 15 LVector2d const 0 8832 15 LVector2d const 15 LVector2d const 0 0 3547 0 0 0 0 0 0 0 0 0 0

3628 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 3548 0 0 0 0 0 0 0 0 0 0

3629 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 3630 0 0 0 0 0 0 0 0 0 0

3630 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 3548 0 0 0 0 0 0 0 0 0 0

3631 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 3549 0 0 0 0 0 0 0 0 0 0

3632 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 3633 0 0 0 0 0 0 0 0 0 0

3633 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 3549 0 0 0 0 0 0 0 0 0 0

3634 10 LPoint2d * 0 8576 10 LPoint2d * 10 LPoint2d * 0 0 3550 0 0 0 0 0 0 0 0 0 0

3635 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 3636 0 0 0 0 0 0 0 0 0 0

3636 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 3550 0 0 0 0 0 0 0 0 0 0

3637 10 LPoint2i * 0 8576 10 LPoint2i * 10 LPoint2i * 0 0 3551 0 0 0 0 0 0 0 0 0 0

3638 16 LPoint2i const * 0 8576 16 LPoint2i const * 16 LPoint2i const * 0 0 3639 0 0 0 0 0 0 0 0 0 0

3639 14 LPoint2i const 0 8832 14 LPoint2i const 14 LPoint2i const 0 0 3551 0 0 0 0 0 0 0 0 0 0

3640 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 3552 0 0 0 0 0 0 0 0 0 0

3641 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 3642 0 0 0 0 0 0 0 0 0 0

3642 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 3552 0 0 0 0 0 0 0 0 0 0

3643 12 LVecBase3d * 0 8576 12 LVecBase3d * 12 LVecBase3d * 0 0 3553 0 0 0 0 0 0 0 0 0 0

3644 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 3645 0 0 0 0 0 0 0 0 0 0

3645 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 3553 0 0 0 0 0 0 0 0 0 0

3646 12 LVecBase3i * 0 8576 12 LVecBase3i * 12 LVecBase3i * 0 0 3554 0 0 0 0 0 0 0 0 0 0

3647 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 3648 0 0 0 0 0 0 0 0 0 0

3648 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 3554 0 0 0 0 0 0 0 0 0 0

3649 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 3556 0 0 0 0 0 0 0 0 0 0

3650 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 3651 0 0 0 0 0 0 0 0 0 0

3651 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 3556 0 0 0 0 0 0 0 0 0 0

3652 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 3557 0 0 0 0 0 0 0 0 0 0

3653 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 3654 0 0 0 0 0 0 0 0 0 0

3654 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 3557 0 0 0 0 0 0 0 0 0 0

3655 11 LVector3i * 0 8576 11 LVector3i * 11 LVector3i * 0 0 3558 0 0 0 0 0 0 0 0 0 0

3656 17 LVector3i const * 0 8576 17 LVector3i const * 17 LVector3i const * 0 0 3657 0 0 0 0 0 0 0 0 0 0

3657 15 LVector3i const 0 8832 15 LVector3i const 15 LVector3i const 0 0 3558 0 0 0 0 0 0 0 0 0 0

3658 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 3559 0 0 0 0 0 0 0 0 0 0

3659 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 3660 0 0 0 0 0 0 0 0 0 0

3660 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 3559 0 0 0 0 0 0 0 0 0 0

3661 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 3560 0 0 0 0 0 0 0 0 0 0

3662 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 3663 0 0 0 0 0 0 0 0 0 0

3663 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 3560 0 0 0 0 0 0 0 0 0 0

3664 10 LPoint3i * 0 8576 10 LPoint3i * 10 LPoint3i * 0 0 3561 0 0 0 0 0 0 0 0 0 0

3665 16 LPoint3i const * 0 8576 16 LPoint3i const * 16 LPoint3i const * 0 0 3666 0 0 0 0 0 0 0 0 0 0

3666 14 LPoint3i const 0 8832 14 LPoint3i const 14 LPoint3i const 0 0 3561 0 0 0 0 0 0 0 0 0 0

3667 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 3562 0 0 0 0 0 0 0 0 0 0

3668 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 3669 0 0 0 0 0 0 0 0 0 0

3669 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 3562 0 0 0 0 0 0 0 0 0 0

3670 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 3671 0 0 0 0 0 0 0 0 0 0

3671 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 3563 0 0 0 0 0 0 0 0 0 0

3672 21 UnalignedLVecBase4f * 0 8576 21 UnalignedLVecBase4f * 21 UnalignedLVecBase4f * 0 0 3563 0 0 0 0 0 0 0 0 0 0

3673 12 LVecBase4d * 0 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 3564 0 0 0 0 0 0 0 0 0 0

3674 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 3675 0 0 0 0 0 0 0 0 0 0

3675 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 3564 0 0 0 0 0 0 0 0 0 0

3676 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 3677 0 0 0 0 0 0 0 0 0 0

3677 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 3565 0 0 0 0 0 0 0 0 0 0

3678 21 UnalignedLVecBase4d * 0 8576 21 UnalignedLVecBase4d * 21 UnalignedLVecBase4d * 0 0 3565 0 0 0 0 0 0 0 0 0 0

3679 12 LVecBase4i * 0 8576 12 LVecBase4i * 12 LVecBase4i * 0 0 3566 0 0 0 0 0 0 0 0 0 0

3680 18 LVecBase4i const * 0 8576 18 LVecBase4i const * 18 LVecBase4i const * 0 0 3681 0 0 0 0 0 0 0 0 0 0

3681 16 LVecBase4i const 0 8832 16 LVecBase4i const 16 LVecBase4i const 0 0 3566 0 0 0 0 0 0 0 0 0 0

3682 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 3683 0 0 0 0 0 0 0 0 0 0

3683 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 3567 0 0 0 0 0 0 0 0 0 0

3684 21 UnalignedLVecBase4i * 0 8576 21 UnalignedLVecBase4i * 21 UnalignedLVecBase4i * 0 0 3567 0 0 0 0 0 0 0 0 0 0

3685 11 LVector4f * 0 8576 11 LVector4f * 11 LVector4f * 0 0 3568 0 0 0 0 0 0 0 0 0 0

3686 17 LVector4f const * 0 8576 17 LVector4f const * 17 LVector4f const * 0 0 3687 0 0 0 0 0 0 0 0 0 0

3687 15 LVector4f const 0 8832 15 LVector4f const 15 LVector4f const 0 0 3568 0 0 0 0 0 0 0 0 0 0

3688 11 LVector4d * 0 8576 11 LVector4d * 11 LVector4d * 0 0 3569 0 0 0 0 0 0 0 0 0 0

3689 17 LVector4d const * 0 8576 17 LVector4d const * 17 LVector4d const * 0 0 3690 0 0 0 0 0 0 0 0 0 0

3690 15 LVector4d const 0 8832 15 LVector4d const 15 LVector4d const 0 0 3569 0 0 0 0 0 0 0 0 0 0

3691 11 LVector4i * 0 8576 11 LVector4i * 11 LVector4i * 0 0 3570 0 0 0 0 0 0 0 0 0 0

3692 17 LVector4i const * 0 8576 17 LVector4i const * 17 LVector4i const * 0 0 3693 0 0 0 0 0 0 0 0 0 0

3693 15 LVector4i const 0 8832 15 LVector4i const 15 LVector4i const 0 0 3570 0 0 0 0 0 0 0 0 0 0

3694 10 LPoint4f * 0 8576 10 LPoint4f * 10 LPoint4f * 0 0 3571 0 0 0 0 0 0 0 0 0 0

3695 16 LPoint4f const * 0 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 3696 0 0 0 0 0 0 0 0 0 0

3696 14 LPoint4f const 0 8832 14 LPoint4f const 14 LPoint4f const 0 0 3571 0 0 0 0 0 0 0 0 0 0

3697 10 LPoint4d * 0 8576 10 LPoint4d * 10 LPoint4d * 0 0 3572 0 0 0 0 0 0 0 0 0 0

3698 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 3699 0 0 0 0 0 0 0 0 0 0

3699 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 3572 0 0 0 0 0 0 0 0 0 0

3700 10 LPoint4i * 0 8576 10 LPoint4i * 10 LPoint4i * 0 0 3573 0 0 0 0 0 0 0 0 0 0

3701 16 LPoint4i const * 0 8576 16 LPoint4i const * 16 LPoint4i const * 0 0 3702 0 0 0 0 0 0 0 0 0 0

3702 14 LPoint4i const 0 8832 14 LPoint4i const 14 LPoint4i const 0 0 3573 0 0 0 0 0 0 0 0 0 0

3703 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 3574 0 0 0 0 0 0 0 0 0 0

3704 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 3705 0 0 0 0 0 0 0 0 0 0

3705 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 3574 0 0 0 0 0 0 0 0 0 0

3706 5 Row * 0 8576 16 LMatrix3f::Row * 16 LMatrix3f::Row * 0 0 3575 0 0 0 0 0 0 0 0 0 0

3707 6 CRow * 0 8576 17 LMatrix3f::CRow * 17 LMatrix3f::CRow * 0 0 3576 0 0 0 0 0 0 0 0 0 0

3708 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 3709 0 0 0 0 0 0 0 0 0 0

3709 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 3577 0 0 0 0 0 0 0 0 0 0

3710 11 Row const * 0 8576 22 LMatrix3f::Row const * 22 LMatrix3f::Row const * 0 0 3711 0 0 0 0 0 0 0 0 0 0

3711 9 Row const 0 8832 20 LMatrix3f::Row const 20 LMatrix3f::Row const 0 0 3575 0 0 0 0 0 0 0 0 0 0

3712 12 CRow const * 0 8576 23 LMatrix3f::CRow const * 23 LMatrix3f::CRow const * 0 0 3713 0 0 0 0 0 0 0 0 0 0

3713 10 CRow const 0 8832 21 LMatrix3f::CRow const 21 LMatrix3f::CRow const 0 0 3576 0 0 0 0 0 0 0 0 0 0

3714 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 3577 0 0 0 0 0 0 0 0 0 0

3715 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 3716 0 0 0 0 0 0 0 0 0 0

3716 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 3580 0 0 0 0 0 0 0 0 0 0

3717 5 Row * 0 8576 16 LMatrix4f::Row * 16 LMatrix4f::Row * 0 0 3578 0 0 0 0 0 0 0 0 0 0

3718 6 CRow * 0 8576 17 LMatrix4f::CRow * 17 LMatrix4f::CRow * 0 0 3579 0 0 0 0 0 0 0 0 0 0

3719 11 Row const * 0 8576 22 LMatrix4f::Row const * 22 LMatrix4f::Row const * 0 0 3720 0 0 0 0 0 0 0 0 0 0

3720 9 Row const 0 8832 20 LMatrix4f::Row const 20 LMatrix4f::Row const 0 0 3578 0 0 0 0 0 0 0 0 0 0

3721 12 CRow const * 0 8576 23 LMatrix4f::CRow const * 23 LMatrix4f::CRow const * 0 0 3722 0 0 0 0 0 0 0 0 0 0

3722 10 CRow const 0 8832 21 LMatrix4f::CRow const 21 LMatrix4f::CRow const 0 0 3579 0 0 0 0 0 0 0 0 0 0

3723 20 UnalignedLMatrix4f * 0 8576 20 UnalignedLMatrix4f * 20 UnalignedLMatrix4f * 0 0 3580 0 0 0 0 0 0 0 0 0 0

3724 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 3581 0 0 0 0 0 0 0 0 0 0

3725 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 3726 0 0 0 0 0 0 0 0 0 0

3726 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 3581 0 0 0 0 0 0 0 0 0 0

3727 5 Row * 0 8576 16 LMatrix3d::Row * 16 LMatrix3d::Row * 0 0 3582 0 0 0 0 0 0 0 0 0 0

3728 6 CRow * 0 8576 17 LMatrix3d::CRow * 17 LMatrix3d::CRow * 0 0 3583 0 0 0 0 0 0 0 0 0 0

3729 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 3730 0 0 0 0 0 0 0 0 0 0

3730 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 3584 0 0 0 0 0 0 0 0 0 0

3731 11 Row const * 0 8576 22 LMatrix3d::Row const * 22 LMatrix3d::Row const * 0 0 3732 0 0 0 0 0 0 0 0 0 0

3732 9 Row const 0 8832 20 LMatrix3d::Row const 20 LMatrix3d::Row const 0 0 3582 0 0 0 0 0 0 0 0 0 0

3733 12 CRow const * 0 8576 23 LMatrix3d::CRow const * 23 LMatrix3d::CRow const * 0 0 3734 0 0 0 0 0 0 0 0 0 0

3734 10 CRow const 0 8832 21 LMatrix3d::CRow const 21 LMatrix3d::CRow const 0 0 3583 0 0 0 0 0 0 0 0 0 0

3735 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 3584 0 0 0 0 0 0 0 0 0 0

3736 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 3737 0 0 0 0 0 0 0 0 0 0

3737 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 3587 0 0 0 0 0 0 0 0 0 0

3738 5 Row * 0 8576 16 LMatrix4d::Row * 16 LMatrix4d::Row * 0 0 3585 0 0 0 0 0 0 0 0 0 0

3739 6 CRow * 0 8576 17 LMatrix4d::CRow * 17 LMatrix4d::CRow * 0 0 3586 0 0 0 0 0 0 0 0 0 0

3740 11 Row const * 0 8576 22 LMatrix4d::Row const * 22 LMatrix4d::Row const * 0 0 3741 0 0 0 0 0 0 0 0 0 0

3741 9 Row const 0 8832 20 LMatrix4d::Row const 20 LMatrix4d::Row const 0 0 3585 0 0 0 0 0 0 0 0 0 0

3742 12 CRow const * 0 8576 23 LMatrix4d::CRow const * 23 LMatrix4d::CRow const * 0 0 3743 0 0 0 0 0 0 0 0 0 0

3743 10 CRow const 0 8832 21 LMatrix4d::CRow const 21 LMatrix4d::CRow const 0 0 3586 0 0 0 0 0 0 0 0 0 0

3744 20 UnalignedLMatrix4d * 0 8576 20 UnalignedLMatrix4d * 20 UnalignedLMatrix4d * 0 0 3587 0 0 0 0 0 0 0 0 0 0

3745 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 3588 0 0 0 0 0 0 0 0 0 0

3746 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 3747 0 0 0 0 0 0 0 0 0 0

3747 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 3588 0 0 0 0 0 0 0 0 0 0

3748 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 3589 0 0 0 0 0 0 0 0 0 0

3749 20 LQuaterniond const * 0 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 3750 0 0 0 0 0 0 0 0 0 0

3750 18 LQuaterniond const 0 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 3589 0 0 0 0 0 0 0 0 0 0

3751 12 LRotationf * 0 8576 12 LRotationf * 12 LRotationf * 0 0 3590 0 0 0 0 0 0 0 0 0 0

3752 18 LRotationf const * 0 8576 18 LRotationf const * 18 LRotationf const * 0 0 3753 0 0 0 0 0 0 0 0 0 0

3753 16 LRotationf const 0 8832 16 LRotationf const 16 LRotationf const 0 0 3590 0 0 0 0 0 0 0 0 0 0

3754 12 LRotationd * 0 8576 12 LRotationd * 12 LRotationd * 0 0 3591 0 0 0 0 0 0 0 0 0 0

3755 18 LRotationd const * 0 8576 18 LRotationd const * 18 LRotationd const * 0 0 3756 0 0 0 0 0 0 0 0 0 0

3756 16 LRotationd const 0 8832 16 LRotationd const 16 LRotationd const 0 0 3591 0 0 0 0 0 0 0 0 0 0

3757 15 LOrientationf * 0 8576 15 LOrientationf * 15 LOrientationf * 0 0 3592 0 0 0 0 0 0 0 0 0 0

3758 21 LOrientationf const * 0 8576 21 LOrientationf const * 21 LOrientationf const * 0 0 3759 0 0 0 0 0 0 0 0 0 0

3759 19 LOrientationf const 0 8832 19 LOrientationf const 19 LOrientationf const 0 0 3592 0 0 0 0 0 0 0 0 0 0

3760 15 LOrientationd * 0 8576 15 LOrientationd * 15 LOrientationd * 0 0 3593 0 0 0 0 0 0 0 0 0 0

3761 21 LOrientationd const * 0 8576 21 LOrientationd const * 21 LOrientationd const * 0 0 3762 0 0 0 0 0 0 0 0 0 0

3762 19 LOrientationd const 0 8832 19 LOrientationd const 19 LOrientationd const 0 0 3593 0 0 0 0 0 0 0 0 0 0

0
0
14
3763 0 0 1049 8 get_rows 4 size 7 get_row 
3764 0 0 1049 8 get_cols 4 size 7 get_col 
3765 0 0 1049 9 get_col2s 4 size 8 get_col2 
3766 0 0 1049 9 get_row2s 4 size 8 get_row2 
3767 0 0 1136 8 get_rows 4 size 7 get_row 
3768 0 0 1136 8 get_cols 4 size 7 get_col 
3769 0 0 1136 9 get_row3s 4 size 8 get_row3 
3770 0 0 1240 8 get_rows 4 size 7 get_row 
3771 0 0 1240 8 get_cols 4 size 7 get_col 
3772 0 0 1240 9 get_col2s 4 size 8 get_col2 
3773 0 0 1240 9 get_row2s 4 size 8 get_row2 
3774 0 0 1325 8 get_rows 4 size 7 get_row 
3775 0 0 1325 8 get_cols 4 size 7 get_col 
3776 0 0 1325 9 get_row3s 4 size 8 get_row3 
