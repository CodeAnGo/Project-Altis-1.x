1422501868
2 3
12 libp3display 4 62HU 12 panda3d.core 
623
666 8 get_pipe 0 4 1289 24 GraphicsDevice::get_pipe 0 1 1 302
////////////////////////////////////////////////////////////////////
//     Function: GraphicsDevice::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this device is
//               associated with.
////////////////////////////////////////////////////////////////////
58
inline GraphicsPipe *GraphicsDevice::get_pipe(void) const;

667 14 get_class_type 0 4 1289 30 GraphicsDevice::get_class_type 0 1 2 0
55
static TypeHandle GraphicsDevice::get_class_type(void);

668 19 ~DisplayInformation 0 4 1291 39 DisplayInformation::~DisplayInformation 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
DisplayInformation::~DisplayInformation(void);

669 18 DisplayInformation 0 4 1291 38 DisplayInformation::DisplayInformation 0 1 3 231
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
DisplayInformation::DisplayInformation(void);

670 17 get_display_state 0 4 1291 37 DisplayInformation::get_display_state 0 1 4 220
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
int DisplayInformation::get_display_state(void);

671 24 get_maximum_window_width 0 4 1291 44 DisplayInformation::get_maximum_window_width 0 1 5 244
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
int DisplayInformation::get_maximum_window_width(void);

672 25 get_maximum_window_height 0 4 1291 45 DisplayInformation::get_maximum_window_height 0 1 6 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
int DisplayInformation::get_maximum_window_height(void);

673 25 get_window_bits_per_pixel 0 4 1291 45 DisplayInformation::get_window_bits_per_pixel 0 1 7 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_window_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
int DisplayInformation::get_window_bits_per_pixel(void);

674 23 get_total_display_modes 0 4 1291 43 DisplayInformation::get_total_display_modes 0 1 8 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_total_display_modes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
int DisplayInformation::get_total_display_modes(void);

675 22 get_display_mode_width 0 4 1291 42 DisplayInformation::get_display_mode_width 0 1 9 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
int DisplayInformation::get_display_mode_width(int display_index);

676 23 get_display_mode_height 0 4 1291 43 DisplayInformation::get_display_mode_height 0 1 10 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
int DisplayInformation::get_display_mode_height(int display_index);

677 31 get_display_mode_bits_per_pixel 0 4 1291 51 DisplayInformation::get_display_mode_bits_per_pixel 0 1 11 251
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
int DisplayInformation::get_display_mode_bits_per_pixel(int display_index);

678 29 get_display_mode_refresh_rate 0 4 1291 49 DisplayInformation::get_display_mode_refresh_rate 0 1 12 249
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_refresh_rate
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
int DisplayInformation::get_display_mode_refresh_rate(int display_index);

679 32 get_display_mode_fullscreen_only 0 4 1291 52 DisplayInformation::get_display_mode_fullscreen_only 0 1 13 252
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_fullscreen_only
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
int DisplayInformation::get_display_mode_fullscreen_only(int display_index);

680 16 get_shader_model 0 4 1291 36 DisplayInformation::get_shader_model 0 1 14 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_shader_model
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_shader_model(void);

681 16 get_video_memory 0 4 1291 36 DisplayInformation::get_video_memory 0 1 15 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_video_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_video_memory(void);

682 18 get_texture_memory 0 4 1291 38 DisplayInformation::get_texture_memory 0 1 16 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_texture_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_texture_memory(void);

683 25 update_memory_information 0 4 1291 45 DisplayInformation::update_memory_information 0 1 17 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_memory_information
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void DisplayInformation::update_memory_information(void);

684 19 get_physical_memory 0 4 1291 39 DisplayInformation::get_physical_memory 0 1 18 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_physical_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
unsigned __int64 DisplayInformation::get_physical_memory(void);

685 29 get_available_physical_memory 0 4 1291 49 DisplayInformation::get_available_physical_memory 0 1 19 249
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_physical_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
unsigned __int64 DisplayInformation::get_available_physical_memory(void);

686 18 get_page_file_size 0 4 1291 38 DisplayInformation::get_page_file_size 0 1 20 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
unsigned __int64 DisplayInformation::get_page_file_size(void);

687 28 get_available_page_file_size 0 4 1291 48 DisplayInformation::get_available_page_file_size 0 1 21 248
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_page_file_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
unsigned __int64 DisplayInformation::get_available_page_file_size(void);

688 26 get_process_virtual_memory 0 4 1291 46 DisplayInformation::get_process_virtual_memory 0 1 22 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::_process_virtual_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
unsigned __int64 DisplayInformation::get_process_virtual_memory(void);

689 36 get_available_process_virtual_memory 0 4 1291 56 DisplayInformation::get_available_process_virtual_memory 0 1 23 256
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_process_virtual_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
80
unsigned __int64 DisplayInformation::get_available_process_virtual_memory(void);

690 15 get_memory_load 0 4 1291 35 DisplayInformation::get_memory_load 0 1 24 235
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_memory_load
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
int DisplayInformation::get_memory_load(void);

691 20 get_page_fault_count 0 4 1291 40 DisplayInformation::get_page_fault_count 0 1 25 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_fault_count
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
unsigned __int64 DisplayInformation::get_page_fault_count(void);

692 18 get_process_memory 0 4 1291 38 DisplayInformation::get_process_memory 0 1 26 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_process_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
unsigned __int64 DisplayInformation::get_process_memory(void);

693 23 get_peak_process_memory 0 4 1291 43 DisplayInformation::get_peak_process_memory 0 1 27 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_process_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
unsigned __int64 DisplayInformation::get_peak_process_memory(void);

694 19 get_page_file_usage 0 4 1291 39 DisplayInformation::get_page_file_usage 0 1 28 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_usage
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
unsigned __int64 DisplayInformation::get_page_file_usage(void);

695 24 get_peak_page_file_usage 0 4 1291 44 DisplayInformation::get_peak_page_file_usage 0 1 29 244
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_page_file_usage
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
unsigned __int64 DisplayInformation::get_peak_page_file_usage(void);

696 13 get_vendor_id 0 4 1291 33 DisplayInformation::get_vendor_id 0 1 30 233
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_vendor_id
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
int DisplayInformation::get_vendor_id(void);

697 13 get_device_id 0 4 1291 33 DisplayInformation::get_device_id 0 1 31 233
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_device_id
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
int DisplayInformation::get_device_id(void);

698 18 get_driver_product 0 4 1291 38 DisplayInformation::get_driver_product 0 1 32 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_product
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_driver_product(void);

699 18 get_driver_version 0 4 1291 38 DisplayInformation::get_driver_version 0 1 33 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_driver_version(void);

700 22 get_driver_sub_version 0 4 1291 42 DisplayInformation::get_driver_sub_version 0 1 34 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_sub_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
int DisplayInformation::get_driver_sub_version(void);

701 16 get_driver_build 0 4 1291 36 DisplayInformation::get_driver_build 0 1 35 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_build
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_driver_build(void);

702 21 get_driver_date_month 0 4 1291 41 DisplayInformation::get_driver_date_month 0 1 36 241
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_month
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
int DisplayInformation::get_driver_date_month(void);

703 19 get_driver_date_day 0 4 1291 39 DisplayInformation::get_driver_date_day 0 1 37 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_day
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
int DisplayInformation::get_driver_date_day(void);

704 20 get_driver_date_year 0 4 1291 40 DisplayInformation::get_driver_date_year 0 1 38 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_year
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_driver_date_year(void);

705 18 get_cpu_id_version 0 4 1291 38 DisplayInformation::get_cpu_id_version 0 1 39 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_cpu_id_version(void);

706 15 get_cpu_id_size 0 4 1291 35 DisplayInformation::get_cpu_id_size 0 1 40 312
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_size
//       Access: Published
//  Description: Returns the number of 32-bit values for cpu id 
//               binary data.
////////////////////////////////////////////////////////////////////
46
int DisplayInformation::get_cpu_id_size(void);

707 15 get_cpu_id_data 0 4 1291 35 DisplayInformation::get_cpu_id_data 0 1 41 309
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_data
//       Access: Published
//  Description: Returns part of cpu id binary data based on the 
//               index.  
////////////////////////////////////////////////////////////////////
60
unsigned int DisplayInformation::get_cpu_id_data(int index);

708 21 get_cpu_vendor_string 0 4 1291 41 DisplayInformation::get_cpu_vendor_string 0 1 42 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_vendor_string
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
60
char const *DisplayInformation::get_cpu_vendor_string(void);

709 20 get_cpu_brand_string 0 4 1291 40 DisplayInformation::get_cpu_brand_string 0 1 43 241
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_string
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
59
char const *DisplayInformation::get_cpu_brand_string(void);

710 27 get_cpu_version_information 0 4 1291 47 DisplayInformation::get_cpu_version_information 0 1 44 248
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_version_information
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
67
unsigned int DisplayInformation::get_cpu_version_information(void);

711 19 get_cpu_brand_index 0 4 1291 39 DisplayInformation::get_cpu_brand_index 0 1 45 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_index
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
59
unsigned int DisplayInformation::get_cpu_brand_index(void);

712 17 get_cpu_frequency 0 4 1291 37 DisplayInformation::get_cpu_frequency 0 1 46 237
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
unsigned __int64 DisplayInformation::get_cpu_frequency(void);

713 12 get_cpu_time 0 4 1291 32 DisplayInformation::get_cpu_time 0 1 47 232
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_time
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
unsigned __int64 DisplayInformation::get_cpu_time(void);

714 25 get_maximum_cpu_frequency 0 4 1291 45 DisplayInformation::get_maximum_cpu_frequency 0 1 48 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
unsigned __int64 DisplayInformation::get_maximum_cpu_frequency(void);

715 25 get_current_cpu_frequency 0 4 1291 45 DisplayInformation::get_current_cpu_frequency 0 1 49 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_current_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
unsigned __int64 DisplayInformation::get_current_cpu_frequency(void);

716 20 update_cpu_frequency 0 4 1291 40 DisplayInformation::update_cpu_frequency 0 1 50 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
void DisplayInformation::update_cpu_frequency(int processor_number);

717 17 get_num_cpu_cores 0 4 1291 37 DisplayInformation::get_num_cpu_cores 0 1 51 405
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_cpu_cores
//       Access: Published
//  Description: Returns the number of individual CPU cores in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts once here.
////////////////////////////////////////////////////////////////////
48
int DisplayInformation::get_num_cpu_cores(void);

718 20 get_num_logical_cpus 0 4 1291 40 DisplayInformation::get_num_logical_cpus 0 1 52 411
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_logical_cpus
//       Access: Published
//  Description: Returns the number of logical CPU's in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts as two or more here.
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_num_logical_cpus(void);

719 20 get_os_version_major 0 4 1291 40 DisplayInformation::get_os_version_major 0 1 53 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_major
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_major(void);

720 20 get_os_version_minor 0 4 1291 40 DisplayInformation::get_os_version_minor 0 1 54 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_minor
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_minor(void);

721 20 get_os_version_build 0 4 1291 40 DisplayInformation::get_os_version_build 0 1 55 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_build
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_build(void);

722 18 get_os_platform_id 0 4 1291 38 DisplayInformation::get_os_platform_id 0 1 56 260
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_platform_id
//       Access: Published
//  Description: Returns -1 if not set.
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_os_platform_id(void);

723 8 is_valid 0 4 1293 22 GraphicsPipe::is_valid 0 1 57 694
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::is_valid
//       Access: Published
//  Description: Returns false if this pipe is known to be invalid,
//               meaning that an attempt to create a GraphicsWindow
//               with the pipe will certainly fail.  Returns true if
//               the pipe is probably valid (is this case, an attempt
//               to create a GraphicsWindow should succeed, but might
//               still fail).
//
//               Use the GraphicsEngine class to create a
//               GraphicsWindow on a particular pipe.
////////////////////////////////////////////////////////////////////
47
inline bool GraphicsPipe::is_valid(void) const;

724 19 get_supported_types 0 4 1293 33 GraphicsPipe::get_supported_types 0 1 58 682
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_supported_types
//       Access: Published
//  Description: Returns the mask of bits that represents the kinds of
//               GraphicsOutput objects this pipe might be able to
//               successfully create.  The return value is the union
//               of bits in GraphicsPipe::OutputTypes that represents
//               the set of GraphicsOutput types.
//
//               A 1 bit in a particular position is not a guarantee
//               of success, but a 0 bit is a guarantee of failure.
////////////////////////////////////////////////////////////////////
57
inline int GraphicsPipe::get_supported_types(void) const;

725 13 supports_type 0 4 1293 27 GraphicsPipe::supports_type 0 1 59 766
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::supports_type
//       Access: Published
//  Description: A convenience function to ask if a particular type or
//               types of GraphicsObjects are supported.  The
//               parameter is a union of one or more bits defined in
//               GrpahicsPipe::OutputTypes.
//
//               Returns true if all of the requested types are listed
//               in the supported_types mask, false if any one of them
//               is not.  This is not a guarantee that the indicated
//               output type will successfully be created when it is
//               attempted.
////////////////////////////////////////////////////////////////////
57
inline bool GraphicsPipe::supports_type(int flags) const;

726 17 get_display_width 0 4 1293 31 GraphicsPipe::get_display_width 0 1 60 547
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_width
//       Access: Published
//  Description: Returns the width of the entire display, if it is
//               known.  This may return 0.  This is not a guarantee
//               that windows (particularly fullscreen windows) may
//               not be created larger than this width, but it is
//               intended to provide a hint to the application.
////////////////////////////////////////////////////////////////////
55
inline int GraphicsPipe::get_display_width(void) const;

727 18 get_display_height 0 4 1293 32 GraphicsPipe::get_display_height 0 1 61 385
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_height
//       Access: Published
//  Description: Returns the height of the entire display, if it is
//               known.  This may return 0.  See the caveats for
//               get_display_width().
////////////////////////////////////////////////////////////////////
56
inline int GraphicsPipe::get_display_height(void) const;

728 23 get_display_information 0 4 1293 37 GraphicsPipe::get_display_information 0 1 62 272
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_information
//       Access: Published
//  Description: Gets the pipe's DisplayInformation.
////////////////////////////////////////////////////////////////////
64
DisplayInformation *GraphicsPipe::get_display_information(void);

729 15 lookup_cpu_data 0 6 1293 29 GraphicsPipe::lookup_cpu_data 0 1 63 400
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::lookup_cpu_data
//       Access: Public, Virtual
//  Description: Looks up the detailed CPU information and stores it
//               in _display_information, if supported by the OS.
//               This may take a second or two.
////////////////////////////////////////////////////////////////////
49
virtual void GraphicsPipe::lookup_cpu_data(void);

730 18 get_interface_name 0 6 1293 32 GraphicsPipe::get_interface_name 0 1 64 0
78
virtual basic_string< char > GraphicsPipe::get_interface_name(void) const = 0;

731 14 get_class_type 0 4 1293 28 GraphicsPipe::get_class_type 0 1 65 0
53
static TypeHandle GraphicsPipe::get_class_type(void);

732 15 ~DrawableRegion 0 6 1296 31 DrawableRegion::~DrawableRegion 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual DrawableRegion::~DrawableRegion(void);

733 22 set_clear_color_active 0 4 1296 38 DrawableRegion::set_clear_color_active 0 1 66 523
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the color
//               buffer should be cleared every frame.  If this is
//               true, the color buffer will be cleared to the color
//               indicated by set_clear_color(); otherwise, it will be
//               left alone.
////////////////////////////////////////////////////////////////////
76
inline void DrawableRegion::set_clear_color_active(bool clear_color_active);

734 22 get_clear_color_active 0 4 1296 38 DrawableRegion::get_clear_color_active 0 1 67 413
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_color_active().
////////////////////////////////////////////////////////////////////
63
inline bool DrawableRegion::get_clear_color_active(void) const;

735 22 set_clear_depth_active 0 4 1296 38 DrawableRegion::set_clear_depth_active 0 1 68 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the depth
//               buffer should be cleared every frame.  If this is
//               true, the depth buffer will be cleared to the depth
//               value indicated by set_clear_depth(); otherwise, it
//               will be left alone.
////////////////////////////////////////////////////////////////////
76
inline void DrawableRegion::set_clear_depth_active(bool clear_depth_active);

736 22 get_clear_depth_active 0 4 1296 38 DrawableRegion::get_clear_depth_active 0 1 69 413
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the depth buffer should be cleared
//               every frame.  See set_clear_depth_active().
////////////////////////////////////////////////////////////////////
63
inline bool DrawableRegion::get_clear_depth_active(void) const;

737 24 set_clear_stencil_active 0 4 1296 40 DrawableRegion::set_clear_stencil_active 0 1 70 531
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the stencil
//               buffer should be cleared every frame.  If this is
//               true, the stencil buffer will be cleared to the value
//               indicated by set_clear_stencil(); otherwise, it will be
//               left alone.
////////////////////////////////////////////////////////////////////
80
inline void DrawableRegion::set_clear_stencil_active(bool clear_stencil_active);

738 24 get_clear_stencil_active 0 4 1296 40 DrawableRegion::get_clear_stencil_active 0 1 71 417
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_stencil_active().
////////////////////////////////////////////////////////////////////
65
inline bool DrawableRegion::get_clear_stencil_active(void) const;

739 15 set_clear_color 0 4 1296 31 DrawableRegion::set_clear_color 0 1 72 535
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color
//       Access: Published
//  Description: Sets the clear color to the indicated value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
69
inline void DrawableRegion::set_clear_color(LVecBase4f const &color);

740 15 get_clear_color 0 4 1296 31 DrawableRegion::get_clear_color 0 1 73 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color
//       Access: Published
//  Description: Returns the current clear color value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
69
inline LVecBase4f const &DrawableRegion::get_clear_color(void) const;

741 15 set_clear_depth 0 4 1296 31 DrawableRegion::set_clear_depth 0 1 74 535
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth
//       Access: Published
//  Description: Sets the clear depth to the indicated value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
57
inline void DrawableRegion::set_clear_depth(float depth);

742 15 get_clear_depth 0 4 1296 31 DrawableRegion::get_clear_depth 0 1 75 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth
//       Access: Published
//  Description: Returns the current clear depth value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
57
inline float DrawableRegion::get_clear_depth(void) const;

743 17 set_clear_stencil 0 4 1296 33 DrawableRegion::set_clear_stencil 0 1 76 543
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil
//       Access: Published
//  Description: Sets the clear stencil to the indicated value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
68
inline void DrawableRegion::set_clear_stencil(unsigned int stencil);

744 17 get_clear_stencil 0 4 1296 33 DrawableRegion::get_clear_stencil 0 1 77 539
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil
//       Access: Published
//  Description: Returns the current clear stencil value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_stencil_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
66
inline unsigned int DrawableRegion::get_clear_stencil(void) const;

745 16 set_clear_active 0 6 1296 32 DrawableRegion::set_clear_active 0 1 78 285
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_active
//       Access: Published, Virtual
//  Description: Sets the clear-active flag for any bitplane.
////////////////////////////////////////////////////////////////////
76
virtual void DrawableRegion::set_clear_active(int n, bool clear_aux_active);

746 16 get_clear_active 0 6 1296 32 DrawableRegion::get_clear_active 0 1 79 285
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_active
//       Access: Published, Virtual
//  Description: Gets the clear-active flag for any bitplane.
////////////////////////////////////////////////////////////////////
59
virtual bool DrawableRegion::get_clear_active(int n) const;

747 15 set_clear_value 0 6 1296 31 DrawableRegion::set_clear_value 0 1 80 278
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_value
//       Access: Published, Virtual
//  Description: Sets the clear value for any bitplane.
////////////////////////////////////////////////////////////////////
83
virtual void DrawableRegion::set_clear_value(int n, LVecBase4f const &clear_value);

748 15 get_clear_value 0 6 1296 31 DrawableRegion::get_clear_value 0 1 81 281
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_value
//       Access: Published, Virtual
//  Description: Returns the clear value for any bitplane.
////////////////////////////////////////////////////////////////////
71
virtual LVecBase4f const &DrawableRegion::get_clear_value(int n) const;

749 14 disable_clears 0 6 1296 30 DrawableRegion::disable_clears 0 1 82 352
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::disable_clears
//       Access: Published, Virtual
//  Description: Disables both the color and depth clear.  See
//               set_clear_color_active and set_clear_depth_active.
////////////////////////////////////////////////////////////////////
50
virtual void DrawableRegion::disable_clears(void);

750 19 is_any_clear_active 0 6 1296 35 DrawableRegion::is_any_clear_active 0 1 83 461
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::is_any_clear_active
//       Access: Published, Virtual
//  Description: Returns true if any of the clear types (so far there
//               are just color or depth) have been set active, or
//               false if none of them are active and there is no need
//               to clear.
////////////////////////////////////////////////////////////////////
61
virtual bool DrawableRegion::is_any_clear_active(void) const;

751 14 set_pixel_zoom 0 6 1296 30 DrawableRegion::set_pixel_zoom 0 1 84 1485
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_pixel_zoom
//       Access: Published, Virtual
//  Description: Sets the amount by which the pixels of the region are
//               scaled internally when filling the image interally.
//               Setting this number larger makes the pixels blockier,
//               but may make the rendering faster, particularly for
//               software renderers.  Setting this number to 2.0
//               reduces the number of pixels that have to be filled
//               by the renderer by a factor of 2.0.  It doesn't make
//               sense to set this lower than 1.0.
//
//               It is possible to set this on either individual
//               DisplayRegions or on overall GraphicsWindows, but you
//               will get better performance for setting it on the
//               window rather than its individual DisplayRegions.
//               Also, you may not set it on a DisplayRegion that
//               doesn't have both clear_color() and clear_depth()
//               enabled.
//
//               This property is only supported on renderers for
//               which it is particularly useful--currently, this is
//               the tinydisplay software renderer.  Other kinds of
//               renderers allow you to set this property, but ignore
//               it.
////////////////////////////////////////////////////////////////////
62
virtual void DrawableRegion::set_pixel_zoom(float pixel_zoom);

752 14 get_pixel_zoom 0 4 1296 30 DrawableRegion::get_pixel_zoom 0 1 85 388
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_zoom
//       Access: Published
//  Description: Returns the value set by set_pixel_zoom(), regardless
//               of whether it is being respected or not.  Also see
//               get_pixel_factor().
////////////////////////////////////////////////////////////////////
56
inline float DrawableRegion::get_pixel_zoom(void) const;

753 16 get_pixel_factor 0 4 1296 32 DrawableRegion::get_pixel_factor 0 1 86 650
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_factor
//       Access: Published
//  Description: Returns the amount by which the height and width of
//               the region will be scaled internally, based on the
//               zoom factor set by set_pixel_zoom().  This will
//               return 1.0 if the pixel_zoom was not set or if it is
//               not being respected (for instance, because the
//               underlying renderer doesn't support it--see
//               supports_pixel_zoom).
////////////////////////////////////////////////////////////////////
58
inline float DrawableRegion::get_pixel_factor(void) const;

754 19 supports_pixel_zoom 0 6 1296 35 DrawableRegion::supports_pixel_zoom 0 1 87 802
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::supports_pixel_zoom
//       Access: Published, Virtual
//  Description: Returns true if a call to set_pixel_zoom() will be
//               respected, false if it will be ignored.  If this
//               returns false, then get_pixel_factor() will always
//               return 1.0, regardless of what value you specify for
//               set_pixel_zoom().
//
//               This may return false if the underlying renderer
//               doesn't support pixel zooming, or if you have called
//               this on a DisplayRegion that doesn't have both
//               set_clear_color() and set_clear_depth() enabled.
////////////////////////////////////////////////////////////////////
61
virtual bool DrawableRegion::supports_pixel_zoom(void) const;

755 21 get_renderbuffer_type 0 4 1296 37 DrawableRegion::get_renderbuffer_type 0 1 88 334
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_renderbuffer_type
//       Access: Static, Published
//  Description: Returns the RenderBuffer::Type that corresponds
//               to a RenderTexturePlane.
////////////////////////////////////////////////////////////////////
60
static int DrawableRegion::get_renderbuffer_type(int plane);

756 12 WindowHandle 0 4 1298 26 WindowHandle::WindowHandle 0 2 89 90 455
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
130
inline WindowHandle::WindowHandle(WindowHandle::OSHandle *os_handle);
inline WindowHandle::WindowHandle(WindowHandle const &copy);

757 13 get_os_handle 0 4 1298 27 WindowHandle::get_os_handle 0 1 91 321
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_os_handle
//       Access: Published
//  Description: Returns the OS-specific handle stored internally to
//               the WindowHandle wrapper.
////////////////////////////////////////////////////////////////////
71
inline WindowHandle::OSHandle *WindowHandle::get_os_handle(void) const;

758 13 set_os_handle 0 4 1298 27 WindowHandle::set_os_handle 0 1 92 321
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::set_os_handle
//       Access: Published
//  Description: Changes the OS-specific handle stored internally to
//               the WindowHandle wrapper.
////////////////////////////////////////////////////////////////////
75
inline void WindowHandle::set_os_handle(WindowHandle::OSHandle *os_handle);

759 20 send_windows_message 0 4 1298 34 WindowHandle::send_windows_message 0 1 93 566
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::send_windows_message
//       Access: Published
//  Description: Call this method on a parent WindowHandle to deliver
//               a Windows message to the current child window, if any.
//               This is used in the web plugin system to deliver
//               button events detected directly by the browser system
//               into Panda, which is particularly necessary on Vista.
////////////////////////////////////////////////////////////////////
82
void WindowHandle::send_windows_message(unsigned int msg, int wparam, int lparam);

760 14 get_int_handle 0 4 1298 28 WindowHandle::get_int_handle 0 1 94 397
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_int_handle
//       Access: Published
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
////////////////////////////////////////////////////////////////////
54
unsigned int WindowHandle::get_int_handle(void) const;

761 6 output 0 4 1298 20 WindowHandle::output 0 1 95 220
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
void WindowHandle::output(ostream &out) const;

762 14 get_int_handle 0 6 1299 38 WindowHandle::OSHandle::get_int_handle 0 1 97 416
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::get_int_handle
//       Access: Published, Virtual
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
////////////////////////////////////////////////////////////////////
72
virtual unsigned int WindowHandle::OSHandle::get_int_handle(void) const;

763 6 output 0 6 1299 30 WindowHandle::OSHandle::output 0 1 98 239
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
64
virtual void WindowHandle::OSHandle::output(ostream &out) const;

764 14 get_class_type 0 4 1299 38 WindowHandle::OSHandle::get_class_type 0 1 99 0
63
static TypeHandle WindowHandle::OSHandle::get_class_type(void);

765 14 get_class_type 0 4 1298 28 WindowHandle::get_class_type 0 1 96 0
53
static TypeHandle WindowHandle::get_class_type(void);

766 16 WindowProperties 0 4 1300 34 WindowProperties::WindowProperties 0 2 100 101 463
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
114
WindowProperties::WindowProperties(void);
inline WindowProperties::WindowProperties(WindowProperties const &copy);

767 10 operator = 0 4 1300 28 WindowProperties::operator = 0 1 102 0
64
void WindowProperties::operator =(WindowProperties const &copy);

768 17 ~WindowProperties 0 4 1300 35 WindowProperties::~WindowProperties 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline WindowProperties::~WindowProperties(void);

769 21 get_config_properties 0 4 1300 39 WindowProperties::get_config_properties 0 1 103 395
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_config_properties
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with all of the
//               default values filled in according to the user's
//               config file.
////////////////////////////////////////////////////////////////////
70
static WindowProperties WindowProperties::get_config_properties(void);

770 11 get_default 0 4 1300 29 WindowProperties::get_default 0 1 104 457
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties.  If
//               set_default() has been called, this returns that
//               WindowProperties structure; otherwise, this returns
//               get_config_properties().
////////////////////////////////////////////////////////////////////
60
static WindowProperties WindowProperties::get_default(void);

771 11 set_default 0 4 1300 29 WindowProperties::set_default 0 1 105 589
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_default
//       Access: Published, Static
//  Description: Replaces the "default" WindowProperties with the
//               specified structure.  The specified WindowProperties
//               will be returned by future calls to get_default(),
//               until clear_default() is called.
//
//               Note that this completely replaces the default
//               properties; it is not additive.
////////////////////////////////////////////////////////////////////
86
static void WindowProperties::set_default(WindowProperties const &default_properties);

772 13 clear_default 0 4 1300 31 WindowProperties::clear_default 0 1 106 346
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties to whatever
//               is specified in the user's config file.
////////////////////////////////////////////////////////////////////
50
static void WindowProperties::clear_default(void);

773 4 size 0 4 1300 22 WindowProperties::size 0 1 107 386
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::size
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with only the
//               size specified.  The size is the only property that
//               matters to buffers.
////////////////////////////////////////////////////////////////////
71
static WindowProperties WindowProperties::size(int x_size, int y_size);

774 11 operator == 0 4 1300 29 WindowProperties::operator == 0 1 108 0
72
bool WindowProperties::operator ==(WindowProperties const &other) const;

775 11 operator != 0 4 1300 29 WindowProperties::operator != 0 1 109 0
79
inline bool WindowProperties::operator !=(WindowProperties const &other) const;

776 5 clear 0 4 1300 23 WindowProperties::clear 0 1 110 381
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the WindowProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
35
void WindowProperties::clear(void);

777 16 is_any_specified 0 4 1300 34 WindowProperties::is_any_specified 0 1 111 319
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool WindowProperties::is_any_specified(void) const;

778 10 set_origin 0 4 1300 28 WindowProperties::set_origin 0 2 112 113 1030
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
////////////////////////////////////////////////////////////////////
135
inline void WindowProperties::set_origin(LPoint2i const &origin);
inline void WindowProperties::set_origin(int x_origin, int y_origin);

779 10 get_origin 0 4 1300 28 WindowProperties::get_origin 0 1 114 328
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_origin
//       Access: Published
//  Description: Returns the coordinates of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
64
inline LPoint2i const &WindowProperties::get_origin(void) const;

780 12 get_x_origin 0 4 1300 30 WindowProperties::get_x_origin 0 1 115 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_origin
//       Access: Published
//  Description: Returns the x coordinate of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
54
inline int WindowProperties::get_x_origin(void) const;

781 12 get_y_origin 0 4 1300 30 WindowProperties::get_y_origin 0 1 116 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_origin
//       Access: Published
//  Description: Returns the y coordinate of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
54
inline int WindowProperties::get_y_origin(void) const;

782 10 has_origin 0 4 1300 28 WindowProperties::has_origin 0 1 117 315
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_origin
//       Access: Published
//  Description: Returns true if the window origin has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
53
inline bool WindowProperties::has_origin(void) const;

783 12 clear_origin 0 4 1300 30 WindowProperties::clear_origin 0 1 118 283
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_origin
//       Access: Published
//  Description: Removes the origin specification from the properties.
////////////////////////////////////////////////////////////////////
49
inline void WindowProperties::clear_origin(void);

784 8 set_size 0 4 1300 26 WindowProperties::set_size 0 2 119 120 788
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
////////////////////////////////////////////////////////////////////
126
inline void WindowProperties::set_size(LVector2i const &size);
inline void WindowProperties::set_size(int x_size, int y_size);

785 8 get_size 0 4 1300 26 WindowProperties::get_size 0 1 121 328
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_origin
//       Access: Published
//  Description: Returns size in pixels of the useful part of the
//               window, not including decorations.
////////////////////////////////////////////////////////////////////
63
inline LVector2i const &WindowProperties::get_size(void) const;

786 10 get_x_size 0 4 1300 28 WindowProperties::get_x_size 0 1 122 401
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_size
//       Access: Published
//  Description: Returns size in pixels in the x dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's width.
////////////////////////////////////////////////////////////////////
52
inline int WindowProperties::get_x_size(void) const;

787 10 get_y_size 0 4 1300 28 WindowProperties::get_y_size 0 1 123 402
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_size
//       Access: Published
//  Description: Returns size in pixels in the y dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's height.
////////////////////////////////////////////////////////////////////
52
inline int WindowProperties::get_y_size(void) const;

788 8 has_size 0 4 1300 26 WindowProperties::has_size 0 1 124 311
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_size
//       Access: Published
//  Description: Returns true if the window size has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::has_size(void) const;

789 10 clear_size 0 4 1300 28 WindowProperties::clear_size 0 1 125 279
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_size
//       Access: Published
//  Description: Removes the size specification from the properties.
////////////////////////////////////////////////////////////////////
47
inline void WindowProperties::clear_size(void);

790 14 has_mouse_mode 0 4 1300 32 WindowProperties::has_mouse_mode 0 1 126 232
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_mouse_mode
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_mouse_mode(void) const;

791 14 set_mouse_mode 0 4 1300 32 WindowProperties::set_mouse_mode 0 1 127 1074
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_mouse_mode
//       Access: Published
//  Description: Specifies the mode in which the window is to operate
//               its mouse pointer.  The default is M_absolute, which
//               is the normal mode in which a mouse pointer operates;
//               but you can also set M_relative, which is
//               particularly useful for FPS-style mouse movements
//               where you have hidden the mouse pointer and are are
//               more interested in how fast the mouse is moving,
//               rather than precisely where the pointer is hovering.
//
//               This has no effect on Windows, which does not
//               have this concept; but is important to do on OSX
//               and Unix/X11 to properly enable a smooth FPS-style
//               mouselook mode.  On Unix/X11, this requires the
//               Xxf86dga extension to be available.
////////////////////////////////////////////////////////////////////
79
inline void WindowProperties::set_mouse_mode(WindowProperties::MouseMode mode);

792 14 get_mouse_mode 0 4 1300 32 WindowProperties::get_mouse_mode 0 1 128 253
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_mouse_mode
//       Access: Published
//  Description: See set_mouse_mode().
////////////////////////////////////////////////////////////////////
80
inline WindowProperties::MouseMode WindowProperties::get_mouse_mode(void) const;

793 16 clear_mouse_mode 0 4 1300 34 WindowProperties::clear_mouse_mode 0 1 129 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_mouse_mode
//       Access: Published
//  Description: Removes the mouse_mode specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_mouse_mode(void);

794 9 set_title 0 4 1300 27 WindowProperties::set_title 0 1 130 302
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_title
//       Access: Published
//  Description: Specifies the title that should be assigned to the
//               window.
////////////////////////////////////////////////////////////////////
75
inline void WindowProperties::set_title(basic_string< char > const &title);

795 9 get_title 0 4 1300 27 WindowProperties::get_title 0 1 131 254
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_title
//       Access: Published
//  Description: Returns the window's title.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &WindowProperties::get_title(void) const;

796 9 has_title 0 4 1300 27 WindowProperties::has_title 0 1 132 313
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_title
//       Access: Published
//  Description: Returns true if the window title has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool WindowProperties::has_title(void) const;

797 11 clear_title 0 4 1300 29 WindowProperties::clear_title 0 1 133 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_title
//       Access: Published
//  Description: Removes the title specification from the properties.
////////////////////////////////////////////////////////////////////
48
inline void WindowProperties::clear_title(void);

798 15 set_undecorated 0 4 1300 33 WindowProperties::set_undecorated 0 1 134 381
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_undecorated
//       Access: Published
//  Description: Specifies whether the window should be created with a
//               visible title and border (false, the default) or not
//               (true).
////////////////////////////////////////////////////////////////////
64
inline void WindowProperties::set_undecorated(bool undecorated);

799 15 get_undecorated 0 4 1300 33 WindowProperties::get_undecorated 0 1 135 274
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_undecorated
//       Access: Published
//  Description: Returns true if the window has no border.
////////////////////////////////////////////////////////////////////
58
inline bool WindowProperties::get_undecorated(void) const;

800 15 has_undecorated 0 4 1300 33 WindowProperties::has_undecorated 0 1 136 286
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_undecorated
//       Access: Published
//  Description: Returns true if set_undecorated() has been specified.
////////////////////////////////////////////////////////////////////
58
inline bool WindowProperties::has_undecorated(void) const;

801 17 clear_undecorated 0 4 1300 35 WindowProperties::clear_undecorated 0 1 137 293
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_undecorated
//       Access: Published
//  Description: Removes the undecorated specification from the properties.
////////////////////////////////////////////////////////////////////
54
inline void WindowProperties::clear_undecorated(void);

802 14 set_fixed_size 0 4 1300 32 WindowProperties::set_fixed_size 0 1 138 310
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fixed_size
//       Access: Published
//  Description: Specifies whether the window should be resizable by
//               the user.
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_fixed_size(bool fixed_size);

803 14 get_fixed_size 0 4 1300 32 WindowProperties::get_fixed_size 0 1 139 323
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fixed_size
//       Access: Published
//  Description: Returns true if the window cannot be resized by the
//               user, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_fixed_size(void) const;

804 14 has_fixed_size 0 4 1300 32 WindowProperties::has_fixed_size 0 1 140 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fixed_size
//       Access: Published
//  Description: Returns true if set_fixed_size() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_fixed_size(void) const;

805 16 clear_fixed_size 0 4 1300 34 WindowProperties::clear_fixed_size 0 1 141 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fixed_size
//       Access: Published
//  Description: Removes the fixed_size specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_fixed_size(void);

806 14 set_fullscreen 0 4 1300 32 WindowProperties::set_fullscreen 0 1 142 383
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fullscreen
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               fullscreen mode (true) or normal windowed mode
//               (false, the default).
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_fullscreen(bool fullscreen);

807 14 get_fullscreen 0 4 1300 32 WindowProperties::get_fullscreen 0 1 143 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fullscreen
//       Access: Published
//  Description: Returns true if the window is in fullscreen mode.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_fullscreen(void) const;

808 14 has_fullscreen 0 4 1300 32 WindowProperties::has_fullscreen 0 1 144 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fullscreen
//       Access: Published
//  Description: Returns true if set_fullscreen() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_fullscreen(void) const;

809 16 clear_fullscreen 0 4 1300 34 WindowProperties::clear_fullscreen 0 1 145 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fullscreen
//       Access: Published
//  Description: Removes the fullscreen specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_fullscreen(void);

810 14 set_foreground 0 4 1300 32 WindowProperties::set_foreground 0 1 146 372
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_foreground
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               the foreground (true), or left in the background
//               (false).
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_foreground(bool foreground);

811 14 get_foreground 0 4 1300 32 WindowProperties::get_foreground 0 1 147 280
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_foreground
//       Access: Published
//  Description: Returns true if the window is in the foreground.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_foreground(void) const;

812 14 has_foreground 0 4 1300 32 WindowProperties::has_foreground 0 1 148 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_foreground
//       Access: Published
//  Description: Returns true if set_foreground() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_foreground(void) const;

813 16 clear_foreground 0 4 1300 34 WindowProperties::clear_foreground 0 1 149 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_foreground
//       Access: Published
//  Description: Removes the foreground specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_foreground(void);

814 13 set_minimized 0 4 1300 31 WindowProperties::set_minimized 0 1 150 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_minimized
//       Access: Published
//  Description: Specifies whether the window should be created
//               minimized (true), or normal (false).
////////////////////////////////////////////////////////////////////
60
inline void WindowProperties::set_minimized(bool minimized);

815 13 get_minimized 0 4 1300 31 WindowProperties::get_minimized 0 1 151 271
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_minimized
//       Access: Published
//  Description: Returns true if the window is minimized.
////////////////////////////////////////////////////////////////////
56
inline bool WindowProperties::get_minimized(void) const;

816 13 has_minimized 0 4 1300 31 WindowProperties::has_minimized 0 1 152 282
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_minimized
//       Access: Published
//  Description: Returns true if set_minimized() has been specified.
////////////////////////////////////////////////////////////////////
56
inline bool WindowProperties::has_minimized(void) const;

817 15 clear_minimized 0 4 1300 33 WindowProperties::clear_minimized 0 1 153 289
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_minimized
//       Access: Published
//  Description: Removes the minimized specification from the properties.
////////////////////////////////////////////////////////////////////
52
inline void WindowProperties::clear_minimized(void);

818 12 set_raw_mice 0 4 1300 30 WindowProperties::set_raw_mice 0 1 154 310
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_raw_mice
//       Access: Published
//  Description: Specifies whether the window should read the raw
//               mouse devices.
////////////////////////////////////////////////////////////////////
58
inline void WindowProperties::set_raw_mice(bool raw_mice);

819 12 get_raw_mice 0 4 1300 30 WindowProperties::get_raw_mice 0 1 155 276
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_raw_mice
//       Access: Published
//  Description: Returns true if the window reads the raw mice.
////////////////////////////////////////////////////////////////////
55
inline bool WindowProperties::get_raw_mice(void) const;

820 12 has_raw_mice 0 4 1300 30 WindowProperties::has_raw_mice 0 1 156 280
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_raw_mice
//       Access: Published
//  Description: Returns true if set_raw_mice() has been specified.
////////////////////////////////////////////////////////////////////
55
inline bool WindowProperties::has_raw_mice(void) const;

821 14 clear_raw_mice 0 4 1300 32 WindowProperties::clear_raw_mice 0 1 157 287
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_raw_mice
//       Access: Published
//  Description: Removes the raw_mice specification from the properties.
////////////////////////////////////////////////////////////////////
51
inline void WindowProperties::clear_raw_mice(void);

822 8 set_open 0 4 1300 26 WindowProperties::set_open 0 1 158 417
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_open
//       Access: Published
//  Description: Specifies whether the window should be open.  It is
//               legal to create a GraphicsWindow in the closed state,
//               and later request it to open by changing this flag.
////////////////////////////////////////////////////////////////////
50
inline void WindowProperties::set_open(bool open);

823 8 get_open 0 4 1300 26 WindowProperties::get_open 0 1 159 261
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_open
//       Access: Published
//  Description: Returns true if the window is open.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::get_open(void) const;

824 8 has_open 0 4 1300 26 WindowProperties::has_open 0 1 160 272
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_open
//       Access: Published
//  Description: Returns true if set_open() has been specified.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::has_open(void) const;

825 10 clear_open 0 4 1300 28 WindowProperties::clear_open 0 1 161 279
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_open
//       Access: Published
//  Description: Removes the open specification from the properties.
////////////////////////////////////////////////////////////////////
47
inline void WindowProperties::clear_open(void);

826 17 set_cursor_hidden 0 4 1300 35 WindowProperties::set_cursor_hidden 0 1 162 288
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_hidden
//       Access: Published
//  Description: Specifies whether the mouse cursor should be visible.
////////////////////////////////////////////////////////////////////
68
inline void WindowProperties::set_cursor_hidden(bool cursor_hidden);

827 17 get_cursor_hidden 0 4 1300 35 WindowProperties::get_cursor_hidden 0 1 163 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_hidden
//       Access: Published
//  Description: Returns true if the mouse cursor is invisible.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::get_cursor_hidden(void) const;

828 17 has_cursor_hidden 0 4 1300 35 WindowProperties::has_cursor_hidden 0 1 164 290
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_hidden
//       Access: Published
//  Description: Returns true if set_cursor_hidden() has been specified.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_cursor_hidden(void) const;

829 19 clear_cursor_hidden 0 4 1300 37 WindowProperties::clear_cursor_hidden 0 1 165 297
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_hidden
//       Access: Published
//  Description: Removes the cursor_hidden specification from the properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_cursor_hidden(void);

830 17 set_icon_filename 0 4 1300 35 WindowProperties::set_icon_filename 0 1 166 344
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_icon_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the window when it is minimized.
////////////////////////////////////////////////////////////////////
79
inline void WindowProperties::set_icon_filename(Filename const &icon_filename);

831 17 get_icon_filename 0 4 1300 35 WindowProperties::get_icon_filename 0 1 167 288
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_icon_filename
//       Access: Published
//  Description: Returns the icon filename associated with the window.
////////////////////////////////////////////////////////////////////
71
inline Filename const &WindowProperties::get_icon_filename(void) const;

832 17 has_icon_filename 0 4 1300 35 WindowProperties::has_icon_filename 0 1 168 307
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_icon_filename
//       Access: Published
//  Description: Returns true if set_icon_filename() has been
//               specified.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_icon_filename(void) const;

833 19 clear_icon_filename 0 4 1300 37 WindowProperties::clear_icon_filename 0 1 169 314
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_icon_filename
//       Access: Published
//  Description: Removes the icon_filename specification from the
//               properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_icon_filename(void);

834 19 set_cursor_filename 0 4 1300 37 WindowProperties::set_cursor_filename 0 1 170 391
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the mouse cursor when it is within the
//               window (and visible).
////////////////////////////////////////////////////////////////////
83
inline void WindowProperties::set_cursor_filename(Filename const &cursor_filename);

835 19 get_cursor_filename 0 4 1300 37 WindowProperties::get_cursor_filename 0 1 171 313
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_filename
//       Access: Published
//  Description: Returns the icon filename associated with the mouse
//               cursor.
////////////////////////////////////////////////////////////////////
73
inline Filename const &WindowProperties::get_cursor_filename(void) const;

836 19 has_cursor_filename 0 4 1300 37 WindowProperties::has_cursor_filename 0 1 172 311
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_filename
//       Access: Published
//  Description: Returns true if set_cursor_filename() has been
//               specified.
////////////////////////////////////////////////////////////////////
62
inline bool WindowProperties::has_cursor_filename(void) const;

837 21 clear_cursor_filename 0 4 1300 39 WindowProperties::clear_cursor_filename 0 1 173 318
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_filename
//       Access: Published
//  Description: Removes the cursor_filename specification from the
//               properties.
////////////////////////////////////////////////////////////////////
58
inline void WindowProperties::clear_cursor_filename(void);

838 11 set_z_order 0 4 1300 29 WindowProperties::set_z_order 0 1 174 609
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_z_order
//       Access: Published
//  Description: Specifies the relative ordering of the window with
//               respect to other windows.  If the z_order is Z_top,
//               the window will always be on top of other windows; if
//               it is Z_bottom, it will always be below other
//               windows.  Most windows will want to be Z_normal,
//               which allows the user to control the order.
////////////////////////////////////////////////////////////////////
76
inline void WindowProperties::set_z_order(WindowProperties::ZOrder z_order);

839 11 get_z_order 0 4 1300 29 WindowProperties::get_z_order 0 1 175 258
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_z_order
//       Access: Published
//  Description: Returns the window's z_order.
////////////////////////////////////////////////////////////////////
74
inline WindowProperties::ZOrder WindowProperties::get_z_order(void) const;

840 11 has_z_order 0 4 1300 29 WindowProperties::has_z_order 0 1 176 317
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_z_order
//       Access: Published
//  Description: Returns true if the window z_order has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool WindowProperties::has_z_order(void) const;

841 13 clear_z_order 0 4 1300 31 WindowProperties::clear_z_order 0 1 177 285
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_z_order
//       Access: Published
//  Description: Removes the z_order specification from the properties.
////////////////////////////////////////////////////////////////////
50
inline void WindowProperties::clear_z_order(void);

842 17 set_parent_window 0 4 1300 35 WindowProperties::set_parent_window 0 3 178 179 180 2086
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.
//
//               This is a deprecated variant on this method, and
//               exists only for backward compatibility.  Future code
//               should use the version of set_parent_window() below
//               that receives a WindowHandle object; that interface
//               is much more robust.
//
//               In this deprecated variant, the actual value for
//               "parent" is platform-specific.  On Windows, it is the
//               HWND of the parent window, cast to an unsigned
//               integer.  On X11, it is the Window pointer of the
//               parent window, similarly cast.  On OSX, this is the
//               NSWindow pointer, which doesn't appear to work at
//               all.
////////////////////////////////////////////////////////////////////
156
void WindowProperties::set_parent_window(unsigned int parent);
inline void WindowProperties::set_parent_window(WindowHandle *parent_window = ((void *)(0)));

843 17 get_parent_window 0 4 1300 35 WindowProperties::get_parent_window 0 1 181 340
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_parent_window
//       Access: Published
//  Description: Returns the parent window specification, or NULL if
//               there is no parent window specified.
////////////////////////////////////////////////////////////////////
69
inline WindowHandle *WindowProperties::get_parent_window(void) const;

844 17 has_parent_window 0 4 1300 35 WindowProperties::has_parent_window 0 1 182 296
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_parent_window
//       Access: Published
//  Description: Checks the S_parent_window specification from the properties.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_parent_window(void) const;

845 19 clear_parent_window 0 4 1300 37 WindowProperties::clear_parent_window 0 1 183 299
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_parent_window
//       Access: Published
//  Description: Removes the S_parent_window specification from the properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_parent_window(void);

846 14 add_properties 0 4 1300 32 WindowProperties::add_properties 0 1 184 376
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
69
void WindowProperties::add_properties(WindowProperties const &other);

847 6 output 0 4 1300 24 WindowProperties::output 0 1 185 368
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
50
void WindowProperties::output(ostream &out) const;

848 27 upcast_to_DisplayRegionBase 0 12 1303 42 DisplayRegion::upcast_to_DisplayRegionBase 0 1 250 46
upcast from DisplayRegion to DisplayRegionBase
68
DisplayRegionBase *DisplayRegion::upcast_to_DisplayRegionBase(void);

849 25 downcast_to_DisplayRegion 0 12 1304 44 DisplayRegionBase::downcast_to_DisplayRegion 0 1 251 48
downcast from DisplayRegionBase to DisplayRegion
66
DisplayRegion *DisplayRegionBase::downcast_to_DisplayRegion(void);

850 24 upcast_to_DrawableRegion 0 12 1303 39 DisplayRegion::upcast_to_DrawableRegion 0 1 252 43
upcast from DisplayRegion to DrawableRegion
62
DrawableRegion *DisplayRegion::upcast_to_DrawableRegion(void);

851 25 downcast_to_DisplayRegion 0 12 1296 41 DrawableRegion::downcast_to_DisplayRegion 0 1 253 45
downcast from DrawableRegion to DisplayRegion
63
DisplayRegion *DrawableRegion::downcast_to_DisplayRegion(void);

852 14 ~DisplayRegion 0 6 1303 29 DisplayRegion::~DisplayRegion 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual DisplayRegion::~DisplayRegion(void);

853 15 get_num_regions 0 4 1303 30 DisplayRegion::get_num_regions 0 1 186 280
///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_num_regions
//       Access: Published
//  Description: Returns the number of regions, see set_num_regions.
////////////////////////////////////////////////////////////////////
54
inline int DisplayRegion::get_num_regions(void) const;

854 15 set_num_regions 0 4 1303 30 DisplayRegion::set_num_regions 0 1 187 607
///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_num_regions
//       Access: Published
//  Description: Sets the number of regions that this DisplayRegion
//               indicates.  Usually, this number is 1 (and it is
//               always at least 1), and only the first is used for
//               rendering.  However, if more than one is provided,
//               you may select which one to render into using a
//               geometry shader (gl_ViewportIndex in GLSL).
////////////////////////////////////////////////////////////////////
50
inline void DisplayRegion::set_num_regions(int i);

855 14 get_dimensions 0 4 1303 29 DisplayRegion::get_dimensions 0 2 188 189 1177
///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
252
inline void DisplayRegion::get_dimensions(float &l, float &r, float &b, float &t) const;
inline void DisplayRegion::get_dimensions(int i, float &l, float &r, float &b, float &t) const;
inline LVecBase4f DisplayRegion::get_dimensions(int i = (0)) const;

856 8 get_left 0 4 1303 23 DisplayRegion::get_left 0 2 190 191 386
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
56
inline float DisplayRegion::get_left(int i = (0)) const;

857 9 get_right 0 4 1303 24 DisplayRegion::get_right 0 2 192 193 388
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
57
inline float DisplayRegion::get_right(int i = (0)) const;

858 10 get_bottom 0 4 1303 25 DisplayRegion::get_bottom 0 2 194 195 392
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within its GraphicsOutput.  This 
//               number will be in the range [0..1].
////////////////////////////////////////////////////////////////////
58
inline float DisplayRegion::get_bottom(int i = (0)) const;

859 7 get_top 0 4 1303 22 DisplayRegion::get_top 0 2 196 197 384
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
55
inline float DisplayRegion::get_top(int i = (0)) const;

860 14 set_dimensions 0 4 1303 29 DisplayRegion::set_dimensions 0 4 198 199 200 201 2082
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////
318
inline void DisplayRegion::set_dimensions(float l, float r, float b, float t);
inline void DisplayRegion::set_dimensions(int i, float l, float r, float b, float t);
inline void DisplayRegion::set_dimensions(LVecBase4f const &dimensions);
virtual void DisplayRegion::set_dimensions(int i, LVecBase4f const &dimensions);

861 10 get_window 0 4 1303 25 DisplayRegion::get_window 0 1 202 376
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that this DisplayRegion is
//               ultimately associated with, or NULL if no window is
//               associated.
////////////////////////////////////////////////////////////////////
61
inline GraphicsOutput *DisplayRegion::get_window(void) const;

862 8 get_pipe 0 4 1303 23 DisplayRegion::get_pipe 0 1 203 370
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this DisplayRegion is
//               ultimately associated with, or NULL if no pipe is
//               associated.
////////////////////////////////////////////////////////////////////
50
GraphicsPipe *DisplayRegion::get_pipe(void) const;

863 9 is_stereo 0 6 1303 24 DisplayRegion::is_stereo 0 1 204 313
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_stereo
//       Access: Published, Virtual
//  Description: Returns true if this is a StereoDisplayRegion, false
//               otherwise.
////////////////////////////////////////////////////////////////////
50
virtual bool DisplayRegion::is_stereo(void) const;

864 10 set_camera 0 6 1303 25 DisplayRegion::set_camera 0 1 205 669
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_camera
//       Access: Published, Virtual
//  Description: Sets the camera that is associated with this
//               DisplayRegion.  There is a one-to-many association
//               between cameras and DisplayRegions; one camera may be
//               shared by multiple DisplayRegions.
//
//               The camera is actually set via a NodePath, which
//               clarifies which instance of the camera (if there
//               happen to be multiple instances) we should use.
////////////////////////////////////////////////////////////////////
63
virtual void DisplayRegion::set_camera(NodePath const &camera);

865 10 get_camera 0 4 1303 25 DisplayRegion::get_camera 0 2 206 207 362
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
////////////////////////////////////////////////////////////////////
99
inline NodePath DisplayRegion::get_camera(Thread *current_thread = ((get_current_thread()))) const;

866 10 set_active 0 6 1303 25 DisplayRegion::set_active 0 1 208 386
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_active
//       Access: Published, Virtual
//  Description: Sets the active flag associated with the
//               DisplayRegion.  If the DisplayRegion is marked
//               inactive, nothing is rendered.
////////////////////////////////////////////////////////////////////
52
virtual void DisplayRegion::set_active(bool active);

867 9 is_active 0 4 1303 24 DisplayRegion::is_active 0 1 209 299
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
49
inline bool DisplayRegion::is_active(void) const;

868 8 set_sort 0 6 1303 23 DisplayRegion::set_sort 0 1 210 439
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_sort
//       Access: Published, Virtual
//  Description: Sets the sort value associated with the
//               DisplayRegion.  Within a window, DisplayRegions will
//               be rendered in order from the lowest sort value to
//               the highest.
////////////////////////////////////////////////////////////////////
47
virtual void DisplayRegion::set_sort(int sort);

869 8 get_sort 0 4 1303 23 DisplayRegion::get_sort 0 1 211 297
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_sort
//       Access: Published
//  Description: Returns the sort value associated with the
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
47
inline int DisplayRegion::get_sort(void) const;

870 18 set_stereo_channel 0 6 1303 33 DisplayRegion::set_stereo_channel 0 1 212 1825
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_stereo_channel
//       Access: Published, Virtual
//  Description: Specifies whether the DisplayRegion represents the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  This automatically
//               adjusts the lens that is used to render to this
//               DisplayRegion to its left or right eye, according to
//               the lens's stereo properties.
//
//               When the DisplayRegion is attached to a stereo window
//               (one for which is_stereo() returns true), this also
//               specifies which physical channel the DisplayRegion
//               renders to.
//
//               Normally you would create at least two DisplayRegions
//               for a stereo window, one for each of the left and
//               right channels.  The two DisplayRegions may share the
//               same camera (and thus the same lens); this parameter
//               is used to control the exact properties of the lens
//               when it is used to render into this DisplayRegion.
//
//               Also see the StereoDisplayRegion, which automates
//               managing a pair of left/right DisplayRegions.
//
//               An ordinary DisplayRegion may be set to SC_mono,
//               SC_left, or SC_right.  You may set SC_stereo only on
//               a StereoDisplayRegion.
//
//               This call also resets tex_view_offset to its default
//               value, which is 0 for the left eye or 1 for the right
//               eye of a stereo display region, or 0 for a mono
//               display region.
////////////////////////////////////////////////////////////////////
83
virtual void DisplayRegion::set_stereo_channel(Lens::StereoChannel stereo_channel);

871 18 get_stereo_channel 0 4 1303 33 DisplayRegion::get_stereo_channel 0 1 213 448
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_stereo_channel
//       Access: Published
//  Description: Returns whether the DisplayRegion is specified as the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  See
//               set_stereo_channel().
////////////////////////////////////////////////////////////////////
73
inline Lens::StereoChannel DisplayRegion::get_stereo_channel(void) const;

872 19 set_tex_view_offset 0 6 1303 34 DisplayRegion::set_tex_view_offset 0 1 214 776
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_tex_view_offset
//       Access: Published, Virtual
//  Description: Sets the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.  This is set automatically when you call
//               set_stereo_channel().
////////////////////////////////////////////////////////////////////
69
virtual void DisplayRegion::set_tex_view_offset(int tex_view_offset);

873 19 get_tex_view_offset 0 4 1303 34 DisplayRegion::get_tex_view_offset 0 1 215 687
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_tex_view_offset
//       Access: Public
//  Description: Returns the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.
////////////////////////////////////////////////////////////////////
58
inline int DisplayRegion::get_tex_view_offset(void) const;

874 21 set_incomplete_render 0 6 1303 36 DisplayRegion::set_incomplete_render 0 1 216 949
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_incomplete_render
//       Access: Published, Virtual
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               This flag may also be set on the
//               GraphicsStateGuardian.  It will be considered true
//               for a given DisplayRegion only if it is true on both
//               the GSG and on the DisplayRegion.
//
//               See GraphicsStateGuardian::set_incomplete_render()
//               for more detail.
////////////////////////////////////////////////////////////////////
74
virtual void DisplayRegion::set_incomplete_render(bool incomplete_render);

875 21 get_incomplete_render 0 4 1303 36 DisplayRegion::get_incomplete_render 0 1 217 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_incomplete_render
//       Access: Published
//  Description: Returns the incomplete_render flag.  See
//               set_incomplete_render().
////////////////////////////////////////////////////////////////////
61
inline bool DisplayRegion::get_incomplete_render(void) const;

876 27 set_texture_reload_priority 0 6 1303 42 DisplayRegion::set_texture_reload_priority 0 1 218 988
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_texture_reload_priority
//       Access: Published, Virtual
//  Description: Specifies an integer priority which is assigned to
//               any asynchronous texture reload requests spawned
//               while processing this DisplayRegion.  This controls
//               which textures are loaded first when multiple
//               textures need to be reloaded at once; it also
//               controls the relative priority between asynchronous
//               texture loads and asynchronous model or animation
//               loads.
//
//               Specifying a larger number here makes the textures
//               rendered by this DisplayRegion load up first.  This
//               may be particularly useful to do, for instance, for
//               the DisplayRegion that renders the gui.
////////////////////////////////////////////////////////////////////
85
virtual void DisplayRegion::set_texture_reload_priority(int texture_reload_priority);

877 27 get_texture_reload_priority 0 4 1303 42 DisplayRegion::get_texture_reload_priority 0 1 219 391
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_texture_reload_priority
//       Access: Published
//  Description: Returns the priority which is assigned to
//               asynchronous texture reload requests.  See
//               set_texture_reload_priority().
////////////////////////////////////////////////////////////////////
66
inline int DisplayRegion::get_texture_reload_priority(void) const;

878 14 set_lens_index 0 4 1303 29 DisplayRegion::set_lens_index 0 1 220 443
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_lens_index
//       Access: Published
//  Description: Sets the lens index, allows for multiple lenses to
//               be attached to a camera.  This is useful for a 
//               variety of setups, such as fish eye rendering.
//               The default is 0.
////////////////////////////////////////////////////////////////////
46
void DisplayRegion::set_lens_index(int index);

879 14 get_lens_index 0 4 1303 29 DisplayRegion::get_lens_index 0 1 221 479
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_lens_index
//       Access: Public
//  Description: Returns the specific lens of the associated Camera
//               that will be used for rendering this scene.  Most
//               Cameras hold only one lens, but for multiple lenses
//               this method may be used to selected between them.
////////////////////////////////////////////////////////////////////
53
inline int DisplayRegion::get_lens_index(void) const;

880 18 set_cull_traverser 0 6 1303 33 DisplayRegion::set_cull_traverser 0 1 222 494
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_traverser
//       Access: Published, Virtual
//  Description: Specifies the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.  Normally the
//               default CullTraverser is sufficient, but this may be
//               changed to change the default cull behavior.
////////////////////////////////////////////////////////////////////
68
virtual void DisplayRegion::set_cull_traverser(CullTraverser *trav);

881 18 get_cull_traverser 0 4 1303 33 DisplayRegion::get_cull_traverser 0 1 223 337
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_traverser
//       Access: Published
//  Description: Returns the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.
////////////////////////////////////////////////////////////////////
55
CullTraverser *DisplayRegion::get_cull_traverser(void);

882 18 set_cube_map_index 0 4 1303 33 DisplayRegion::set_cube_map_index 0 1 224 279
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cube_map_index
//       Access: Published
//  Description: Deprecated; replaced by set_target_tex_page().
////////////////////////////////////////////////////////////////////
66
inline void DisplayRegion::set_cube_map_index(int cube_map_index);

883 19 set_target_tex_page 0 6 1303 34 DisplayRegion::set_target_tex_page 0 1 225 907
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_target_tex_page
//       Access: Published, Virtual
//  Description: This is a special parameter that is only used when
//               rendering the faces of a cube map or multipage and/or
//               multiview texture.
//
//               This sets up the DisplayRegion to render to the ith
//               page and jth view of its associated texture(s); the
//               value must be consistent with the range of values
//               availble to the texture.  A normal DisplayRegion that
//               is not associated with any particular page should be
//               set to page -1 and view 0.
//
//               This is particularly useful when rendering cube maps
//               and/or stereo textures.
////////////////////////////////////////////////////////////////////
58
virtual void DisplayRegion::set_target_tex_page(int page);

884 19 get_target_tex_page 0 4 1303 34 DisplayRegion::get_target_tex_page 0 1 226 433
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_target_tex_page
//       Access: Published
//  Description: Returns the target page number associated with this
//               particular DisplayRegion, or -1 if it is not
//               associated with a page.  See
//               set_target_tex_page().
////////////////////////////////////////////////////////////////////
58
inline int DisplayRegion::get_target_tex_page(void) const;

885 19 set_scissor_enabled 0 4 1303 34 DisplayRegion::set_scissor_enabled 0 1 227 392
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_scissor_enabled
//       Access: Published
//  Description: Sets whether or not scissor testing is enabled
//               for this region.  The default is true, except for
//               the overlay display region.
////////////////////////////////////////////////////////////////////
69
inline void DisplayRegion::set_scissor_enabled(bool scissor_enabled);

886 19 get_scissor_enabled 0 4 1303 34 DisplayRegion::get_scissor_enabled 0 1 228 395
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_scissor_enabled
//       Access: Published
//  Description: Returns whether or not scissor testing is enabled
//               for this region.  The default is true, except for
//               the overlay display region.
////////////////////////////////////////////////////////////////////
59
inline bool DisplayRegion::get_scissor_enabled(void) const;

887 17 set_cull_callback 0 4 1303 32 DisplayRegion::set_cull_callback 0 1 229 1597
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the DisplayRegion is visited during the cull
//               traversal.  This callback will be made during the
//               cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               traversal for this DisplayRegion has not yet started.
//
//               The callback is passed an instance of a
//               DisplayRegionCullCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal cull behavior, so if your
//               callback does nothing, the scene graph will not be
//               traversed and therefore nothing will be drawn.  If
//               you wish the normal cull traversal to be performed
//               for this DisplayRegion, you must call
//               cbdata->upcall() from your callback.
////////////////////////////////////////////////////////////////////
69
inline void DisplayRegion::set_cull_callback(CallbackObject *object);

888 19 clear_cull_callback 0 4 1303 34 DisplayRegion::clear_cull_callback 0 1 230 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
////////////////////////////////////////////////////////////////////
53
inline void DisplayRegion::clear_cull_callback(void);

889 17 get_cull_callback 0 4 1303 32 DisplayRegion::get_cull_callback 0 1 231 286
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
////////////////////////////////////////////////////////////////////
68
inline CallbackObject *DisplayRegion::get_cull_callback(void) const;

890 17 set_draw_callback 0 4 1303 32 DisplayRegion::set_draw_callback 0 1 232 1951
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the contents of DisplayRegion is drawn during the
//               draw traversal.  This callback will be made during
//               the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state is in the initial state, and no
//               projection matrix or modelview matrix is in effect.
//               begin_scene() has not yet been called, and no objects
//               have yet been drawn.  However, the viewport has
//               already been set to the appropriate part of the
//               window, and the clear commands for this DisplayRegion
//               (if any) have been issued.
//
//               The callback is passed an instance of a
//               DisplayRegionDrawCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal draw behavior, so if your
//               callback does nothing, nothing in the DisplayRegion
//               will be drawn.  If you wish the draw traversal to
//               continue to draw the contents of this DisplayRegion,
//               you must call cbdata->upcall() from your callback.
////////////////////////////////////////////////////////////////////
69
inline void DisplayRegion::set_draw_callback(CallbackObject *object);

891 19 clear_draw_callback 0 4 1303 34 DisplayRegion::clear_draw_callback 0 1 233 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
////////////////////////////////////////////////////////////////////
53
inline void DisplayRegion::clear_draw_callback(void);

892 17 get_draw_callback 0 4 1303 32 DisplayRegion::get_draw_callback 0 1 234 286
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
////////////////////////////////////////////////////////////////////
68
inline CallbackObject *DisplayRegion::get_draw_callback(void) const;

893 15 get_pixel_width 0 4 1303 30 DisplayRegion::get_pixel_width 0 2 235 236 279
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_width
//       Access: Published
//  Description: Returns the width of the DisplayRegion in pixels.
////////////////////////////////////////////////////////////////////
61
inline int DisplayRegion::get_pixel_width(int i = (0)) const;

894 16 get_pixel_height 0 4 1303 31 DisplayRegion::get_pixel_height 0 2 237 238 281
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_height
//       Access: Published
//  Description: Returns the height of the DisplayRegion in pixels.
////////////////////////////////////////////////////////////////////
62
inline int DisplayRegion::get_pixel_height(int i = (0)) const;

895 6 output 0 6 1303 21 DisplayRegion::output 0 1 239 229
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
55
virtual void DisplayRegion::output(ostream &out) const;

896 24 make_screenshot_filename 0 4 1303 39 DisplayRegion::make_screenshot_filename 0 2 240 241 757
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
////////////////////////////////////////////////////////////////////
109
static Filename DisplayRegion::make_screenshot_filename(basic_string< char > const &prefix = ("screenshot"));

897 23 save_screenshot_default 0 4 1303 38 DisplayRegion::save_screenshot_default 0 2 242 243 470
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
////////////////////////////////////////////////////////////////////
101
Filename DisplayRegion::save_screenshot_default(basic_string< char > const &prefix = ("screenshot"));

898 15 save_screenshot 0 4 1303 30 DisplayRegion::save_screenshot 0 2 244 245 350
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
112
bool DisplayRegion::save_screenshot(Filename const &filename, basic_string< char > const &image_comment = (""));

899 14 get_screenshot 0 4 1303 29 DisplayRegion::get_screenshot 0 2 246 247 774
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as a Texture, or NULL
//               on failure.
////////////////////////////////////////////////////////////////////
110
bool DisplayRegion::get_screenshot(PNMImage &image);
PointerTo< Texture > DisplayRegion::get_screenshot(void);

900 22 make_cull_result_graph 0 6 1303 37 DisplayRegion::make_cull_result_graph 0 1 248 1131
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_cull_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the last frame's cull
//               operation.
//
//               This will be a hierarchy of nodes, one node for each
//               bin, each of which will in term be a parent of a
//               number of GeomNodes, representing the geometry drawn
//               in each bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself, which is constructed
//               and maintained internally.  No such scene graph is
//               normally constructed during the rendering of a frame;
//               this is an artificial construct created for the
//               purpose of making it easy to analyze the results of
//               the cull operation.
////////////////////////////////////////////////////////////////////
75
virtual PointerTo< PandaNode > DisplayRegion::make_cull_result_graph(void);

901 14 get_class_type 0 4 1303 29 DisplayRegion::get_class_type 0 1 249 0
54
static TypeHandle DisplayRegion::get_class_type(void);

902 12 get_left_eye 0 4 1305 33 StereoDisplayRegion::get_left_eye 0 1 254 324
////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_left_eye
//       Access: Published
//  Description: Returns a pointer to the left DisplayRegion managed
//               by this stereo object.
////////////////////////////////////////////////////////////////////
62
inline DisplayRegion *StereoDisplayRegion::get_left_eye(void);

903 13 get_right_eye 0 4 1305 34 StereoDisplayRegion::get_right_eye 0 1 255 326
////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_right_eye
//       Access: Published
//  Description: Returns a pointer to the right DisplayRegion managed
//               by this stereo object.
////////////////////////////////////////////////////////////////////
63
inline DisplayRegion *StereoDisplayRegion::get_right_eye(void);

904 14 get_class_type 0 4 1305 35 StereoDisplayRegion::get_class_type 0 1 256 0
60
static TypeHandle StereoDisplayRegion::get_class_type(void);

905 14 get_depth_bits 0 4 1306 37 FrameBufferProperties::get_depth_bits 0 1 259 260
// Individual queries.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_depth_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_depth_bits(void) const;

906 14 get_color_bits 0 4 1306 37 FrameBufferProperties::get_color_bits 0 1 260 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_color_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_color_bits(void) const;

907 12 get_red_bits 0 4 1306 35 FrameBufferProperties::get_red_bits 0 1 261 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_red_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline int FrameBufferProperties::get_red_bits(void) const;

908 14 get_green_bits 0 4 1306 37 FrameBufferProperties::get_green_bits 0 1 262 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_green_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_green_bits(void) const;

909 13 get_blue_bits 0 4 1306 36 FrameBufferProperties::get_blue_bits 0 1 263 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_blue_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_blue_bits(void) const;

910 14 get_alpha_bits 0 4 1306 37 FrameBufferProperties::get_alpha_bits 0 1 264 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_alpha_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_alpha_bits(void) const;

911 16 get_stencil_bits 0 4 1306 39 FrameBufferProperties::get_stencil_bits 0 1 265 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stencil_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_stencil_bits(void) const;

912 14 get_accum_bits 0 4 1306 37 FrameBufferProperties::get_accum_bits 0 1 266 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_accum_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_accum_bits(void) const;

913 12 get_aux_rgba 0 4 1306 35 FrameBufferProperties::get_aux_rgba 0 1 267 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_rgba
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline int FrameBufferProperties::get_aux_rgba(void) const;

914 13 get_aux_hrgba 0 4 1306 36 FrameBufferProperties::get_aux_hrgba 0 1 268 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_hrgba
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_aux_hrgba(void) const;

915 13 get_aux_float 0 4 1306 36 FrameBufferProperties::get_aux_float 0 1 269 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_float
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_aux_float(void) const;

916 16 get_multisamples 0 4 1306 39 FrameBufferProperties::get_multisamples 0 1 270 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_multisamples
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_multisamples(void) const;

917 20 get_coverage_samples 0 4 1306 43 FrameBufferProperties::get_coverage_samples 0 1 271 356
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling.
////////////////////////////////////////////////////////////////////
67
inline int FrameBufferProperties::get_coverage_samples(void) const;

918 16 get_back_buffers 0 4 1306 39 FrameBufferProperties::get_back_buffers 0 1 272 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_back_buffers
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_back_buffers(void) const;

919 17 get_indexed_color 0 4 1306 40 FrameBufferProperties::get_indexed_color 0 1 273 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_indexed_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool FrameBufferProperties::get_indexed_color(void) const;

920 13 get_rgb_color 0 4 1306 36 FrameBufferProperties::get_rgb_color 0 1 274 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_rgb_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline bool FrameBufferProperties::get_rgb_color(void) const;

921 10 get_stereo 0 4 1306 33 FrameBufferProperties::get_stereo 0 1 275 232
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stereo
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline bool FrameBufferProperties::get_stereo(void) const;

922 18 get_force_hardware 0 4 1306 41 FrameBufferProperties::get_force_hardware 0 1 276 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_hardware
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline bool FrameBufferProperties::get_force_hardware(void) const;

923 18 get_force_software 0 4 1306 41 FrameBufferProperties::get_force_software 0 1 277 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_software
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline bool FrameBufferProperties::get_force_software(void) const;

924 14 get_srgb_color 0 4 1306 37 FrameBufferProperties::get_srgb_color 0 1 278 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_srgb_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline bool FrameBufferProperties::get_srgb_color(void) const;

925 15 get_float_color 0 4 1306 38 FrameBufferProperties::get_float_color 0 1 279 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_float_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool FrameBufferProperties::get_float_color(void) const;

926 15 get_float_depth 0 4 1306 38 FrameBufferProperties::get_float_depth 0 1 280 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_float_depth
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool FrameBufferProperties::get_float_depth(void) const;

927 14 set_depth_bits 0 4 1306 37 FrameBufferProperties::set_depth_bits 0 1 281 262
// Individual assigners.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_depth_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_depth_bits(int n);

928 14 set_color_bits 0 4 1306 37 FrameBufferProperties::set_color_bits 0 1 282 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_color_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_color_bits(int n);

929 13 set_rgba_bits 0 4 1306 36 FrameBufferProperties::set_rgba_bits 0 1 283 279
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgba_bits
//       Access: Published
//  Description: Sets all color bit requirements separately.
////////////////////////////////////////////////////////////////////
77
inline void FrameBufferProperties::set_rgba_bits(int r, int g, int b, int a);

930 12 set_red_bits 0 4 1306 35 FrameBufferProperties::set_red_bits 0 1 284 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_red_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void FrameBufferProperties::set_red_bits(int n);

931 14 set_green_bits 0 4 1306 37 FrameBufferProperties::set_green_bits 0 1 285 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_green_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_green_bits(int n);

932 13 set_blue_bits 0 4 1306 36 FrameBufferProperties::set_blue_bits 0 1 286 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_blue_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_blue_bits(int n);

933 14 set_alpha_bits 0 4 1306 37 FrameBufferProperties::set_alpha_bits 0 1 287 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_alpha_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_alpha_bits(int n);

934 16 set_stencil_bits 0 4 1306 39 FrameBufferProperties::set_stencil_bits 0 1 288 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stencil_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_stencil_bits(int n);

935 14 set_accum_bits 0 4 1306 37 FrameBufferProperties::set_accum_bits 0 1 289 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_accum_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_accum_bits(int n);

936 12 set_aux_rgba 0 4 1306 35 FrameBufferProperties::set_aux_rgba 0 1 290 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_rgba
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void FrameBufferProperties::set_aux_rgba(int n);

937 13 set_aux_hrgba 0 4 1306 36 FrameBufferProperties::set_aux_hrgba 0 1 291 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_hrgba
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_aux_hrgba(int n);

938 13 set_aux_float 0 4 1306 36 FrameBufferProperties::set_aux_float 0 1 292 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_float
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_aux_float(int n);

939 16 set_multisamples 0 4 1306 39 FrameBufferProperties::set_multisamples 0 1 293 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_multisamples
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_multisamples(int n);

940 20 set_coverage_samples 0 4 1306 43 FrameBufferProperties::set_coverage_samples 0 1 294 355
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling
////////////////////////////////////////////////////////////////////
63
inline void FrameBufferProperties::set_coverage_samples(int n);

941 16 set_back_buffers 0 4 1306 39 FrameBufferProperties::set_back_buffers 0 1 295 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_back_buffers
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_back_buffers(int n);

942 17 set_indexed_color 0 4 1306 40 FrameBufferProperties::set_indexed_color 0 1 296 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_indexed_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void FrameBufferProperties::set_indexed_color(bool n);

943 13 set_rgb_color 0 4 1306 36 FrameBufferProperties::set_rgb_color 0 1 297 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgb_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_rgb_color(bool n);

944 10 set_stereo 0 4 1306 33 FrameBufferProperties::set_stereo 0 1 298 232
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stereo
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void FrameBufferProperties::set_stereo(bool n);

945 18 set_force_hardware 0 4 1306 41 FrameBufferProperties::set_force_hardware 0 1 299 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_hardware
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void FrameBufferProperties::set_force_hardware(bool n);

946 18 set_force_software 0 4 1306 41 FrameBufferProperties::set_force_software 0 1 300 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_software
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void FrameBufferProperties::set_force_software(bool n);

947 14 set_srgb_color 0 4 1306 37 FrameBufferProperties::set_srgb_color 0 1 301 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_srgb_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void FrameBufferProperties::set_srgb_color(bool n);

948 15 set_float_color 0 4 1306 38 FrameBufferProperties::set_float_color 0 1 302 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_float_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_float_color(bool n);

949 15 set_float_depth 0 4 1306 38 FrameBufferProperties::set_float_depth 0 1 303 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_float_depth
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_float_depth(bool n);

950 21 FrameBufferProperties 0 4 1306 44 FrameBufferProperties::FrameBufferProperties 0 2 257 258 473
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
139
FrameBufferProperties::FrameBufferProperties(void);
inline FrameBufferProperties::FrameBufferProperties(FrameBufferProperties const &copy);

951 22 ~FrameBufferProperties 0 4 1306 45 FrameBufferProperties::~FrameBufferProperties 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline FrameBufferProperties::~FrameBufferProperties(void);

952 10 operator = 0 4 1306 33 FrameBufferProperties::operator = 0 1 304 0
74
void FrameBufferProperties::operator =(FrameBufferProperties const &copy);

953 11 get_default 0 4 1306 34 FrameBufferProperties::get_default 0 1 305 395
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_default
//       Access: Published, Static
//  Description: Returns a FrameBufferProperties structure with all of
//               the default values filled in according to the user's
//               config file.
////////////////////////////////////////////////////////////////////
77
static FrameBufferProperties const &FrameBufferProperties::get_default(void);

954 11 operator == 0 4 1306 34 FrameBufferProperties::operator == 0 1 306 0
82
bool FrameBufferProperties::operator ==(FrameBufferProperties const &other) const;

955 11 operator != 0 4 1306 34 FrameBufferProperties::operator != 0 1 307 0
89
inline bool FrameBufferProperties::operator !=(FrameBufferProperties const &other) const;

956 5 clear 0 4 1306 28 FrameBufferProperties::clear 0 1 308 391
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the FrameBufferProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
40
void FrameBufferProperties::clear(void);

957 17 set_all_specified 0 4 1306 40 FrameBufferProperties::set_all_specified 0 1 309 268
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_all_specified
//       Access: Published
//  Description: sets all the specified bits.
////////////////////////////////////////////////////////////////////
52
void FrameBufferProperties::set_all_specified(void);

958 8 subsumes 0 4 1306 31 FrameBufferProperties::subsumes 0 1 310 405
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::subsumes
//       Access: Public
//  Description: Returns true if this set of properties makes
//               strictly greater or equal demands of the framebuffer
//               than the other set of framebuffer properties.
////////////////////////////////////////////////////////////////////
79
bool FrameBufferProperties::subsumes(FrameBufferProperties const &other) const;

959 14 add_properties 0 4 1306 37 FrameBufferProperties::add_properties 0 1 311 381
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
79
void FrameBufferProperties::add_properties(FrameBufferProperties const &other);

960 6 output 0 4 1306 29 FrameBufferProperties::output 0 1 312 263
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::output
//       Access: Published
//  Description: Generates a string representation.
////////////////////////////////////////////////////////////////////
55
void FrameBufferProperties::output(ostream &out) const;

961 23 set_one_bit_per_channel 0 4 1306 46 FrameBufferProperties::set_one_bit_per_channel 0 1 313 398
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_one_bit_per_channel
//       Access: Published
//  Description: If any of the depth, color, alpha, accum, or
//               stencil properties is set to more than one,
//               then they are reduced to one.
////////////////////////////////////////////////////////////////////
58
void FrameBufferProperties::set_one_bit_per_channel(void);

962 9 is_stereo 0 4 1306 32 FrameBufferProperties::is_stereo 0 1 314 231
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_stereo
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline bool FrameBufferProperties::is_stereo(void) const;

963 18 is_single_buffered 0 4 1306 41 FrameBufferProperties::is_single_buffered 0 1 315 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_single_buffered
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline bool FrameBufferProperties::is_single_buffered(void) const;

964 11 get_quality 0 4 1306 34 FrameBufferProperties::get_quality 0 1 316 1390
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_quality
//       Access: Published
//  Description: Assumes that these properties are a description of
//               a window.
//
//               Measures how well this window satisfies a specified
//               set of requirements.  A higher quality number means
//               that more requirements were satisfied.  A quality of
//               zero means that the window is unsuitable.
//
//               The routine deducts a lot if the window fails to
//               provide a requested feature.  It deducts less
//               if the window provides a feature, but at a degraded
//               level of functionality (ie, the user asks for rgba8,
//               color, but the window only provides rgba4).  The
//               routine also deducts a small amount for unnecessary
//               features.  For example, if the window has an
//               accumulation buffer when one is not requested will
//               reduce quality slightly.  Maximum quality is obtained
//               when the window exactly matches the request.
//
//               If you want to know whether the window satisfies
//               all of the requirements, use the "subsumes" function.
////////////////////////////////////////////////////////////////////
80
int FrameBufferProperties::get_quality(FrameBufferProperties const &reqs) const;

965 16 is_any_specified 0 4 1306 39 FrameBufferProperties::is_any_specified 0 1 317 324
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
57
bool FrameBufferProperties::is_any_specified(void) const;

966 8 is_basic 0 4 1306 31 FrameBufferProperties::is_basic 0 1 318 444
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_basic
//       Access: Published
//  Description: Returns true if the properties are extremely basic.
//               The following count as basic: rgb or rgba, depth.
//               If anything else is specified, the properties are
//               non-basic.
////////////////////////////////////////////////////////////////////
49
bool FrameBufferProperties::is_basic(void) const;

967 12 get_aux_mask 0 4 1306 35 FrameBufferProperties::get_aux_mask 0 1 319 324
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_mask
//       Access: Published
//  Description: Converts the aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
////////////////////////////////////////////////////////////////////
52
int FrameBufferProperties::get_aux_mask(void) const;

968 15 get_buffer_mask 0 4 1306 38 FrameBufferProperties::get_buffer_mask 0 1 320 329
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_buffer_mask
//       Access: Private
//  Description: Converts the non-aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
////////////////////////////////////////////////////////////////////
55
int FrameBufferProperties::get_buffer_mask(void) const;

969 24 verify_hardware_software 0 4 1306 47 FrameBufferProperties::verify_hardware_software 0 1 321 426
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::verify_hardware_software
//       Access: Public
//  Description: Validates that the properties represent the desired
//               kind of renderer (hardware or software).  If not,
//               prints out an error message and returns false.
////////////////////////////////////////////////////////////////////
133
bool FrameBufferProperties::verify_hardware_software(FrameBufferProperties const &props, basic_string< char > const &renderer) const;

970 19 setup_color_texture 0 4 1306 42 FrameBufferProperties::setup_color_texture 0 1 322 597
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::setup_color_texture
//       Access: Public
//  Description: Sets the texture up for render-to-texture matching
//               these framebuffer properties.
//
//               Returns true if there was a format that had enough
//               bits, false otherwise.  Of course, this is no
//               guarantee that a particular graphics back-end
//               supports rendering to textures of that format.
////////////////////////////////////////////////////////////////////
68
bool FrameBufferProperties::setup_color_texture(Texture *tex) const;

971 19 setup_depth_texture 0 4 1306 42 FrameBufferProperties::setup_depth_texture 0 1 323 597
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::setup_depth_texture
//       Access: Public
//  Description: Sets the texture up for render-to-texture matching
//               these framebuffer properties.
//
//               Returns true if there was a format that had enough
//               bits, false otherwise.  Of course, this is no
//               guarantee that a particular graphics back-end
//               supports rendering to textures of that format.
////////////////////////////////////////////////////////////////////
68
bool FrameBufferProperties::setup_depth_texture(Texture *tex) const;

972 22 GraphicsThreadingModel 0 4 1307 46 GraphicsThreadingModel::GraphicsThreadingModel 0 3 324 325 326 2042
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
////////////////////////////////////////////////////////////////////
188
GraphicsThreadingModel::GraphicsThreadingModel(basic_string< char > const &model = ((string())));
inline GraphicsThreadingModel::GraphicsThreadingModel(GraphicsThreadingModel const &copy);

973 10 operator = 0 4 1307 34 GraphicsThreadingModel::operator = 0 1 327 0
83
inline void GraphicsThreadingModel::operator =(GraphicsThreadingModel const &copy);

974 9 get_model 0 4 1307 33 GraphicsThreadingModel::get_model 0 1 328 326
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_model
//       Access: Published
//  Description: Returns the string that describes the threading
//               model.  See the constructor.
////////////////////////////////////////////////////////////////////
67
basic_string< char > GraphicsThreadingModel::get_model(void) const;

975 13 get_cull_name 0 4 1307 37 GraphicsThreadingModel::get_cull_name 0 1 329 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               culling in this model.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &GraphicsThreadingModel::get_cull_name(void) const;

976 13 set_cull_name 0 4 1307 37 GraphicsThreadingModel::set_cull_name 0 1 330 481
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               culling in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
////////////////////////////////////////////////////////////////////
89
inline void GraphicsThreadingModel::set_cull_name(basic_string< char > const &cull_name);

977 14 get_cull_stage 0 4 1307 38 GraphicsThreadingModel::get_cull_stage 0 1 331 454
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the cull thread
//               should access data.  This will be 0 if the cull is
//               run in the same thread as app, or 1 if it is its own
//               thread.
////////////////////////////////////////////////////////////////////
62
inline int GraphicsThreadingModel::get_cull_stage(void) const;

978 13 get_draw_name 0 4 1307 37 GraphicsThreadingModel::get_draw_name 0 1 332 392
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               sending the actual graphics primitives to the
//               graphics API in this model.
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &GraphicsThreadingModel::get_draw_name(void) const;

979 13 set_draw_name 0 4 1307 37 GraphicsThreadingModel::set_draw_name 0 1 333 481
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_draw_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               drawing in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
////////////////////////////////////////////////////////////////////
89
inline void GraphicsThreadingModel::set_draw_name(basic_string< char > const &cull_name);

980 14 get_draw_stage 0 4 1307 38 GraphicsThreadingModel::get_draw_stage 0 1 334 538
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the draw thread
//               should access data.  This will be the same value as
//               get_cull_stage() if cull and draw are run in the same
//               thread, or one more than that value if draw should be
//               in its own thread.
////////////////////////////////////////////////////////////////////
62
inline int GraphicsThreadingModel::get_draw_stage(void) const;

981 16 get_cull_sorting 0 4 1307 40 GraphicsThreadingModel::get_cull_sorting 0 1 335 396
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_sorting
//       Access: Published
//  Description: Returns true if the model involves a separate cull
//               pass, or false if culling happens implicitly, at the
//               same time as draw.
////////////////////////////////////////////////////////////////////
65
inline bool GraphicsThreadingModel::get_cull_sorting(void) const;

982 16 set_cull_sorting 0 4 1307 40 GraphicsThreadingModel::set_cull_sorting 0 1 336 521
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_sorting
//       Access: Published
//  Description: Changes the flag that indicates whether the threading
//               model involves a separate cull pass.  This won't
//               change any windows that were already created with
//               this model; this only has an effect on newly-opened
//               windows.
////////////////////////////////////////////////////////////////////
72
inline void GraphicsThreadingModel::set_cull_sorting(bool cull_sorting);

983 18 is_single_threaded 0 4 1307 42 GraphicsThreadingModel::is_single_threaded 0 1 337 372
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_single_threaded
//       Access: Published
//  Description: Returns true if the threading model is a
//               single-threaded model, or false if it involves
//               threads.
////////////////////////////////////////////////////////////////////
67
inline bool GraphicsThreadingModel::is_single_threaded(void) const;

984 10 is_default 0 4 1307 34 GraphicsThreadingModel::is_default 0 1 338 377
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_default
//       Access: Published
//  Description: Returns true if the threading model is the default,
//               cull-then-draw single-threaded model, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsThreadingModel::is_default(void) const;

985 6 output 0 4 1307 30 GraphicsThreadingModel::output 0 1 339 230
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline void GraphicsThreadingModel::output(ostream &out) const;

986 23 ~GraphicsThreadingModel 0 4 1307 47 GraphicsThreadingModel::~GraphicsThreadingModel 0 0 0
54
GraphicsThreadingModel::~GraphicsThreadingModel(void);

987 11 release_all 0 4 1308 34 GraphicsStateGuardian::release_all 0 1 340 261
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all
//       Access: Public
//  Description: Releases all prepared objects.
////////////////////////////////////////////////////////////////////
53
inline void GraphicsStateGuardian::release_all(void);

988 20 release_all_textures 0 4 1308 43 GraphicsStateGuardian::release_all_textures 0 1 341 319
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_textures
//       Access: Public
//  Description: Frees the resources for all textures associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::release_all_textures(void);

989 20 release_all_samplers 0 4 1308 43 GraphicsStateGuardian::release_all_samplers 0 1 342 319
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_samplers
//       Access: Public
//  Description: Frees the resources for all samplers associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::release_all_samplers(void);

990 17 release_all_geoms 0 4 1308 40 GraphicsStateGuardian::release_all_geoms 0 1 343 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_geoms
//       Access: Public
//  Description: Frees the resources for all geoms associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
58
inline int GraphicsStateGuardian::release_all_geoms(void);

991 26 release_all_vertex_buffers 0 4 1308 49 GraphicsStateGuardian::release_all_vertex_buffers 0 1 344 331
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_vertex_buffers
//       Access: Public
//  Description: Frees the resources for all vertex buffers associated
//               with this GSG.
////////////////////////////////////////////////////////////////////
67
inline int GraphicsStateGuardian::release_all_vertex_buffers(void);

992 25 release_all_index_buffers 0 4 1308 48 GraphicsStateGuardian::release_all_index_buffers 0 1 345 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_index_buffers
//       Access: Public
//  Description: Frees the resources for all index buffers associated
//               with this GSG.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsStateGuardian::release_all_index_buffers(void);

993 10 set_active 0 4 1308 33 GraphicsStateGuardian::set_active 0 1 346 538
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsStateGuardian.  If the GraphicsStateGuardian
//               is marked inactive, nothing is rendered.  This is not
//               normally turned off unless there is a problem with
//               the rendering detected at a low level.
////////////////////////////////////////////////////////////////////
59
inline void GraphicsStateGuardian::set_active(bool active);

994 9 is_active 0 4 1308 32 GraphicsStateGuardian::is_active 0 1 347 315
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               GraphicsStateGuardian.
////////////////////////////////////////////////////////////////////
57
inline bool GraphicsStateGuardian::is_active(void) const;

995 8 is_valid 0 4 1308 31 GraphicsStateGuardian::is_valid 0 1 348 435
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_valid
//       Access: Published
//  Description: Returns true if the GSG has been correctly
//               initialized within a graphics context, false if there
//               has been some problem or it hasn't been initialized
//               yet.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsStateGuardian::is_valid(void) const;

996 11 needs_reset 0 4 1308 34 GraphicsStateGuardian::needs_reset 0 1 349 301
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::needs_reset
//       Access: Public
//  Description: Returns true if the gsg is marked as needing a
//               reset.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsStateGuardian::needs_reset(void) const;

997 21 set_incomplete_render 0 4 1308 44 GraphicsStateGuardian::set_incomplete_render 0 1 350 1472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_incomplete_render
//       Access: Public
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               Setting this true allows for a smoother frame rate,
//               but occasionally parts of the frame will be invisible
//               or missing (they will generally come in within a
//               second or two).  Setting this false guarantees that
//               every frame will be complete, but may cause more
//               chugs as things are loaded up at runtime.
//
//               You may want to set this false during loading
//               screens, to guarantee that all of your assets are
//               available by the time you take the loading screen
//               down.
//
//               This flag may also be set individually on each
//               DisplayRegion.  It will be considered true for a
//               given DisplayRegion only if it is true on both the
//               GSG and on the DisplayRegion.
////////////////////////////////////////////////////////////////////
81
inline void GraphicsStateGuardian::set_incomplete_render(bool incomplete_render);

998 10 set_loader 0 4 1308 33 GraphicsStateGuardian::set_loader 0 1 351 385
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_loader
//       Access: Public
//  Description: Sets the Loader object that will be used by this GSG
//               to load textures when necessary, if
//               get_incomplete_render() is true.
////////////////////////////////////////////////////////////////////
62
inline void GraphicsStateGuardian::set_loader(Loader *loader);

999 10 get_loader 0 4 1308 33 GraphicsStateGuardian::get_loader 0 1 352 397
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be used by this
//               GSG to load textures when necessary, if
//               get_incomplete_render() is true.
////////////////////////////////////////////////////////////////////
61
inline Loader *GraphicsStateGuardian::get_loader(void) const;

1000 8 get_pipe 0 4 1308 31 GraphicsStateGuardian::get_pipe 0 1 353 304
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_pipe
//       Access: Published
//  Description: Returns the graphics pipe on which this GSG was
//               created.
////////////////////////////////////////////////////////////////////
65
inline GraphicsPipe *GraphicsStateGuardian::get_pipe(void) const;

1001 10 get_engine 0 4 1308 33 GraphicsStateGuardian::get_engine 0 1 354 463
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this GSG.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
////////////////////////////////////////////////////////////////////
62
GraphicsEngine *GraphicsStateGuardian::get_engine(void) const;

1002 19 get_threading_model 0 4 1308 42 GraphicsStateGuardian::get_threading_model 0 1 355 320
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_threading_model
//       Access: Published
//  Description: Returns the threading model that was used to create
//               this GSG.
////////////////////////////////////////////////////////////////////
92
inline GraphicsThreadingModel const &GraphicsStateGuardian::get_threading_model(void) const;

1003 11 is_hardware 0 4 1308 34 GraphicsStateGuardian::is_hardware 0 1 356 373
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_hardware
//       Access: Published
//  Description: Returns true if this GSG appears to be
//               hardware-accelerated, or false if it is known to be
//               software only.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsStateGuardian::is_hardware(void) const;

1004 22 get_max_texture_stages 0 4 1308 45 GraphicsStateGuardian::get_max_texture_stages 0 1 357 859
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_texture_stages
//       Access: Published
//  Description: Returns the maximum number of simultaneous textures
//               that may be applied to geometry with multitexturing,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority texture stages will
//               not be applied.  Use TextureStage::set_priority() to
//               adjust the relative importance of the different
//               texture stages.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
69
inline int GraphicsStateGuardian::get_max_texture_stages(void) const;

1005 28 get_max_3d_texture_dimension 0 4 1308 51 GraphicsStateGuardian::get_max_3d_texture_dimension 0 1 358 654
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_3d_texture_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a 3-d texture, or -1 if there is no
//               particular limit.  Returns 0 if 3-d textures are not
//               supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
75
inline int GraphicsStateGuardian::get_max_3d_texture_dimension(void) const;

1006 31 get_max_2d_texture_array_layers 0 4 1308 54 GraphicsStateGuardian::get_max_2d_texture_array_layers 0 1 359 615
//z axis

////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_2d_texture_array_layers
//       Access: Published
//  Description: Returns the largest possible number of pages, or -1
//               if there is no particular limit. Returns 0 if 2-d
//               texture arrays not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
78
inline int GraphicsStateGuardian::get_max_2d_texture_array_layers(void) const;

1007 26 get_max_cube_map_dimension 0 4 1308 49 GraphicsStateGuardian::get_max_cube_map_dimension 0 1 360 672
//z axis

////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_cube_map_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a cube map texture, or -1 if there is
//               no particular limit.  Returns 0 if cube map textures
//               are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
73
inline int GraphicsStateGuardian::get_max_cube_map_dimension(void) const;

1008 28 get_supports_texture_combine 0 4 1308 51 GraphicsStateGuardian::get_supports_texture_combine 0 1 361 595
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_combine
//       Access: Published
//  Description: Returns true if this particular GSG can use the
//               TextureStage::M_combine mode, which includes all of
//               the texture blend modes specified by
//               set_combine_rgb() and/or set_combine_alpha().  If
//               this is false, you must limit yourself to using the
//               simpler blend modes.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_texture_combine(void) const;

1009 33 get_supports_texture_saved_result 0 4 1308 56 GraphicsStateGuardian::get_supports_texture_saved_result 0 1 362 475
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_saved_result
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CS_last_saved_result source, which
//               allows you to save the result of a TextureStage and
//               re-use it for multiple inputs.
////////////////////////////////////////////////////////////////////
81
inline bool GraphicsStateGuardian::get_supports_texture_saved_result(void) const;

1010 25 get_supports_texture_dot3 0 4 1308 48 GraphicsStateGuardian::get_supports_texture_dot3 0 1 363 375
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_dot3
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CM_dot3_rgb or CM_dot3_rgba combine
//               modes.
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_supports_texture_dot3(void) const;

1011 23 get_supports_3d_texture 0 4 1308 46 GraphicsStateGuardian::get_supports_3d_texture 0 1 364 325
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_3d_texture
//       Access: Published
//  Description: Returns true if this GSG can render 3-d (volumetric)
//               textures.
////////////////////////////////////////////////////////////////////
71
inline bool GraphicsStateGuardian::get_supports_3d_texture(void) const;

1012 29 get_supports_2d_texture_array 0 4 1308 52 GraphicsStateGuardian::get_supports_2d_texture_array 0 1 365 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_2d_texture_array
//       Access: Published
//  Description: Returns true if this GSG can render 2-d textures
//               array.
////////////////////////////////////////////////////////////////////
77
inline bool GraphicsStateGuardian::get_supports_2d_texture_array(void) const;

1013 21 get_supports_cube_map 0 4 1308 44 GraphicsStateGuardian::get_supports_cube_map 0 1 366 298
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map
//       Access: Published
//  Description: Returns true if this GSG can render cube map textures.
////////////////////////////////////////////////////////////////////
69
inline bool GraphicsStateGuardian::get_supports_cube_map(void) const;

1014 25 get_supports_tex_non_pow2 0 4 1308 48 GraphicsStateGuardian::get_supports_tex_non_pow2 0 1 367 333
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tex_non_pow2
//       Access: Published
//  Description: Returns true if this GSG can handle non power of two
//               sized textures.
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_supports_tex_non_pow2(void) const;

1015 31 get_supports_compressed_texture 0 4 1308 54 GraphicsStateGuardian::get_supports_compressed_texture 0 1 368 423
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compressed_texture
//       Access: Published
//  Description: Returns true if this GSG can compress textures as it
//               loads them into texture memory, and/or accept
//               pre-compressed textures for storing.
////////////////////////////////////////////////////////////////////
79
inline bool GraphicsStateGuardian::get_supports_compressed_texture(void) const;

1016 14 get_max_lights 0 4 1308 37 GraphicsStateGuardian::get_max_lights 0 1 369 579
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_lights
//       Access: Published
//  Description: Returns the maximum number of simultaneous lights
//               that may be rendered on geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::get_max_lights(void) const;

1017 19 get_max_clip_planes 0 4 1308 42 GraphicsStateGuardian::get_max_clip_planes 0 1 370 588
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_clip_planes
//       Access: Published
//  Description: Returns the maximum number of simultaneous clip planes
//               that may be applied to geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
66
inline int GraphicsStateGuardian::get_max_clip_planes(void) const;

1018 25 get_max_vertex_transforms 0 4 1308 48 GraphicsStateGuardian::get_max_vertex_transforms 0 1 371 818
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transforms
//       Access: Published
//  Description: Returns the maximum number of transform matrices that
//               may be simultaneously used to transform any one
//               vertex by the graphics hardware.  If this number is
//               0, then the hardware (or the graphics backend)
//               doesn't support soft-skinned vertices (in which case
//               Panda will animate the vertices in software).
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
72
inline int GraphicsStateGuardian::get_max_vertex_transforms(void) const;

1019 32 get_max_vertex_transform_indices 0 4 1308 55 GraphicsStateGuardian::get_max_vertex_transform_indices 0 1 372 811
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transform_indices
//       Access: Published
//  Description: Returns the maximum number of transforms there may be
//               in a single TransformTable for this graphics
//               hardware.  If this number is 0 (but
//               get_max_transforms() is nonzero), then the graphics
//               hardware (or API) doesn't support indexed transforms,
//               but can support direct transform references.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
79
inline int GraphicsStateGuardian::get_max_vertex_transform_indices(void) const;

1020 25 get_copy_texture_inverted 0 4 1308 48 GraphicsStateGuardian::get_copy_texture_inverted 0 1 373 976
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_copy_texture_inverted
//       Access: Published
//  Description: Returns true if this particular GSG has the property
//               that any framebuffer-to-texture copy results in a
//               texture that is upside-down and backwards from
//               Panda's usual convention; that is, it copies into a
//               texture from the bottom up instead of from the top
//               down.
//
//               If this is true, then on offscreen GraphicsBuffer
//               created for the purposes of rendering into a texture
//               should be created with the invert flag set true, to
//               compensate.  Panda will do this automatically if you
//               create an offscreen buffer using
//               GraphicsOutput::make_texture_buffer().
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_copy_texture_inverted(void) const;

1021 28 get_supports_generate_mipmap 0 4 1308 51 GraphicsStateGuardian::get_supports_generate_mipmap 0 1 374 555
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_generate_mipmap
//       Access: Published
//  Description: Returns true if this particular GSG can generate
//               mipmaps for a texture automatically, or if they must
//               be generated in software.  If this is true, then
//               mipmaps can safely be enabled for rendered textures
//               (e.g. using the MultitexReducer).
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_generate_mipmap(void) const;

1022 26 get_supports_depth_texture 0 4 1308 49 GraphicsStateGuardian::get_supports_depth_texture 0 1 375 543
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_texture
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               returns true if the GSG supports GL_DEPTH_COMPONENT
//               textures, which are considered a limited but still
//               valid case of F_depth_stencil.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_depth_texture(void) const;

1023 26 get_supports_depth_stencil 0 4 1308 49 GraphicsStateGuardian::get_supports_depth_stencil 0 1 376 475
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               only returns true if the GSG supports the full
//               packed depth-stencil functionality.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_depth_stencil(void) const;

1024 28 get_supports_sampler_objects 0 4 1308 51 GraphicsStateGuardian::get_supports_sampler_objects 0 1 377 675
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_sampler_objects
//       Access: Published
//  Description: Returns true if this particular GSG supports the
//               use of sampler objects to record texture sampling
//               parameters separately from the texture objects.
//               This doesn't really affect functionality, but if
//               this is false, it may mean that using the same
//               texture with different SamplerState objects will
//               result in reduced performance.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_sampler_objects(void) const;

1025 26 get_supports_basic_shaders 0 4 1308 49 GraphicsStateGuardian::get_supports_basic_shaders 0 1 378 334
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_basic_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               arbfp1+arbvp1 or above.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_basic_shaders(void) const;

1026 29 get_supports_geometry_shaders 0 4 1308 52 GraphicsStateGuardian::get_supports_geometry_shaders 0 1 379 331
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               geometry shaders.
////////////////////////////////////////////////////////////////////
77
inline bool GraphicsStateGuardian::get_supports_geometry_shaders(void) const;

1027 33 get_supports_tessellation_shaders 0 4 1308 56 GraphicsStateGuardian::get_supports_tessellation_shaders 0 1 380 338
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tessellation_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               tesselation shaders.
////////////////////////////////////////////////////////////////////
81
inline bool GraphicsStateGuardian::get_supports_tessellation_shaders(void) const;

1028 28 get_supports_compute_shaders 0 4 1308 51 GraphicsStateGuardian::get_supports_compute_shaders 0 1 381 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compute_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               compute shaders.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_compute_shaders(void) const;

1029 17 get_supports_glsl 0 4 1308 40 GraphicsStateGuardian::get_supports_glsl 0 1 382 315
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_glsl
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               GLSL shaders.
////////////////////////////////////////////////////////////////////
65
inline bool GraphicsStateGuardian::get_supports_glsl(void) const;

1030 20 get_supports_stencil 0 4 1308 43 GraphicsStateGuardian::get_supports_stencil 0 1 383 328
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               stencil buffers at all.
////////////////////////////////////////////////////////////////////
68
inline bool GraphicsStateGuardian::get_supports_stencil(void) const;

1031 30 get_supports_two_sided_stencil 0 4 1308 53 GraphicsStateGuardian::get_supports_two_sided_stencil 0 1 384 426
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_two_sided_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               two sided stencil: different stencil settings for the
//               front and back side of the same polygon.
////////////////////////////////////////////////////////////////////
78
inline bool GraphicsStateGuardian::get_supports_two_sided_stencil(void) const;

1032 32 get_supports_geometry_instancing 0 4 1308 55 GraphicsStateGuardian::get_supports_geometry_instancing 0 1 385 494
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_instancing
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               hardware geometry instancing: the ability to render
//               multiple copies of a model. In OpenGL, this is
//               done using the EXT_draw_instanced extension.
////////////////////////////////////////////////////////////////////
80
inline bool GraphicsStateGuardian::get_supports_geometry_instancing(void) const;

1033 28 get_supports_occlusion_query 0 4 1308 51 GraphicsStateGuardian::get_supports_occlusion_query 0 1 386 564
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_occlusion_query
//       Access: Published
//  Description: Returns true if this GSG supports an occlusion query.
//               If this is true, then begin_occlusion_query() and
//               end_occlusion_query() may be called to bracket a
//               sequence of draw_triangles() (or whatever) calls to
//               measure pixels that pass the depth test.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_occlusion_query(void) const;

1034 24 get_supports_timer_query 0 4 1308 47 GraphicsStateGuardian::get_supports_timer_query 0 1 387 295
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_timer_query
//       Access: Published
//  Description: Returns true if this GSG supports a timer query.
////////////////////////////////////////////////////////////////////
72
inline bool GraphicsStateGuardian::get_supports_timer_query(void) const;

1035 24 get_timer_queries_active 0 4 1308 47 GraphicsStateGuardian::get_timer_queries_active 0 1 388 328
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_timer_queries_active
//       Access: Published
//  Description: Returns true if timer queries are currently
//               enabled on this GSG.
////////////////////////////////////////////////////////////////////
72
inline bool GraphicsStateGuardian::get_timer_queries_active(void) const;

1036 21 get_max_color_targets 0 4 1308 44 GraphicsStateGuardian::get_max_color_targets 0 1 389 855
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_color_targets
//       Access: Published
//  Description: Returns the maximum number of simultaneous color
//               textures that may be attached for render-to-texture,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority render targets will
//               not be applied.  Use RenderTarget::set_priority() to
//               adjust the relative importance of the different
//               render targets.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
68
inline int GraphicsStateGuardian::get_max_color_targets(void) const;

1037 39 get_maximum_simultaneous_render_targets 0 4 1308 62 GraphicsStateGuardian::get_maximum_simultaneous_render_targets 0 1 390 364
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_maximum_simultaneous_render_targets
//       Access: Published
//  Description: Deprecated.  Use get_max_color_targets() instead,
//               which returns the exact same value.
////////////////////////////////////////////////////////////////////
86
inline int GraphicsStateGuardian::get_maximum_simultaneous_render_targets(void) const;

1038 16 get_shader_model 0 4 1308 39 GraphicsStateGuardian::get_shader_model 0 1 391 262
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_shader_model
//       Access: Published
//  Description: Returns the ShaderModel
////////////////////////////////////////////////////////////////////
63
inline int GraphicsStateGuardian::get_shader_model(void) const;

1039 16 set_shader_model 0 4 1308 39 GraphicsStateGuardian::set_shader_model 0 1 392 403
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_shader_model
//       Access: Published
//  Description: Sets the ShaderModel.  This will override the auto-
//               detected shader model during GSG reset.  Useful for
//               testing lower-end shaders.
////////////////////////////////////////////////////////////////////
70
inline void GraphicsStateGuardian::set_shader_model(int shader_model);

1040 23 get_supports_cg_profile 0 6 1308 46 GraphicsStateGuardian::get_supports_cg_profile 0 1 393 349
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cg_profile
//       Access: Published, Virtual
//  Description: Returns true if this particular GSG supports the
//               specified Cg Shader Profile.
////////////////////////////////////////////////////////////////////
100
virtual bool GraphicsStateGuardian::get_supports_cg_profile(basic_string< char > const &name) const;

1041 28 get_color_scale_via_lighting 0 4 1308 51 GraphicsStateGuardian::get_color_scale_via_lighting 0 1 394 499
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_color_scale_via_lighting
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale using materials and/or ambient lights, or
//               false if we need to actually munge the color.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_color_scale_via_lighting(void) const;

1042 27 get_alpha_scale_via_texture 0 4 1308 50 GraphicsStateGuardian::get_alpha_scale_via_texture 0 2 395 396 1116
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) an alpha scale via an
//               additional Texture layer, or false if we need to
//               actually munge the alpha.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: This variant of get_alpha_scale_via_texture() answers
//               the question of whether the GSG can implement an
//               alpha scale via an additional Texture layer,
//               considering the current TextureAttrib that will be in
//               effect.  This considers whether there is at least one
//               additional texture slot available on the GSG.
////////////////////////////////////////////////////////////////////
178
inline bool GraphicsStateGuardian::get_alpha_scale_via_texture(void) const;
inline bool GraphicsStateGuardian::get_alpha_scale_via_texture(TextureAttrib const *tex_attrib) const;

1043 23 get_runtime_color_scale 0 4 1308 46 GraphicsStateGuardian::get_runtime_color_scale 0 1 397 483
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_runtime_color_scale
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale directly, without requiring any munging of
//               vertices or tricks with lighting.
////////////////////////////////////////////////////////////////////
71
inline bool GraphicsStateGuardian::get_runtime_color_scale(void) const;

1044 29 get_alpha_scale_texture_stage 0 4 1308 52 GraphicsStateGuardian::get_alpha_scale_texture_stage 0 1 398 408
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_texture_stage
//       Access: Published, Static
//  Description: Returns the TextureStage that will be used to apply
//               an alpha scale, if get_alpha_scale_via_texture()
//               returns true.
////////////////////////////////////////////////////////////////////
87
static inline TextureStage *GraphicsStateGuardian::get_alpha_scale_texture_stage(void);

1045 21 set_coordinate_system 0 4 1308 44 GraphicsStateGuardian::set_coordinate_system 0 1 399 771
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_coordinate_system
//       Access: Published
//  Description: Changes the coordinate system in effect on this
//               particular gsg.  This is also called the "external"
//               coordinate system, since it is the coordinate system
//               used by the scene graph, external to to GSG.
//
//               Normally, this will be the default coordinate system,
//               but it might be set differently at runtime.  It will
//               automatically be copied from the current lens's
//               coordinate system as each DisplayRegion is rendered.
////////////////////////////////////////////////////////////////////
71
void GraphicsStateGuardian::set_coordinate_system(CoordinateSystem cs);

1046 21 get_coordinate_system 0 4 1308 44 GraphicsStateGuardian::get_coordinate_system 0 1 400 457
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system in effect on this
//               particular gsg.  Normally, this will be the default
//               coordinate system, but it might be set differently at
//               runtime.
////////////////////////////////////////////////////////////////////
81
inline CoordinateSystem GraphicsStateGuardian::get_coordinate_system(void) const;

1047 30 get_internal_coordinate_system 0 6 1308 53 GraphicsStateGuardian::get_internal_coordinate_system 0 1 401 756
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_internal_coordinate_system
//       Access: Published, Virtual
//  Description: Returns the coordinate system used internally by the
//               GSG.  This may be the same as the external coordinate
//               system reported by get_coordinate_system(), or it may
//               be something different.
//
//               In any case, vertices that have been transformed
//               before being handed to the GSG (that is, vertices
//               with a contents value of C_clip_point) will be
//               expected to be in this coordinate system.
////////////////////////////////////////////////////////////////////
91
virtual CoordinateSystem GraphicsStateGuardian::get_internal_coordinate_system(void) const;

1048 20 get_prepared_objects 0 6 1308 43 GraphicsStateGuardian::get_prepared_objects 0 1 402 411
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_prepared_objects
//       Access: Public, Virtual
//  Description: Returns the set of texture and geom objects that have
//               been prepared with this GSG (and possibly other GSG's
//               that share objects).
////////////////////////////////////////////////////////////////////
83
virtual PreparedGraphicsObjects *GraphicsStateGuardian::get_prepared_objects(void);

1049 9 set_gamma 0 6 1308 32 GraphicsStateGuardian::set_gamma 0 1 403 277
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_gamma
//       Access: Published, Virtual
//  Description: Set gamma.  Returns true on success.
////////////////////////////////////////////////////////////////////
59
virtual bool GraphicsStateGuardian::set_gamma(float gamma);

1050 9 get_gamma 0 4 1308 32 GraphicsStateGuardian::get_gamma 0 1 404 262
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_gamma
//       Access: Published
//  Description: Get the current gamma setting.
////////////////////////////////////////////////////////////////////
52
float GraphicsStateGuardian::get_gamma(float gamma);

1051 13 restore_gamma 0 6 1308 36 GraphicsStateGuardian::restore_gamma 0 1 405 276
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::restore_gamma
//       Access: Published, Virtual
//  Description: Restore original gamma setting.
////////////////////////////////////////////////////////////////////
56
virtual void GraphicsStateGuardian::restore_gamma(void);

1052 28 set_texture_quality_override 0 4 1308 51 GraphicsStateGuardian::set_texture_quality_override 0 1 406 749
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_texture_quality_override
//       Access: Published
//  Description: Specifies the global quality_level to be imposed for
//               all Textures rendered by this GSG.  This overrides
//               the value set on individual textures via
//               Texture::set_quality_level().  Set this to
//               Texture::QL_default in order to allow the individual
//               texture quality levels to be respected.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
////////////////////////////////////////////////////////////////////
101
inline void GraphicsStateGuardian::set_texture_quality_override(Texture::QualityLevel quality_level);

1053 28 get_texture_quality_override 0 4 1308 51 GraphicsStateGuardian::get_texture_quality_override 0 1 407 485
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_texture_quality_override
//       Access: Published
//  Description: Returns the global quality_level override specified
//               by set_texture_quality_override.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
////////////////////////////////////////////////////////////////////
93
inline Texture::QualityLevel GraphicsStateGuardian::get_texture_quality_override(void) const;

1054 21 get_prepared_textures 0 4 1308 44 GraphicsStateGuardian::get_prepared_textures 0 1 408 0
66
_object *GraphicsStateGuardian::get_prepared_textures(void) const;

1055 26 traverse_prepared_textures 0 4 1308 49 GraphicsStateGuardian::traverse_prepared_textures 0 0 390
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::traverse_prepared_textures
//       Access: Public
//  Description: Calls the indicated function on all
//               currently-prepared textures, or until the callback
//               function returns false.
////////////////////////////////////////////////////////////////////
129
void GraphicsStateGuardian::traverse_prepared_textures(bool (*func)(TextureContext *tc, void *callback_arg), void *callback_arg);

1056 17 set_flash_texture 0 4 1308 40 GraphicsStateGuardian::set_flash_texture 0 1 409 1337
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_flash_texture
//       Access: Published
//  Description: Sets the "flash texture".  This is a debug feature;
//               when enabled, the specified texture will begin
//               flashing in the scene, helping you to find it
//               visually.
//
//               The texture also flashes with a color code: blue for
//               mipmap level 0, yellow for mipmap level 1, and red
//               for mipmap level 2 or higher (even for textures that
//               don't have mipmaps).  This gives you an idea of the
//               choice of the texture size.  If it is blue, the
//               texture is being drawn the proper size or magnified;
//               if it is yellow, it is being minified a little bit;
//               and if it red, it is being minified considerably.  If
//               you see a red texture when you are right in front of
//               it, you should consider reducing the size of the
//               texture to avoid wasting texture memory.
//
//               Not all rendering backends support the flash_texture
//               feature.  Presently, it is only supported by OpenGL.
////////////////////////////////////////////////////////////////////
60
void GraphicsStateGuardian::set_flash_texture(Texture *tex);

1057 19 clear_flash_texture 0 4 1308 42 GraphicsStateGuardian::clear_flash_texture 0 1 410 344
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::clear_flash_texture
//       Access: Published
//  Description: Resets the "flash texture", so that no textures will
//               flash.  See set_flash_texture().
////////////////////////////////////////////////////////////////////
54
void GraphicsStateGuardian::clear_flash_texture(void);

1058 17 get_flash_texture 0 4 1308 40 GraphicsStateGuardian::get_flash_texture 0 1 411 344
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_flash_texture
//       Access: Published
//  Description: Returns the current "flash texture", if any, or NULL
//               if none.  See set_flash_texture().
////////////////////////////////////////////////////////////////////
62
Texture *GraphicsStateGuardian::get_flash_texture(void) const;

1059 17 get_driver_vendor 0 6 1308 40 GraphicsStateGuardian::get_driver_vendor 0 1 412 289
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_vendor
//       Access: Public, Virtual
//  Description: Returns the vendor of the video card driver
////////////////////////////////////////////////////////////////////
76
virtual basic_string< char > GraphicsStateGuardian::get_driver_vendor(void);

1060 19 get_driver_renderer 0 6 1308 42 GraphicsStateGuardian::get_driver_renderer 0 1 413 267
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_renderer
//       Access: Public, Virtual
//  Description: Returns GL_Renderer
////////////////////////////////////////////////////////////////////
78
virtual basic_string< char > GraphicsStateGuardian::get_driver_renderer(void);

1061 18 get_driver_version 0 6 1308 41 GraphicsStateGuardian::get_driver_version 0 1 414 470
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version
//       Access: Public, Virtual
//  Description: Returns driver version
//               This has an implementation-defined meaning, and may
//               be "" if the particular graphics implementation
//               does not provide a way to query this information.
////////////////////////////////////////////////////////////////////
77
virtual basic_string< char > GraphicsStateGuardian::get_driver_version(void);

1062 24 get_driver_version_major 0 6 1308 47 GraphicsStateGuardian::get_driver_version_major 0 1 415 496
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_major
//       Access: Public, Virtual
//  Description: Returns major version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
////////////////////////////////////////////////////////////////////
66
virtual int GraphicsStateGuardian::get_driver_version_major(void);

1063 24 get_driver_version_minor 0 6 1308 47 GraphicsStateGuardian::get_driver_version_minor 0 1 416 500
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
////////////////////////////////////////////////////////////////////
66
virtual int GraphicsStateGuardian::get_driver_version_minor(void);

1064 31 get_driver_shader_version_major 0 6 1308 54 GraphicsStateGuardian::get_driver_shader_version_major 0 1 417 306
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_major
//       Access: Public, Virtual
//  Description: Returns the major version of the shader model.
////////////////////////////////////////////////////////////////////
73
virtual int GraphicsStateGuardian::get_driver_shader_version_major(void);

1065 31 get_driver_shader_version_minor 0 6 1308 54 GraphicsStateGuardian::get_driver_shader_version_minor 0 1 418 306
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the shader model.
////////////////////////////////////////////////////////////////////
73
virtual int GraphicsStateGuardian::get_driver_shader_version_minor(void);

1066 9 set_scene 0 4 1308 32 GraphicsStateGuardian::set_scene 0 1 419 539
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_scene
//       Access: Published
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.  Returns true if the scene is
//               acceptable, false if something's wrong.  This should
//               be called in the draw thread only.
////////////////////////////////////////////////////////////////////
63
bool GraphicsStateGuardian::set_scene(SceneSetup *scene_setup);

1067 9 get_scene 0 6 1308 32 GraphicsStateGuardian::get_scene 0 1 420 279
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_scene
//       Access: Published, Virtual
//  Description: Returns the current SceneSetup object.
////////////////////////////////////////////////////////////////////
65
virtual SceneSetup *GraphicsStateGuardian::get_scene(void) const;

1068 11 begin_scene 0 6 1308 34 GraphicsStateGuardian::begin_scene 0 1 421 933
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::begin_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the beginning of drawing commands for a "scene"
//               (usually a particular DisplayRegion) within a frame.
//               All 3-D drawing commands, except the clear operation,
//               must be enclosed within begin_scene() .. end_scene().
//               This must be called in the draw thread.
//
//               The return value is true if successful (in which case
//               the scene will be drawn and end_scene() will be
//               called later), or false if unsuccessful (in which
//               case nothing will be drawn and end_scene() will not
//               be called).
////////////////////////////////////////////////////////////////////
54
virtual bool GraphicsStateGuardian::begin_scene(void);

1069 9 end_scene 0 6 1308 32 GraphicsStateGuardian::end_scene 0 1 422 565
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::end_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the end of drawing commands for a "scene" (usually a
//               particular DisplayRegion) within a frame.  All 3-D
//               drawing commands, except the clear operation, must be
//               enclosed within begin_scene() .. end_scene().
////////////////////////////////////////////////////////////////////
52
virtual void GraphicsStateGuardian::end_scene(void);

1070 14 get_class_type 0 4 1308 37 GraphicsStateGuardian::get_class_type 0 1 423 0
62
static TypeHandle GraphicsStateGuardian::get_class_type(void);

1071 28 upcast_to_GraphicsOutputBase 0 12 1311 44 GraphicsOutput::upcast_to_GraphicsOutputBase 0 1 519 48
upcast from GraphicsOutput to GraphicsOutputBase
71
GraphicsOutputBase *GraphicsOutput::upcast_to_GraphicsOutputBase(void);

1072 26 downcast_to_GraphicsOutput 0 12 1312 46 GraphicsOutputBase::downcast_to_GraphicsOutput 0 1 520 50
downcast from GraphicsOutputBase to GraphicsOutput
69
GraphicsOutput *GraphicsOutputBase::downcast_to_GraphicsOutput(void);

1073 24 upcast_to_DrawableRegion 0 12 1311 40 GraphicsOutput::upcast_to_DrawableRegion 0 1 521 44
upcast from GraphicsOutput to DrawableRegion
63
DrawableRegion *GraphicsOutput::upcast_to_DrawableRegion(void);

1074 26 downcast_to_GraphicsOutput 0 12 1296 42 DrawableRegion::downcast_to_GraphicsOutput 0 1 522 46
downcast from DrawableRegion to GraphicsOutput
65
GraphicsOutput *DrawableRegion::downcast_to_GraphicsOutput(void);

1075 15 ~GraphicsOutput 0 6 1311 31 GraphicsOutput::~GraphicsOutput 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
46
virtual GraphicsOutput::~GraphicsOutput(void);

1076 7 get_gsg 0 4 1311 23 GraphicsOutput::get_gsg 0 1 424 606
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_gsg
//       Access: Published
//  Description: Returns the GSG that is associated with this window.
//               There is a one-to-one association between windows and
//               GSG's.
//
//               This may return NULL if the graphics context has not
//               yet been created for the window, e.g. before the
//               first frame has rendered; or after the window has
//               been closed.
////////////////////////////////////////////////////////////////////
66
inline GraphicsStateGuardian *GraphicsOutput::get_gsg(void) const;

1077 8 get_pipe 0 4 1311 24 GraphicsOutput::get_pipe 0 1 425 586
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this window is
//               associated with.  It is possible that the
//               GraphicsPipe might have been deleted while an
//               outstanding PT(GraphicsOutput) prevented all of its
//               children windows from also being deleted; in this
//               unlikely case, get_pipe() may return NULL.
////////////////////////////////////////////////////////////////////
58
inline GraphicsPipe *GraphicsOutput::get_pipe(void) const;

1078 10 get_engine 0 4 1311 26 GraphicsOutput::get_engine 0 1 426 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this output.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
////////////////////////////////////////////////////////////////////
62
inline GraphicsEngine *GraphicsOutput::get_engine(void) const;

1079 8 get_name 0 4 1311 24 GraphicsOutput::get_name 0 1 427 308
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_name
//       Access: Published
//  Description: Returns the name that was passed to the
//               GraphicsOutput constructor.
////////////////////////////////////////////////////////////////////
72
inline basic_string< char > const &GraphicsOutput::get_name(void) const;

1080 14 count_textures 0 4 1311 30 GraphicsOutput::count_textures 0 1 428 539
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::count_textures
//       Access: Published
//  Description: If the GraphicsOutput is set to render into a
//               texture, returns the number of textures that are
//               being rendered into.  Normally, the textures would
//               be associated with different buffers - a color
//               texture, a depth texture, and a stencil texture.
////////////////////////////////////////////////////////////////////
54
inline int GraphicsOutput::count_textures(void) const;

1081 11 has_texture 0 4 1311 27 GraphicsOutput::has_texture 0 1 429 318
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_texture
//       Access: Published
//  Description: Returns true if the GraphicsOutput is rendering 
//               into any textures at all.
////////////////////////////////////////////////////////////////////
52
inline bool GraphicsOutput::has_texture(void) const;

1082 11 get_texture 0 6 1311 27 GraphicsOutput::get_texture 0 2 430 431 725
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
////////////////////////////////////////////////////////////////////
71
virtual inline Texture *GraphicsOutput::get_texture(int i = (0)) const;

1083 17 get_texture_plane 0 4 1311 33 GraphicsOutput::get_texture_plane 0 2 432 433 377
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
////////////////////////////////////////////////////////////////////
95
inline DrawableRegion::RenderTexturePlane GraphicsOutput::get_texture_plane(int i = (0)) const;

1084 12 get_rtm_mode 0 4 1311 28 GraphicsOutput::get_rtm_mode 0 2 434 435 378
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
////////////////////////////////////////////////////////////////////
89
inline GraphicsOutput::RenderTextureMode GraphicsOutput::get_rtm_mode(int i = (0)) const;

1085 21 clear_render_textures 0 4 1311 37 GraphicsOutput::clear_render_textures 0 1 436 387
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_render_textures
//       Access: Published
//  Description: If the GraphicsOutput is currently rendering to
//               a texture, then all textures are dissociated from
//               the GraphicsOuput.
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::clear_render_textures(void);

1086 18 add_render_texture 0 4 1311 34 GraphicsOutput::add_render_texture 0 2 437 438 1875
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
////////////////////////////////////////////////////////////////////
146
void GraphicsOutput::add_render_texture(Texture *tex, GraphicsOutput::RenderTextureMode mode, DrawableRegion::RenderTexturePlane bitplane = (16));

1087 20 setup_render_texture 0 4 1311 36 GraphicsOutput::setup_render_texture 0 1 439 494
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::setup_render_texture
//       Access: Published
//  Description: This is a deprecated interface that made sense back
//               when GraphicsOutputs could only render into one
//               texture at a time.  From now on, use
//               clear_render_textures and add_render_texture
//               instead.
////////////////////////////////////////////////////////////////////
86
void GraphicsOutput::setup_render_texture(Texture *tex, bool allow_bind, bool to_ram);

1088 8 get_size 0 4 1311 24 GraphicsOutput::get_size 0 1 440 743
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_size
//       Access: Published
//  Description: Returns the visible size of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
62
inline LVecBase2i const &GraphicsOutput::get_size(void) const;

1089 10 get_x_size 0 4 1311 26 GraphicsOutput::get_x_size 0 1 441 746
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_x_size
//       Access: Published
//  Description: Returns the visible width of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
50
inline int GraphicsOutput::get_x_size(void) const;

1090 10 get_y_size 0 4 1311 26 GraphicsOutput::get_y_size 0 1 442 747
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_y_size
//       Access: Published
//  Description: Returns the visible height of the window or buffer,
//               if it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
50
inline int GraphicsOutput::get_y_size(void) const;

1091 13 get_fb_x_size 0 4 1311 29 GraphicsOutput::get_fb_x_size 0 1 443 440
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_x_size
//       Access: Published
//  Description: Returns the internal width of the window or buffer.
//               This is almost always the same as get_x_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
////////////////////////////////////////////////////////////////////
53
inline int GraphicsOutput::get_fb_x_size(void) const;

1092 13 get_fb_y_size 0 4 1311 29 GraphicsOutput::get_fb_y_size 0 1 444 441
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_y_size
//       Access: Published
//  Description: Returns the internal height of the window or buffer.
//               This is almost always the same as get_y_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
////////////////////////////////////////////////////////////////////
53
inline int GraphicsOutput::get_fb_y_size(void) const;

1093 19 get_sbs_left_x_size 0 4 1311 35 GraphicsOutput::get_sbs_left_x_size 0 1 445 522
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the left eye, based on scaling
//               get_x_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
////////////////////////////////////////////////////////////////////
59
inline int GraphicsOutput::get_sbs_left_x_size(void) const;

1094 19 get_sbs_left_y_size 0 4 1311 35 GraphicsOutput::get_sbs_left_y_size 0 1 446 523
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the left eye, based on scaling
//               get_y_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
////////////////////////////////////////////////////////////////////
59
inline int GraphicsOutput::get_sbs_left_y_size(void) const;

1095 20 get_sbs_right_x_size 0 4 1311 36 GraphicsOutput::get_sbs_right_x_size 0 1 447 525
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the right eye, based on scaling
//               get_x_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
////////////////////////////////////////////////////////////////////
60
inline int GraphicsOutput::get_sbs_right_x_size(void) const;

1096 20 get_sbs_right_y_size 0 4 1311 36 GraphicsOutput::get_sbs_right_y_size 0 1 448 526
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the right eye, based on scaling
//               get_y_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
////////////////////////////////////////////////////////////////////
60
inline int GraphicsOutput::get_sbs_right_y_size(void) const;

1097 8 has_size 0 4 1311 24 GraphicsOutput::has_size 0 1 449 530
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_size
//       Access: Published
//  Description: Returns true if the size of the window/frame buffer
//               is known, false otherwise.  In certain cases the size
//               may not be known until after the object has been
//               fully created.  Also, certain objects (like windows)
//               may change size spontaneously.
////////////////////////////////////////////////////////////////////
49
inline bool GraphicsOutput::has_size(void) const;

1098 8 is_valid 0 4 1311 24 GraphicsOutput::is_valid 0 1 450 326
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_valid
//       Access: Published
//  Description: Returns true if the output is fully created and ready
//               for rendering, false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool GraphicsOutput::is_valid(void) const;

1099 15 is_nonzero_size 0 4 1311 31 GraphicsOutput::is_nonzero_size 0 1 451 375
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_nonzero_size
//       Access: Published
//  Description: Returns true if the output has a nonzero size in both
//               X and Y, or false if it is zero (and therefore
//               invalid).
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsOutput::is_nonzero_size(void) const;

1100 10 set_active 0 4 1311 26 GraphicsOutput::set_active 0 1 452 380
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsOutput.  If the GraphicsOutput is marked
//               inactive, nothing is rendered.
////////////////////////////////////////////////////////////////////
45
void GraphicsOutput::set_active(bool active);

1101 9 is_active 0 6 1311 25 GraphicsOutput::is_active 0 1 453 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_active
//       Access: Published, Virtual
//  Description: Returns true if the window is ready to be rendered
//               into, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool GraphicsOutput::is_active(void) const;

1102 12 set_one_shot 0 4 1311 28 GraphicsOutput::set_one_shot 0 1 454 1275
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_one_shot
//       Access: Published
//  Description: Changes the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will render the
//               current frame and then automatically set itself
//               inactive.  This is particularly useful for buffers
//               that are created for the purposes of
//               render-to-texture, for static textures that don't
//               need to be continually re-rendered once they have
//               been rendered the first time.
//
//               Setting the buffer inactive is not the same thing as
//               destroying it.  You are still responsible for passing
//               this buffer to GraphicsEngine::remove_window() when
//               you no longer need the texture, in order to clean up
//               fully.  (However, you should not call remove_window()
//               on this buffer while the texture is still needed,
//               because depending on the render-to-texture mechanism
//               in use, this may invalidate the texture contents.)
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::set_one_shot(bool one_shot);

1103 12 get_one_shot 0 4 1311 28 GraphicsOutput::get_one_shot 0 1 455 427
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_one_shot
//       Access: Published
//  Description: Returns the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will
//               automatically set itself inactive after the next
//               frame.
////////////////////////////////////////////////////////////////////
46
bool GraphicsOutput::get_one_shot(void) const;

1104 12 set_inverted 0 4 1311 28 GraphicsOutput::set_inverted 0 1 456 947
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//
//               This is primarily intended to support DirectX (and a
//               few buggy OpenGL graphics drivers) that perform a
//               framebuffer-to-texture copy upside-down from the
//               usual OpenGL (and Panda) convention.  Panda will
//               automatically set this flag for offscreen buffers on
//               hardware that is known to do this, to compensate when
//               rendering offscreen into a texture.
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::set_inverted(bool inverted);

1105 12 get_inverted 0 4 1311 28 GraphicsOutput::get_inverted 0 1 457 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.  See set_inverted().
////////////////////////////////////////////////////////////////////
53
inline bool GraphicsOutput::get_inverted(void) const;

1106 13 set_swap_eyes 0 4 1311 29 GraphicsOutput::set_swap_eyes 0 1 458 688
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_swap_eyes
//       Access: Public
//  Description: Changes the "swap eyes" flag.  This flag is normally
//               false.  When it is true, the left and right channels
//               of a stereo DisplayRegion are sent to the opposite
//               channels in the rendering backend.  This is meant to
//               work around hardware that inadvertently swaps the
//               output channels, or hardware for which it cannot be
//               determined which channel is which until runtime.
////////////////////////////////////////////////////////////////////
58
inline void GraphicsOutput::set_swap_eyes(bool swap_eyes);

1107 13 get_swap_eyes 0 4 1311 29 GraphicsOutput::get_swap_eyes 0 1 459 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_swap_eyes
//       Access: Public
//  Description: Returns the current setting of the "swap eyes" flag.
//               See set_swap_eyes().
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsOutput::get_swap_eyes(void) const;

1108 19 set_red_blue_stereo 0 4 1311 35 GraphicsOutput::set_red_blue_stereo 0 1 460 959
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_red_blue_stereo
//       Access: Published
//  Description: Enables red-blue stereo mode on this particular
//               window.  When red-blue stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render in the red (or specified) channel only, while
//               DisplayRegions that have the "right" channel set will
//               render in the blue (or specified) channel only.
//
//               The remaining two parameters specify the particular
//               color channel(s) to associate with each eye.  Use the
//               bits defined in ColorWriteAttrib::Channels.
//
//               This can be used to achieve a cheesy stereo mode in
//               the absence of hardware-supported stereo.
////////////////////////////////////////////////////////////////////
139
inline void GraphicsOutput::set_red_blue_stereo(bool red_blue_stereo, unsigned int left_eye_color_mask, unsigned int right_eye_color_mask);

1109 19 get_red_blue_stereo 0 4 1311 35 GraphicsOutput::get_red_blue_stereo 0 1 461 357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_red_blue_stereo
//       Access: Published
//  Description: Returns whether red-blue stereo mode is in effect for
//               this particular window.  See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
60
inline bool GraphicsOutput::get_red_blue_stereo(void) const;

1110 23 get_left_eye_color_mask 0 4 1311 39 GraphicsOutput::get_left_eye_color_mask 0 1 462 470
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_left_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               left-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
72
inline unsigned int GraphicsOutput::get_left_eye_color_mask(void) const;

1111 24 get_right_eye_color_mask 0 4 1311 40 GraphicsOutput::get_right_eye_color_mask 0 1 463 472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_right_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               right-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
73
inline unsigned int GraphicsOutput::get_right_eye_color_mask(void) const;

1112 23 set_side_by_side_stereo 0 4 1311 39 GraphicsOutput::set_side_by_side_stereo 0 2 464 465 2016
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
////////////////////////////////////////////////////////////////////
222
void GraphicsOutput::set_side_by_side_stereo(bool side_by_side_stereo);
void GraphicsOutput::set_side_by_side_stereo(bool side_by_side_stereo, LVecBase4f const &sbs_left_dimensions, LVecBase4f const &sbs_right_dimensions);

1113 23 get_side_by_side_stereo 0 4 1311 39 GraphicsOutput::get_side_by_side_stereo 0 1 466 369
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_side_by_side_stereo
//       Access: Published
//  Description: Returns whether side-by-side stereo mode is in effect for
//               this particular window.  See set_side_by_side_stereo().
////////////////////////////////////////////////////////////////////
64
inline bool GraphicsOutput::get_side_by_side_stereo(void) const;

1114 23 get_sbs_left_dimensions 0 4 1311 39 GraphicsOutput::get_sbs_left_dimensions 0 1 467 458
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the left channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
////////////////////////////////////////////////////////////////////
77
inline LVecBase4f const &GraphicsOutput::get_sbs_left_dimensions(void) const;

1115 24 get_sbs_right_dimensions 0 4 1311 40 GraphicsOutput::get_sbs_right_dimensions 0 1 468 460
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the right channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
////////////////////////////////////////////////////////////////////
78
inline LVecBase4f const &GraphicsOutput::get_sbs_right_dimensions(void) const;

1116 17 get_fb_properties 0 4 1311 33 GraphicsOutput::get_fb_properties 0 1 469 282
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_properties
//       Access: Published
//  Description: Returns the framebuffer properties of the window.
////////////////////////////////////////////////////////////////////
82
inline FrameBufferProperties const &GraphicsOutput::get_fb_properties(void) const;

1117 9 is_stereo 0 4 1311 25 GraphicsOutput::is_stereo 0 1 470 447
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_stereo
//       Access: Published
//  Description: Returns Returns true if this window can render stereo
//               DisplayRegions, either through red-blue stereo (see
//               set_red_blue_stereo()) or through true hardware
//               stereo rendering.
////////////////////////////////////////////////////////////////////
50
inline bool GraphicsOutput::is_stereo(void) const;

1118 17 clear_delete_flag 0 4 1311 33 GraphicsOutput::clear_delete_flag 0 1 471 386
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_delete_flag
//       Access: Published
//  Description: Resets the delete flag, so the GraphicsOutput will
//               not be automatically deleted before the beginning of
//               the next frame.
////////////////////////////////////////////////////////////////////
52
inline void GraphicsOutput::clear_delete_flag(void);

1119 15 get_delete_flag 0 4 1311 31 GraphicsOutput::get_delete_flag 0 1 472 460
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_delete_flag
//       Access: Published
//  Description: Returns the current setting of the delete flag.  When
//               this is true, the GraphicsOutput will automatically
//               be removed before the beginning of the next frame by
//               the GraphicsEngine.
////////////////////////////////////////////////////////////////////
49
bool GraphicsOutput::get_delete_flag(void) const;

1120 8 set_sort 0 6 1311 24 GraphicsOutput::set_sort 0 1 473 345
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_sort
//       Access: Published, Virtual
//  Description: Adjusts the sorting order of this particular
//               GraphicsOutput, relative to other GraphicsOutputs.
////////////////////////////////////////////////////////////////////
48
virtual void GraphicsOutput::set_sort(int sort);

1121 8 get_sort 0 4 1311 24 GraphicsOutput::get_sort 0 1 474 432
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sort
//       Access: Published
//  Description: Returns the sorting order of this particular
//               GraphicsOutput.  The various GraphicsOutputs within a
//               particular thread will be rendered in the indicated
//               order.
////////////////////////////////////////////////////////////////////
48
inline int GraphicsOutput::get_sort(void) const;

1122 14 set_child_sort 0 4 1311 30 GraphicsOutput::set_child_sort 0 1 475 1026
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_child_sort
//       Access: Published
//  Description: Specifies the sort value of future offscreen buffers
//               created by make_texture_sort().
//
//               The purpose of this method is to allow the user to
//               limit the sort value chosen for a buffer created via
//               make_texture_buffer().  Normally, this buffer will be
//               assigned a value of get_sort() - 1, so that it
//               will be rendered before this window is rendered; but
//               sometimes this isn't sufficiently early, especially
//               if other buffers also have a view into the same
//               scene.
//
//               If you specify a value here, then new buffers created
//               via make_texture_buffer() will be given that sort
//               value instead of get_sort() - 1.
////////////////////////////////////////////////////////////////////
59
inline void GraphicsOutput::set_child_sort(int child_sort);

1123 16 clear_child_sort 0 4 1311 32 GraphicsOutput::clear_child_sort 0 1 476 390
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_child_sort
//       Access: Published
//  Description: Resets the sort value of future offscreen buffers
//               created by make_texture_sort() to the default value.
//               See set_child_sort().
////////////////////////////////////////////////////////////////////
51
inline void GraphicsOutput::clear_child_sort(void);

1124 14 get_child_sort 0 4 1311 30 GraphicsOutput::get_child_sort 0 1 477 351
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_child_sort
//       Access: Published
//  Description: Returns the sort value of future offscreen buffers
//               created by make_texture_sort(). See set_child_sort().
////////////////////////////////////////////////////////////////////
54
inline int GraphicsOutput::get_child_sort(void) const;

1125 12 trigger_copy 0 4 1311 28 GraphicsOutput::trigger_copy 0 1 478 376
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::trigger_copy
//       Access: Published
//  Description: When the GraphicsOutput is in triggered copy mode,
//               this function triggers the copy (at the end of the
//               next frame).
////////////////////////////////////////////////////////////////////
47
inline void GraphicsOutput::trigger_copy(void);

1126 19 make_display_region 0 4 1311 35 GraphicsOutput::make_display_region 0 3 479 480 481 2126
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////
241
inline DisplayRegion *GraphicsOutput::make_display_region(void);
inline DisplayRegion *GraphicsOutput::make_display_region(float l, float r, float b, float t);
DisplayRegion *GraphicsOutput::make_display_region(LVecBase4f const &dimensions);

1127 24 make_mono_display_region 0 4 1311 40 GraphicsOutput::make_mono_display_region 0 3 482 483 484 2283
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
////////////////////////////////////////////////////////////////////
256
inline DisplayRegion *GraphicsOutput::make_mono_display_region(void);
inline DisplayRegion *GraphicsOutput::make_mono_display_region(float l, float r, float b, float t);
DisplayRegion *GraphicsOutput::make_mono_display_region(LVecBase4f const &dimensions);

1128 26 make_stereo_display_region 0 4 1311 42 GraphicsOutput::make_stereo_display_region 0 3 485 486 487 1371
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////
280
inline StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(void);
inline StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(float l, float r, float b, float t);
StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(LVecBase4f const &dimensions);

1129 21 remove_display_region 0 4 1311 37 GraphicsOutput::remove_display_region 0 1 488 492
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_display_region
//       Access: Published
//  Description: Removes the indicated DisplayRegion from the window,
//               and destructs it if there are no other references.
//
//               Returns true if the DisplayRegion is found and
//               removed, false if it was not a part of the window.
////////////////////////////////////////////////////////////////////
74
bool GraphicsOutput::remove_display_region(DisplayRegion *display_region);

1130 26 remove_all_display_regions 0 4 1311 42 GraphicsOutput::remove_all_display_regions 0 1 489 359
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_all_display_regions
//       Access: Published
//  Description: Removes all display regions from the window, except
//               the default one that is created with the window.
////////////////////////////////////////////////////////////////////
54
void GraphicsOutput::remove_all_display_regions(void);

1131 26 get_overlay_display_region 0 4 1311 42 GraphicsOutput::get_overlay_display_region 0 1 490 951
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_overlay_display_region
//       Access: Published
//  Description: Returns the special "overlay" DisplayRegion that is
//               created for each window or buffer.  This
//               DisplayRegion covers the entire window, but cannot be
//               used for rendering.  It is a placeholder only, to
//               indicate the dimensions of the window, and is usually
//               used internally for purposes such as clearing the
//               window, or grabbing a screenshot of the window.
//
//               There are very few applications that require access
//               to this DisplayRegion.  Normally, you should create
//               your own DisplayRegion that covers the window, if you
//               want to render to the window.
////////////////////////////////////////////////////////////////////
77
inline DisplayRegion *GraphicsOutput::get_overlay_display_region(void) const;

1132 26 set_overlay_display_region 0 4 1311 42 GraphicsOutput::set_overlay_display_region 0 1 491 1132
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_overlay_display_region
//       Access: Published
//  Description: Replaces the special "overlay" DisplayRegion that is
//               created for each window or buffer.  See
//               get_overlay_display_region().  This must be a new
//               DisplayRegion that has already been created for this
//               window, for instance via a call to
//               make_mono_display_region().  You are responsible for
//               ensuring that the new DisplayRegion covers the entire
//               window.  The previous overlay display region is not
//               automatically removed; you must explicitly call
//               remove_display_region() on it after replacing it with
//               this method, if you wish it to be removed.
//
//               Normally, there is no reason to change the overlay
//               DisplayRegion, so this method should be used only
//               in very unusual circumstances.
////////////////////////////////////////////////////////////////////
79
void GraphicsOutput::set_overlay_display_region(DisplayRegion *display_region);

1133 23 get_num_display_regions 0 4 1311 39 GraphicsOutput::get_num_display_regions 0 1 492 355
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_display_regions
//       Access: Published
//  Description: Returns the number of DisplayRegions that have
//               been created within the window, active or otherwise.
////////////////////////////////////////////////////////////////////
56
int GraphicsOutput::get_num_display_regions(void) const;

1134 18 get_display_region 0 4 1311 34 GraphicsOutput::get_display_region 0 1 493 542
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_display_region
//       Access: Published
//  Description: Returns the nth DisplayRegion of those that have been
//               created within the window.  This may return NULL if n
//               is out of bounds; particularly likely if the number
//               of display regions has changed since the last call to
//               get_num_display_regions().
////////////////////////////////////////////////////////////////////
75
PointerTo< DisplayRegion > GraphicsOutput::get_display_region(int n) const;

1135 30 get_num_active_display_regions 0 4 1311 46 GraphicsOutput::get_num_active_display_regions 0 1 494 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_active_display_regions
//       Access: Published
//  Description: Returns the number of active DisplayRegions that have
//               been created within the window.
////////////////////////////////////////////////////////////////////
63
int GraphicsOutput::get_num_active_display_regions(void) const;

1136 25 get_active_display_region 0 4 1311 41 GraphicsOutput::get_active_display_region 0 1 495 563
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_active_display_region
//       Access: Published
//  Description: Returns the nth active DisplayRegion of those that
//               have been created within the window.  This may return
//               NULL if n is out of bounds; particularly likely if
//               the number of display regions has changed since the
//               last call to get_num_active_display_regions().
////////////////////////////////////////////////////////////////////
82
PointerTo< DisplayRegion > GraphicsOutput::get_active_display_region(int n) const;

1137 19 make_texture_buffer 0 4 1311 35 GraphicsOutput::make_texture_buffer 0 4 496 497 498 499 1790
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
////////////////////////////////////////////////////////////////////
203
GraphicsOutput *GraphicsOutput::make_texture_buffer(basic_string< char > const &name, int x_size, int y_size, Texture *tex = ((void *)(0)), bool to_ram = (0), FrameBufferProperties *fbp = ((void *)(0)));

1138 13 make_cube_map 0 4 1311 29 GraphicsOutput::make_cube_map 0 4 500 501 502 503 1206
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
////////////////////////////////////////////////////////////////////
244
GraphicsOutput *GraphicsOutput::make_cube_map(basic_string< char > const &name, int size, NodePath &camera_rig, BitMask< unsigned int, 32 > camera_mask = ((get_all_camera_mask())), bool to_ram = (0), FrameBufferProperties *fbp = ((void *)(0)));

1139 24 make_screenshot_filename 0 4 1311 40 GraphicsOutput::make_screenshot_filename 0 2 504 505 806
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
////////////////////////////////////////////////////////////////////
117
static inline Filename GraphicsOutput::make_screenshot_filename(basic_string< char > const &prefix = ("screenshot"));

1140 23 save_screenshot_default 0 4 1311 39 GraphicsOutput::save_screenshot_default 0 2 506 507 471
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
////////////////////////////////////////////////////////////////////
109
inline Filename GraphicsOutput::save_screenshot_default(basic_string< char > const &prefix = ("screenshot"));

1141 15 save_screenshot 0 4 1311 31 GraphicsOutput::save_screenshot 0 2 508 509 600
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
120
inline bool GraphicsOutput::save_screenshot(Filename const &filename, basic_string< char > const &image_comment = (""));

1142 14 get_screenshot 0 4 1311 30 GraphicsOutput::get_screenshot 0 2 510 511 774
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as Texture, or NULL on
//               failure.
////////////////////////////////////////////////////////////////////
126
inline bool GraphicsOutput::get_screenshot(PNMImage &image);
inline PointerTo< Texture > GraphicsOutput::get_screenshot(void);

1143 16 get_texture_card 0 4 1311 32 GraphicsOutput::get_texture_card 0 1 512 959
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_card
//       Access: Published
//  Description: Returns a PandaNode containing a square polygon.
//               The dimensions are (-1,0,-1) to (1,0,1). The texture
//               coordinates are such that the texture of this
//               GraphicsOutput is aligned properly to the polygon.
//               The GraphicsOutput promises to surgically update
//               the Geom inside the PandaNode if necessary to maintain
//               this invariant.
//
//               Each invocation of this function returns a freshly-
//               allocated PandaNode.  You can therefore safely modify
//               the RenderAttribs of the PandaNode.  The
//               PandaNode is initially textured with the texture
//               of this GraphicOutput.
////////////////////////////////////////////////////////////////////
48
NodePath GraphicsOutput::get_texture_card(void);

1144 18 share_depth_buffer 0 6 1311 34 GraphicsOutput::share_depth_buffer 0 1 513 386
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::share_depth_buffer
//       Access: Published, Virtual
//  Description: Will attempt to use the depth buffer of the input
//               graphics_output. The buffer sizes must be exactly
//               the same.
////////////////////////////////////////////////////////////////////
81
virtual bool GraphicsOutput::share_depth_buffer(GraphicsOutput *graphics_output);

1145 20 unshare_depth_buffer 0 6 1311 36 GraphicsOutput::unshare_depth_buffer 0 1 514 282
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::unshare_depth_buffer
//       Access: Published, Virtual
//  Description: Discontinue sharing the depth buffer.
////////////////////////////////////////////////////////////////////
56
virtual void GraphicsOutput::unshare_depth_buffer(void);

1146 27 get_supports_render_texture 0 6 1311 43 GraphicsOutput::get_supports_render_texture 0 1 515 477
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_supports_render_texture
//       Access: Published, Virtual
//  Description: Returns true if this particular GraphicsOutput can
//               render directly into a texture, or false if it must
//               always copy-to-texture at the end of each frame to
//               achieve this effect.
////////////////////////////////////////////////////////////////////
69
virtual bool GraphicsOutput::get_supports_render_texture(void) const;

1147 10 flip_ready 0 6 1311 26 GraphicsOutput::flip_ready 0 1 516 497
// These are not intended to be called directly by the user, but
// they're published anyway since they might occasionally be useful
// for low-level debugging.

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::flip_ready
//       Access: Published, Virtual
//  Description: Returns true if a frame has been rendered and needs
//               to be flipped, false otherwise.
////////////////////////////////////////////////////////////////////
52
virtual bool GraphicsOutput::flip_ready(void) const;

1148 8 get_host 0 6 1311 24 GraphicsOutput::get_host 0 1 517 502
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_host
//       Access: Published, Virtual
//  Description: This is normally called only from within
//               make_texture_buffer().  When called on a
//               ParasiteBuffer, it returns the host of that buffer;
//               but when called on some other buffer, it returns the
//               buffer itself.
////////////////////////////////////////////////////////////////////
55
virtual GraphicsOutput *GraphicsOutput::get_host(void);

1149 14 get_class_type 0 4 1311 30 GraphicsOutput::get_class_type 0 1 518 0
55
static TypeHandle GraphicsOutput::get_class_type(void);

1150 26 ~GraphicsWindowInputDevice 0 4 1315 53 GraphicsWindowInputDevice::~GraphicsWindowInputDevice 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
GraphicsWindowInputDevice::~GraphicsWindowInputDevice(void);

1151 11 button_down 0 4 1315 38 GraphicsWindowInputDevice::button_down 0 2 523 524 406
// The following interface is for the various kinds of
// GraphicsWindows to record the data incoming on the device.

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
////////////////////////////////////////////////////////////////////
125
void GraphicsWindowInputDevice::button_down(ButtonHandle button, double time = ((((get_global_clock())->get_frame_time)())));

1152 18 button_resume_down 0 4 1315 45 GraphicsWindowInputDevice::button_resume_down 0 2 525 526 465
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_resume_down
//       Access: Public
//  Description: Records that the indicated button was depressed
//               earlier, and we only just detected the event after
//               the fact.  This is mainly useful for tracking the
//               state of modifier keys.
////////////////////////////////////////////////////////////////////
132
void GraphicsWindowInputDevice::button_resume_down(ButtonHandle button, double time = ((((get_global_clock())->get_frame_time)())));

1153 9 button_up 0 4 1315 36 GraphicsWindowInputDevice::button_up 0 2 527 528 285
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
////////////////////////////////////////////////////////////////////
123
void GraphicsWindowInputDevice::button_up(ButtonHandle button, double time = ((((get_global_clock())->get_frame_time)())));

1154 9 keystroke 0 4 1315 36 GraphicsWindowInputDevice::keystroke 0 2 529 530 306
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::keystroke
//       Access: Public
//  Description: Records that the indicated keystroke has been
//               generated.
////////////////////////////////////////////////////////////////////
115
void GraphicsWindowInputDevice::keystroke(int keycode, double time = ((((get_global_clock())->get_frame_time)())));

1155 9 candidate 0 4 1315 36 GraphicsWindowInputDevice::candidate 0 1 531 463
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::candidate
//       Access: Public
//  Description: Records that the indicated candidate string has been
//               highlighted.  This is used to implement IME support
//               for typing in international languages, especially
//               Chinese/Japanese/Korean.
////////////////////////////////////////////////////////////////////
174
void GraphicsWindowInputDevice::candidate(basic_string< wchar_t > const &candidate_string, unsigned int highlight_start, unsigned int highlight_end, unsigned int cursor_pos);

1156 10 focus_lost 0 4 1315 37 GraphicsWindowInputDevice::focus_lost 0 2 532 533 668
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::focus_lost
//       Access: Public
//  Description: This should be called when the window focus is lost,
//               so that we may miss upcoming button events
//               (especially "up" events) for the next period of time.
//               It generates keyboard and mouse "up" events for those
//               buttons that we previously sent unpaired "down"
//               events, so that the Panda application will believe
//               all buttons are now released.
////////////////////////////////////////////////////////////////////
103
void GraphicsWindowInputDevice::focus_lost(double time = ((((get_global_clock())->get_frame_time)())));

1157 15 raw_button_down 0 4 1315 42 GraphicsWindowInputDevice::raw_button_down 0 2 534 535 292
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
////////////////////////////////////////////////////////////////////
129
void GraphicsWindowInputDevice::raw_button_down(ButtonHandle button, double time = ((((get_global_clock())->get_frame_time)())));

1158 13 raw_button_up 0 4 1315 40 GraphicsWindowInputDevice::raw_button_up 0 2 536 537 289
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
////////////////////////////////////////////////////////////////////
127
void GraphicsWindowInputDevice::raw_button_up(ButtonHandle button, double time = ((((get_global_clock())->get_frame_time)())));

1159 21 set_pointer_in_window 0 4 1315 48 GraphicsWindowInputDevice::set_pointer_in_window 0 2 538 539 413
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_in_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is within the window, at
//               the given pixel coordinates.
////////////////////////////////////////////////////////////////////
141
inline void GraphicsWindowInputDevice::set_pointer_in_window(double x, double y, double time = ((((get_global_clock())->get_frame_time)())));

1160 25 set_pointer_out_of_window 0 4 1315 52 GraphicsWindowInputDevice::set_pointer_out_of_window 0 2 540 541 395
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_out_of_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is no longer within the
//               window.
////////////////////////////////////////////////////////////////////
125
inline void GraphicsWindowInputDevice::set_pointer_out_of_window(double time = ((((get_global_clock())->get_frame_time)())));

1161 11 set_pointer 0 4 1315 38 GraphicsWindowInputDevice::set_pointer 0 1 542 281
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer
//       Access: Public
//  Description: Records that a mouse movement has taken place.
////////////////////////////////////////////////////////////////////
89
void GraphicsWindowInputDevice::set_pointer(bool inwin, double x, double y, double time);

1162 5 get_x 0 4 1316 16 TouchInfo::get_x 0 1 543 0
27
int TouchInfo::get_x(void);

1163 5 get_y 0 4 1316 16 TouchInfo::get_y 0 1 544 0
27
int TouchInfo::get_y(void);

1164 6 get_id 0 4 1316 17 TouchInfo::get_id 0 1 545 0
28
int TouchInfo::get_id(void);

1165 9 get_flags 0 4 1316 20 TouchInfo::get_flags 0 1 546 0
31
int TouchInfo::get_flags(void);

1166 10 ~TouchInfo 0 4 1316 21 TouchInfo::~TouchInfo 0 0 0
28
TouchInfo::~TouchInfo(void);

1167 8 get_hwnd 0 4 1318 40 GraphicsWindowProcCallbackData::get_hwnd 0 1 547 280
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_hwnd
//       Access: Published
//  Description: Returns the Windows proc hwnd parameter.
////////////////////////////////////////////////////////////////////
64
inline int GraphicsWindowProcCallbackData::get_hwnd(void) const;

1168 7 get_msg 0 4 1318 39 GraphicsWindowProcCallbackData::get_msg 0 1 548 278
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_msg
//       Access: Published
//  Description: Returns the Windows proc msg parameter.
////////////////////////////////////////////////////////////////////
63
inline int GraphicsWindowProcCallbackData::get_msg(void) const;

1169 10 get_wparam 0 4 1318 42 GraphicsWindowProcCallbackData::get_wparam 0 1 549 284
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_wparam
//       Access: Published
//  Description: Returns the Windows proc wparam parameter.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsWindowProcCallbackData::get_wparam(void) const;

1170 10 get_lparam 0 4 1318 42 GraphicsWindowProcCallbackData::get_lparam 0 1 550 284
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_lparam
//       Access: Published
//  Description: Returns the Windows proc lparam parameter.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsWindowProcCallbackData::get_lparam(void) const;

1171 14 is_touch_event 0 4 1318 46 GraphicsWindowProcCallbackData::is_touch_event 0 1 551 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::is_touch_event
//       Access: Public, Virtual
//  Description: Returns whether the event is a touch event.
//               
////////////////////////////////////////////////////////////////////
58
bool GraphicsWindowProcCallbackData::is_touch_event(void);

1172 15 get_num_touches 0 4 1318 47 GraphicsWindowProcCallbackData::get_num_touches 0 1 552 323
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_num_touches
//       Access: Public, Virtual
//  Description: Returns the current number of touches on the window.
//               
////////////////////////////////////////////////////////////////////
58
int GraphicsWindowProcCallbackData::get_num_touches(void);

1173 14 get_touch_info 0 4 1318 46 GraphicsWindowProcCallbackData::get_touch_info 0 1 553 330
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_touch_info
//       Access: Public, Virtual
//  Description: Returns the TouchInfo object describing the specified touch.
//               
////////////////////////////////////////////////////////////////////
68
TouchInfo GraphicsWindowProcCallbackData::get_touch_info(int index);

1174 14 get_class_type 0 4 1318 46 GraphicsWindowProcCallbackData::get_class_type 0 1 554 0
71
static TypeHandle GraphicsWindowProcCallbackData::get_class_type(void);

1175 31 ~GraphicsWindowProcCallbackData 0 4 1318 63 GraphicsWindowProcCallbackData::~GraphicsWindowProcCallbackData 0 0 0
70
GraphicsWindowProcCallbackData::~GraphicsWindowProcCallbackData(void);

1176 14 get_properties 0 4 1320 30 GraphicsWindow::get_properties 0 1 555 275
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_properties
//       Access: Published
//  Description: Returns the current properties of the window.
////////////////////////////////////////////////////////////////////
66
WindowProperties const GraphicsWindow::get_properties(void) const;

1177 24 get_requested_properties 0 4 1320 40 GraphicsWindow::get_requested_properties 0 1 556 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_requested_properties
//       Access: Published
//  Description: Returns the properties of the window that are
//               currently requested.  These properties will be
//               applied to the window (if valid) at the next
//               execution of process_events().
////////////////////////////////////////////////////////////////////
76
WindowProperties const GraphicsWindow::get_requested_properties(void) const;

1178 25 clear_rejected_properties 0 4 1320 41 GraphicsWindow::clear_rejected_properties 0 1 557 346
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::clear_rejected_properties
//       Access: Published
//  Description: Empties the set of failed properties that will be
//               returned by get_rejected_properties().
////////////////////////////////////////////////////////////////////
53
void GraphicsWindow::clear_rejected_properties(void);

1179 23 get_rejected_properties 0 4 1320 39 GraphicsWindow::get_rejected_properties 0 1 558 563
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_rejected_properties
//       Access: Published
//  Description: Returns the set of properties that have recently been
//               requested, but could not be applied to the window for
//               some reason.  This set of properties will remain
//               unchanged until they are changed by a new failed
//               request, or clear_rejected_properties() is called.
////////////////////////////////////////////////////////////////////
69
WindowProperties GraphicsWindow::get_rejected_properties(void) const;

1180 18 request_properties 0 4 1320 34 GraphicsWindow::request_properties 0 1 559 603
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::request_properties
//       Access: Published
//  Description: Requests a property change on the window.  For
//               example, use this method to request a window change
//               size or minimize or something.
//
//               The change is not made immediately; rather, the
//               request is saved and will be applied the next time
//               the window task is run (probably at the next frame).
////////////////////////////////////////////////////////////////////
86
void GraphicsWindow::request_properties(WindowProperties const &requested_properties);

1181 9 is_closed 0 4 1320 25 GraphicsWindow::is_closed 0 1 560 631
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_closed
//       Access: Published
//  Description: Returns true if the window has not yet been opened,
//               or has been fully closed, false if it is open.  The
//               window is not opened immediately after
//               GraphicsEngine::make_window() is called; nor is it
//               closed immediately after
//               GraphicsEngine::remove_window() is called.  Either
//               operation may take a frame or two.
////////////////////////////////////////////////////////////////////
50
inline bool GraphicsWindow::is_closed(void) const;

1182 13 is_fullscreen 0 4 1320 29 GraphicsWindow::is_fullscreen 0 1 561 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_fullscreen
//       Access: Published
//  Description: Returns true if the window has been opened as a
//               fullscreen window, false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsWindow::is_fullscreen(void) const;

1183 16 set_window_event 0 4 1320 32 GraphicsWindow::set_window_event 0 1 562 630
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_window_event
//       Access: Published
//  Description: Changes the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.
//
//               By default, all windows have the same window event
//               unless they are explicitly changed.  When the event
//               is generated, it includes one parameter: the window
//               itself.
////////////////////////////////////////////////////////////////////
80
void GraphicsWindow::set_window_event(basic_string< char > const &window_event);

1184 16 get_window_event 0 4 1320 32 GraphicsWindow::get_window_event 0 1 563 421
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_event
//       Access: Published
//  Description: Returns the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.  See set_window_event().
////////////////////////////////////////////////////////////////////
66
basic_string< char > GraphicsWindow::get_window_event(void) const;

1185 23 set_close_request_event 0 4 1320 39 GraphicsWindow::set_close_request_event 0 1 564 1393
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_close_request_event
//       Access: Published
//  Description: Sets the event that is triggered when the user
//               requests to close the window, e.g. via alt-F4, or
//               clicking on the close box.
//
//               The default for each window is for this event to be
//               the empty string, which means the window-close
//               request is handled immediately by Panda (and the
//               window will be closed without the app getting a
//               chance to intervene).  If you set this to a nonempty
//               string, then the window is not closed, but instead
//               the event is thrown.  It is then up to the app to
//               respond appropriately, for instance by presenting an
//               "are you sure?" dialog box, and eventually calling
//               close_window() when the user is sure.
//
//               It is considered poor form to set this string and
//               then not handle the event.  This can frustrate the
//               user by making it difficult for him to cleanly shut
//               down the application (and may force the user to
//               hard-kill the app, or reboot the machine).
////////////////////////////////////////////////////////////////////
94
void GraphicsWindow::set_close_request_event(basic_string< char > const &close_request_event);

1186 23 get_close_request_event 0 4 1320 39 GraphicsWindow::get_close_request_event 0 1 565 515
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_close_request_event
//       Access: Published
//  Description: Returns the name of the event set via
//               set_close_request_event().  If this string is
//               nonempty, then when the user requests to close
//               window, this event will be generated instead.  See
//               set_close_request_event().
////////////////////////////////////////////////////////////////////
73
basic_string< char > GraphicsWindow::get_close_request_event(void) const;

1187 18 set_unexposed_draw 0 4 1320 34 GraphicsWindow::set_unexposed_draw 0 1 566 894
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_unexposed_draw
//       Access: Published
//  Description: If this flag is false, the window is redrawn only
//               after it has received a recent "unexpose" or "draw"
//               event from the underlying windowing systme.  If this
//               flag is true, the window is redrawn every frame
//               regardless.  Setting this false may prevent the
//               window from redrawing unnecessarily when it is
//               hidden, and may play nicer with other windows on the
//               desktop, but may adversely affect frame rate even
//               when the window is fully visible; setting it true will
//               ensure that the window contents are always current.
////////////////////////////////////////////////////////////////////
68
inline void GraphicsWindow::set_unexposed_draw(bool unexposed_draw);

1188 18 get_unexposed_draw 0 4 1320 34 GraphicsWindow::get_unexposed_draw 0 1 567 259
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_unexposed_draw
//       Access: Published
//  Description: See set_unexposed_draw().
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsWindow::get_unexposed_draw(void) const;

1189 17 get_window_handle 0 4 1320 33 GraphicsWindow::get_window_handle 0 1 568 641
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_handle
//       Access: Published
//  Description: Returns the WindowHandle corresponding to this window
//               on the desktop.  This is mainly useful for
//               communicating with external libraries.  Use
//               window_handle->get_os_handle()->get_handle(), or
//               window_handle->get_string_handle(), to get the actual
//               OS-specific window handle object, whatever type that
//               might be.
////////////////////////////////////////////////////////////////////
67
inline WindowHandle *GraphicsWindow::get_window_handle(void) const;

1190 21 get_num_input_devices 0 4 1320 37 GraphicsWindow::get_num_input_devices 0 1 569 626
// Mouse and keyboard routines

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_num_input_devices
//       Access: Published
//  Description: Returns the number of separate input devices
//               associated with the window.  Typically, a window will
//               have exactly one input device: the keyboard/mouse
//               pair.  However, some windows may have no input
//               devices, and others may add additional devices, for
//               instance for a joystick.
////////////////////////////////////////////////////////////////////
54
int GraphicsWindow::get_num_input_devices(void) const;

1191 21 get_input_device_name 0 4 1320 37 GraphicsWindow::get_input_device_name 0 1 570 278
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_input_device_name
//       Access: Published
//  Description: Returns the name of the nth input device.
////////////////////////////////////////////////////////////////////
77
basic_string< char > GraphicsWindow::get_input_device_name(int device) const;

1192 11 has_pointer 0 4 1320 27 GraphicsWindow::has_pointer 0 1 571 366
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_pointer
//       Access: Published
//  Description: Returns true if the nth input device has a
//               screen-space pointer (for instance, a mouse), false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
bool GraphicsWindow::has_pointer(int device) const;

1193 12 has_keyboard 0 4 1320 28 GraphicsWindow::has_keyboard 0 1 572 314
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_keyboard
//       Access: Published
//  Description: Returns true if the nth input device has a keyboard,
//               false otherwise.
////////////////////////////////////////////////////////////////////
52
bool GraphicsWindow::has_keyboard(int device) const;

1194 16 get_keyboard_map 0 6 1320 32 GraphicsWindow::get_keyboard_map 0 1 573 348
////////////////////////////////////////////////////////////////////
//     Function: x11GraphicsWindow::get_keyboard_map
//       Access: Published, Virtual
//  Description: Returns a ButtonMap containing the association
//               between raw buttons and virtual buttons.
////////////////////////////////////////////////////////////////////
64
virtual ButtonMap *GraphicsWindow::get_keyboard_map(void) const;

1195 21 enable_pointer_events 0 4 1320 37 GraphicsWindow::enable_pointer_events 0 1 574 278
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_events
//       Access: Published
//  Description: Turn on the generation of pointer events.
////////////////////////////////////////////////////////////////////
55
void GraphicsWindow::enable_pointer_events(int device);

1196 22 disable_pointer_events 0 4 1320 38 GraphicsWindow::disable_pointer_events 0 1 575 280
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: Turn off the generation of pointer events.
////////////////////////////////////////////////////////////////////
56
void GraphicsWindow::disable_pointer_events(int device);

1197 19 enable_pointer_mode 0 4 1320 35 GraphicsWindow::enable_pointer_mode 0 1 576 285
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_mode
//       Access: Published
//  Description: See GraphicsWindowInputDevice::enable_pointer_mode
////////////////////////////////////////////////////////////////////
67
void GraphicsWindow::enable_pointer_mode(int device, double speed);

1198 20 disable_pointer_mode 0 4 1320 36 GraphicsWindow::disable_pointer_mode 0 1 577 289
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: See GraphicsWindowInputDevice::disable_pointer_mode
////////////////////////////////////////////////////////////////////
54
void GraphicsWindow::disable_pointer_mode(int device);

1199 11 get_pointer 0 4 1320 27 GraphicsWindow::get_pointer 0 1 578 471
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_pointer
//       Access: Published
//  Description: Returns the MouseData associated with the nth
//               input device's pointer.  This is deprecated; use
//               get_pointer_device().get_pointer() instead, or for
//               raw mice, use the InputDeviceManager interface.
////////////////////////////////////////////////////////////////////
56
MouseData GraphicsWindow::get_pointer(int device) const;

1200 12 move_pointer 0 6 1320 28 GraphicsWindow::move_pointer 0 1 579 540
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::move_pointer
//       Access: Published, Virtual
//  Description: Forces the pointer to the indicated position within
//               the window, if possible.
//
//               Returns true if successful, false on failure.  This
//               may fail if the mouse is not currently within the
//               window, or if the API doesn't support this operation.
////////////////////////////////////////////////////////////////////
68
virtual bool GraphicsWindow::move_pointer(int device, int x, int y);

1201 9 close_ime 0 6 1320 25 GraphicsWindow::close_ime 0 1 580 274
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::close_ime
//       Access: Published, Virtual
//  Description: Forces the ime window to close if any
//
////////////////////////////////////////////////////////////////////
45
virtual void GraphicsWindow::close_ime(void);

1202 14 get_class_type 0 4 1320 30 GraphicsWindow::get_class_type 0 1 581 0
55
static TypeHandle GraphicsWindow::get_class_type(void);

1203 10 get_window 0 4 1322 54 CallbackGraphicsWindow::WindowCallbackData::get_window 0 1 594 306
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::WindowCallbackData::get_window
//       Access: Published
//  Description: Returns the window this callback was triggered from.
////////////////////////////////////////////////////////////////////
98
inline CallbackGraphicsWindow *CallbackGraphicsWindow::WindowCallbackData::get_window(void) const;

1204 14 get_class_type 0 4 1322 58 CallbackGraphicsWindow::WindowCallbackData::get_class_type 0 1 595 0
83
static TypeHandle CallbackGraphicsWindow::WindowCallbackData::get_class_type(void);

1205 19 ~WindowCallbackData 0 4 1322 63 CallbackGraphicsWindow::WindowCallbackData::~WindowCallbackData 0 0 0
70
CallbackGraphicsWindow::WindowCallbackData::~WindowCallbackData(void);

1206 14 get_class_type 0 4 1323 58 CallbackGraphicsWindow::EventsCallbackData::get_class_type 0 1 596 0
83
static TypeHandle CallbackGraphicsWindow::EventsCallbackData::get_class_type(void);

1207 19 ~EventsCallbackData 0 4 1323 63 CallbackGraphicsWindow::EventsCallbackData::~EventsCallbackData 0 0 0
70
CallbackGraphicsWindow::EventsCallbackData::~EventsCallbackData(void);

1208 14 get_properties 0 4 1324 62 CallbackGraphicsWindow::PropertiesCallbackData::get_properties 0 1 597 504
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::PropertiesCallbackData::get_properties
//       Access: Published
//  Description: Returns the WindowProperties object that this
//               callback should process.  Any properties that are
//               handled should be removed from this object;
//               properties that are unhandled should be left alone.
////////////////////////////////////////////////////////////////////
100
inline WindowProperties &CallbackGraphicsWindow::PropertiesCallbackData::get_properties(void) const;

1209 14 get_class_type 0 4 1324 62 CallbackGraphicsWindow::PropertiesCallbackData::get_class_type 0 1 598 0
87
static TypeHandle CallbackGraphicsWindow::PropertiesCallbackData::get_class_type(void);

1210 23 ~PropertiesCallbackData 0 4 1324 71 CallbackGraphicsWindow::PropertiesCallbackData::~PropertiesCallbackData 0 0 0
78
CallbackGraphicsWindow::PropertiesCallbackData::~PropertiesCallbackData(void);

1211 17 get_callback_type 0 4 1326 61 CallbackGraphicsWindow::RenderCallbackData::get_callback_type 0 1 599 467
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_callback_type
//       Access: Published
//  Description: Since the render callback is shared for several
//               functions, this method is needed to indicate which
//               particular function is being invoked with this
//               callback.
////////////////////////////////////////////////////////////////////
124
inline CallbackGraphicsWindow::RenderCallbackType CallbackGraphicsWindow::RenderCallbackData::get_callback_type(void) const;

1212 14 get_frame_mode 0 4 1326 58 CallbackGraphicsWindow::RenderCallbackData::get_frame_mode 0 1 600 507
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_frame_mode
//       Access: Published
//  Description: If the callback type (returned by get_callback_type)
//               is RCT_begin_frame or RCT_end_frame, then this method
//               will return the particular frame mode indicating
//               what, precisely, we want to do this frame.
////////////////////////////////////////////////////////////////////
104
inline GraphicsOutput::FrameMode CallbackGraphicsWindow::RenderCallbackData::get_frame_mode(void) const;

1213 15 set_render_flag 0 4 1326 59 CallbackGraphicsWindow::RenderCallbackData::set_render_flag 0 1 601 549
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::set_render_flag
//       Access: Published
//  Description: If the callback type is RCT_begin_frame, this call is
//               available to specify the return value from the
//               begin_frame() call.  If this is true (the default),
//               the frame is rendered normally; if it is false, the
//               frame is omitted.
////////////////////////////////////////////////////////////////////
90
inline void CallbackGraphicsWindow::RenderCallbackData::set_render_flag(bool render_flag);

1214 15 get_render_flag 0 4 1326 59 CallbackGraphicsWindow::RenderCallbackData::get_render_flag 0 1 602 347
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_render_flag
//       Access: Published
//  Description: Returns the current setting of the render flag.  See
//               set_render_flag().
////////////////////////////////////////////////////////////////////
84
inline bool CallbackGraphicsWindow::RenderCallbackData::get_render_flag(void) const;

1215 14 get_class_type 0 4 1326 58 CallbackGraphicsWindow::RenderCallbackData::get_class_type 0 1 603 0
83
static TypeHandle CallbackGraphicsWindow::RenderCallbackData::get_class_type(void);

1216 19 ~RenderCallbackData 0 4 1326 63 CallbackGraphicsWindow::RenderCallbackData::~RenderCallbackData 0 0 0
70
CallbackGraphicsWindow::RenderCallbackData::~RenderCallbackData(void);

1217 19 set_events_callback 0 4 1321 43 CallbackGraphicsWindow::set_events_callback 0 1 582 829
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_events_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is polled for window events, including
//               mouse and keyboard events, as well as window resize
//               events and other system-generated events.
//
//               This callback will receive a
//               CallbackGraphicsWindow::EventsCallbackData.
//
//               This callback should process any system-generated
//               events, and call data->upcall() to process requested
//               property change requests made via
//               request_properties().
////////////////////////////////////////////////////////////////////
80
inline void CallbackGraphicsWindow::set_events_callback(CallbackObject *object);

1218 21 clear_events_callback 0 4 1321 45 CallbackGraphicsWindow::clear_events_callback 0 1 583 331
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_events_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_events_callback().
////////////////////////////////////////////////////////////////////
64
inline void CallbackGraphicsWindow::clear_events_callback(void);

1219 19 get_events_callback 0 4 1321 43 CallbackGraphicsWindow::get_events_callback 0 1 584 299
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_events_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_events_callback().
////////////////////////////////////////////////////////////////////
79
inline CallbackObject *CallbackGraphicsWindow::get_events_callback(void) const;

1220 23 set_properties_callback 0 4 1321 47 CallbackGraphicsWindow::set_properties_callback 0 1 585 1100
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_properties_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window receives a property change request from
//               user code (e.g. via request_properties).
//
//               This callback will receive a
//               CallbackGraphicsWindow::PropertiesCallbackData, which
//               provides a get_properties() method that returns a
//               modifiable reference to a WindowsProperties object.
//               This object will contain only those properties
//               requested by user code.  The callback should handle
//               any of the requests it finds, including and
//               especially set_open(), and remove them from the
//               object when it has handled them.  Any unhandled
//               properties should be left unchanged in the properties
//               object.
////////////////////////////////////////////////////////////////////
84
inline void CallbackGraphicsWindow::set_properties_callback(CallbackObject *object);

1221 25 clear_properties_callback 0 4 1321 49 CallbackGraphicsWindow::clear_properties_callback 0 1 586 339
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_properties_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_properties_callback().
////////////////////////////////////////////////////////////////////
68
inline void CallbackGraphicsWindow::clear_properties_callback(void);

1222 23 get_properties_callback 0 4 1321 47 CallbackGraphicsWindow::get_properties_callback 0 1 587 307
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_properties_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_properties_callback().
////////////////////////////////////////////////////////////////////
83
inline CallbackObject *CallbackGraphicsWindow::get_properties_callback(void) const;

1223 19 set_render_callback 0 4 1321 43 CallbackGraphicsWindow::set_render_callback 0 1 588 702
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_render_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is invoked (in the draw thread) to render
//               its contents, and/or flip the graphics buffers.
//
//               This callback will actually serve several different
//               functions.  It receivces a RenderCallbackData, and
//               you can query data->get_callback_type() to return the
//               actual function of each particular callback.
////////////////////////////////////////////////////////////////////
80
inline void CallbackGraphicsWindow::set_render_callback(CallbackObject *object);

1224 21 clear_render_callback 0 4 1321 45 CallbackGraphicsWindow::clear_render_callback 0 1 589 331
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_render_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_render_callback().
////////////////////////////////////////////////////////////////////
64
inline void CallbackGraphicsWindow::clear_render_callback(void);

1225 19 get_render_callback 0 4 1321 43 CallbackGraphicsWindow::get_render_callback 0 1 590 299
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_render_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_render_callback().
////////////////////////////////////////////////////////////////////
79
inline CallbackObject *CallbackGraphicsWindow::get_render_callback(void) const;

1226 16 get_input_device 0 4 1321 40 CallbackGraphicsWindow::get_input_device 0 1 591 480
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_input_device
//       Access: Published
//  Description: Returns a writable reference to the nth input device
//               (mouse).  This is intended to be used for the window
//               implementation to record mouse and keyboard input
//               information for the Panda system.
////////////////////////////////////////////////////////////////////
80
GraphicsWindowInputDevice &CallbackGraphicsWindow::get_input_device(int device);

1227 19 create_input_device 0 4 1321 43 CallbackGraphicsWindow::create_input_device 0 1 592 385
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::create_input_device
//       Access: Published
//  Description: Adds a new input device (mouse) to the window with
//               the indicated name.  Returns the index of the new
//               device.
////////////////////////////////////////////////////////////////////
82
int CallbackGraphicsWindow::create_input_device(basic_string< char > const &name);

1228 14 get_class_type 0 4 1321 38 CallbackGraphicsWindow::get_class_type 0 1 593 0
63
static TypeHandle CallbackGraphicsWindow::get_class_type(void);

1229 16 get_cull_handler 0 4 1327 47 DisplayRegionCullCallbackData::get_cull_handler 0 1 604 364
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_cull_handler
//       Access: Published
//  Description: Returns a pointer to the CullHandler, which accepts
//               each object to be added to the list for drawing.
////////////////////////////////////////////////////////////////////
80
inline CullHandler *DisplayRegionCullCallbackData::get_cull_handler(void) const;

1230 15 get_scene_setup 0 4 1327 46 DisplayRegionCullCallbackData::get_scene_setup 0 1 605 360
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
////////////////////////////////////////////////////////////////////
78
inline SceneSetup *DisplayRegionCullCallbackData::get_scene_setup(void) const;

1231 14 get_class_type 0 4 1327 45 DisplayRegionCullCallbackData::get_class_type 0 1 606 0
70
static TypeHandle DisplayRegionCullCallbackData::get_class_type(void);

1232 30 ~DisplayRegionCullCallbackData 0 4 1327 61 DisplayRegionCullCallbackData::~DisplayRegionCullCallbackData 0 0 0
68
DisplayRegionCullCallbackData::~DisplayRegionCullCallbackData(void);

1233 15 get_cull_result 0 4 1328 46 DisplayRegionDrawCallbackData::get_cull_result 0 1 607 388
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_cull_result
//       Access: Published
//  Description: Returns a pointer to the CullResult, the list of
//               CullableObjects that should be drawn in this
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
78
inline CullResult *DisplayRegionDrawCallbackData::get_cull_result(void) const;

1234 15 get_scene_setup 0 4 1328 46 DisplayRegionDrawCallbackData::get_scene_setup 0 1 608 360
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
////////////////////////////////////////////////////////////////////
78
inline SceneSetup *DisplayRegionDrawCallbackData::get_scene_setup(void) const;

1235 14 get_class_type 0 4 1328 45 DisplayRegionDrawCallbackData::get_class_type 0 1 609 0
70
static TypeHandle DisplayRegionDrawCallbackData::get_class_type(void);

1236 30 ~DisplayRegionDrawCallbackData 0 4 1328 61 DisplayRegionDrawCallbackData::~DisplayRegionDrawCallbackData 0 0 0
68
DisplayRegionDrawCallbackData::~DisplayRegionDrawCallbackData(void);

1237 23 DisplaySearchParameters 0 4 1329 48 DisplaySearchParameters::DisplaySearchParameters 0 1 610 236
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
DisplaySearchParameters::DisplaySearchParameters(void);

1238 24 ~DisplaySearchParameters 0 4 1329 49 DisplaySearchParameters::~DisplaySearchParameters 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
DisplaySearchParameters::~DisplaySearchParameters(void);

1239 17 set_minimum_width 0 4 1329 42 DisplaySearchParameters::set_minimum_width 0 1 611 242
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void DisplaySearchParameters::set_minimum_width(int minimum_width);

1240 17 set_maximum_width 0 4 1329 42 DisplaySearchParameters::set_maximum_width 0 1 612 242
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void DisplaySearchParameters::set_maximum_width(int maximum_width);

1241 18 set_minimum_height 0 4 1329 43 DisplaySearchParameters::set_minimum_height 0 1 613 243
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void DisplaySearchParameters::set_minimum_height(int minimum_height);

1242 18 set_maximum_height 0 4 1329 43 DisplaySearchParameters::set_maximum_height 0 1 614 243
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void DisplaySearchParameters::set_maximum_height(int maximum_height);

1243 26 set_minimum_bits_per_pixel 0 4 1329 51 DisplaySearchParameters::set_minimum_bits_per_pixel 0 1 615 251
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
85
void DisplaySearchParameters::set_minimum_bits_per_pixel(int minimum_bits_per_pixel);

1244 26 set_maximum_bits_per_pixel 0 4 1329 51 DisplaySearchParameters::set_maximum_bits_per_pixel 0 1 616 251
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
85
void DisplaySearchParameters::set_maximum_bits_per_pixel(int maximum_bits_per_pixel);

1245 8 set_size 0 6 1330 24 GraphicsBuffer::set_size 0 1 617 548
////////////////////////////////////////////////////////////////////
//     Function: GraphicsBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
////////////////////////////////////////////////////////////////////
52
virtual void GraphicsBuffer::set_size(int x, int y);

1246 14 get_class_type 0 4 1330 30 GraphicsBuffer::get_class_type 0 1 618 0
55
static TypeHandle GraphicsBuffer::get_class_type(void);

1247 14 GraphicsEngine 0 4 1331 30 GraphicsEngine::GraphicsEngine 0 2 619 620 448
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
////////////////////////////////////////////////////////////////////
67
GraphicsEngine::GraphicsEngine(Pipeline *pipeline = ((void *)(0)));

1248 19 set_threading_model 0 4 1331 35 GraphicsEngine::set_threading_model 0 1 621 422
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_threading_model
//       Access: Published
//  Description: Specifies how future objects created via make_gsg(),
//               make_buffer(), and make_window() will be threaded.
//               This does not affect any already-created objects.
////////////////////////////////////////////////////////////////////
88
void GraphicsEngine::set_threading_model(GraphicsThreadingModel const &threading_model);

1249 19 get_threading_model 0 4 1331 35 GraphicsEngine::get_threading_model 0 1 622 347
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_threading_model
//       Access: Published
//  Description: Returns the threading model that will be applied to
//               future objects.  See set_threading_model().
////////////////////////////////////////////////////////////////////
71
GraphicsThreadingModel GraphicsEngine::get_threading_model(void) const;

1250 15 get_render_lock 0 4 1331 31 GraphicsEngine::get_render_lock 0 1 623 520
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_render_lock
//       Access: Published
//  Description: Returns a ReMutex object that is held by the
//               GraphicsEngine during the entire call to
//               render_frame().  While you hold this lock you can be
//               confident that no part of the frame will be rendered
//               (at least by the app thread).
////////////////////////////////////////////////////////////////////
66
inline ReMutex const &GraphicsEngine::get_render_lock(void) const;

1251 13 set_auto_flip 0 4 1331 29 GraphicsEngine::set_auto_flip 0 1 624 925
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_auto_flip
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should automatically cause windows to sync and flip
//               as soon as they have finished drawing, rather than
//               waiting for all of the windows to finish drawing
//               first so they can flip together.
//
//               This only affects the timing of when the flip occurs.
//               If this is true (the default), the flip occurs before
//               render_frame() returns.  If this is false, the flip
//               occurs whenever flip_frame() is called, or at the
//               beginning of the next call to render_frame(), if
//               flip_frame() is never called.
////////////////////////////////////////////////////////////////////
58
inline void GraphicsEngine::set_auto_flip(bool auto_flip);

1252 13 get_auto_flip 0 4 1331 29 GraphicsEngine::get_auto_flip 0 1 625 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_auto_flip
//       Access: Published
//  Description: Returns the current setting for the auto-flip flag.
//               See set_auto_flip.
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsEngine::get_auto_flip(void) const;

1253 15 set_portal_cull 0 4 1331 31 GraphicsEngine::set_portal_cull 0 1 626 325
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_portal_cull
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should start portal culling
////////////////////////////////////////////////////////////////////
56
inline void GraphicsEngine::set_portal_cull(bool value);

1254 15 get_portal_cull 0 4 1331 31 GraphicsEngine::get_portal_cull 0 1 627 287
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_portal_cull
//       Access: Published
//  Description: Returns the current setting for the portal culling flag.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsEngine::get_portal_cull(void) const;

1255 18 set_default_loader 0 4 1331 34 GraphicsEngine::set_default_loader 0 1 628 398
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_default_loader
//       Access: Public
//  Description: Sets the Loader object that will be assigned to every
//               GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
////////////////////////////////////////////////////////////////////
63
inline void GraphicsEngine::set_default_loader(Loader *loader);

1256 18 get_default_loader 0 4 1331 34 GraphicsEngine::get_default_loader 0 1 629 410
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_default_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be assigned to
//               every GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
////////////////////////////////////////////////////////////////////
62
inline Loader *GraphicsEngine::get_default_loader(void) const;

1257 11 make_output 0 4 1331 27 GraphicsEngine::make_output 0 3 630 631 632 0
273
GraphicsOutput *GraphicsEngine::make_output(GraphicsPipe *pipe, basic_string< char > const &name, int sort, FrameBufferProperties const &fb_prop, WindowProperties const &win_prop, int flags, GraphicsStateGuardian *gsg = ((void *)(0)), GraphicsOutput *host = ((void *)(0)));

1258 11 make_buffer 0 4 1331 27 GraphicsEngine::make_buffer 0 2 633 634 1950
// Syntactic shorthand versions of make_output

////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This is the
//               preferred way to create an offscreen buffer, when you
//               already have an onscreen window or another buffer to
//               start with.  For the first parameter, pass an
//               existing GraphicsOutput object, e.g. the main window;
//               this allows the buffer to adapt itself to that
//               window's framebuffer properties, and allows maximum
//               sharing of resources.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This flavor
//               accepts a GSG rather than a GraphicsOutput as the
//               first parameter, which is too limiting and disallows
//               the possibility of creating a ParasiteBuffer if the
//               user's graphics hardware prefers that.  It also
//               attempts to request specific framebuffer properties
//               and may therefore do a poorer job of sharing the GSG
//               between the old buffer and the new.
//
//               For these reasons, this variant is a poor choice
//               unless you are creating an offscreen buffer for the
//               first time, without an onscreen window already in
//               existence.  If you already have an onscreen window,
//               you should use the other flavor of make_buffer()
//               instead, which accepts a GraphicsOutput as the first
//               parameter.
////////////////////////////////////////////////////////////////////
289
inline GraphicsOutput *GraphicsEngine::make_buffer(GraphicsOutput *host, basic_string< char > const &name, int sort, int x_size, int y_size);
inline GraphicsOutput *GraphicsEngine::make_buffer(GraphicsStateGuardian *gsg, basic_string< char > const &name, int sort, int x_size, int y_size);

1259 13 make_parasite 0 4 1331 29 GraphicsEngine::make_parasite 0 1 635 265
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_parasite
//       Access: Published
//  Description: Syntactic shorthand for make_buffer.
////////////////////////////////////////////////////////////////////
143
inline GraphicsOutput *GraphicsEngine::make_parasite(GraphicsOutput *host, basic_string< char > const &name, int sort, int x_size, int y_size);

1260 13 remove_window 0 4 1331 29 GraphicsEngine::remove_window 0 1 636 1357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_window
//       Access: Published
//  Description: Removes the indicated window or offscreen buffer from
//               the set of windows that will be processed when
//               render_frame() is called.  This also closes the
//               window if it is open, and removes the window from its
//               GraphicsPipe, allowing the window to be destructed if
//               there are no other references to it.  (However, the
//               window may not be actually closed until next frame,
//               if it is controlled by a sub-thread.)
//
//               The return value is true if the window was removed,
//               false if it was not found.
//
//               Unlike remove_all_windows(), this function does not
//               terminate any of the threads that may have been
//               started to service this window; they are left running
//               (since you might open a new window later on these
//               threads).  If your intention is to clean up before
//               shutting down, it is better to call
//               remove_all_windows() then to call remove_window() one
//               at a time.
////////////////////////////////////////////////////////////////////
59
bool GraphicsEngine::remove_window(GraphicsOutput *window);

1261 18 remove_all_windows 0 4 1331 34 GraphicsEngine::remove_all_windows 0 1 637 412
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_all_windows
//       Access: Published
//  Description: Removes and closes all windows from the engine.  This
//               also cleans up and terminates any threads that have
//               been started to service those windows.
////////////////////////////////////////////////////////////////////
46
void GraphicsEngine::remove_all_windows(void);

1262 17 reset_all_windows 0 4 1331 33 GraphicsEngine::reset_all_windows 0 1 638 465
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::reset_all_windows
//       Access: Published
//  Description: Resets the framebuffer of the current window.  This
//               is currently used by DirectX 8 only. It calls a
//               reset_window function on each active window to
//               release/create old/new framebuffer
////////////////////////////////////////////////////////////////////
55
void GraphicsEngine::reset_all_windows(bool swapchain);

1263 8 is_empty 0 4 1331 24 GraphicsEngine::is_empty 0 1 639 360
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::is_empty
//       Access: Published
//  Description: Returns true if there are no windows or buffers
//               managed by the engine, false if there is at least
//               one.
////////////////////////////////////////////////////////////////////
42
bool GraphicsEngine::is_empty(void) const;

1264 15 get_num_windows 0 4 1331 31 GraphicsEngine::get_num_windows 0 1 640 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_num_windows
//       Access: Published
//  Description: Returns the number of windows (or buffers) managed by
//               the engine.
////////////////////////////////////////////////////////////////////
48
int GraphicsEngine::get_num_windows(void) const;

1265 10 get_window 0 4 1331 26 GraphicsEngine::get_window 0 1 641 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_window
//       Access: Published
//  Description: Returns the nth window or buffers managed by the
//               engine, in sorted order.
////////////////////////////////////////////////////////////////////
56
GraphicsOutput *GraphicsEngine::get_window(int n) const;

1266 12 render_frame 0 4 1331 28 GraphicsEngine::render_frame 0 1 642 334
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::render_frame
//       Access: Published
//  Description: Renders the next frame in all the registered windows,
//               and flips all of the frame buffers.
////////////////////////////////////////////////////////////////////
40
void GraphicsEngine::render_frame(void);

1267 12 open_windows 0 4 1331 28 GraphicsEngine::open_windows 0 1 643 658
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::open_windows
//       Access: Published
//  Description: Fully opens (or closes) any windows that have
//               recently been requested open or closed, without
//               rendering any frames.  It is not necessary to call
//               this explicitly, since windows will be automatically
//               opened or closed when the next frame is rendered, but
//               you may call this if you want your windows now
//               without seeing a frame go by.
////////////////////////////////////////////////////////////////////
40
void GraphicsEngine::open_windows(void);

1268 10 sync_frame 0 4 1331 26 GraphicsEngine::sync_frame 0 1 644 558
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::sync_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing.  The windows are not
//               yet flipped when this returns; see also flip_frame().
//               It is not usually necessary to call this explicitly,
//               unless you need to see the previous frame right away.
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::sync_frame(void);

1269 10 ready_flip 0 4 1331 26 GraphicsEngine::ready_flip 0 1 645 962
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::ready_flip
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing. Returns when all threads have
//               actually finished drawing, as opposed to 'sync_frame'
//               we seems to return once all draw calls have been submitted.
//               Calling 'flip_frame' after this function should immediately
//               cause a buffer flip.  This function will only work in
//               opengl right now, for all other graphics pipelines it will
//               simply return immediately.  In opengl it's a bit of a hack:
//               it will attempt to read a single pixel from the frame buffer to
//               force the graphics card to finish drawing before it returns
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::ready_flip(void);

1270 10 flip_frame 0 4 1331 26 GraphicsEngine::flip_frame 0 1 646 516
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::flip_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing, and then flips all the
//               windows.  It is not usually necessary to call this
//               explicitly, unless you need to see the previous frame
//               right away.
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::flip_frame(void);

1271 20 extract_texture_data 0 4 1331 36 GraphicsEngine::extract_texture_data 0 1 647 1560
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::extract_texture_data
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to retrieve
//               the texture memory image of the indicated texture and
//               store it in the texture's ram_image field.  The image
//               can then be written to disk via Texture::write(), or
//               otherwise manipulated on the CPU.
//
//               This is useful for retrieving the contents of a
//               texture that has been somehow generated on the
//               graphics card, instead of having been loaded the
//               normal way via Texture::read() or Texture::load().
//               It is particularly useful for getting the data
//               associated with a compressed texture image.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               If the texture has not yet been loaded to the GSG in
//               question, it will be loaded immediately.
//
//               The return value is true if the operation is
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////
84
bool GraphicsEngine::extract_texture_data(Texture *tex, GraphicsStateGuardian *gsg);

1272 16 dispatch_compute 0 4 1331 32 GraphicsEngine::dispatch_compute 0 1 648 1071
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::dispatch_compute
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to dispatch
//               the compute shader in the given ShaderAttrib using
//               the given work group counts.  This can act as an
//               interface for running a one-off compute shader,
//               without having to store it in the scene graph using
//               a ComputeNode.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               The return value is true if the operation is
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////
124
void GraphicsEngine::dispatch_compute(LVecBase3i const &work_groups, ShaderAttrib const *sattr, GraphicsStateGuardian *gsg);

1273 14 get_global_ptr 0 4 1331 30 GraphicsEngine::get_global_ptr 0 1 649 237
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_global_ptr
//       Access: Published, Static
//  Description:
////////////////////////////////////////////////////////////////////
60
static GraphicsEngine *GraphicsEngine::get_global_ptr(void);

1274 18 get_num_pipe_types 0 4 1333 41 GraphicsPipeSelection::get_num_pipe_types 0 1 650 382
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_pipe_types
//       Access: Published
//  Description: Returns the number of different types of
//               GraphicsPipes that are available to create through
//               this interface.
////////////////////////////////////////////////////////////////////
58
int GraphicsPipeSelection::get_num_pipe_types(void) const;

1275 13 get_pipe_type 0 4 1333 36 GraphicsPipeSelection::get_pipe_type 0 1 651 323
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_pipe_type
//       Access: Published
//  Description: Returns the nth type of GraphicsPipe available
//               through this interface.
////////////////////////////////////////////////////////////////////
61
TypeHandle GraphicsPipeSelection::get_pipe_type(int n) const;

1276 16 print_pipe_types 0 4 1333 39 GraphicsPipeSelection::print_pipe_types 0 1 652 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::print_pipe_types
//       Access: Published
//  Description: Writes a list of the currently known GraphicsPipe
//               types to nout, for the user's information.
////////////////////////////////////////////////////////////////////
57
void GraphicsPipeSelection::print_pipe_types(void) const;

1277 9 make_pipe 0 4 1333 32 GraphicsPipeSelection::make_pipe 0 3 653 654 655 1109
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
////////////////////////////////////////////////////////////////////
231
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_pipe(basic_string< char > const &type_name, basic_string< char > const &module_name = ((string())));
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_pipe(TypeHandle type);

1278 16 make_module_pipe 0 4 1333 39 GraphicsPipeSelection::make_module_pipe 0 1 656 430
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_module_pipe
//       Access: Published
//  Description: Returns a new GraphicsPipe of a type defined by the
//               indicated module.  Returns NULL if the module is not
//               found or does not properly recommend a GraphicsPipe.
////////////////////////////////////////////////////////////////////
107
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_module_pipe(basic_string< char > const &module_name);

1279 17 make_default_pipe 0 4 1333 40 GraphicsPipeSelection::make_default_pipe 0 1 657 426
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_default_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of some arbitrary type.
//               The user may specify a preference using the Configrc
//               file; otherwise, one will be chosen arbitrarily.
////////////////////////////////////////////////////////////////////
73
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_default_pipe(void);

1280 19 get_num_aux_modules 0 4 1333 42 GraphicsPipeSelection::get_num_aux_modules 0 1 658 472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_aux_modules
//       Access: Published
//  Description: Returns the number of display modules that are still
//               to be loaded.  If this is nonzero, then calling
//               load_aux_modules() will likely increase the number of
//               GraphicsPipes available.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsPipeSelection::get_num_aux_modules(void) const;

1281 16 load_aux_modules 0 4 1333 39 GraphicsPipeSelection::load_aux_modules 0 1 659 391
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::load_aux_modules
//       Access: Published
//  Description: Loads all the modules named in the aux-display
//               Configrc variable, making as many graphics pipes as
//               possible available.
////////////////////////////////////////////////////////////////////
51
void GraphicsPipeSelection::load_aux_modules(void);

1282 14 get_global_ptr 0 4 1333 37 GraphicsPipeSelection::get_global_ptr 0 1 660 327
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one global
//               GraphicsPipeSelection object.
////////////////////////////////////////////////////////////////////
81
static inline GraphicsPipeSelection *GraphicsPipeSelection::get_global_ptr(void);

1283 8 make_int 0 4 1334 28 NativeWindowHandle::make_int 0 1 661 607
////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_int
//       Access: Published, Static
//  Description: Constructs a new WindowHandle with an int value,
//               which is understood to be either an HWND or a Window,
//               cast to int.  This method exists for the convenience
//               of Python, which likes to deal with ints; C++ code
//               should use one of the more specific make_x11() or
//               make_win32() methods instead.
////////////////////////////////////////////////////////////////////
83
static PointerTo< WindowHandle > NativeWindowHandle::make_int(unsigned int window);

1284 15 make_subprocess 0 4 1334 35 NativeWindowHandle::make_subprocess 0 1 662 636
////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_subprocess
//       Access: Published, Static
//  Description: Constructs a new WindowHandle that references a
//               SubprocessWindowBuffer read in another process, with
//               the named pipe filename that it uses for
//               communication.
//
//               This is (at present, and maybe always) useful only on
//               the OS X platform, where parenting child windows is
//               particularly problematic.
////////////////////////////////////////////////////////////////////
95
static PointerTo< WindowHandle > NativeWindowHandle::make_subprocess(Filename const &filename);

1285 14 get_class_type 0 4 1334 34 NativeWindowHandle::get_class_type 0 1 663 0
59
static TypeHandle NativeWindowHandle::get_class_type(void);

1286 19 ~NativeWindowHandle 0 4 1334 39 NativeWindowHandle::~NativeWindowHandle 0 0 0
46
NativeWindowHandle::~NativeWindowHandle(void);

1287 8 set_size 0 4 1335 24 ParasiteBuffer::set_size 0 1 664 548
////////////////////////////////////////////////////////////////////
//     Function: ParasiteBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
////////////////////////////////////////////////////////////////////
44
void ParasiteBuffer::set_size(int x, int y);

1288 14 get_class_type 0 4 1335 30 ParasiteBuffer::get_class_type 0 1 665 0
55
static TypeHandle ParasiteBuffer::get_class_type(void);

665
1 14 Dtool_62HUQt0n 0 7 3 1338 0 14 Dtool_62HUQt0n 302 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsDevice::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this device is
//               associated with.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1336  
2 14 Dtool_62HUAajD 0 7 4 1340 0 14 Dtool_62HUAajD 0 0 
3 14 Dtool_62HU57GT 0 7 8 1341 668 14 Dtool_62HU57GT 231 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
4 14 Dtool_62HUEoak 0 6 9 1342 0 14 Dtool_62HUEoak 220 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
5 14 Dtool_62HUW2OW 0 6 10 1342 0 14 Dtool_62HUW2OW 244 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
6 14 Dtool_62HUL63J 0 6 11 1342 0 14 Dtool_62HUL63J 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
7 14 Dtool_62HUJxNf 0 6 12 1342 0 14 Dtool_62HUJxNf 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_window_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
8 14 Dtool_62HUdKNm 0 6 13 1342 0 14 Dtool_62HUdKNm 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_total_display_modes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
9 14 Dtool_62HU7GBr 0 6 14 1342 0 14 Dtool_62HU7GBr 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1341  13 display_index 1 1342  
10 14 Dtool_62HUA681 0 6 15 1342 0 14 Dtool_62HUA681 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1341  13 display_index 1 1342  
11 14 Dtool_62HUqZZh 0 6 16 1342 0 14 Dtool_62HUqZZh 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1341  13 display_index 1 1342  
12 14 Dtool_62HUi2hP 0 6 17 1342 0 14 Dtool_62HUi2hP 249 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_refresh_rate
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1341  13 display_index 1 1342  
13 14 Dtool_62HUyGxw 0 6 18 1342 0 14 Dtool_62HUyGxw 252 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_fullscreen_only
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1341  13 display_index 1 1342  
14 14 Dtool_62HUpeJW 0 6 19 1342 0 14 Dtool_62HUpeJW 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_shader_model
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
15 14 Dtool_62HUoxc3 0 6 20 1342 0 14 Dtool_62HUoxc3 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_video_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
16 14 Dtool_62HUZQA3 0 6 21 1342 0 14 Dtool_62HUZQA3 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_texture_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
17 14 Dtool_62HUe4Gl 0 4 22 1343 0 14 Dtool_62HUe4Gl 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_memory_information
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
18 14 Dtool_62HUAqOZ 0 6 23 1344 0 14 Dtool_62HUAqOZ 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_physical_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
19 14 Dtool_62HUQP7r 0 6 24 1344 0 14 Dtool_62HUQP7r 249 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_physical_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
20 14 Dtool_62HUoWLi 0 6 25 1344 0 14 Dtool_62HUoWLi 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
21 14 Dtool_62HUjPqP 0 6 26 1344 0 14 Dtool_62HUjPqP 248 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_page_file_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
22 14 Dtool_62HUcLl_ 0 6 27 1344 0 14 Dtool_62HUcLl_ 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::_process_virtual_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
23 14 Dtool_62HUWBVB 0 6 28 1344 0 14 Dtool_62HUWBVB 256 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_process_virtual_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
24 14 Dtool_62HUnP9N 0 6 29 1342 0 14 Dtool_62HUnP9N 235 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_memory_load
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
25 14 Dtool_62HUdS18 0 6 30 1344 0 14 Dtool_62HUdS18 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_fault_count
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
26 14 Dtool_62HU0YWh 0 6 31 1344 0 14 Dtool_62HU0YWh 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_process_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
27 14 Dtool_62HUjbme 0 6 32 1344 0 14 Dtool_62HUjbme 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_process_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
28 14 Dtool_62HUMHSZ 0 6 33 1344 0 14 Dtool_62HUMHSZ 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_usage
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
29 14 Dtool_62HUG_eO 0 6 34 1344 0 14 Dtool_62HUG_eO 244 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_page_file_usage
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
30 14 Dtool_62HU4Hjq 0 6 35 1342 0 14 Dtool_62HU4Hjq 233 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_vendor_id
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
31 14 Dtool_62HUn_Uq 0 6 36 1342 0 14 Dtool_62HUn_Uq 233 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_device_id
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
32 14 Dtool_62HUd4qN 0 6 37 1342 0 14 Dtool_62HUd4qN 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_product
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
33 14 Dtool_62HU98ah 0 6 38 1342 0 14 Dtool_62HU98ah 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
34 14 Dtool_62HUEIx3 0 6 39 1342 0 14 Dtool_62HUEIx3 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_sub_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
35 14 Dtool_62HUdf2J 0 6 40 1342 0 14 Dtool_62HUdf2J 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_build
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
36 14 Dtool_62HUsddI 0 6 41 1342 0 14 Dtool_62HUsddI 241 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_month
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
37 14 Dtool_62HUNaoh 0 6 42 1342 0 14 Dtool_62HUNaoh 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_day
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
38 14 Dtool_62HURGMj 0 6 43 1342 0 14 Dtool_62HURGMj 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_year
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
39 14 Dtool_62HU7M2V 0 6 44 1342 0 14 Dtool_62HU7M2V 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
40 14 Dtool_62HUvm4k 0 6 45 1342 0 14 Dtool_62HUvm4k 312 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_size
//       Access: Published
//  Description: Returns the number of 32-bit values for cpu id 
//               binary data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
41 14 Dtool_62HUnIiL 0 6 46 1345 0 14 Dtool_62HUnIiL 309 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_data
//       Access: Published
//  Description: Returns part of cpu id binary data based on the 
//               index.  
//////////////////////////////////////////////////////////////////// 2 4 this 3 1341  5 index 1 1342  
42 14 Dtool_62HUBjkL 0 6 47 1346 0 14 Dtool_62HUBjkL 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_vendor_string
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
43 14 Dtool_62HUNBT4 0 6 48 1346 0 14 Dtool_62HUNBT4 241 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_string
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
44 14 Dtool_62HUfeql 0 6 49 1345 0 14 Dtool_62HUfeql 248 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_version_information
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
45 14 Dtool_62HUxetr 0 6 50 1345 0 14 Dtool_62HUxetr 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_index
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
46 14 Dtool_62HUjBN9 0 6 51 1344 0 14 Dtool_62HUjBN9 237 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
47 14 Dtool_62HUJ5pR 0 6 52 1344 0 14 Dtool_62HUJ5pR 232 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_time
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
48 14 Dtool_62HUqY3j 0 6 53 1344 0 14 Dtool_62HUqY3j 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
49 14 Dtool_62HUhC2a 0 6 54 1344 0 14 Dtool_62HUhC2a 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_current_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
50 14 Dtool_62HUxW8u 0 4 55 1343 0 14 Dtool_62HUxW8u 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1341  16 processor_number 1 1342  
51 14 Dtool_62HUmQxl 0 6 56 1342 0 14 Dtool_62HUmQxl 405 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_cpu_cores
//       Access: Published
//  Description: Returns the number of individual CPU cores in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts once here.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
52 14 Dtool_62HUqBds 0 6 57 1342 0 14 Dtool_62HUqBds 411 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_logical_cpus
//       Access: Published
//  Description: Returns the number of logical CPU's in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts as two or more here.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
53 14 Dtool_62HU77jF 0 6 58 1342 0 14 Dtool_62HU77jF 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_major
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
54 14 Dtool_62HUd4bE 0 6 59 1342 0 14 Dtool_62HUd4bE 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_minor
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
55 14 Dtool_62HU5OQv 0 6 60 1342 0 14 Dtool_62HU5OQv 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_build
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
56 14 Dtool_62HUJqzm 0 6 61 1342 0 14 Dtool_62HUJqzm 260 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_platform_id
//       Access: Published
//  Description: Returns -1 if not set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1341  
57 14 Dtool_62HUnM8A 0 6 65 1349 0 14 Dtool_62HUnM8A 694 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::is_valid
//       Access: Published
//  Description: Returns false if this pipe is known to be invalid,
//               meaning that an attempt to create a GraphicsWindow
//               with the pipe will certainly fail.  Returns true if
//               the pipe is probably valid (is this case, an attempt
//               to create a GraphicsWindow should succeed, but might
//               still fail).
//
//               Use the GraphicsEngine class to create a
//               GraphicsWindow on a particular pipe.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1347  
58 14 Dtool_62HUpKTv 0 6 66 1342 0 14 Dtool_62HUpKTv 682 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_supported_types
//       Access: Published
//  Description: Returns the mask of bits that represents the kinds of
//               GraphicsOutput objects this pipe might be able to
//               successfully create.  The return value is the union
//               of bits in GraphicsPipe::OutputTypes that represents
//               the set of GraphicsOutput types.
//
//               A 1 bit in a particular position is not a guarantee
//               of success, but a 0 bit is a guarantee of failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1347  
59 14 Dtool_62HUcDZ_ 0 6 67 1349 0 14 Dtool_62HUcDZ_ 766 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::supports_type
//       Access: Published
//  Description: A convenience function to ask if a particular type or
//               types of GraphicsObjects are supported.  The
//               parameter is a union of one or more bits defined in
//               GrpahicsPipe::OutputTypes.
//
//               Returns true if all of the requested types are listed
//               in the supported_types mask, false if any one of them
//               is not.  This is not a guarantee that the indicated
//               output type will successfully be created when it is
//               attempted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1347  5 flags 1 1342  
60 14 Dtool_62HUYv10 0 6 68 1342 0 14 Dtool_62HUYv10 547 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_width
//       Access: Published
//  Description: Returns the width of the entire display, if it is
//               known.  This may return 0.  This is not a guarantee
//               that windows (particularly fullscreen windows) may
//               not be created larger than this width, but it is
//               intended to provide a hint to the application.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1347  
61 14 Dtool_62HUrAPC 0 6 69 1342 0 14 Dtool_62HUrAPC 385 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_height
//       Access: Published
//  Description: Returns the height of the entire display, if it is
//               known.  This may return 0.  See the caveats for
//               get_display_width().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1347  
62 14 Dtool_62HULVZO 0 6 70 1341 0 14 Dtool_62HULVZO 272 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_information
//       Access: Published
//  Description: Gets the pipe's DisplayInformation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
63 14 Dtool_62HUqnn7 0 4 71 1343 0 14 Dtool_62HUqnn7 400 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::lookup_cpu_data
//       Access: Public, Virtual
//  Description: Looks up the detailed CPU information and stores it
//               in _display_information, if supported by the OS.
//               This may take a second or two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1338  
64 14 Dtool_62HUheCd 0 6 72 1346 0 14 Dtool_62HUheCd 0 1 4 this 3 1347  
65 14 Dtool_62HUkM1K 0 7 73 1340 0 14 Dtool_62HUkM1K 0 0 
66 14 Dtool_62HU5_NM 0 4 77 1343 0 14 Dtool_62HU5_NM 523 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the color
//               buffer should be cleared every frame.  If this is
//               true, the color buffer will be cleared to the color
//               indicated by set_clear_color(); otherwise, it will be
//               left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1350  18 clear_color_active 1 1349  
67 14 Dtool_62HUQ__5 0 6 78 1349 0 14 Dtool_62HUQ__5 413 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_color_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1351  
68 14 Dtool_62HU_x_a 0 4 79 1343 0 14 Dtool_62HU_x_a 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the depth
//               buffer should be cleared every frame.  If this is
//               true, the depth buffer will be cleared to the depth
//               value indicated by set_clear_depth(); otherwise, it
//               will be left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1350  18 clear_depth_active 1 1349  
69 14 Dtool_62HUklwI 0 6 80 1349 0 14 Dtool_62HUklwI 413 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the depth buffer should be cleared
//               every frame.  See set_clear_depth_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1351  
70 14 Dtool_62HUcsb8 0 4 81 1343 0 14 Dtool_62HUcsb8 531 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the stencil
//               buffer should be cleared every frame.  If this is
//               true, the stencil buffer will be cleared to the value
//               indicated by set_clear_stencil(); otherwise, it will be
//               left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1350  20 clear_stencil_active 1 1349  
71 14 Dtool_62HUSZOl 0 6 82 1349 0 14 Dtool_62HUSZOl 417 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_stencil_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1351  
72 14 Dtool_62HUrSVN 0 4 83 1343 0 14 Dtool_62HUrSVN 535 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color
//       Access: Published
//  Description: Sets the clear color to the indicated value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1350  5 color 1 1353  
73 14 Dtool_62HU4kxz 0 6 84 1353 0 14 Dtool_62HU4kxz 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color
//       Access: Published
//  Description: Returns the current clear color value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1351  
74 14 Dtool_62HUw_6X 0 4 85 1343 0 14 Dtool_62HUw_6X 535 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth
//       Access: Published
//  Description: Sets the clear depth to the indicated value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1350  5 depth 1 1356  
75 14 Dtool_62HUMYjC 0 6 86 1356 0 14 Dtool_62HUMYjC 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth
//       Access: Published
//  Description: Returns the current clear depth value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1351  
76 14 Dtool_62HUeW2T 0 4 87 1343 0 14 Dtool_62HUeW2T 0 2 4 this 3 1350  7 stencil 1 1345  
77 14 Dtool_62HUsiaD 0 6 88 1345 0 14 Dtool_62HUsiaD 539 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil
//       Access: Published
//  Description: Returns the current clear stencil value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_stencil_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1351  
78 14 Dtool_62HU0c6i 0 4 89 1343 0 14 Dtool_62HU0c6i 285 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_active
//       Access: Published, Virtual
//  Description: Sets the clear-active flag for any bitplane.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1350  1 n 1 1342  16 clear_aux_active 1 1349  
79 14 Dtool_62HU2Tq7 0 6 90 1349 0 14 Dtool_62HU2Tq7 285 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_active
//       Access: Published, Virtual
//  Description: Gets the clear-active flag for any bitplane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1351  1 n 1 1342  
80 14 Dtool_62HU4pqk 0 4 91 1343 0 14 Dtool_62HU4pqk 278 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_value
//       Access: Published, Virtual
//  Description: Sets the clear value for any bitplane.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1350  1 n 1 1342  11 clear_value 1 1353  
81 14 Dtool_62HUl3hY 0 6 92 1353 0 14 Dtool_62HUl3hY 281 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_value
//       Access: Published, Virtual
//  Description: Returns the clear value for any bitplane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1351  1 n 1 1342  
82 14 Dtool_62HUtFqI 0 4 93 1343 0 14 Dtool_62HUtFqI 352 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::disable_clears
//       Access: Published, Virtual
//  Description: Disables both the color and depth clear.  See
//               set_clear_color_active and set_clear_depth_active.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1350  
83 14 Dtool_62HU0Gt_ 0 6 94 1349 0 14 Dtool_62HU0Gt_ 461 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::is_any_clear_active
//       Access: Published, Virtual
//  Description: Returns true if any of the clear types (so far there
//               are just color or depth) have been set active, or
//               false if none of them are active and there is no need
//               to clear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1351  
84 14 Dtool_62HUY3P2 0 4 95 1343 0 14 Dtool_62HUY3P2 1485 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_pixel_zoom
//       Access: Published, Virtual
//  Description: Sets the amount by which the pixels of the region are
//               scaled internally when filling the image interally.
//               Setting this number larger makes the pixels blockier,
//               but may make the rendering faster, particularly for
//               software renderers.  Setting this number to 2.0
//               reduces the number of pixels that have to be filled
//               by the renderer by a factor of 2.0.  It doesn't make
//               sense to set this lower than 1.0.
//
//               It is possible to set this on either individual
//               DisplayRegions or on overall GraphicsWindows, but you
//               will get better performance for setting it on the
//               window rather than its individual DisplayRegions.
//               Also, you may not set it on a DisplayRegion that
//               doesn't have both clear_color() and clear_depth()
//               enabled.
//
//               This property is only supported on renderers for
//               which it is particularly useful--currently, this is
//               the tinydisplay software renderer.  Other kinds of
//               renderers allow you to set this property, but ignore
//               it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1350  10 pixel_zoom 1 1356  
85 14 Dtool_62HUGK1k 0 6 96 1356 0 14 Dtool_62HUGK1k 388 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_zoom
//       Access: Published
//  Description: Returns the value set by set_pixel_zoom(), regardless
//               of whether it is being respected or not.  Also see
//               get_pixel_factor().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1351  
86 14 Dtool_62HULAtt 0 6 97 1356 0 14 Dtool_62HULAtt 650 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_factor
//       Access: Published
//  Description: Returns the amount by which the height and width of
//               the region will be scaled internally, based on the
//               zoom factor set by set_pixel_zoom().  This will
//               return 1.0 if the pixel_zoom was not set or if it is
//               not being respected (for instance, because the
//               underlying renderer doesn't support it--see
//               supports_pixel_zoom).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1351  
87 14 Dtool_62HUi4LW 0 6 98 1349 0 14 Dtool_62HUi4LW 802 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::supports_pixel_zoom
//       Access: Published, Virtual
//  Description: Returns true if a call to set_pixel_zoom() will be
//               respected, false if it will be ignored.  If this
//               returns false, then get_pixel_factor() will always
//               return 1.0, regardless of what value you specify for
//               set_pixel_zoom().
//
//               This may return false if the underlying renderer
//               doesn't support pixel zooming, or if you have called
//               this on a DisplayRegion that doesn't have both
//               set_clear_color() and set_clear_depth() enabled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1351  
88 14 Dtool_62HUu4KC 0 6 99 1342 0 14 Dtool_62HUu4KC 334 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_renderbuffer_type
//       Access: Static, Published
//  Description: Returns the RenderBuffer::Type that corresponds
//               to a RenderTexturePlane.
//////////////////////////////////////////////////////////////////// 1 5 plane 1 1342  
89 14 Dtool_62HUlE6b 0 7 101 1359 0 14 Dtool_62HUlE6b 229 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1357  
90 14 Dtool_62HUsWhV 0 7 101 1359 0 14 Dtool_62HUsWhV 0 1 9 os_handle 1 1360  
91 14 Dtool_62HULwuM 0 7 102 1360 0 14 Dtool_62HULwuM 321 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_os_handle
//       Access: Published
//  Description: Returns the OS-specific handle stored internally to
//               the WindowHandle wrapper.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1357  
92 14 Dtool_62HUklyc 0 4 103 1343 0 14 Dtool_62HUklyc 321 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::set_os_handle
//       Access: Published
//  Description: Changes the OS-specific handle stored internally to
//               the WindowHandle wrapper.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1359  9 os_handle 1 1360  
93 14 Dtool_62HUBCmq 0 4 104 1343 0 14 Dtool_62HUBCmq 566 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::send_windows_message
//       Access: Published
//  Description: Call this method on a parent WindowHandle to deliver
//               a Windows message to the current child window, if any.
//               This is used in the web plugin system to deliver
//               button events detected directly by the browser system
//               into Panda, which is particularly necessary on Vista.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1359  3 msg 1 1345  6 wparam 1 1342  6 lparam 1 1342  
94 14 Dtool_62HUPIYS 0 6 105 1345 0 14 Dtool_62HUPIYS 397 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_int_handle
//       Access: Published
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1357  
95 14 Dtool_62HUJFbs 0 4 106 1343 0 14 Dtool_62HUJFbs 220 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1357  3 out 1 1361  
96 14 Dtool_62HU21y5 0 7 111 1340 0 14 Dtool_62HU21y5 0 0 
97 14 Dtool_62HUQNL2 0 6 108 1345 0 14 Dtool_62HUQNL2 416 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::get_int_handle
//       Access: Published, Virtual
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1363  
98 14 Dtool_62HUV3Ze 0 4 109 1343 0 14 Dtool_62HUV3Ze 239 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1363  3 out 1 1361  
99 14 Dtool_62HUh_wT 0 7 110 1340 0 14 Dtool_62HUh_wT 0 0 
100 14 Dtool_62HUGNZU 0 7 115 1365 768 14 Dtool_62HUGNZU 228 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
101 14 Dtool_62HUlceF 0 7 115 1365 768 14 Dtool_62HUlceF 233 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1366  
102 14 Dtool_62HUZC_R 0 6 116 1365 0 14 Dtool_62HUZC_R 0 2 4 this 3 1365  4 copy 1 1366  
103 14 Dtool_62HUPD11 0 7 118 1365 768 14 Dtool_62HUPD11 395 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_config_properties
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with all of the
//               default values filled in according to the user's
//               config file.
//////////////////////////////////////////////////////////////////// 0 
104 14 Dtool_62HU1hD1 0 7 119 1365 768 14 Dtool_62HU1hD1 457 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties.  If
//               set_default() has been called, this returns that
//               WindowProperties structure; otherwise, this returns
//               get_config_properties().
//////////////////////////////////////////////////////////////////// 0 
105 14 Dtool_62HUNbiB 0 4 120 1343 0 14 Dtool_62HUNbiB 589 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_default
//       Access: Published, Static
//  Description: Replaces the "default" WindowProperties with the
//               specified structure.  The specified WindowProperties
//               will be returned by future calls to get_default(),
//               until clear_default() is called.
//
//               Note that this completely replaces the default
//               properties; it is not additive.
//////////////////////////////////////////////////////////////////// 1 18 default_properties 1 1366  
106 14 Dtool_62HUDZHK 0 4 121 1343 0 14 Dtool_62HUDZHK 346 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties to whatever
//               is specified in the user's config file.
//////////////////////////////////////////////////////////////////// 0 
107 14 Dtool_62HU7Qam 0 7 122 1365 768 14 Dtool_62HU7Qam 386 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::size
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with only the
//               size specified.  The size is the only property that
//               matters to buffers.
//////////////////////////////////////////////////////////////////// 2 6 x_size 1 1342  6 y_size 1 1342  
108 14 Dtool_62HUgRMD 0 6 123 1349 0 14 Dtool_62HUgRMD 0 2 4 this 3 1366  5 other 1 1366  
109 14 Dtool_62HU_Vsq 0 6 124 1349 0 14 Dtool_62HU_Vsq 0 2 4 this 3 1366  5 other 1 1366  
110 14 Dtool_62HUIj6c 0 4 125 1343 0 14 Dtool_62HUIj6c 381 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the WindowProperties structure to its
//               initial empty state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
111 14 Dtool_62HU5Hm3 0 6 126 1349 0 14 Dtool_62HU5Hm3 319 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
112 14 Dtool_62HUP616 0 4 127 1343 0 14 Dtool_62HUP616 514 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  6 origin 1 1368  
113 14 Dtool_62HU_6s1 0 4 127 1343 0 14 Dtool_62HU_6s1 514 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1365  8 x_origin 1 1342  8 y_origin 1 1342  
114 14 Dtool_62HUOKyo 0 6 128 1368 0 14 Dtool_62HUOKyo 328 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_origin
//       Access: Published
//  Description: Returns the coordinates of the window's top-left
//               corner, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
115 14 Dtool_62HUmWEm 0 6 129 1342 0 14 Dtool_62HUmWEm 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_origin
//       Access: Published
//  Description: Returns the x coordinate of the window's top-left
//               corner, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
116 14 Dtool_62HUjWge 0 6 130 1342 0 14 Dtool_62HUjWge 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_origin
//       Access: Published
//  Description: Returns the y coordinate of the window's top-left
//               corner, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
117 14 Dtool_62HUeNcv 0 6 131 1349 0 14 Dtool_62HUeNcv 315 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_origin
//       Access: Published
//  Description: Returns true if the window origin has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
118 14 Dtool_62HUJusE 0 4 132 1343 0 14 Dtool_62HUJusE 283 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_origin
//       Access: Published
//  Description: Removes the origin specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
119 14 Dtool_62HUyNWj 0 4 133 1343 0 14 Dtool_62HUyNWj 393 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  4 size 1 1371  
120 14 Dtool_62HU7Ba1 0 4 133 1343 0 14 Dtool_62HU7Ba1 393 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1365  6 x_size 1 1342  6 y_size 1 1342  
121 14 Dtool_62HUA4UN 0 6 134 1371 0 14 Dtool_62HUA4UN 328 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_origin
//       Access: Published
//  Description: Returns size in pixels of the useful part of the
//               window, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
122 14 Dtool_62HUVfNw 0 6 135 1342 0 14 Dtool_62HUVfNw 401 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_size
//       Access: Published
//  Description: Returns size in pixels in the x dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's width.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
123 14 Dtool_62HUQfpo 0 6 136 1342 0 14 Dtool_62HUQfpo 402 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_size
//       Access: Published
//  Description: Returns size in pixels in the y dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's height.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
124 14 Dtool_62HU04_T 0 6 137 1349 0 14 Dtool_62HU04_T 311 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_size
//       Access: Published
//  Description: Returns true if the window size has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
125 14 Dtool_62HUChuY 0 4 138 1343 0 14 Dtool_62HUChuY 279 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_size
//       Access: Published
//  Description: Removes the size specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
126 14 Dtool_62HUrK49 0 6 139 1349 0 14 Dtool_62HUrK49 232 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_mouse_mode
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
127 14 Dtool_62HUmSWG 0 4 140 1343 0 14 Dtool_62HUmSWG 1074 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_mouse_mode
//       Access: Published
//  Description: Specifies the mode in which the window is to operate
//               its mouse pointer.  The default is M_absolute, which
//               is the normal mode in which a mouse pointer operates;
//               but you can also set M_relative, which is
//               particularly useful for FPS-style mouse movements
//               where you have hidden the mouse pointer and are are
//               more interested in how fast the mouse is moving,
//               rather than precisely where the pointer is hovering.
//
//               This has no effect on Windows, which does not
//               have this concept; but is important to do on OSX
//               and Unix/X11 to properly enable a smooth FPS-style
//               mouselook mode.  On Unix/X11, this requires the
//               Xxf86dga extension to be available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  4 mode 1 1302  
128 14 Dtool_62HUjVO3 0 6 141 1302 0 14 Dtool_62HUjVO3 253 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_mouse_mode
//       Access: Published
//  Description: See set_mouse_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
129 14 Dtool_62HUmyf3 0 4 142 1343 0 14 Dtool_62HUmyf3 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_mouse_mode
//       Access: Published
//  Description: Removes the mouse_mode specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
130 14 Dtool_62HUEtQx 0 4 143 1343 0 14 Dtool_62HUEtQx 302 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_title
//       Access: Published
//  Description: Specifies the title that should be assigned to the
//               window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  5 title 1 1346  
131 14 Dtool_62HULpK6 0 6 144 1346 0 14 Dtool_62HULpK6 254 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_title
//       Access: Published
//  Description: Returns the window's title.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
132 14 Dtool_62HU4p0A 0 6 145 1349 0 14 Dtool_62HU4p0A 313 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_title
//       Access: Published
//  Description: Returns true if the window title has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
133 14 Dtool_62HU2KzX 0 4 146 1343 0 14 Dtool_62HU2KzX 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_title
//       Access: Published
//  Description: Removes the title specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
134 14 Dtool_62HU1wGY 0 4 147 1343 0 14 Dtool_62HU1wGY 381 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_undecorated
//       Access: Published
//  Description: Specifies whether the window should be created with a
//               visible title and border (false, the default) or not
//               (true).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  11 undecorated 1 1349  
135 14 Dtool_62HUJtRY 0 6 148 1349 0 14 Dtool_62HUJtRY 274 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_undecorated
//       Access: Published
//  Description: Returns true if the window has no border.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
136 14 Dtool_62HUds7e 0 6 149 1349 0 14 Dtool_62HUds7e 286 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_undecorated
//       Access: Published
//  Description: Returns true if set_undecorated() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
137 14 Dtool_62HU6EZL 0 4 150 1343 0 14 Dtool_62HU6EZL 293 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_undecorated
//       Access: Published
//  Description: Removes the undecorated specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
138 14 Dtool_62HUhxLw 0 4 151 1343 0 14 Dtool_62HUhxLw 310 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fixed_size
//       Access: Published
//  Description: Specifies whether the window should be resizable by
//               the user.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  10 fixed_size 1 1349  
139 14 Dtool_62HUi_y_ 0 6 152 1349 0 14 Dtool_62HUi_y_ 323 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fixed_size
//       Access: Published
//  Description: Returns true if the window cannot be resized by the
//               user, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
140 14 Dtool_62HU7wcF 0 6 153 1349 0 14 Dtool_62HU7wcF 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fixed_size
//       Access: Published
//  Description: Returns true if set_fixed_size() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
141 14 Dtool_62HUPwhp 0 4 154 1343 0 14 Dtool_62HUPwhp 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fixed_size
//       Access: Published
//  Description: Removes the fixed_size specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
142 14 Dtool_62HUq0Uu 0 4 155 1343 0 14 Dtool_62HUq0Uu 383 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fullscreen
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               fullscreen mode (true) or normal windowed mode
//               (false, the default).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  10 fullscreen 1 1349  
143 14 Dtool_62HUtz98 0 6 156 1349 0 14 Dtool_62HUtz98 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fullscreen
//       Access: Published
//  Description: Returns true if the window is in fullscreen mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
144 14 Dtool_62HUi3nD 0 6 157 1349 0 14 Dtool_62HUi3nD 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fullscreen
//       Access: Published
//  Description: Returns true if set_fullscreen() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
145 14 Dtool_62HUwgpW 0 4 158 1343 0 14 Dtool_62HUwgpW 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fullscreen
//       Access: Published
//  Description: Removes the fullscreen specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
146 14 Dtool_62HUpPA6 0 4 159 1343 0 14 Dtool_62HUpPA6 372 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_foreground
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               the foreground (true), or left in the background
//               (false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  10 foreground 1 1349  
147 14 Dtool_62HUrFnI 0 6 160 1349 0 14 Dtool_62HUrFnI 280 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_foreground
//       Access: Published
//  Description: Returns true if the window is in the foreground.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
148 14 Dtool_62HU7CRP 0 6 161 1349 0 14 Dtool_62HU7CRP 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_foreground
//       Access: Published
//  Description: Returns true if set_foreground() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
149 14 Dtool_62HUNghP 0 4 162 1343 0 14 Dtool_62HUNghP 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_foreground
//       Access: Published
//  Description: Removes the foreground specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
150 14 Dtool_62HUJuBm 0 4 163 1343 0 14 Dtool_62HUJuBm 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_minimized
//       Access: Published
//  Description: Specifies whether the window should be created
//               minimized (true), or normal (false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  9 minimized 1 1349  
151 14 Dtool_62HUUuGt 0 6 164 1349 0 14 Dtool_62HUUuGt 271 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_minimized
//       Access: Published
//  Description: Returns true if the window is minimized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
152 14 Dtool_62HUgrwz 0 6 165 1349 0 14 Dtool_62HUgrwz 282 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_minimized
//       Access: Published
//  Description: Returns true if set_minimized() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
153 14 Dtool_62HUNh8v 0 4 166 1343 0 14 Dtool_62HUNh8v 289 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_minimized
//       Access: Published
//  Description: Removes the minimized specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
154 14 Dtool_62HUDYtm 0 4 167 1343 0 14 Dtool_62HUDYtm 310 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_raw_mice
//       Access: Published
//  Description: Specifies whether the window should read the raw
//               mouse devices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  8 raw_mice 1 1349  
155 14 Dtool_62HUjiir 0 6 168 1349 0 14 Dtool_62HUjiir 276 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_raw_mice
//       Access: Published
//  Description: Returns true if the window reads the raw mice.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
156 14 Dtool_62HUTfNy 0 6 169 1349 0 14 Dtool_62HUTfNy 280 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_raw_mice
//       Access: Published
//  Description: Returns true if set_raw_mice() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
157 14 Dtool_62HUm_9h 0 4 170 1343 0 14 Dtool_62HUm_9h 287 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_raw_mice
//       Access: Published
//  Description: Removes the raw_mice specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
158 14 Dtool_62HU0PHZ 0 4 171 1343 0 14 Dtool_62HU0PHZ 417 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_open
//       Access: Published
//  Description: Specifies whether the window should be open.  It is
//               legal to create a GraphicsWindow in the closed state,
//               and later request it to open by changing this flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  4 open 1 1349  
159 14 Dtool_62HUnBqS 0 6 172 1349 0 14 Dtool_62HUnBqS 261 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_open
//       Access: Published
//  Description: Returns true if the window is open.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
160 14 Dtool_62HU3AUZ 0 6 173 1349 0 14 Dtool_62HU3AUZ 272 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_open
//       Access: Published
//  Description: Returns true if set_open() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
161 14 Dtool_62HUXQu6 0 4 174 1343 0 14 Dtool_62HUXQu6 279 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_open
//       Access: Published
//  Description: Removes the open specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
162 14 Dtool_62HUuag3 0 4 175 1343 0 14 Dtool_62HUuag3 288 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_hidden
//       Access: Published
//  Description: Specifies whether the mouse cursor should be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  13 cursor_hidden 1 1349  
163 14 Dtool_62HUILMV 0 6 176 1349 0 14 Dtool_62HUILMV 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_hidden
//       Access: Published
//  Description: Returns true if the mouse cursor is invisible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
164 14 Dtool_62HU0O2b 0 6 177 1349 0 14 Dtool_62HU0O2b 290 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_hidden
//       Access: Published
//  Description: Returns true if set_cursor_hidden() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
165 14 Dtool_62HUnQoK 0 4 178 1343 0 14 Dtool_62HUnQoK 297 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_hidden
//       Access: Published
//  Description: Removes the cursor_hidden specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
166 14 Dtool_62HUvab1 0 4 179 1343 0 14 Dtool_62HUvab1 344 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_icon_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the window when it is minimized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  13 icon_filename 1 1374  
167 14 Dtool_62HUaEsZ 0 6 180 1374 0 14 Dtool_62HUaEsZ 288 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_icon_filename
//       Access: Published
//  Description: Returns the icon filename associated with the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
168 14 Dtool_62HUqEWg 0 6 181 1349 0 14 Dtool_62HUqEWg 307 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_icon_filename
//       Access: Published
//  Description: Returns true if set_icon_filename() has been
//               specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
169 14 Dtool_62HUOBF2 0 4 182 1343 0 14 Dtool_62HUOBF2 314 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_icon_filename
//       Access: Published
//  Description: Removes the icon_filename specification from the
//               properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
170 14 Dtool_62HUFBsD 0 4 183 1343 0 14 Dtool_62HUFBsD 391 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the mouse cursor when it is within the
//               window (and visible).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  15 cursor_filename 1 1374  
171 14 Dtool_62HUzq6A 0 6 184 1374 0 14 Dtool_62HUzq6A 313 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_filename
//       Access: Published
//  Description: Returns the icon filename associated with the mouse
//               cursor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
172 14 Dtool_62HUjlkH 0 6 185 1349 0 14 Dtool_62HUjlkH 311 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_filename
//       Access: Published
//  Description: Returns true if set_cursor_filename() has been
//               specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
173 14 Dtool_62HUImNb 0 4 186 1343 0 14 Dtool_62HUImNb 318 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_filename
//       Access: Published
//  Description: Removes the cursor_filename specification from the
//               properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
174 14 Dtool_62HUonGh 0 4 187 1343 0 14 Dtool_62HUonGh 609 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_z_order
//       Access: Published
//  Description: Specifies the relative ordering of the window with
//               respect to other windows.  If the z_order is Z_top,
//               the window will always be on top of other windows; if
//               it is Z_bottom, it will always be below other
//               windows.  Most windows will want to be Z_normal,
//               which allows the user to control the order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  7 z_order 1 1301  
175 14 Dtool_62HU_iJo 0 6 188 1301 0 14 Dtool_62HU_iJo 258 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_z_order
//       Access: Published
//  Description: Returns the window's z_order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
176 14 Dtool_62HUuhzu 0 6 189 1349 0 14 Dtool_62HUuhzu 317 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_z_order
//       Access: Published
//  Description: Returns true if the window z_order has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
177 14 Dtool_62HULFwW 0 4 190 1343 0 14 Dtool_62HULFwW 285 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_z_order
//       Access: Published
//  Description: Removes the z_order specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
178 14 Dtool_62HUttFo 0 4 191 1343 0 14 Dtool_62HUttFo 1028 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  13 parent_window 1 1359  
179 14 Dtool_62HUhe0o 0 4 191 1343 0 14 Dtool_62HUhe0o 1028 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
180 14 Dtool_62HUDGd5 0 4 191 1343 0 14 Dtool_62HUDGd5 1056 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.
//
//               This is a deprecated variant on this method, and
//               exists only for backward compatibility.  Future code
//               should use the version of set_parent_window() below
//               that receives a WindowHandle object; that interface
//               is much more robust.
//
//               In this deprecated variant, the actual value for
//               "parent" is platform-specific.  On Windows, it is the
//               HWND of the parent window, cast to an unsigned
//               integer.  On X11, it is the Window pointer of the
//               parent window, similarly cast.  On OSX, this is the
//               NSWindow pointer, which doesn't appear to work at
//               all.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  6 parent 1 1345  
181 14 Dtool_62HU7fZY 0 7 192 1359 0 14 Dtool_62HU7fZY 340 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_parent_window
//       Access: Published
//  Description: Returns the parent window specification, or NULL if
//               there is no parent window specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
182 14 Dtool_62HULSDf 0 6 193 1349 0 14 Dtool_62HULSDf 296 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_parent_window
//       Access: Published
//  Description: Checks the S_parent_window specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1366  
183 14 Dtool_62HUy5uH 0 4 194 1343 0 14 Dtool_62HUy5uH 299 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_parent_window
//       Access: Published
//  Description: Removes the S_parent_window specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
184 14 Dtool_62HUcUzF 0 4 195 1343 0 14 Dtool_62HUcUzF 376 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  5 other 1 1366  
185 14 Dtool_62HUXFj2 0 4 196 1343 0 14 Dtool_62HUXFj2 368 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1366  3 out 1 1361  
186 14 Dtool_62HUZzns 0 6 204 1342 0 14 Dtool_62HUZzns 280 ///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_num_regions
//       Access: Published
//  Description: Returns the number of regions, see set_num_regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
187 14 Dtool_62HULWD0 0 4 205 1343 0 14 Dtool_62HULWD0 607 ///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_num_regions
//       Access: Published
//  Description: Sets the number of regions that this DisplayRegion
//               indicates.  Usually, this number is 1 (and it is
//               always at least 1), and only the first is used for
//               rendering.  However, if more than one is provided,
//               you may select which one to render into using a
//               geometry shader (gl_ViewportIndex in GLSL).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  1 i 1 1342  
188 14 Dtool_62HU3AS_ 0 7 206 1380 0 14 Dtool_62HU3AS_ 391 ///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  1 i 1 1342  
189 14 Dtool_62HUVdpt 0 7 206 1380 0 14 Dtool_62HUVdpt 391 ///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
190 14 Dtool_62HUKJ5y 0 6 207 1356 0 14 Dtool_62HUKJ5y 386 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  1 i 1 1342  
191 14 Dtool_62HU8EnQ 0 6 207 1356 0 14 Dtool_62HU8EnQ 386 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
192 14 Dtool_62HUKI2S 0 6 208 1356 0 14 Dtool_62HUKI2S 388 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  1 i 1 1342  
193 14 Dtool_62HU85BK 0 6 208 1356 0 14 Dtool_62HU85BK 388 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
194 14 Dtool_62HUvsR4 0 6 209 1356 0 14 Dtool_62HUvsR4 392 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within its GraphicsOutput.  This 
//               number will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  1 i 1 1342  
195 14 Dtool_62HUCJld 0 6 209 1356 0 14 Dtool_62HUCJld 392 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within its GraphicsOutput.  This 
//               number will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
196 14 Dtool_62HU7G3P 0 6 210 1356 0 14 Dtool_62HU7G3P 384 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  1 i 1 1342  
197 14 Dtool_62HUpTxi 0 6 210 1356 0 14 Dtool_62HUpTxi 384 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
198 14 Dtool_62HU2Ss2 0 4 211 1343 0 14 Dtool_62HU2Ss2 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  10 dimensions 1 1353  
199 14 Dtool_62HUta7G 0 4 211 1343 0 14 Dtool_62HUta7G 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1379  1 l 1 1356  1 r 1 1356  1 b 1 1356  1 t 1 1356  
200 14 Dtool_62HUGUti 0 4 211 1343 0 14 Dtool_62HUGUti 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1379  1 i 1 1342  10 dimensions 1 1353  
201 14 Dtool_62HUZaMD 0 4 211 1343 0 14 Dtool_62HUZaMD 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1379  1 i 1 1342  1 l 1 1356  1 r 1 1356  1 b 1 1356  1 t 1 1356  
202 14 Dtool_62HUKjj6 0 7 212 1381 1075 14 Dtool_62HUKjj6 376 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that this DisplayRegion is
//               ultimately associated with, or NULL if no window is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
203 14 Dtool_62HU668k 0 7 213 1338 0 14 Dtool_62HU668k 370 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this DisplayRegion is
//               ultimately associated with, or NULL if no pipe is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
204 14 Dtool_62HUHd9E 0 6 214 1349 0 14 Dtool_62HUHd9E 313 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_stereo
//       Access: Published, Virtual
//  Description: Returns true if this is a StereoDisplayRegion, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
205 14 Dtool_62HUsRD1 0 4 215 1343 0 14 Dtool_62HUsRD1 669 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_camera
//       Access: Published, Virtual
//  Description: Sets the camera that is associated with this
//               DisplayRegion.  There is a one-to-many association
//               between cameras and DisplayRegions; one camera may be
//               shared by multiple DisplayRegions.
//
//               The camera is actually set via a NodePath, which
//               clarifies which instance of the camera (if there
//               happen to be multiple instances) we should use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  6 camera 1 1382  
206 14 Dtool_62HUQE0w 0 7 216 1387 0 14 Dtool_62HUQE0w 362 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  14 current_thread 1 1385  
207 14 Dtool_62HUM2LQ 0 7 216 1387 0 14 Dtool_62HUM2LQ 362 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
208 14 Dtool_62HUPMVE 0 4 217 1343 0 14 Dtool_62HUPMVE 386 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_active
//       Access: Published, Virtual
//  Description: Sets the active flag associated with the
//               DisplayRegion.  If the DisplayRegion is marked
//               inactive, nothing is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  6 active 1 1349  
209 14 Dtool_62HUpe7G 0 6 218 1349 0 14 Dtool_62HUpe7G 299 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
210 14 Dtool_62HUJhLw 0 4 219 1343 0 14 Dtool_62HUJhLw 439 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_sort
//       Access: Published, Virtual
//  Description: Sets the sort value associated with the
//               DisplayRegion.  Within a window, DisplayRegions will
//               be rendered in order from the lowest sort value to
//               the highest.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  4 sort 1 1342  
211 14 Dtool_62HUkJ4o 0 6 220 1342 0 14 Dtool_62HUkJ4o 297 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_sort
//       Access: Published
//  Description: Returns the sort value associated with the
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
212 14 Dtool_62HUwg4T 0 4 221 1343 0 14 Dtool_62HUwg4T 1825 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_stereo_channel
//       Access: Published, Virtual
//  Description: Specifies whether the DisplayRegion represents the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  This automatically
//               adjusts the lens that is used to render to this
//               DisplayRegion to its left or right eye, according to
//               the lens's stereo properties.
//
//               When the DisplayRegion is attached to a stereo window
//               (one for which is_stereo() returns true), this also
//               specifies which physical channel the DisplayRegion
//               renders to.
//
//               Normally you would create at least two DisplayRegions
//               for a stereo window, one for each of the left and
//               right channels.  The two DisplayRegions may share the
//               same camera (and thus the same lens); this parameter
//               is used to control the exact properties of the lens
//               when it is used to render into this DisplayRegion.
//
//               Also see the StereoDisplayRegion, which automates
//               managing a pair of left/right DisplayRegions.
//
//               An ordinary DisplayRegion may be set to SC_mono,
//               SC_left, or SC_right.  You may set SC_stereo only on
//               a StereoDisplayRegion.
//
//               This call also resets tex_view_offset to its default
//               value, which is 0 for the left eye or 1 for the right
//               eye of a stereo display region, or 0 for a mono
//               display region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  14 stereo_channel 1 1388  
213 14 Dtool_62HUGBUH 0 6 222 1388 0 14 Dtool_62HUGBUH 448 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_stereo_channel
//       Access: Published
//  Description: Returns whether the DisplayRegion is specified as the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  See
//               set_stereo_channel().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
214 14 Dtool_62HUotSp 0 4 223 1343 0 14 Dtool_62HUotSp 776 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_tex_view_offset
//       Access: Published, Virtual
//  Description: Sets the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.  This is set automatically when you call
//               set_stereo_channel().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  15 tex_view_offset 1 1342  
215 14 Dtool_62HUYFGv 0 6 224 1342 0 14 Dtool_62HUYFGv 687 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_tex_view_offset
//       Access: Public
//  Description: Returns the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
216 14 Dtool_62HUDC63 0 4 225 1343 0 14 Dtool_62HUDC63 949 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_incomplete_render
//       Access: Published, Virtual
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               This flag may also be set on the
//               GraphicsStateGuardian.  It will be considered true
//               for a given DisplayRegion only if it is true on both
//               the GSG and on the DisplayRegion.
//
//               See GraphicsStateGuardian::set_incomplete_render()
//               for more detail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  17 incomplete_render 1 1349  
217 14 Dtool_62HU6SQs 0 6 226 1349 0 14 Dtool_62HU6SQs 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_incomplete_render
//       Access: Published
//  Description: Returns the incomplete_render flag.  See
//               set_incomplete_render().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
218 14 Dtool_62HU7uok 0 4 227 1343 0 14 Dtool_62HU7uok 988 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_texture_reload_priority
//       Access: Published, Virtual
//  Description: Specifies an integer priority which is assigned to
//               any asynchronous texture reload requests spawned
//               while processing this DisplayRegion.  This controls
//               which textures are loaded first when multiple
//               textures need to be reloaded at once; it also
//               controls the relative priority between asynchronous
//               texture loads and asynchronous model or animation
//               loads.
//
//               Specifying a larger number here makes the textures
//               rendered by this DisplayRegion load up first.  This
//               may be particularly useful to do, for instance, for
//               the DisplayRegion that renders the gui.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  23 texture_reload_priority 1 1342  
219 14 Dtool_62HUpMFg 0 6 228 1342 0 14 Dtool_62HUpMFg 391 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_texture_reload_priority
//       Access: Published
//  Description: Returns the priority which is assigned to
//               asynchronous texture reload requests.  See
//               set_texture_reload_priority().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
220 14 Dtool_62HUt3kY 0 4 229 1343 0 14 Dtool_62HUt3kY 443 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_lens_index
//       Access: Published
//  Description: Sets the lens index, allows for multiple lenses to
//               be attached to a camera.  This is useful for a 
//               variety of setups, such as fish eye rendering.
//               The default is 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  5 index 1 1342  
221 14 Dtool_62HUHvi6 0 6 230 1342 0 14 Dtool_62HUHvi6 479 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_lens_index
//       Access: Public
//  Description: Returns the specific lens of the associated Camera
//               that will be used for rendering this scene.  Most
//               Cameras hold only one lens, but for multiple lenses
//               this method may be used to selected between them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
222 14 Dtool_62HUuCaA 0 4 231 1343 0 14 Dtool_62HUuCaA 494 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_traverser
//       Access: Published, Virtual
//  Description: Specifies the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.  Normally the
//               default CullTraverser is sufficient, but this may be
//               changed to change the default cull behavior.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  4 trav 1 1390  
223 14 Dtool_62HUmlBH 0 7 232 1390 0 14 Dtool_62HUmlBH 337 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_traverser
//       Access: Published
//  Description: Returns the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
224 14 Dtool_62HUVFCA 0 4 233 1343 0 14 Dtool_62HUVFCA 279 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cube_map_index
//       Access: Published
//  Description: Deprecated; replaced by set_target_tex_page().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  14 cube_map_index 1 1342  
225 14 Dtool_62HU_ppu 0 4 234 1343 0 14 Dtool_62HU_ppu 907 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_target_tex_page
//       Access: Published, Virtual
//  Description: This is a special parameter that is only used when
//               rendering the faces of a cube map or multipage and/or
//               multiview texture.
//
//               This sets up the DisplayRegion to render to the ith
//               page and jth view of its associated texture(s); the
//               value must be consistent with the range of values
//               availble to the texture.  A normal DisplayRegion that
//               is not associated with any particular page should be
//               set to page -1 and view 0.
//
//               This is particularly useful when rendering cube maps
//               and/or stereo textures.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  4 page 1 1342  
226 14 Dtool_62HUNBc0 0 6 235 1342 0 14 Dtool_62HUNBc0 433 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_target_tex_page
//       Access: Published
//  Description: Returns the target page number associated with this
//               particular DisplayRegion, or -1 if it is not
//               associated with a page.  See
//               set_target_tex_page().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
227 14 Dtool_62HUN2Nd 0 4 236 1343 0 14 Dtool_62HUN2Nd 392 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_scissor_enabled
//       Access: Published
//  Description: Sets whether or not scissor testing is enabled
//               for this region.  The default is true, except for
//               the overlay display region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  15 scissor_enabled 1 1349  
228 14 Dtool_62HUih6g 0 6 237 1349 0 14 Dtool_62HUih6g 395 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_scissor_enabled
//       Access: Published
//  Description: Returns whether or not scissor testing is enabled
//               for this region.  The default is true, except for
//               the overlay display region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
229 14 Dtool_62HUZe2r 0 4 238 1343 0 14 Dtool_62HUZe2r 1597 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the DisplayRegion is visited during the cull
//               traversal.  This callback will be made during the
//               cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               traversal for this DisplayRegion has not yet started.
//
//               The callback is passed an instance of a
//               DisplayRegionCullCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal cull behavior, so if your
//               callback does nothing, the scene graph will not be
//               traversed and therefore nothing will be drawn.  If
//               you wish the normal cull traversal to be performed
//               for this DisplayRegion, you must call
//               cbdata->upcall() from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  6 object 1 1392  
230 14 Dtool_62HUlceA 0 4 239 1343 0 14 Dtool_62HUlceA 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
231 14 Dtool_62HUIcXV 0 7 240 1392 0 14 Dtool_62HUIcXV 286 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
232 14 Dtool_62HU12YM 0 4 241 1343 0 14 Dtool_62HU12YM 1951 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the contents of DisplayRegion is drawn during the
//               draw traversal.  This callback will be made during
//               the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state is in the initial state, and no
//               projection matrix or modelview matrix is in effect.
//               begin_scene() has not yet been called, and no objects
//               have yet been drawn.  However, the viewport has
//               already been set to the appropriate part of the
//               window, and the clear commands for this DisplayRegion
//               (if any) have been issued.
//
//               The callback is passed an instance of a
//               DisplayRegionDrawCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal draw behavior, so if your
//               callback does nothing, nothing in the DisplayRegion
//               will be drawn.  If you wish the draw traversal to
//               continue to draw the contents of this DisplayRegion,
//               you must call cbdata->upcall() from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  6 object 1 1392  
233 14 Dtool_62HUmEIH 0 4 242 1343 0 14 Dtool_62HUmEIH 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
234 14 Dtool_62HUTl41 0 7 243 1392 0 14 Dtool_62HUTl41 286 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
235 14 Dtool_62HU_lBg 0 6 244 1342 0 14 Dtool_62HU_lBg 279 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_width
//       Access: Published
//  Description: Returns the width of the DisplayRegion in pixels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  1 i 1 1342  
236 14 Dtool_62HU9Qnq 0 6 244 1342 0 14 Dtool_62HU9Qnq 279 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_width
//       Access: Published
//  Description: Returns the width of the DisplayRegion in pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
237 14 Dtool_62HUkzp_ 0 6 245 1342 0 14 Dtool_62HUkzp_ 281 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_height
//       Access: Published
//  Description: Returns the height of the DisplayRegion in pixels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  1 i 1 1342  
238 14 Dtool_62HUKQDR 0 6 245 1342 0 14 Dtool_62HUKQDR 281 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_height
//       Access: Published
//  Description: Returns the height of the DisplayRegion in pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1377  
239 14 Dtool_62HUwKBx 0 4 246 1343 0 14 Dtool_62HUwKBx 229 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1377  3 out 1 1361  
240 14 Dtool_62HUzVMo 0 7 247 1394 0 14 Dtool_62HUzVMo 757 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 1 6 prefix 1 1346  
241 14 Dtool_62HUWeJc 0 7 247 1394 0 14 Dtool_62HUWeJc 757 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 0 
242 14 Dtool_62HUcz2s 0 7 248 1394 0 14 Dtool_62HUcz2s 470 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  6 prefix 1 1346  
243 14 Dtool_62HUJTg6 0 7 248 1394 0 14 Dtool_62HUJTg6 470 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
244 14 Dtool_62HUECpM 0 6 249 1349 0 14 Dtool_62HUECpM 350 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1379  8 filename 1 1374  13 image_comment 1 1346  
245 14 Dtool_62HUN5lm 0 6 249 1349 0 14 Dtool_62HUN5lm 350 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  8 filename 1 1374  
246 14 Dtool_62HUVX7L 0 7 250 1396 0 14 Dtool_62HUVX7L 374 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as a Texture, or NULL
//               on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
247 14 Dtool_62HU__qS 0 6 250 1349 0 14 Dtool_62HU__qS 398 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  5 image 1 1397  
248 14 Dtool_62HUGzuE 0 7 251 1400 0 14 Dtool_62HUGzuE 1131 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_cull_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the last frame's cull
//               operation.
//
//               This will be a hierarchy of nodes, one node for each
//               bin, each of which will in term be a parent of a
//               number of GeomNodes, representing the geometry drawn
//               in each bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself, which is constructed
//               and maintained internally.  No such scene graph is
//               normally constructed during the rendering of a frame;
//               this is an artificial construct created for the
//               purpose of making it easy to analyze the results of
//               the cull operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
249 14 Dtool_62HUZZzb 0 7 252 1340 0 14 Dtool_62HUZZzb 0 0 
250 14 Dtool_62HUrv6o 0 7 199 1401 0 14 Dtool_62HUrv6o 0 1 4 this 3 1379  
251 14 Dtool_62HUNvZ3 0 7 200 1379 852 14 Dtool_62HUNvZ3 0 1 4 this 3 1401  
252 14 Dtool_62HUlwzo 0 6 201 1350 0 14 Dtool_62HUlwzo 0 1 4 this 3 1379  
253 14 Dtool_62HUWozv 0 7 202 1379 852 14 Dtool_62HUWozv 0 1 4 this 3 1350  
254 14 Dtool_62HU9STW 0 7 254 1379 852 14 Dtool_62HU9STW 324 ////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_left_eye
//       Access: Published
//  Description: Returns a pointer to the left DisplayRegion managed
//               by this stereo object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1402  
255 14 Dtool_62HUHJcU 0 7 255 1379 852 14 Dtool_62HUHJcU 326 ////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_right_eye
//       Access: Published
//  Description: Returns a pointer to the right DisplayRegion managed
//               by this stereo object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1402  
256 14 Dtool_62HUSQKL 0 7 256 1340 0 14 Dtool_62HUSQKL 0 0 
257 14 Dtool_62HU0P03 0 7 303 1403 951 14 Dtool_62HU0P03 233 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
258 14 Dtool_62HUOlPt 0 7 303 1403 951 14 Dtool_62HUOlPt 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1404  
259 14 Dtool_62HU6uCK 0 6 258 1342 0 14 Dtool_62HU6uCK 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_depth_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
260 14 Dtool_62HUp9ex 0 6 259 1342 0 14 Dtool_62HUp9ex 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_color_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
261 14 Dtool_62HU5QAD 0 6 260 1342 0 14 Dtool_62HU5QAD 234 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_red_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
262 14 Dtool_62HUQvTg 0 6 261 1342 0 14 Dtool_62HUQvTg 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_green_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
263 14 Dtool_62HU641f 0 6 262 1342 0 14 Dtool_62HU641f 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_blue_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
264 14 Dtool_62HUYuZb 0 6 263 1342 0 14 Dtool_62HUYuZb 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_alpha_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
265 14 Dtool_62HUCuvJ 0 6 264 1342 0 14 Dtool_62HUCuvJ 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stencil_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
266 14 Dtool_62HUzcaD 0 6 265 1342 0 14 Dtool_62HUzcaD 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_accum_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
267 14 Dtool_62HUi42A 0 6 266 1342 0 14 Dtool_62HUi42A 234 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_rgba
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
268 14 Dtool_62HU6m6B 0 6 267 1342 0 14 Dtool_62HU6m6B 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_hrgba
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
269 14 Dtool_62HUFEoX 0 6 268 1342 0 14 Dtool_62HUFEoX 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_float
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
270 14 Dtool_62HUSH90 0 6 269 1342 0 14 Dtool_62HUSH90 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_multisamples
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
271 14 Dtool_62HU1QBe 0 6 270 1342 0 14 Dtool_62HU1QBe 356 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
272 14 Dtool_62HUn2ht 0 6 271 1342 0 14 Dtool_62HUn2ht 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_back_buffers
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
273 14 Dtool_62HUQkg0 0 6 272 1349 0 14 Dtool_62HUQkg0 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_indexed_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
274 14 Dtool_62HU7V7R 0 6 273 1349 0 14 Dtool_62HU7V7R 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_rgb_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
275 14 Dtool_62HU1KER 0 6 274 1349 0 14 Dtool_62HU1KER 232 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stereo
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
276 14 Dtool_62HUmgiH 0 6 275 1349 0 14 Dtool_62HUmgiH 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_hardware
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
277 14 Dtool_62HUI_F1 0 6 276 1349 0 14 Dtool_62HUI_F1 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_software
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
278 14 Dtool_62HUBmVi 0 6 277 1349 0 14 Dtool_62HUBmVi 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_srgb_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
279 14 Dtool_62HUi3on 0 6 278 1349 0 14 Dtool_62HUi3on 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_float_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
280 14 Dtool_62HUpwLM 0 6 279 1349 0 14 Dtool_62HUpwLM 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_float_depth
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
281 14 Dtool_62HU4McT 0 4 280 1343 0 14 Dtool_62HU4McT 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_depth_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
282 14 Dtool_62HUgD26 0 4 281 1343 0 14 Dtool_62HUgD26 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_color_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
283 14 Dtool_62HUkJPN 0 4 282 1343 0 14 Dtool_62HUkJPN 279 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgba_bits
//       Access: Published
//  Description: Sets all color bit requirements separately.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1403  1 r 1 1342  1 g 1 1342  1 b 1 1342  1 a 1 1342  
284 14 Dtool_62HU2pP2 0 4 283 1343 0 14 Dtool_62HU2pP2 234 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_red_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
285 14 Dtool_62HUJyqp 0 4 284 1343 0 14 Dtool_62HUJyqp 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_green_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
286 14 Dtool_62HUlx3u 0 4 285 1343 0 14 Dtool_62HUlx3u 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_blue_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
287 14 Dtool_62HUjyyk 0 4 286 1343 0 14 Dtool_62HUjyyk 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_alpha_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
288 14 Dtool_62HUwbci 0 4 287 1343 0 14 Dtool_62HUwbci 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stencil_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
289 14 Dtool_62HU2I1M 0 4 288 1343 0 14 Dtool_62HU2I1M 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_accum_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
290 14 Dtool_62HUIVH0 0 4 289 1343 0 14 Dtool_62HUIVH0 234 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_rgba
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
291 14 Dtool_62HUJ2_Q 0 4 290 1343 0 14 Dtool_62HUJ2_Q 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_hrgba
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
292 14 Dtool_62HUqLrm 0 4 291 1343 0 14 Dtool_62HUqLrm 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_float
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
293 14 Dtool_62HU6_qN 0 4 292 1343 0 14 Dtool_62HU6_qN 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_multisamples
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
294 14 Dtool_62HUmvEd 0 4 293 1343 0 14 Dtool_62HUmvEd 355 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
295 14 Dtool_62HUcsOG 0 4 294 1343 0 14 Dtool_62HUcsOG 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_back_buffers
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1342  
296 14 Dtool_62HUNnI5 0 4 295 1343 0 14 Dtool_62HUNnI5 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_indexed_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1349  
297 14 Dtool_62HUoLwD 0 4 296 1343 0 14 Dtool_62HUoLwD 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgb_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1349  
298 14 Dtool_62HUkw5k 0 4 297 1343 0 14 Dtool_62HUkw5k 232 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stereo
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1349  
299 14 Dtool_62HU1_ND 0 4 298 1343 0 14 Dtool_62HU1_ND 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_hardware
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1349  
300 14 Dtool_62HUtZww 0 4 299 1343 0 14 Dtool_62HUtZww 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_software
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1349  
301 14 Dtool_62HUxQEF 0 4 300 1343 0 14 Dtool_62HUxQEF 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_srgb_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1349  
302 14 Dtool_62HUh1Rn 0 4 301 1343 0 14 Dtool_62HUh1Rn 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_float_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1349  
303 14 Dtool_62HU_s0L 0 4 302 1343 0 14 Dtool_62HU_s0L 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_float_depth
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 n 1 1349  
304 14 Dtool_62HULWDE 0 6 305 1403 0 14 Dtool_62HULWDE 0 2 4 this 3 1403  4 copy 1 1404  
305 14 Dtool_62HUFGOb 0 6 306 1404 0 14 Dtool_62HUFGOb 395 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_default
//       Access: Published, Static
//  Description: Returns a FrameBufferProperties structure with all of
//               the default values filled in according to the user's
//               config file.
//////////////////////////////////////////////////////////////////// 0 
306 14 Dtool_62HU_xuw 0 6 307 1349 0 14 Dtool_62HU_xuw 0 2 4 this 3 1404  5 other 1 1404  
307 14 Dtool_62HUiGu_ 0 6 308 1349 0 14 Dtool_62HUiGu_ 0 2 4 this 3 1404  5 other 1 1404  
308 14 Dtool_62HUfz7q 0 4 309 1343 0 14 Dtool_62HUfz7q 391 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the FrameBufferProperties structure to its
//               initial empty state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1403  
309 14 Dtool_62HUzSla 0 4 310 1343 0 14 Dtool_62HUzSla 268 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_all_specified
//       Access: Published
//  Description: sets all the specified bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1403  
310 14 Dtool_62HUrBZu 0 6 311 1349 0 14 Dtool_62HUrBZu 405 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::subsumes
//       Access: Public
//  Description: Returns true if this set of properties makes
//               strictly greater or equal demands of the framebuffer
//               than the other set of framebuffer properties.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1404  5 other 1 1404  
311 14 Dtool_62HUHaxr 0 4 312 1343 0 14 Dtool_62HUHaxr 381 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  5 other 1 1404  
312 14 Dtool_62HUCzSe 0 4 313 1343 0 14 Dtool_62HUCzSe 263 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::output
//       Access: Published
//  Description: Generates a string representation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1404  3 out 1 1361  
313 14 Dtool_62HUs3_4 0 4 314 1343 0 14 Dtool_62HUs3_4 398 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_one_bit_per_channel
//       Access: Published
//  Description: If any of the depth, color, alpha, accum, or
//               stencil properties is set to more than one,
//               then they are reduced to one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1403  
314 14 Dtool_62HUx4ZJ 0 6 315 1349 0 14 Dtool_62HUx4ZJ 231 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_stereo
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
315 14 Dtool_62HUWlX5 0 6 316 1349 0 14 Dtool_62HUWlX5 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_single_buffered
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
316 14 Dtool_62HUJ6K8 0 6 317 1342 0 14 Dtool_62HUJ6K8 1390 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_quality
//       Access: Published
//  Description: Assumes that these properties are a description of
//               a window.
//
//               Measures how well this window satisfies a specified
//               set of requirements.  A higher quality number means
//               that more requirements were satisfied.  A quality of
//               zero means that the window is unsuitable.
//
//               The routine deducts a lot if the window fails to
//               provide a requested feature.  It deducts less
//               if the window provides a feature, but at a degraded
//               level of functionality (ie, the user asks for rgba8,
//               color, but the window only provides rgba4).  The
//               routine also deducts a small amount for unnecessary
//               features.  For example, if the window has an
//               accumulation buffer when one is not requested will
//               reduce quality slightly.  Maximum quality is obtained
//               when the window exactly matches the request.
//
//               If you want to know whether the window satisfies
//               all of the requirements, use the "subsumes" function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1404  4 reqs 1 1404  
317 14 Dtool_62HU5Lag 0 6 318 1349 0 14 Dtool_62HU5Lag 324 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
318 14 Dtool_62HUByA7 0 6 319 1349 0 14 Dtool_62HUByA7 444 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_basic
//       Access: Published
//  Description: Returns true if the properties are extremely basic.
//               The following count as basic: rgb or rgba, depth.
//               If anything else is specified, the properties are
//               non-basic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
319 14 Dtool_62HUTi5r 0 6 320 1342 0 14 Dtool_62HUTi5r 324 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_mask
//       Access: Published
//  Description: Converts the aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
320 14 Dtool_62HUFEQC 0 6 321 1342 0 14 Dtool_62HUFEQC 329 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_buffer_mask
//       Access: Private
//  Description: Converts the non-aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1404  
321 14 Dtool_62HUbcBa 0 6 322 1349 0 14 Dtool_62HUbcBa 426 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::verify_hardware_software
//       Access: Public
//  Description: Validates that the properties represent the desired
//               kind of renderer (hardware or software).  If not,
//               prints out an error message and returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1404  5 props 1 1404  8 renderer 1 1346  
322 14 Dtool_62HUv7ob 0 6 323 1349 0 14 Dtool_62HUv7ob 597 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::setup_color_texture
//       Access: Public
//  Description: Sets the texture up for render-to-texture matching
//               these framebuffer properties.
//
//               Returns true if there was a format that had enough
//               bits, false otherwise.  Of course, this is no
//               guarantee that a particular graphics back-end
//               supports rendering to textures of that format.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1404  3 tex 1 1396  
323 14 Dtool_62HU_Hak 0 6 324 1349 0 14 Dtool_62HU_Hak 597 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::setup_depth_texture
//       Access: Public
//  Description: Sets the texture up for render-to-texture matching
//               these framebuffer properties.
//
//               Returns true if there was a format that had enough
//               bits, false otherwise.  Of course, this is no
//               guarantee that a particular graphics back-end
//               supports rendering to textures of that format.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1404  3 tex 1 1396  
324 14 Dtool_62HUwJOi 0 7 326 1408 986 14 Dtool_62HUwJOi 240 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1406  
325 14 Dtool_62HUtG_c 0 7 326 1408 986 14 Dtool_62HUtG_c 1800 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
//////////////////////////////////////////////////////////////////// 1 5 model 1 1346  
326 14 Dtool_62HUPBJ_ 0 7 326 1408 986 14 Dtool_62HUPBJ_ 1800 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
//////////////////////////////////////////////////////////////////// 0 
327 14 Dtool_62HUGZxc 0 6 327 1408 0 14 Dtool_62HUGZxc 0 2 4 this 3 1408  4 copy 1 1406  
328 14 Dtool_62HU7c0w 0 6 328 1346 0 14 Dtool_62HU7c0w 326 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_model
//       Access: Published
//  Description: Returns the string that describes the threading
//               model.  See the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1406  
329 14 Dtool_62HU8GWk 0 6 329 1346 0 14 Dtool_62HU8GWk 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               culling in this model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1406  
330 14 Dtool_62HUHjIx 0 4 330 1343 0 14 Dtool_62HUHjIx 481 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               culling in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  9 cull_name 1 1346  
331 14 Dtool_62HUMOJd 0 6 331 1342 0 14 Dtool_62HUMOJd 454 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the cull thread
//               should access data.  This will be 0 if the cull is
//               run in the same thread as app, or 1 if it is its own
//               thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1406  
332 14 Dtool_62HUlbag 0 6 332 1346 0 14 Dtool_62HUlbag 392 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               sending the actual graphics primitives to the
//               graphics API in this model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1406  
333 14 Dtool_62HUwWNt 0 4 333 1343 0 14 Dtool_62HUwWNt 481 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_draw_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               drawing in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  9 cull_name 1 1346  
334 14 Dtool_62HU3ENZ 0 6 334 1342 0 14 Dtool_62HU3ENZ 538 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the draw thread
//               should access data.  This will be the same value as
//               get_cull_stage() if cull and draw are run in the same
//               thread, or one more than that value if draw should be
//               in its own thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1406  
335 14 Dtool_62HUzVRl 0 6 335 1349 0 14 Dtool_62HUzVRl 396 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_sorting
//       Access: Published
//  Description: Returns true if the model involves a separate cull
//               pass, or false if culling happens implicitly, at the
//               same time as draw.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1406  
336 14 Dtool_62HUtSHC 0 4 336 1343 0 14 Dtool_62HUtSHC 521 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_sorting
//       Access: Published
//  Description: Changes the flag that indicates whether the threading
//               model involves a separate cull pass.  This won't
//               change any windows that were already created with
//               this model; this only has an effect on newly-opened
//               windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  12 cull_sorting 1 1349  
337 14 Dtool_62HUysdw 0 6 337 1349 0 14 Dtool_62HUysdw 372 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_single_threaded
//       Access: Published
//  Description: Returns true if the threading model is a
//               single-threaded model, or false if it involves
//               threads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1406  
338 14 Dtool_62HUVNCv 0 6 338 1349 0 14 Dtool_62HUVNCv 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_default
//       Access: Published
//  Description: Returns true if the threading model is the default,
//               cull-then-draw single-threaded model, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1406  
339 14 Dtool_62HUolSI 0 4 339 1343 0 14 Dtool_62HUolSI 230 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1406  3 out 1 1361  
340 14 Dtool_62HUhhed 0 4 344 1343 0 14 Dtool_62HUhhed 261 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all
//       Access: Public
//  Description: Releases all prepared objects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
341 14 Dtool_62HUNhtg 0 6 345 1342 0 14 Dtool_62HUNhtg 319 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_textures
//       Access: Public
//  Description: Frees the resources for all textures associated with
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
342 14 Dtool_62HUyoUt 0 6 346 1342 0 14 Dtool_62HUyoUt 319 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_samplers
//       Access: Public
//  Description: Frees the resources for all samplers associated with
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
343 14 Dtool_62HUtq2Y 0 6 347 1342 0 14 Dtool_62HUtq2Y 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_geoms
//       Access: Public
//  Description: Frees the resources for all geoms associated with
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
344 14 Dtool_62HUbu1d 0 6 348 1342 0 14 Dtool_62HUbu1d 331 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_vertex_buffers
//       Access: Public
//  Description: Frees the resources for all vertex buffers associated
//               with this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
345 14 Dtool_62HUvg3_ 0 6 349 1342 0 14 Dtool_62HUvg3_ 329 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_index_buffers
//       Access: Public
//  Description: Frees the resources for all index buffers associated
//               with this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
346 14 Dtool_62HU41Tn 0 4 350 1343 0 14 Dtool_62HU41Tn 538 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsStateGuardian.  If the GraphicsStateGuardian
//               is marked inactive, nothing is rendered.  This is not
//               normally turned off unless there is a problem with
//               the rendering detected at a low level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  6 active 1 1349  
347 14 Dtool_62HUWMEv 0 6 351 1349 0 14 Dtool_62HUWMEv 315 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               GraphicsStateGuardian.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
348 14 Dtool_62HUBs7Q 0 6 352 1349 0 14 Dtool_62HUBs7Q 435 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_valid
//       Access: Published
//  Description: Returns true if the GSG has been correctly
//               initialized within a graphics context, false if there
//               has been some problem or it hasn't been initialized
//               yet.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
349 14 Dtool_62HUqmCi 0 6 353 1349 0 14 Dtool_62HUqmCi 301 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::needs_reset
//       Access: Public
//  Description: Returns true if the gsg is marked as needing a
//               reset.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
350 14 Dtool_62HUTWNA 0 4 354 1343 0 14 Dtool_62HUTWNA 1472 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_incomplete_render
//       Access: Public
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               Setting this true allows for a smoother frame rate,
//               but occasionally parts of the frame will be invisible
//               or missing (they will generally come in within a
//               second or two).  Setting this false guarantees that
//               every frame will be complete, but may cause more
//               chugs as things are loaded up at runtime.
//
//               You may want to set this false during loading
//               screens, to guarantee that all of your assets are
//               available by the time you take the loading screen
//               down.
//
//               This flag may also be set individually on each
//               DisplayRegion.  It will be considered true for a
//               given DisplayRegion only if it is true on both the
//               GSG and on the DisplayRegion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  17 incomplete_render 1 1349  
351 14 Dtool_62HUgMzz 0 4 355 1343 0 14 Dtool_62HUgMzz 385 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_loader
//       Access: Public
//  Description: Sets the Loader object that will be used by this GSG
//               to load textures when necessary, if
//               get_incomplete_render() is true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  6 loader 1 1412  
352 14 Dtool_62HURXHV 0 7 356 1412 0 14 Dtool_62HURXHV 397 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be used by this
//               GSG to load textures when necessary, if
//               get_incomplete_render() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
353 14 Dtool_62HUXe8K 0 7 357 1338 0 14 Dtool_62HUXe8K 304 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_pipe
//       Access: Published
//  Description: Returns the graphics pipe on which this GSG was
//               created.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
354 14 Dtool_62HUG5DS 0 7 358 1414 0 14 Dtool_62HUG5DS 463 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this GSG.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
355 14 Dtool_62HUax_q 0 6 359 1406 0 14 Dtool_62HUax_q 320 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_threading_model
//       Access: Published
//  Description: Returns the threading model that was used to create
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
356 14 Dtool_62HU6HMQ 0 6 360 1349 0 14 Dtool_62HU6HMQ 373 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_hardware
//       Access: Published
//  Description: Returns true if this GSG appears to be
//               hardware-accelerated, or false if it is known to be
//               software only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
357 14 Dtool_62HUuf8m 0 6 361 1342 0 14 Dtool_62HUuf8m 859 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_texture_stages
//       Access: Published
//  Description: Returns the maximum number of simultaneous textures
//               that may be applied to geometry with multitexturing,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority texture stages will
//               not be applied.  Use TextureStage::set_priority() to
//               adjust the relative importance of the different
//               texture stages.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
358 14 Dtool_62HUN0H1 0 6 362 1342 0 14 Dtool_62HUN0H1 654 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_3d_texture_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a 3-d texture, or -1 if there is no
//               particular limit.  Returns 0 if 3-d textures are not
//               supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
359 14 Dtool_62HUn6r1 0 6 363 1342 0 14 Dtool_62HUn6r1 605 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_2d_texture_array_layers
//       Access: Published
//  Description: Returns the largest possible number of pages, or -1
//               if there is no particular limit. Returns 0 if 2-d
//               texture arrays not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
360 14 Dtool_62HUCoqA 0 6 364 1342 0 14 Dtool_62HUCoqA 662 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_cube_map_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a cube map texture, or -1 if there is
//               no particular limit.  Returns 0 if cube map textures
//               are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
361 14 Dtool_62HU4MTA 0 6 365 1349 0 14 Dtool_62HU4MTA 595 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_combine
//       Access: Published
//  Description: Returns true if this particular GSG can use the
//               TextureStage::M_combine mode, which includes all of
//               the texture blend modes specified by
//               set_combine_rgb() and/or set_combine_alpha().  If
//               this is false, you must limit yourself to using the
//               simpler blend modes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
362 14 Dtool_62HU8l6n 0 6 366 1349 0 14 Dtool_62HU8l6n 475 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_saved_result
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CS_last_saved_result source, which
//               allows you to save the result of a TextureStage and
//               re-use it for multiple inputs.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
363 14 Dtool_62HUtTve 0 6 367 1349 0 14 Dtool_62HUtTve 375 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_dot3
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CM_dot3_rgb or CM_dot3_rgba combine
//               modes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
364 14 Dtool_62HU363k 0 6 368 1349 0 14 Dtool_62HU363k 325 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_3d_texture
//       Access: Published
//  Description: Returns true if this GSG can render 3-d (volumetric)
//               textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
365 14 Dtool_62HUXLw6 0 6 369 1349 0 14 Dtool_62HUXLw6 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_2d_texture_array
//       Access: Published
//  Description: Returns true if this GSG can render 2-d textures
//               array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
366 14 Dtool_62HULBxF 0 6 370 1349 0 14 Dtool_62HULBxF 298 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map
//       Access: Published
//  Description: Returns true if this GSG can render cube map textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
367 14 Dtool_62HUb7rC 0 6 371 1349 0 14 Dtool_62HUb7rC 333 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tex_non_pow2
//       Access: Published
//  Description: Returns true if this GSG can handle non power of two
//               sized textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
368 14 Dtool_62HUmk5Z 0 6 372 1349 0 14 Dtool_62HUmk5Z 423 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compressed_texture
//       Access: Published
//  Description: Returns true if this GSG can compress textures as it
//               loads them into texture memory, and/or accept
//               pre-compressed textures for storing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
369 14 Dtool_62HU1JaQ 0 6 373 1342 0 14 Dtool_62HU1JaQ 579 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_lights
//       Access: Published
//  Description: Returns the maximum number of simultaneous lights
//               that may be rendered on geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
370 14 Dtool_62HUj53l 0 6 374 1342 0 14 Dtool_62HUj53l 588 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_clip_planes
//       Access: Published
//  Description: Returns the maximum number of simultaneous clip planes
//               that may be applied to geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
371 14 Dtool_62HUWirW 0 6 375 1342 0 14 Dtool_62HUWirW 818 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transforms
//       Access: Published
//  Description: Returns the maximum number of transform matrices that
//               may be simultaneously used to transform any one
//               vertex by the graphics hardware.  If this number is
//               0, then the hardware (or the graphics backend)
//               doesn't support soft-skinned vertices (in which case
//               Panda will animate the vertices in software).
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
372 14 Dtool_62HUykA4 0 6 376 1342 0 14 Dtool_62HUykA4 811 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transform_indices
//       Access: Published
//  Description: Returns the maximum number of transforms there may be
//               in a single TransformTable for this graphics
//               hardware.  If this number is 0 (but
//               get_max_transforms() is nonzero), then the graphics
//               hardware (or API) doesn't support indexed transforms,
//               but can support direct transform references.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
373 14 Dtool_62HU4Ta6 0 6 377 1349 0 14 Dtool_62HU4Ta6 976 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_copy_texture_inverted
//       Access: Published
//  Description: Returns true if this particular GSG has the property
//               that any framebuffer-to-texture copy results in a
//               texture that is upside-down and backwards from
//               Panda's usual convention; that is, it copies into a
//               texture from the bottom up instead of from the top
//               down.
//
//               If this is true, then on offscreen GraphicsBuffer
//               created for the purposes of rendering into a texture
//               should be created with the invert flag set true, to
//               compensate.  Panda will do this automatically if you
//               create an offscreen buffer using
//               GraphicsOutput::make_texture_buffer().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
374 14 Dtool_62HU9xp9 0 6 378 1349 0 14 Dtool_62HU9xp9 555 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_generate_mipmap
//       Access: Published
//  Description: Returns true if this particular GSG can generate
//               mipmaps for a texture automatically, or if they must
//               be generated in software.  If this is true, then
//               mipmaps can safely be enabled for rendered textures
//               (e.g. using the MultitexReducer).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
375 14 Dtool_62HUWzUj 0 6 379 1349 0 14 Dtool_62HUWzUj 543 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_texture
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               returns true if the GSG supports GL_DEPTH_COMPONENT
//               textures, which are considered a limited but still
//               valid case of F_depth_stencil.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
376 14 Dtool_62HUV1XG 0 6 380 1349 0 14 Dtool_62HUV1XG 475 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               only returns true if the GSG supports the full
//               packed depth-stencil functionality.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
377 14 Dtool_62HU9dEu 0 6 381 1349 0 14 Dtool_62HU9dEu 675 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_sampler_objects
//       Access: Published
//  Description: Returns true if this particular GSG supports the
//               use of sampler objects to record texture sampling
//               parameters separately from the texture objects.
//               This doesn't really affect functionality, but if
//               this is false, it may mean that using the same
//               texture with different SamplerState objects will
//               result in reduced performance.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
378 14 Dtool_62HU9nGe 0 6 382 1349 0 14 Dtool_62HU9nGe 334 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_basic_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               arbfp1+arbvp1 or above.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
379 14 Dtool_62HUqAkH 0 6 383 1349 0 14 Dtool_62HUqAkH 331 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               geometry shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
380 14 Dtool_62HU6Uqz 0 6 384 1349 0 14 Dtool_62HU6Uqz 338 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tessellation_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               tesselation shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
381 14 Dtool_62HUF4Om 0 6 385 1349 0 14 Dtool_62HUF4Om 329 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compute_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               compute shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
382 14 Dtool_62HUAtne 0 6 386 1349 0 14 Dtool_62HUAtne 315 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_glsl
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               GLSL shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
383 14 Dtool_62HU3MNr 0 6 387 1349 0 14 Dtool_62HU3MNr 328 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               stencil buffers at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
384 14 Dtool_62HUPsvb 0 6 388 1349 0 14 Dtool_62HUPsvb 426 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_two_sided_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               two sided stencil: different stencil settings for the
//               front and back side of the same polygon.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
385 14 Dtool_62HUhwaW 0 6 389 1349 0 14 Dtool_62HUhwaW 494 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_instancing
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               hardware geometry instancing: the ability to render
//               multiple copies of a model. In OpenGL, this is
//               done using the EXT_draw_instanced extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
386 14 Dtool_62HUD_kV 0 6 390 1349 0 14 Dtool_62HUD_kV 564 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_occlusion_query
//       Access: Published
//  Description: Returns true if this GSG supports an occlusion query.
//               If this is true, then begin_occlusion_query() and
//               end_occlusion_query() may be called to bracket a
//               sequence of draw_triangles() (or whatever) calls to
//               measure pixels that pass the depth test.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
387 14 Dtool_62HU7pA6 0 6 391 1349 0 14 Dtool_62HU7pA6 295 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_timer_query
//       Access: Published
//  Description: Returns true if this GSG supports a timer query.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
388 14 Dtool_62HUoKIn 0 6 392 1349 0 14 Dtool_62HUoKIn 328 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_timer_queries_active
//       Access: Published
//  Description: Returns true if timer queries are currently
//               enabled on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
389 14 Dtool_62HUJVkQ 0 6 393 1342 0 14 Dtool_62HUJVkQ 855 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_color_targets
//       Access: Published
//  Description: Returns the maximum number of simultaneous color
//               textures that may be attached for render-to-texture,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority render targets will
//               not be applied.  Use RenderTarget::set_priority() to
//               adjust the relative importance of the different
//               render targets.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
390 14 Dtool_62HUj2nm 0 6 394 1342 0 14 Dtool_62HUj2nm 364 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_maximum_simultaneous_render_targets
//       Access: Published
//  Description: Deprecated.  Use get_max_color_targets() instead,
//               which returns the exact same value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
391 14 Dtool_62HUH2E7 0 6 395 1342 0 14 Dtool_62HUH2E7 262 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_shader_model
//       Access: Published
//  Description: Returns the ShaderModel
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
392 14 Dtool_62HUF_yT 0 4 396 1343 0 14 Dtool_62HUF_yT 403 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_shader_model
//       Access: Published
//  Description: Sets the ShaderModel.  This will override the auto-
//               detected shader model during GSG reset.  Useful for
//               testing lower-end shaders.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  12 shader_model 1 1342  
393 14 Dtool_62HUHqBZ 0 6 397 1349 0 14 Dtool_62HUHqBZ 349 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cg_profile
//       Access: Published, Virtual
//  Description: Returns true if this particular GSG supports the
//               specified Cg Shader Profile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1410  4 name 1 1346  
394 14 Dtool_62HU11LA 0 6 398 1349 0 14 Dtool_62HU11LA 499 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_color_scale_via_lighting
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale using materials and/or ambient lights, or
//               false if we need to actually munge the color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
395 14 Dtool_62HUjrll 0 6 399 1349 0 14 Dtool_62HUjrll 478 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) an alpha scale via an
//               additional Texture layer, or false if we need to
//               actually munge the alpha.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
396 14 Dtool_62HUmzXP 0 6 399 1349 0 14 Dtool_62HUmzXP 636 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: This variant of get_alpha_scale_via_texture() answers
//               the question of whether the GSG can implement an
//               alpha scale via an additional Texture layer,
//               considering the current TextureAttrib that will be in
//               effect.  This considers whether there is at least one
//               additional texture slot available on the GSG.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1410  10 tex_attrib 1 1415  
397 14 Dtool_62HU9h3s 0 6 400 1349 0 14 Dtool_62HU9h3s 483 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_runtime_color_scale
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale directly, without requiring any munging of
//               vertices or tricks with lighting.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
398 14 Dtool_62HUfwIg 0 7 401 1419 0 14 Dtool_62HUfwIg 408 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_texture_stage
//       Access: Published, Static
//  Description: Returns the TextureStage that will be used to apply
//               an alpha scale, if get_alpha_scale_via_texture()
//               returns true.
//////////////////////////////////////////////////////////////////// 0 
399 14 Dtool_62HUnlK4 0 4 402 1343 0 14 Dtool_62HUnlK4 771 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_coordinate_system
//       Access: Published
//  Description: Changes the coordinate system in effect on this
//               particular gsg.  This is also called the "external"
//               coordinate system, since it is the coordinate system
//               used by the scene graph, external to to GSG.
//
//               Normally, this will be the default coordinate system,
//               but it might be set differently at runtime.  It will
//               automatically be copied from the current lens's
//               coordinate system as each DisplayRegion is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  2 cs 1 1420  
400 14 Dtool_62HUU3J8 0 6 403 1420 0 14 Dtool_62HUU3J8 457 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system in effect on this
//               particular gsg.  Normally, this will be the default
//               coordinate system, but it might be set differently at
//               runtime.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
401 14 Dtool_62HUg4rL 0 6 404 1420 0 14 Dtool_62HUg4rL 756 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_internal_coordinate_system
//       Access: Published, Virtual
//  Description: Returns the coordinate system used internally by the
//               GSG.  This may be the same as the external coordinate
//               system reported by get_coordinate_system(), or it may
//               be something different.
//
//               In any case, vertices that have been transformed
//               before being handed to the GSG (that is, vertices
//               with a contents value of C_clip_point) will be
//               expected to be in this coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
402 14 Dtool_62HUSVj3 0 7 405 1422 0 14 Dtool_62HUSVj3 411 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_prepared_objects
//       Access: Public, Virtual
//  Description: Returns the set of texture and geom objects that have
//               been prepared with this GSG (and possibly other GSG's
//               that share objects).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
403 14 Dtool_62HUkkpB 0 6 406 1349 0 14 Dtool_62HUkkpB 277 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_gamma
//       Access: Published, Virtual
//  Description: Set gamma.  Returns true on success.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  5 gamma 1 1356  
404 14 Dtool_62HU3ZpZ 0 6 407 1356 0 14 Dtool_62HU3ZpZ 262 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_gamma
//       Access: Published
//  Description: Get the current gamma setting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  5 gamma 1 1356  
405 14 Dtool_62HUm_yX 0 4 408 1343 0 14 Dtool_62HUm_yX 276 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::restore_gamma
//       Access: Published, Virtual
//  Description: Restore original gamma setting.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
406 14 Dtool_62HUucW_ 0 4 409 1343 0 14 Dtool_62HUucW_ 749 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_texture_quality_override
//       Access: Published
//  Description: Specifies the global quality_level to be imposed for
//               all Textures rendered by this GSG.  This overrides
//               the value set on individual textures via
//               Texture::set_quality_level().  Set this to
//               Texture::QL_default in order to allow the individual
//               texture quality levels to be respected.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  13 quality_level 1 1423  
407 14 Dtool_62HUtIcw 0 6 410 1423 0 14 Dtool_62HUtIcw 485 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_texture_quality_override
//       Access: Published
//  Description: Returns the global quality_level override specified
//               by set_texture_quality_override.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
408 14 Dtool_62HUoQjB 0 6 411 1424 0 14 Dtool_62HUoQjB 0 1 4 this 3 1410  
409 14 Dtool_62HUfJaY 0 4 413 1343 0 14 Dtool_62HUfJaY 1337 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_flash_texture
//       Access: Published
//  Description: Sets the "flash texture".  This is a debug feature;
//               when enabled, the specified texture will begin
//               flashing in the scene, helping you to find it
//               visually.
//
//               The texture also flashes with a color code: blue for
//               mipmap level 0, yellow for mipmap level 1, and red
//               for mipmap level 2 or higher (even for textures that
//               don't have mipmaps).  This gives you an idea of the
//               choice of the texture size.  If it is blue, the
//               texture is being drawn the proper size or magnified;
//               if it is yellow, it is being minified a little bit;
//               and if it red, it is being minified considerably.  If
//               you see a red texture when you are right in front of
//               it, you should consider reducing the size of the
//               texture to avoid wasting texture memory.
//
//               Not all rendering backends support the flash_texture
//               feature.  Presently, it is only supported by OpenGL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  3 tex 1 1396  
410 14 Dtool_62HUHN7t 0 4 414 1343 0 14 Dtool_62HUHN7t 344 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::clear_flash_texture
//       Access: Published
//  Description: Resets the "flash texture", so that no textures will
//               flash.  See set_flash_texture().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
411 14 Dtool_62HUUOe5 0 7 415 1396 0 14 Dtool_62HUUOe5 344 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_flash_texture
//       Access: Published
//  Description: Returns the current "flash texture", if any, or NULL
//               if none.  See set_flash_texture().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
412 14 Dtool_62HUASTl 0 6 416 1346 0 14 Dtool_62HUASTl 289 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_vendor
//       Access: Public, Virtual
//  Description: Returns the vendor of the video card driver
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
413 14 Dtool_62HUtlGz 0 6 417 1346 0 14 Dtool_62HUtlGz 267 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_renderer
//       Access: Public, Virtual
//  Description: Returns GL_Renderer
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
414 14 Dtool_62HUABRK 0 6 418 1346 0 14 Dtool_62HUABRK 470 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version
//       Access: Public, Virtual
//  Description: Returns driver version
//               This has an implementation-defined meaning, and may
//               be "" if the particular graphics implementation
//               does not provide a way to query this information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
415 14 Dtool_62HUO6BG 0 6 419 1342 0 14 Dtool_62HUO6BG 496 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_major
//       Access: Public, Virtual
//  Description: Returns major version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
416 14 Dtool_62HUi6UH 0 6 420 1342 0 14 Dtool_62HUi6UH 500 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
417 14 Dtool_62HUEEDF 0 6 421 1342 0 14 Dtool_62HUEEDF 306 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_major
//       Access: Public, Virtual
//  Description: Returns the major version of the shader model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
418 14 Dtool_62HUtLxk 0 6 422 1342 0 14 Dtool_62HUtLxk 306 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the shader model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
419 14 Dtool_62HUvuAc 0 6 423 1349 0 14 Dtool_62HUvuAc 539 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_scene
//       Access: Published
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.  Returns true if the scene is
//               acceptable, false if something's wrong.  This should
//               be called in the draw thread only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1409  11 scene_setup 1 1426  
420 14 Dtool_62HUCYog 0 7 424 1426 0 14 Dtool_62HUCYog 279 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_scene
//       Access: Published, Virtual
//  Description: Returns the current SceneSetup object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1410  
421 14 Dtool_62HUc8_w 0 6 425 1349 0 14 Dtool_62HUc8_w 933 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::begin_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the beginning of drawing commands for a "scene"
//               (usually a particular DisplayRegion) within a frame.
//               All 3-D drawing commands, except the clear operation,
//               must be enclosed within begin_scene() .. end_scene().
//               This must be called in the draw thread.
//
//               The return value is true if successful (in which case
//               the scene will be drawn and end_scene() will be
//               called later), or false if unsuccessful (in which
//               case nothing will be drawn and end_scene() will not
//               be called).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
422 14 Dtool_62HUEBkF 0 4 426 1343 0 14 Dtool_62HUEBkF 565 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::end_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the end of drawing commands for a "scene" (usually a
//               particular DisplayRegion) within a frame.  All 3-D
//               drawing commands, except the clear operation, must be
//               enclosed within begin_scene() .. end_scene().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1409  
423 14 Dtool_62HUX9JS 0 7 427 1340 0 14 Dtool_62HUX9JS 0 0 
424 14 Dtool_62HU6R3_ 0 7 437 1409 0 14 Dtool_62HU6R3_ 606 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_gsg
//       Access: Published
//  Description: Returns the GSG that is associated with this window.
//               There is a one-to-one association between windows and
//               GSG's.
//
//               This may return NULL if the graphics context has not
//               yet been created for the window, e.g. before the
//               first frame has rendered; or after the window has
//               been closed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
425 14 Dtool_62HURmhe 0 7 438 1338 0 14 Dtool_62HURmhe 586 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this window is
//               associated with.  It is possible that the
//               GraphicsPipe might have been deleted while an
//               outstanding PT(GraphicsOutput) prevented all of its
//               children windows from also being deleted; in this
//               unlikely case, get_pipe() may return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
426 14 Dtool_62HUs2Rt 0 7 439 1414 0 14 Dtool_62HUs2Rt 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this output.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
427 14 Dtool_62HUhafm 0 6 440 1346 0 14 Dtool_62HUhafm 308 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_name
//       Access: Published
//  Description: Returns the name that was passed to the
//               GraphicsOutput constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
428 14 Dtool_62HUZzOT 0 6 441 1342 0 14 Dtool_62HUZzOT 539 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::count_textures
//       Access: Published
//  Description: If the GraphicsOutput is set to render into a
//               texture, returns the number of textures that are
//               being rendered into.  Normally, the textures would
//               be associated with different buffers - a color
//               texture, a depth texture, and a stencil texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
429 14 Dtool_62HUL5u4 0 6 442 1349 0 14 Dtool_62HUL5u4 318 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_texture
//       Access: Published
//  Description: Returns true if the GraphicsOutput is rendering 
//               into any textures at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
430 14 Dtool_62HUOT2F 0 7 443 1396 0 14 Dtool_62HUOT2F 725 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1428  1 i 1 1342  
431 14 Dtool_62HUjbtr 0 7 443 1396 0 14 Dtool_62HUjbtr 725 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
432 14 Dtool_62HUr9lk 0 6 444 1297 0 14 Dtool_62HUr9lk 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1428  1 i 1 1342  
433 14 Dtool_62HUtRfb 0 6 444 1297 0 14 Dtool_62HUtRfb 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
434 14 Dtool_62HUtK3h 0 6 445 1313 0 14 Dtool_62HUtK3h 378 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1428  1 i 1 1342  
435 14 Dtool_62HUeXTd 0 6 445 1313 0 14 Dtool_62HUeXTd 378 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
436 14 Dtool_62HUy_19 0 4 446 1343 0 14 Dtool_62HUy_19 387 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_render_textures
//       Access: Published
//  Description: If the GraphicsOutput is currently rendering to
//               a texture, then all textures are dissociated from
//               the GraphicsOuput.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
437 14 Dtool_62HUEdHR 0 4 447 1343 0 14 Dtool_62HUEdHR 1875 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1381  3 tex 1 1396  4 mode 1 1313  8 bitplane 1 1297  
438 14 Dtool_62HUyxSR 0 4 447 1343 0 14 Dtool_62HUyxSR 1875 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1381  3 tex 1 1396  4 mode 1 1313  
439 14 Dtool_62HUcdjE 0 4 448 1343 0 14 Dtool_62HUcdjE 494 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::setup_render_texture
//       Access: Published
//  Description: This is a deprecated interface that made sense back
//               when GraphicsOutputs could only render into one
//               texture at a time.  From now on, use
//               clear_render_textures and add_render_texture
//               instead.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1381  3 tex 1 1396  10 allow_bind 1 1349  6 to_ram 1 1349  
440 14 Dtool_62HUSOyT 0 6 449 1430 0 14 Dtool_62HUSOyT 743 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_size
//       Access: Published
//  Description: Returns the visible size of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
441 14 Dtool_62HUpVEG 0 6 450 1342 0 14 Dtool_62HUpVEG 746 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_x_size
//       Access: Published
//  Description: Returns the visible width of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
442 14 Dtool_62HU5zZG 0 6 451 1342 0 14 Dtool_62HU5zZG 747 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_y_size
//       Access: Published
//  Description: Returns the visible height of the window or buffer,
//               if it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
443 14 Dtool_62HUrFNb 0 6 452 1342 0 14 Dtool_62HUrFNb 440 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_x_size
//       Access: Published
//  Description: Returns the internal width of the window or buffer.
//               This is almost always the same as get_x_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
444 14 Dtool_62HUXHNp 0 6 453 1342 0 14 Dtool_62HUXHNp 441 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_y_size
//       Access: Published
//  Description: Returns the internal height of the window or buffer.
//               This is almost always the same as get_y_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
445 14 Dtool_62HUfzZk 0 6 454 1342 0 14 Dtool_62HUfzZk 522 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the left eye, based on scaling
//               get_x_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
446 14 Dtool_62HUtXck 0 6 455 1342 0 14 Dtool_62HUtXck 523 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the left eye, based on scaling
//               get_y_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
447 14 Dtool_62HUpDlt 0 6 456 1342 0 14 Dtool_62HUpDlt 525 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the right eye, based on scaling
//               get_x_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
448 14 Dtool_62HUp40u 0 6 457 1342 0 14 Dtool_62HUp40u 526 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the right eye, based on scaling
//               get_y_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
449 14 Dtool_62HUqgyg 0 6 458 1349 0 14 Dtool_62HUqgyg 530 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_size
//       Access: Published
//  Description: Returns true if the size of the window/frame buffer
//               is known, false otherwise.  In certain cases the size
//               may not be known until after the object has been
//               fully created.  Also, certain objects (like windows)
//               may change size spontaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
450 14 Dtool_62HUewNA 0 6 459 1349 0 14 Dtool_62HUewNA 326 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_valid
//       Access: Published
//  Description: Returns true if the output is fully created and ready
//               for rendering, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
451 14 Dtool_62HUf9W_ 0 6 460 1349 0 14 Dtool_62HUf9W_ 375 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_nonzero_size
//       Access: Published
//  Description: Returns true if the output has a nonzero size in both
//               X and Y, or false if it is zero (and therefore
//               invalid).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
452 14 Dtool_62HUKShL 0 4 461 1343 0 14 Dtool_62HUKShL 380 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsOutput.  If the GraphicsOutput is marked
//               inactive, nothing is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  6 active 1 1349  
453 14 Dtool_62HUCPRe 0 6 462 1349 0 14 Dtool_62HUCPRe 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_active
//       Access: Published, Virtual
//  Description: Returns true if the window is ready to be rendered
//               into, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
454 14 Dtool_62HUHoke 0 4 463 1343 0 14 Dtool_62HUHoke 1275 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_one_shot
//       Access: Published
//  Description: Changes the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will render the
//               current frame and then automatically set itself
//               inactive.  This is particularly useful for buffers
//               that are created for the purposes of
//               render-to-texture, for static textures that don't
//               need to be continually re-rendered once they have
//               been rendered the first time.
//
//               Setting the buffer inactive is not the same thing as
//               destroying it.  You are still responsible for passing
//               this buffer to GraphicsEngine::remove_window() when
//               you no longer need the texture, in order to clean up
//               fully.  (However, you should not call remove_window()
//               on this buffer while the texture is still needed,
//               because depending on the render-to-texture mechanism
//               in use, this may invalidate the texture contents.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  8 one_shot 1 1349  
455 14 Dtool_62HU2vFO 0 6 464 1349 0 14 Dtool_62HU2vFO 427 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_one_shot
//       Access: Published
//  Description: Returns the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will
//               automatically set itself inactive after the next
//               frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
456 14 Dtool_62HUNoPm 0 4 465 1343 0 14 Dtool_62HUNoPm 947 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//
//               This is primarily intended to support DirectX (and a
//               few buggy OpenGL graphics drivers) that perform a
//               framebuffer-to-texture copy upside-down from the
//               usual OpenGL (and Panda) convention.  Panda will
//               automatically set this flag for offscreen buffers on
//               hardware that is known to do this, to compensate when
//               rendering offscreen into a texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  8 inverted 1 1349  
457 14 Dtool_62HUx4vV 0 6 466 1349 0 14 Dtool_62HUx4vV 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.  See set_inverted().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
458 14 Dtool_62HUnTba 0 4 467 1343 0 14 Dtool_62HUnTba 688 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_swap_eyes
//       Access: Public
//  Description: Changes the "swap eyes" flag.  This flag is normally
//               false.  When it is true, the left and right channels
//               of a stereo DisplayRegion are sent to the opposite
//               channels in the rendering backend.  This is meant to
//               work around hardware that inadvertently swaps the
//               output channels, or hardware for which it cannot be
//               determined which channel is which until runtime.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  9 swap_eyes 1 1349  
459 14 Dtool_62HUjPni 0 6 468 1349 0 14 Dtool_62HUjPni 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_swap_eyes
//       Access: Public
//  Description: Returns the current setting of the "swap eyes" flag.
//               See set_swap_eyes().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
460 14 Dtool_62HUPGYQ 0 4 469 1343 0 14 Dtool_62HUPGYQ 959 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_red_blue_stereo
//       Access: Published
//  Description: Enables red-blue stereo mode on this particular
//               window.  When red-blue stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render in the red (or specified) channel only, while
//               DisplayRegions that have the "right" channel set will
//               render in the blue (or specified) channel only.
//
//               The remaining two parameters specify the particular
//               color channel(s) to associate with each eye.  Use the
//               bits defined in ColorWriteAttrib::Channels.
//
//               This can be used to achieve a cheesy stereo mode in
//               the absence of hardware-supported stereo.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1381  15 red_blue_stereo 1 1349  19 left_eye_color_mask 1 1345  20 right_eye_color_mask 1 1345  
461 14 Dtool_62HUgl0N 0 6 470 1349 0 14 Dtool_62HUgl0N 357 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_red_blue_stereo
//       Access: Published
//  Description: Returns whether red-blue stereo mode is in effect for
//               this particular window.  See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
462 14 Dtool_62HUhaUJ 0 6 471 1345 0 14 Dtool_62HUhaUJ 470 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_left_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               left-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
463 14 Dtool_62HUoNZy 0 6 472 1345 0 14 Dtool_62HUoNZy 472 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_right_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               right-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
464 14 Dtool_62HUXkdS 0 4 473 1343 0 14 Dtool_62HUXkdS 1007 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  19 side_by_side_stereo 1 1349  
465 14 Dtool_62HUYrlA 0 4 473 1343 0 14 Dtool_62HUYrlA 1007 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1381  19 side_by_side_stereo 1 1349  19 sbs_left_dimensions 1 1353  20 sbs_right_dimensions 1 1353  
466 14 Dtool_62HU4I_i 0 6 474 1349 0 14 Dtool_62HU4I_i 369 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_side_by_side_stereo
//       Access: Published
//  Description: Returns whether side-by-side stereo mode is in effect for
//               this particular window.  See set_side_by_side_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
467 14 Dtool_62HUD7Sq 0 6 475 1353 0 14 Dtool_62HUD7Sq 458 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the left channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
468 14 Dtool_62HUf7uq 0 6 476 1353 0 14 Dtool_62HUf7uq 460 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the right channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
469 14 Dtool_62HUjFO0 0 6 477 1404 0 14 Dtool_62HUjFO0 282 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_properties
//       Access: Published
//  Description: Returns the framebuffer properties of the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
470 14 Dtool_62HUp1Tf 0 6 478 1349 0 14 Dtool_62HUp1Tf 447 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_stereo
//       Access: Published
//  Description: Returns Returns true if this window can render stereo
//               DisplayRegions, either through red-blue stereo (see
//               set_red_blue_stereo()) or through true hardware
//               stereo rendering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
471 14 Dtool_62HUjxx5 0 4 479 1343 0 14 Dtool_62HUjxx5 386 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_delete_flag
//       Access: Published
//  Description: Resets the delete flag, so the GraphicsOutput will
//               not be automatically deleted before the beginning of
//               the next frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
472 14 Dtool_62HUsJD_ 0 6 480 1349 0 14 Dtool_62HUsJD_ 460 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_delete_flag
//       Access: Published
//  Description: Returns the current setting of the delete flag.  When
//               this is true, the GraphicsOutput will automatically
//               be removed before the beginning of the next frame by
//               the GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
473 14 Dtool_62HUQqjF 0 4 481 1343 0 14 Dtool_62HUQqjF 345 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_sort
//       Access: Published, Virtual
//  Description: Adjusts the sorting order of this particular
//               GraphicsOutput, relative to other GraphicsOutputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  4 sort 1 1342  
474 14 Dtool_62HUcE4c 0 6 482 1342 0 14 Dtool_62HUcE4c 432 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sort
//       Access: Published
//  Description: Returns the sorting order of this particular
//               GraphicsOutput.  The various GraphicsOutputs within a
//               particular thread will be rendered in the indicated
//               order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
475 14 Dtool_62HUyqqS 0 4 483 1343 0 14 Dtool_62HUyqqS 1026 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_child_sort
//       Access: Published
//  Description: Specifies the sort value of future offscreen buffers
//               created by make_texture_sort().
//
//               The purpose of this method is to allow the user to
//               limit the sort value chosen for a buffer created via
//               make_texture_buffer().  Normally, this buffer will be
//               assigned a value of get_sort() - 1, so that it
//               will be rendered before this window is rendered; but
//               sometimes this isn't sufficiently early, especially
//               if other buffers also have a view into the same
//               scene.
//
//               If you specify a value here, then new buffers created
//               via make_texture_buffer() will be given that sort
//               value instead of get_sort() - 1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  10 child_sort 1 1342  
476 14 Dtool_62HU_qOW 0 4 484 1343 0 14 Dtool_62HU_qOW 390 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_child_sort
//       Access: Published
//  Description: Resets the sort value of future offscreen buffers
//               created by make_texture_sort() to the default value.
//               See set_child_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
477 14 Dtool_62HUx5eS 0 6 485 1342 0 14 Dtool_62HUx5eS 351 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_child_sort
//       Access: Published
//  Description: Returns the sort value of future offscreen buffers
//               created by make_texture_sort(). See set_child_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
478 14 Dtool_62HUys0m 0 4 486 1343 0 14 Dtool_62HUys0m 376 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::trigger_copy
//       Access: Published
//  Description: When the GraphicsOutput is in triggered copy mode,
//               this function triggers the copy (at the end of the
//               next frame).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
479 14 Dtool_62HUDSih 0 7 487 1379 852 14 Dtool_62HUDSih 652 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
480 14 Dtool_62HUB1Dz 0 7 487 1379 852 14 Dtool_62HUB1Dz 735 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  10 dimensions 1 1353  
481 14 Dtool_62HUefSE 0 7 487 1379 852 14 Dtool_62HUefSE 735 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1381  1 l 1 1356  1 r 1 1356  1 b 1 1356  1 t 1 1356  
482 14 Dtool_62HUrH1t 0 7 488 1379 852 14 Dtool_62HUrH1t 732 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
483 14 Dtool_62HUN35Q 0 7 488 1379 852 14 Dtool_62HUN35Q 815 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  10 dimensions 1 1353  
484 14 Dtool_62HUN6dz 0 7 488 1379 852 14 Dtool_62HUN6dz 732 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
//////////////////////////////////////////////////////////////////// 5 4 this 3 1381  1 l 1 1356  1 r 1 1356  1 b 1 1356  1 t 1 1356  
485 14 Dtool_62HUbYGK 0 7 489 1402 852 14 Dtool_62HUbYGK 428 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
486 14 Dtool_62HUKmoh 0 7 489 1402 852 14 Dtool_62HUKmoh 511 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  10 dimensions 1 1353  
487 14 Dtool_62HUa2ry 0 7 489 1402 852 14 Dtool_62HUa2ry 428 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1381  1 l 1 1356  1 r 1 1356  1 b 1 1356  1 t 1 1356  
488 14 Dtool_62HUyMVJ 0 6 490 1349 0 14 Dtool_62HUyMVJ 492 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_display_region
//       Access: Published
//  Description: Removes the indicated DisplayRegion from the window,
//               and destructs it if there are no other references.
//
//               Returns true if the DisplayRegion is found and
//               removed, false if it was not a part of the window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  14 display_region 1 1379  
489 14 Dtool_62HUVlIl 0 4 491 1343 0 14 Dtool_62HUVlIl 359 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_all_display_regions
//       Access: Published
//  Description: Removes all display regions from the window, except
//               the default one that is created with the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
490 14 Dtool_62HUlL68 0 7 492 1379 852 14 Dtool_62HUlL68 951 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_overlay_display_region
//       Access: Published
//  Description: Returns the special "overlay" DisplayRegion that is
//               created for each window or buffer.  This
//               DisplayRegion covers the entire window, but cannot be
//               used for rendering.  It is a placeholder only, to
//               indicate the dimensions of the window, and is usually
//               used internally for purposes such as clearing the
//               window, or grabbing a screenshot of the window.
//
//               There are very few applications that require access
//               to this DisplayRegion.  Normally, you should create
//               your own DisplayRegion that covers the window, if you
//               want to render to the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
491 14 Dtool_62HUXV31 0 4 493 1343 0 14 Dtool_62HUXV31 1132 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_overlay_display_region
//       Access: Published
//  Description: Replaces the special "overlay" DisplayRegion that is
//               created for each window or buffer.  See
//               get_overlay_display_region().  This must be a new
//               DisplayRegion that has already been created for this
//               window, for instance via a call to
//               make_mono_display_region().  You are responsible for
//               ensuring that the new DisplayRegion covers the entire
//               window.  The previous overlay display region is not
//               automatically removed; you must explicitly call
//               remove_display_region() on it after replacing it with
//               this method, if you wish it to be removed.
//
//               Normally, there is no reason to change the overlay
//               DisplayRegion, so this method should be used only
//               in very unusual circumstances.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  14 display_region 1 1379  
492 14 Dtool_62HUHxxm 0 6 494 1342 0 14 Dtool_62HUHxxm 355 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_display_regions
//       Access: Published
//  Description: Returns the number of DisplayRegions that have
//               been created within the window, active or otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
493 14 Dtool_62HU1bhW 0 7 495 1379 852 14 Dtool_62HU1bhW 542 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_display_region
//       Access: Published
//  Description: Returns the nth DisplayRegion of those that have been
//               created within the window.  This may return NULL if n
//               is out of bounds; particularly likely if the number
//               of display regions has changed since the last call to
//               get_num_display_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1428  1 n 1 1342  
494 14 Dtool_62HU_TMd 0 6 496 1342 0 14 Dtool_62HU_TMd 348 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_active_display_regions
//       Access: Published
//  Description: Returns the number of active DisplayRegions that have
//               been created within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
495 14 Dtool_62HUjI4S 0 7 497 1379 852 14 Dtool_62HUjI4S 563 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_active_display_region
//       Access: Published
//  Description: Returns the nth active DisplayRegion of those that
//               have been created within the window.  This may return
//               NULL if n is out of bounds; particularly likely if
//               the number of display regions has changed since the
//               last call to get_num_active_display_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1428  1 n 1 1342  
496 14 Dtool_62HUOgc9 0 7 498 1381 1075 14 Dtool_62HUOgc9 1790 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
//////////////////////////////////////////////////////////////////// 7 4 this 3 1381  4 name 1 1346  6 x_size 1 1342  6 y_size 1 1342  3 tex 1 1396  6 to_ram 1 1349  3 fbp 1 1403  
497 14 Dtool_62HUoo09 0 7 498 1381 1075 14 Dtool_62HUoo09 1790 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
//////////////////////////////////////////////////////////////////// 6 4 this 3 1381  4 name 1 1346  6 x_size 1 1342  6 y_size 1 1342  3 tex 1 1396  6 to_ram 1 1349  
498 14 Dtool_62HU54eM 0 7 498 1381 1075 14 Dtool_62HU54eM 1790 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
//////////////////////////////////////////////////////////////////// 5 4 this 3 1381  4 name 1 1346  6 x_size 1 1342  6 y_size 1 1342  3 tex 1 1396  
499 14 Dtool_62HU6cMF 0 7 498 1381 1075 14 Dtool_62HU6cMF 1790 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
//////////////////////////////////////////////////////////////////// 4 4 this 3 1381  4 name 1 1346  6 x_size 1 1342  6 y_size 1 1342  
500 14 Dtool_62HUSG5G 0 7 499 1381 1075 14 Dtool_62HUSG5G 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 7 4 this 3 1381  4 name 1 1346  4 size 1 1342  10 camera_rig 1 1387  11 camera_mask 1 1433  6 to_ram 1 1349  3 fbp 1 1403  
501 14 Dtool_62HUA8GH 0 7 499 1381 1075 14 Dtool_62HUA8GH 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1381  4 name 1 1346  4 size 1 1342  10 camera_rig 1 1387  11 camera_mask 1 1433  6 to_ram 1 1349  
502 14 Dtool_62HUEFcu 0 7 499 1381 1075 14 Dtool_62HUEFcu 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1381  4 name 1 1346  4 size 1 1342  10 camera_rig 1 1387  11 camera_mask 1 1433  
503 14 Dtool_62HUVD6z 0 7 499 1381 1075 14 Dtool_62HUVD6z 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1381  4 name 1 1346  4 size 1 1342  10 camera_rig 1 1387  
504 14 Dtool_62HUeFZK 0 7 500 1394 0 14 Dtool_62HUeFZK 806 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 1 6 prefix 1 1346  
505 14 Dtool_62HUPz_F 0 7 500 1394 0 14 Dtool_62HUPz_F 806 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 0 
506 14 Dtool_62HUbMge 0 7 501 1394 0 14 Dtool_62HUbMge 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  6 prefix 1 1346  
507 14 Dtool_62HU8zcS 0 7 501 1394 0 14 Dtool_62HU8zcS 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
508 14 Dtool_62HUrjOY 0 6 502 1349 0 14 Dtool_62HUrjOY 600 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1381  8 filename 1 1374  13 image_comment 1 1346  
509 14 Dtool_62HUoVLU 0 6 502 1349 0 14 Dtool_62HUoVLU 600 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  8 filename 1 1374  
510 14 Dtool_62HUKXv9 0 7 503 1396 0 14 Dtool_62HUKXv9 373 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as Texture, or NULL on
//               failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
511 14 Dtool_62HUIsHW 0 6 503 1349 0 14 Dtool_62HUIsHW 399 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  5 image 1 1397  
512 14 Dtool_62HUUNk3 0 7 504 1387 0 14 Dtool_62HUUNk3 959 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_card
//       Access: Published
//  Description: Returns a PandaNode containing a square polygon.
//               The dimensions are (-1,0,-1) to (1,0,1). The texture
//               coordinates are such that the texture of this
//               GraphicsOutput is aligned properly to the polygon.
//               The GraphicsOutput promises to surgically update
//               the Geom inside the PandaNode if necessary to maintain
//               this invariant.
//
//               Each invocation of this function returns a freshly-
//               allocated PandaNode.  You can therefore safely modify
//               the RenderAttribs of the PandaNode.  The
//               PandaNode is initially textured with the texture
//               of this GraphicOutput.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
513 14 Dtool_62HU2Eyc 0 6 505 1349 0 14 Dtool_62HU2Eyc 386 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::share_depth_buffer
//       Access: Published, Virtual
//  Description: Will attempt to use the depth buffer of the input
//               graphics_output. The buffer sizes must be exactly
//               the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  15 graphics_output 1 1381  
514 14 Dtool_62HUX5g9 0 4 506 1343 0 14 Dtool_62HUX5g9 282 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::unshare_depth_buffer
//       Access: Published, Virtual
//  Description: Discontinue sharing the depth buffer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
515 14 Dtool_62HUHdDD 0 6 507 1349 0 14 Dtool_62HUHdDD 477 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_supports_render_texture
//       Access: Published, Virtual
//  Description: Returns true if this particular GraphicsOutput can
//               render directly into a texture, or false if it must
//               always copy-to-texture at the end of each frame to
//               achieve this effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
516 14 Dtool_62HUWtdR 0 6 508 1349 0 14 Dtool_62HUWtdR 335 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::flip_ready
//       Access: Published, Virtual
//  Description: Returns true if a frame has been rendered and needs
//               to be flipped, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1428  
517 14 Dtool_62HUybdT 0 7 509 1381 1075 14 Dtool_62HUybdT 502 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_host
//       Access: Published, Virtual
//  Description: This is normally called only from within
//               make_texture_buffer().  When called on a
//               ParasiteBuffer, it returns the host of that buffer;
//               but when called on some other buffer, it returns the
//               buffer itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1381  
518 14 Dtool_62HUg2P6 0 7 510 1340 0 14 Dtool_62HUg2P6 0 0 
519 14 Dtool_62HU_FL1 0 7 430 1435 0 14 Dtool_62HU_FL1 0 1 4 this 3 1381  
520 14 Dtool_62HUlfJN 0 7 431 1381 1075 14 Dtool_62HUlfJN 0 1 4 this 3 1435  
521 14 Dtool_62HUpLTb 0 6 432 1350 0 14 Dtool_62HUpLTb 0 1 4 this 3 1381  
522 14 Dtool_62HUuJDd 0 7 433 1381 1075 14 Dtool_62HUuJDd 0 1 4 this 3 1350  
523 14 Dtool_62HU_Z5p 0 4 513 1343 0 14 Dtool_62HU_Z5p 288 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1436  6 button 1 1437  4 time 1 1439  
524 14 Dtool_62HUEXB7 0 4 513 1343 0 14 Dtool_62HUEXB7 288 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  6 button 1 1437  
525 14 Dtool_62HUTe4Z 0 4 514 1343 0 14 Dtool_62HUTe4Z 465 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_resume_down
//       Access: Public
//  Description: Records that the indicated button was depressed
//               earlier, and we only just detected the event after
//               the fact.  This is mainly useful for tracking the
//               state of modifier keys.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1436  6 button 1 1437  4 time 1 1439  
526 14 Dtool_62HUCZR0 0 4 514 1343 0 14 Dtool_62HUCZR0 465 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_resume_down
//       Access: Public
//  Description: Records that the indicated button was depressed
//               earlier, and we only just detected the event after
//               the fact.  This is mainly useful for tracking the
//               state of modifier keys.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  6 button 1 1437  
527 14 Dtool_62HUEdRe 0 4 515 1343 0 14 Dtool_62HUEdRe 285 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1436  6 button 1 1437  4 time 1 1439  
528 14 Dtool_62HUt5Ix 0 4 515 1343 0 14 Dtool_62HUt5Ix 285 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  6 button 1 1437  
529 14 Dtool_62HU___s 0 4 516 1343 0 14 Dtool_62HU___s 306 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::keystroke
//       Access: Public
//  Description: Records that the indicated keystroke has been
//               generated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1436  7 keycode 1 1342  4 time 1 1439  
530 14 Dtool_62HUW_pD 0 4 516 1343 0 14 Dtool_62HUW_pD 306 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::keystroke
//       Access: Public
//  Description: Records that the indicated keystroke has been
//               generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  7 keycode 1 1342  
531 14 Dtool_62HUXeYh 0 4 517 1343 0 14 Dtool_62HUXeYh 463 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::candidate
//       Access: Public
//  Description: Records that the indicated candidate string has been
//               highlighted.  This is used to implement IME support
//               for typing in international languages, especially
//               Chinese/Japanese/Korean.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1436  16 candidate_string 1 1346  15 highlight_start 1 1345  13 highlight_end 1 1345  10 cursor_pos 1 1345  
532 14 Dtool_62HUeu_I 0 4 518 1343 0 14 Dtool_62HUeu_I 668 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::focus_lost
//       Access: Public
//  Description: This should be called when the window focus is lost,
//               so that we may miss upcoming button events
//               (especially "up" events) for the next period of time.
//               It generates keyboard and mouse "up" events for those
//               buttons that we previously sent unpaired "down"
//               events, so that the Panda application will believe
//               all buttons are now released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  4 time 1 1439  
533 14 Dtool_62HUXnr9 0 4 518 1343 0 14 Dtool_62HUXnr9 668 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::focus_lost
//       Access: Public
//  Description: This should be called when the window focus is lost,
//               so that we may miss upcoming button events
//               (especially "up" events) for the next period of time.
//               It generates keyboard and mouse "up" events for those
//               buttons that we previously sent unpaired "down"
//               events, so that the Panda application will believe
//               all buttons are now released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
534 14 Dtool_62HUgZL7 0 4 519 1343 0 14 Dtool_62HUgZL7 292 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1436  6 button 1 1437  4 time 1 1439  
535 14 Dtool_62HUIkQw 0 4 519 1343 0 14 Dtool_62HUIkQw 292 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_down
//       Access: Public
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  6 button 1 1437  
536 14 Dtool_62HUpxaa 0 4 520 1343 0 14 Dtool_62HUpxaa 289 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1436  6 button 1 1437  4 time 1 1439  
537 14 Dtool_62HUOUoH 0 4 520 1343 0 14 Dtool_62HUOUoH 289 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_up
//       Access: Public
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  6 button 1 1437  
538 14 Dtool_62HUI9ni 0 4 521 1343 0 14 Dtool_62HUI9ni 413 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_in_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is within the window, at
//               the given pixel coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1436  1 x 1 1439  1 y 1 1439  4 time 1 1439  
539 14 Dtool_62HUdUWX 0 4 521 1343 0 14 Dtool_62HUdUWX 413 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_in_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is within the window, at
//               the given pixel coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1436  1 x 1 1439  1 y 1 1439  
540 14 Dtool_62HU1UCL 0 4 522 1343 0 14 Dtool_62HU1UCL 395 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_out_of_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is no longer within the
//               window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  4 time 1 1439  
541 14 Dtool_62HUSIYw 0 4 522 1343 0 14 Dtool_62HUSIYw 395 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_out_of_window
//       Access: Public
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is no longer within the
//               window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
542 14 Dtool_62HU4aIN 0 4 523 1343 0 14 Dtool_62HU4aIN 281 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer
//       Access: Public
//  Description: Records that a mouse movement has taken place.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1436  5 inwin 1 1349  1 x 1 1439  1 y 1 1439  4 time 1 1439  
543 14 Dtool_62HUPUp1 0 6 526 1342 0 14 Dtool_62HUPUp1 0 1 4 this 3 1440  
544 14 Dtool_62HUHDz1 0 6 527 1342 0 14 Dtool_62HUHDz1 0 1 4 this 3 1440  
545 14 Dtool_62HUA_Db 0 6 528 1342 0 14 Dtool_62HUA_Db 0 1 4 this 3 1440  
546 14 Dtool_62HUMWv5 0 6 529 1342 0 14 Dtool_62HUMWv5 0 1 4 this 3 1440  
547 14 Dtool_62HU_0he 0 6 533 1342 0 14 Dtool_62HU_0he 280 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_hwnd
//       Access: Published
//  Description: Returns the Windows proc hwnd parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1441  
548 14 Dtool_62HUPC0q 0 6 534 1342 0 14 Dtool_62HUPC0q 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_msg
//       Access: Published
//  Description: Returns the Windows proc msg parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1441  
549 14 Dtool_62HUyLDI 0 6 535 1342 0 14 Dtool_62HUyLDI 284 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_wparam
//       Access: Published
//  Description: Returns the Windows proc wparam parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1441  
550 14 Dtool_62HUAL2s 0 6 536 1342 0 14 Dtool_62HUAL2s 284 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_lparam
//       Access: Published
//  Description: Returns the Windows proc lparam parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1441  
551 14 Dtool_62HUFsIL 0 6 537 1349 0 14 Dtool_62HUFsIL 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::is_touch_event
//       Access: Public, Virtual
//  Description: Returns whether the event is a touch event.
//               
//////////////////////////////////////////////////////////////////// 1 4 this 3 1443  
552 14 Dtool_62HUCdg3 0 6 538 1342 0 14 Dtool_62HUCdg3 323 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_num_touches
//       Access: Public, Virtual
//  Description: Returns the current number of touches on the window.
//               
//////////////////////////////////////////////////////////////////// 1 4 this 3 1443  
553 14 Dtool_62HU6s0U 0 7 539 1440 1166 14 Dtool_62HU6s0U 330 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_touch_info
//       Access: Public, Virtual
//  Description: Returns the TouchInfo object describing the specified touch.
//               
//////////////////////////////////////////////////////////////////// 2 4 this 3 1443  5 index 1 1342  
554 14 Dtool_62HUt7d3 0 7 540 1340 0 14 Dtool_62HUt7d3 0 0 
555 14 Dtool_62HUhbmW 0 7 543 1366 0 14 Dtool_62HUhbmW 275 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_properties
//       Access: Published
//  Description: Returns the current properties of the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
556 14 Dtool_62HU0Htu 0 7 544 1366 0 14 Dtool_62HU0Htu 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_requested_properties
//       Access: Published
//  Description: Returns the properties of the window that are
//               currently requested.  These properties will be
//               applied to the window (if valid) at the next
//               execution of process_events().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
557 14 Dtool_62HUYZ4X 0 4 545 1343 0 14 Dtool_62HUYZ4X 346 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::clear_rejected_properties
//       Access: Published
//  Description: Empties the set of failed properties that will be
//               returned by get_rejected_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1446  
558 14 Dtool_62HUcXSI 0 7 546 1365 768 14 Dtool_62HUcXSI 563 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_rejected_properties
//       Access: Published
//  Description: Returns the set of properties that have recently been
//               requested, but could not be applied to the window for
//               some reason.  This set of properties will remain
//               unchanged until they are changed by a new failed
//               request, or clear_rejected_properties() is called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
559 14 Dtool_62HUGdcu 0 4 547 1343 0 14 Dtool_62HUGdcu 603 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::request_properties
//       Access: Published
//  Description: Requests a property change on the window.  For
//               example, use this method to request a window change
//               size or minimize or something.
//
//               The change is not made immediately; rather, the
//               request is saved and will be applied the next time
//               the window task is run (probably at the next frame).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1446  20 requested_properties 1 1366  
560 14 Dtool_62HUu9q8 0 6 548 1349 0 14 Dtool_62HUu9q8 631 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_closed
//       Access: Published
//  Description: Returns true if the window has not yet been opened,
//               or has been fully closed, false if it is open.  The
//               window is not opened immediately after
//               GraphicsEngine::make_window() is called; nor is it
//               closed immediately after
//               GraphicsEngine::remove_window() is called.  Either
//               operation may take a frame or two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
561 14 Dtool_62HUJaEs 0 6 549 1349 0 14 Dtool_62HUJaEs 329 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_fullscreen
//       Access: Published
//  Description: Returns true if the window has been opened as a
//               fullscreen window, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
562 14 Dtool_62HUGNv6 0 4 550 1343 0 14 Dtool_62HUGNv6 630 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_window_event
//       Access: Published
//  Description: Changes the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.
//
//               By default, all windows have the same window event
//               unless they are explicitly changed.  When the event
//               is generated, it includes one parameter: the window
//               itself.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1446  12 window_event 1 1346  
563 14 Dtool_62HU_R55 0 6 551 1346 0 14 Dtool_62HU_R55 421 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_event
//       Access: Published
//  Description: Returns the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.  See set_window_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
564 14 Dtool_62HUuHKx 0 4 552 1343 0 14 Dtool_62HUuHKx 1393 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_close_request_event
//       Access: Published
//  Description: Sets the event that is triggered when the user
//               requests to close the window, e.g. via alt-F4, or
//               clicking on the close box.
//
//               The default for each window is for this event to be
//               the empty string, which means the window-close
//               request is handled immediately by Panda (and the
//               window will be closed without the app getting a
//               chance to intervene).  If you set this to a nonempty
//               string, then the window is not closed, but instead
//               the event is thrown.  It is then up to the app to
//               respond appropriately, for instance by presenting an
//               "are you sure?" dialog box, and eventually calling
//               close_window() when the user is sure.
//
//               It is considered poor form to set this string and
//               then not handle the event.  This can frustrate the
//               user by making it difficult for him to cleanly shut
//               down the application (and may force the user to
//               hard-kill the app, or reboot the machine).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1446  19 close_request_event 1 1346  
565 14 Dtool_62HUg_ue 0 6 553 1346 0 14 Dtool_62HUg_ue 515 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_close_request_event
//       Access: Published
//  Description: Returns the name of the event set via
//               set_close_request_event().  If this string is
//               nonempty, then when the user requests to close
//               window, this event will be generated instead.  See
//               set_close_request_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
566 14 Dtool_62HUN9Aq 0 4 554 1343 0 14 Dtool_62HUN9Aq 894 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_unexposed_draw
//       Access: Published
//  Description: If this flag is false, the window is redrawn only
//               after it has received a recent "unexpose" or "draw"
//               event from the underlying windowing systme.  If this
//               flag is true, the window is redrawn every frame
//               regardless.  Setting this false may prevent the
//               window from redrawing unnecessarily when it is
//               hidden, and may play nicer with other windows on the
//               desktop, but may adversely affect frame rate even
//               when the window is fully visible; setting it true will
//               ensure that the window contents are always current.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1446  14 unexposed_draw 1 1349  
567 14 Dtool_62HULj90 0 6 555 1349 0 14 Dtool_62HULj90 259 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_unexposed_draw
//       Access: Published
//  Description: See set_unexposed_draw().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
568 14 Dtool_62HUYAaM 0 7 556 1359 0 14 Dtool_62HUYAaM 641 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_handle
//       Access: Published
//  Description: Returns the WindowHandle corresponding to this window
//               on the desktop.  This is mainly useful for
//               communicating with external libraries.  Use
//               window_handle->get_os_handle()->get_handle(), or
//               window_handle->get_string_handle(), to get the actual
//               OS-specific window handle object, whatever type that
//               might be.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
569 14 Dtool_62HUWc_C 0 6 557 1342 0 14 Dtool_62HUWc_C 594 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_num_input_devices
//       Access: Published
//  Description: Returns the number of separate input devices
//               associated with the window.  Typically, a window will
//               have exactly one input device: the keyboard/mouse
//               pair.  However, some windows may have no input
//               devices, and others may add additional devices, for
//               instance for a joystick.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
570 14 Dtool_62HUqhfW 0 6 558 1346 0 14 Dtool_62HUqhfW 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_input_device_name
//       Access: Published
//  Description: Returns the name of the nth input device.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1444  6 device 1 1342  
571 14 Dtool_62HUYErM 0 6 559 1349 0 14 Dtool_62HUYErM 366 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_pointer
//       Access: Published
//  Description: Returns true if the nth input device has a
//               screen-space pointer (for instance, a mouse), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1444  6 device 1 1342  
572 14 Dtool_62HUeEpH 0 6 560 1349 0 14 Dtool_62HUeEpH 314 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_keyboard
//       Access: Published
//  Description: Returns true if the nth input device has a keyboard,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1444  6 device 1 1342  
573 14 Dtool_62HUzz5k 0 7 561 1448 0 14 Dtool_62HUzz5k 348 ////////////////////////////////////////////////////////////////////
//     Function: x11GraphicsWindow::get_keyboard_map
//       Access: Published, Virtual
//  Description: Returns a ButtonMap containing the association
//               between raw buttons and virtual buttons.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1444  
574 14 Dtool_62HUCg1v 0 4 562 1343 0 14 Dtool_62HUCg1v 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_events
//       Access: Published
//  Description: Turn on the generation of pointer events.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1446  6 device 1 1342  
575 14 Dtool_62HUyQiD 0 4 563 1343 0 14 Dtool_62HUyQiD 280 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: Turn off the generation of pointer events.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1446  6 device 1 1342  
576 14 Dtool_62HUN5RH 0 4 564 1343 0 14 Dtool_62HUN5RH 285 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_mode
//       Access: Published
//  Description: See GraphicsWindowInputDevice::enable_pointer_mode
//////////////////////////////////////////////////////////////////// 3 4 this 3 1446  6 device 1 1342  5 speed 1 1439  
577 14 Dtool_62HU8M8I 0 4 565 1343 0 14 Dtool_62HU8M8I 289 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: See GraphicsWindowInputDevice::disable_pointer_mode
//////////////////////////////////////////////////////////////////// 2 4 this 3 1446  6 device 1 1342  
578 14 Dtool_62HUxqr_ 0 7 566 1450 0 14 Dtool_62HUxqr_ 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_pointer
//       Access: Published
//  Description: Returns the MouseData associated with the nth
//               input device's pointer.  This is deprecated; use
//               get_pointer_device().get_pointer() instead, or for
//               raw mice, use the InputDeviceManager interface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1444  6 device 1 1342  
579 14 Dtool_62HUPl6f 0 6 567 1349 0 14 Dtool_62HUPl6f 540 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::move_pointer
//       Access: Published, Virtual
//  Description: Forces the pointer to the indicated position within
//               the window, if possible.
//
//               Returns true if successful, false on failure.  This
//               may fail if the mouse is not currently within the
//               window, or if the API doesn't support this operation.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1446  6 device 1 1342  1 x 1 1342  1 y 1 1342  
580 14 Dtool_62HU_nZW 0 4 568 1343 0 14 Dtool_62HU_nZW 274 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::close_ime
//       Access: Published, Virtual
//  Description: Forces the ime window to close if any
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1446  
581 14 Dtool_62HUjGVA 0 7 569 1340 0 14 Dtool_62HUjGVA 0 0 
582 14 Dtool_62HUw_oh 0 4 590 1343 0 14 Dtool_62HUw_oh 829 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_events_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is polled for window events, including
//               mouse and keyboard events, as well as window resize
//               events and other system-generated events.
//
//               This callback will receive a
//               CallbackGraphicsWindow::EventsCallbackData.
//
//               This callback should process any system-generated
//               events, and call data->upcall() to process requested
//               property change requests made via
//               request_properties().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1451  6 object 1 1392  
583 14 Dtool_62HUAR7V 0 4 591 1343 0 14 Dtool_62HUAR7V 331 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_events_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_events_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1451  
584 14 Dtool_62HUbexL 0 7 592 1392 0 14 Dtool_62HUbexL 299 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_events_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_events_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1452  
585 14 Dtool_62HU4DCQ 0 4 593 1343 0 14 Dtool_62HU4DCQ 1100 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_properties_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window receives a property change request from
//               user code (e.g. via request_properties).
//
//               This callback will receive a
//               CallbackGraphicsWindow::PropertiesCallbackData, which
//               provides a get_properties() method that returns a
//               modifiable reference to a WindowsProperties object.
//               This object will contain only those properties
//               requested by user code.  The callback should handle
//               any of the requests it finds, including and
//               especially set_open(), and remove them from the
//               object when it has handled them.  Any unhandled
//               properties should be left unchanged in the properties
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1451  6 object 1 1392  
586 14 Dtool_62HUn_i0 0 4 594 1343 0 14 Dtool_62HUn_i0 339 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_properties_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_properties_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1451  
587 14 Dtool_62HUUXfq 0 7 595 1392 0 14 Dtool_62HUUXfq 307 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_properties_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_properties_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1452  
588 14 Dtool_62HUetLf 0 4 596 1343 0 14 Dtool_62HUetLf 702 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_render_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is invoked (in the draw thread) to render
//               its contents, and/or flip the graphics buffers.
//
//               This callback will actually serve several different
//               functions.  It receivces a RenderCallbackData, and
//               you can query data->get_callback_type() to return the
//               actual function of each particular callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1451  6 object 1 1392  
589 14 Dtool_62HUxQAK 0 4 597 1343 0 14 Dtool_62HUxQAK 331 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_render_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_render_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1451  
590 14 Dtool_62HUvJVJ 0 7 598 1392 0 14 Dtool_62HUvJVJ 299 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_render_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_render_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1452  
591 14 Dtool_62HU1QMX 0 6 599 1436 0 14 Dtool_62HU1QMX 480 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_input_device
//       Access: Published
//  Description: Returns a writable reference to the nth input device
//               (mouse).  This is intended to be used for the window
//               implementation to record mouse and keyboard input
//               information for the Panda system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1451  6 device 1 1342  
592 14 Dtool_62HUWnP_ 0 6 600 1342 0 14 Dtool_62HUWnP_ 385 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::create_input_device
//       Access: Published
//  Description: Adds a new input device (mouse) to the window with
//               the indicated name.  Returns the index of the new
//               device.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1451  4 name 1 1346  
593 14 Dtool_62HUTKC9 0 7 601 1340 0 14 Dtool_62HUTKC9 0 0 
594 14 Dtool_62HURmD4 0 7 572 1451 1075 14 Dtool_62HURmD4 306 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::WindowCallbackData::get_window
//       Access: Published
//  Description: Returns the window this callback was triggered from.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1454  
595 14 Dtool_62HU5Nl6 0 7 573 1340 0 14 Dtool_62HU5Nl6 0 0 
596 14 Dtool_62HUQICH 0 7 576 1340 0 14 Dtool_62HUQICH 0 0 
597 14 Dtool_62HUpcBm 0 6 579 1365 0 14 Dtool_62HUpcBm 504 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::PropertiesCallbackData::get_properties
//       Access: Published
//  Description: Returns the WindowProperties object that this
//               callback should process.  Any properties that are
//               handled should be removed from this object;
//               properties that are unhandled should be left alone.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1456  
598 14 Dtool_62HUT67_ 0 7 580 1340 0 14 Dtool_62HUT67_ 0 0 
599 14 Dtool_62HUoeV8 0 6 584 1325 0 14 Dtool_62HUoeV8 467 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_callback_type
//       Access: Published
//  Description: Since the render callback is shared for several
//               functions, this method is needed to indicate which
//               particular function is being invoked with this
//               callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
600 14 Dtool_62HU1jTM 0 6 585 1314 0 14 Dtool_62HU1jTM 507 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_frame_mode
//       Access: Published
//  Description: If the callback type (returned by get_callback_type)
//               is RCT_begin_frame or RCT_end_frame, then this method
//               will return the particular frame mode indicating
//               what, precisely, we want to do this frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
601 14 Dtool_62HUELCp 0 4 586 1343 0 14 Dtool_62HUELCp 549 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::set_render_flag
//       Access: Published
//  Description: If the callback type is RCT_begin_frame, this call is
//               available to specify the return value from the
//               begin_frame() call.  If this is true (the default),
//               the frame is rendered normally; if it is false, the
//               frame is omitted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1460  11 render_flag 1 1349  
602 14 Dtool_62HU9SDX 0 6 587 1349 0 14 Dtool_62HU9SDX 347 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_render_flag
//       Access: Published
//  Description: Returns the current setting of the render flag.  See
//               set_render_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
603 14 Dtool_62HUHK2f 0 7 588 1340 0 14 Dtool_62HUHK2f 0 0 
604 14 Dtool_62HUeb9k 0 6 603 1463 0 14 Dtool_62HUeb9k 364 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_cull_handler
//       Access: Published
//  Description: Returns a pointer to the CullHandler, which accepts
//               each object to be added to the list for drawing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1461  
605 14 Dtool_62HUc6C0 0 7 604 1426 0 14 Dtool_62HUc6C0 360 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1461  
606 14 Dtool_62HU_hfB 0 7 605 1340 0 14 Dtool_62HU_hfB 0 0 
607 14 Dtool_62HU6KCi 0 7 608 1468 0 14 Dtool_62HU6KCi 388 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_cull_result
//       Access: Published
//  Description: Returns a pointer to the CullResult, the list of
//               CullableObjects that should be drawn in this
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1466  
608 14 Dtool_62HU3Sjb 0 7 609 1426 0 14 Dtool_62HU3Sjb 360 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1466  
609 14 Dtool_62HUao_o 0 7 610 1340 0 14 Dtool_62HUao_o 0 0 
610 14 Dtool_62HULHQY 0 7 613 1469 1238 14 Dtool_62HULHQY 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
611 14 Dtool_62HU8Zgh 0 4 615 1343 0 14 Dtool_62HU8Zgh 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  13 minimum_width 1 1342  
612 14 Dtool_62HU6RSe 0 4 616 1343 0 14 Dtool_62HU6RSe 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  13 maximum_width 1 1342  
613 14 Dtool_62HUt5bs 0 4 617 1343 0 14 Dtool_62HUt5bs 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  14 minimum_height 1 1342  
614 14 Dtool_62HUXyNp 0 4 618 1343 0 14 Dtool_62HUXyNp 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  14 maximum_height 1 1342  
615 14 Dtool_62HUFe4X 0 4 619 1343 0 14 Dtool_62HUFe4X 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  22 minimum_bits_per_pixel 1 1342  
616 14 Dtool_62HUbWqU 0 4 620 1343 0 14 Dtool_62HUbWqU 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  22 maximum_bits_per_pixel 1 1342  
617 14 Dtool_62HUs2_j 0 4 622 1343 0 14 Dtool_62HUs2_j 548 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1470  1 x 1 1342  1 y 1 1342  
618 14 Dtool_62HUJuQB 0 7 623 1340 0 14 Dtool_62HUJuQB 0 0 
619 14 Dtool_62HUGcAr 0 7 626 1414 0 14 Dtool_62HUGcAr 448 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
//////////////////////////////////////////////////////////////////// 1 8 pipeline 1 1471  
620 14 Dtool_62HU3Xr_ 0 7 626 1414 0 14 Dtool_62HU3Xr_ 448 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
//////////////////////////////////////////////////////////////////// 0 
621 14 Dtool_62HUkzZy 0 4 627 1343 0 14 Dtool_62HUkzZy 422 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_threading_model
//       Access: Published
//  Description: Specifies how future objects created via make_gsg(),
//               make_buffer(), and make_window() will be threaded.
//               This does not affect any already-created objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1414  15 threading_model 1 1406  
622 14 Dtool_62HU_NLg 0 7 628 1408 986 14 Dtool_62HU_NLg 347 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_threading_model
//       Access: Published
//  Description: Returns the threading model that will be applied to
//               future objects.  See set_threading_model().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1473  
623 14 Dtool_62HUbqNp 0 6 629 1475 0 14 Dtool_62HUbqNp 520 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_render_lock
//       Access: Published
//  Description: Returns a ReMutex object that is held by the
//               GraphicsEngine during the entire call to
//               render_frame().  While you hold this lock you can be
//               confident that no part of the frame will be rendered
//               (at least by the app thread).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1473  
624 14 Dtool_62HUpnHT 0 4 630 1343 0 14 Dtool_62HUpnHT 925 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_auto_flip
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should automatically cause windows to sync and flip
//               as soon as they have finished drawing, rather than
//               waiting for all of the windows to finish drawing
//               first so they can flip together.
//
//               This only affects the timing of when the flip occurs.
//               If this is true (the default), the flip occurs before
//               render_frame() returns.  If this is false, the flip
//               occurs whenever flip_frame() is called, or at the
//               beginning of the next call to render_frame(), if
//               flip_frame() is never called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1414  9 auto_flip 1 1349  
625 14 Dtool_62HUdDTb 0 6 631 1349 0 14 Dtool_62HUdDTb 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_auto_flip
//       Access: Published
//  Description: Returns the current setting for the auto-flip flag.
//               See set_auto_flip.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1473  
626 14 Dtool_62HU5bdZ 0 4 632 1343 0 14 Dtool_62HU5bdZ 325 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_portal_cull
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should start portal culling
//////////////////////////////////////////////////////////////////// 2 4 this 3 1414  5 value 1 1349  
627 14 Dtool_62HUsi85 0 6 633 1349 0 14 Dtool_62HUsi85 287 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_portal_cull
//       Access: Published
//  Description: Returns the current setting for the portal culling flag.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1473  
628 14 Dtool_62HUm7fs 0 4 634 1343 0 14 Dtool_62HUm7fs 398 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_default_loader
//       Access: Public
//  Description: Sets the Loader object that will be assigned to every
//               GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1414  6 loader 1 1412  
629 14 Dtool_62HUL2Ib 0 7 635 1412 0 14 Dtool_62HUL2Ib 410 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_default_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be assigned to
//               every GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1473  
630 14 Dtool_62HU6E_Y 0 7 636 1381 1075 14 Dtool_62HU6E_Y 0 9 4 this 3 1414  4 pipe 1 1338  4 name 1 1346  4 sort 1 1342  7 fb_prop 1 1404  8 win_prop 1 1366  5 flags 1 1342  3 gsg 1 1409  4 host 1 1381  
631 14 Dtool_62HUHZRz 0 7 636 1381 1075 14 Dtool_62HUHZRz 0 8 4 this 3 1414  4 pipe 1 1338  4 name 1 1346  4 sort 1 1342  7 fb_prop 1 1404  8 win_prop 1 1366  5 flags 1 1342  3 gsg 1 1409  
632 14 Dtool_62HUo_rj 0 7 636 1381 1075 14 Dtool_62HUo_rj 0 7 4 this 3 1414  4 pipe 1 1338  4 name 1 1346  4 sort 1 1342  7 fb_prop 1 1404  8 win_prop 1 1366  5 flags 1 1342  
633 14 Dtool_62HUQ92T 0 7 637 1381 1075 14 Dtool_62HUQ92T 723 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This is the
//               preferred way to create an offscreen buffer, when you
//               already have an onscreen window or another buffer to
//               start with.  For the first parameter, pass an
//               existing GraphicsOutput object, e.g. the main window;
//               this allows the buffer to adapt itself to that
//               window's framebuffer properties, and allows maximum
//               sharing of resources.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1414  4 host 1 1381  4 name 1 1346  4 sort 1 1342  6 x_size 1 1342  6 y_size 1 1342  
634 14 Dtool_62HUG7HJ 0 7 637 1381 1075 14 Dtool_62HUG7HJ 1177 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This flavor
//               accepts a GSG rather than a GraphicsOutput as the
//               first parameter, which is too limiting and disallows
//               the possibility of creating a ParasiteBuffer if the
//               user's graphics hardware prefers that.  It also
//               attempts to request specific framebuffer properties
//               and may therefore do a poorer job of sharing the GSG
//               between the old buffer and the new.
//
//               For these reasons, this variant is a poor choice
//               unless you are creating an offscreen buffer for the
//               first time, without an onscreen window already in
//               existence.  If you already have an onscreen window,
//               you should use the other flavor of make_buffer()
//               instead, which accepts a GraphicsOutput as the first
//               parameter.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1414  3 gsg 1 1409  4 name 1 1346  4 sort 1 1342  6 x_size 1 1342  6 y_size 1 1342  
635 14 Dtool_62HUs8x6 0 7 638 1381 1075 14 Dtool_62HUs8x6 265 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_parasite
//       Access: Published
//  Description: Syntactic shorthand for make_buffer.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1414  4 host 1 1381  4 name 1 1346  4 sort 1 1342  6 x_size 1 1342  6 y_size 1 1342  
636 14 Dtool_62HUQEjj 0 6 639 1349 0 14 Dtool_62HUQEjj 1357 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_window
//       Access: Published
//  Description: Removes the indicated window or offscreen buffer from
//               the set of windows that will be processed when
//               render_frame() is called.  This also closes the
//               window if it is open, and removes the window from its
//               GraphicsPipe, allowing the window to be destructed if
//               there are no other references to it.  (However, the
//               window may not be actually closed until next frame,
//               if it is controlled by a sub-thread.)
//
//               The return value is true if the window was removed,
//               false if it was not found.
//
//               Unlike remove_all_windows(), this function does not
//               terminate any of the threads that may have been
//               started to service this window; they are left running
//               (since you might open a new window later on these
//               threads).  If your intention is to clean up before
//               shutting down, it is better to call
//               remove_all_windows() then to call remove_window() one
//               at a time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1414  6 window 1 1381  
637 14 Dtool_62HUbizP 0 4 640 1343 0 14 Dtool_62HUbizP 412 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_all_windows
//       Access: Published
//  Description: Removes and closes all windows from the engine.  This
//               also cleans up and terminates any threads that have
//               been started to service those windows.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1414  
638 14 Dtool_62HU7tzD 0 4 641 1343 0 14 Dtool_62HU7tzD 465 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::reset_all_windows
//       Access: Published
//  Description: Resets the framebuffer of the current window.  This
//               is currently used by DirectX 8 only. It calls a
//               reset_window function on each active window to
//               release/create old/new framebuffer
//////////////////////////////////////////////////////////////////// 2 4 this 3 1414  9 swapchain 1 1349  
639 14 Dtool_62HUqWta 0 6 642 1349 0 14 Dtool_62HUqWta 360 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::is_empty
//       Access: Published
//  Description: Returns true if there are no windows or buffers
//               managed by the engine, false if there is at least
//               one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1473  
640 14 Dtool_62HUxJBp 0 6 643 1342 0 14 Dtool_62HUxJBp 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_num_windows
//       Access: Published
//  Description: Returns the number of windows (or buffers) managed by
//               the engine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1473  
641 14 Dtool_62HULl7l 0 7 644 1381 1075 14 Dtool_62HULl7l 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_window
//       Access: Published
//  Description: Returns the nth window or buffers managed by the
//               engine, in sorted order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1473  1 n 1 1342  
642 14 Dtool_62HU4GAK 0 4 645 1343 0 14 Dtool_62HU4GAK 334 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::render_frame
//       Access: Published
//  Description: Renders the next frame in all the registered windows,
//               and flips all of the frame buffers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1414  
643 14 Dtool_62HUfeD_ 0 4 646 1343 0 14 Dtool_62HUfeD_ 658 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::open_windows
//       Access: Published
//  Description: Fully opens (or closes) any windows that have
//               recently been requested open or closed, without
//               rendering any frames.  It is not necessary to call
//               this explicitly, since windows will be automatically
//               opened or closed when the next frame is rendered, but
//               you may call this if you want your windows now
//               without seeing a frame go by.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1414  
644 14 Dtool_62HUNMb_ 0 4 647 1343 0 14 Dtool_62HUNMb_ 558 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::sync_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing.  The windows are not
//               yet flipped when this returns; see also flip_frame().
//               It is not usually necessary to call this explicitly,
//               unless you need to see the previous frame right away.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1414  
645 14 Dtool_62HUmoKK 0 4 648 1343 0 14 Dtool_62HUmoKK 962 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::ready_flip
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing. Returns when all threads have
//               actually finished drawing, as opposed to 'sync_frame'
//               we seems to return once all draw calls have been submitted.
//               Calling 'flip_frame' after this function should immediately
//               cause a buffer flip.  This function will only work in
//               opengl right now, for all other graphics pipelines it will
//               simply return immediately.  In opengl it's a bit of a hack:
//               it will attempt to read a single pixel from the frame buffer to
//               force the graphics card to finish drawing before it returns
//////////////////////////////////////////////////////////////////// 1 4 this 3 1414  
646 14 Dtool_62HUbWRO 0 4 649 1343 0 14 Dtool_62HUbWRO 516 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::flip_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing, and then flips all the
//               windows.  It is not usually necessary to call this
//               explicitly, unless you need to see the previous frame
//               right away.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1414  
647 14 Dtool_62HU8ADE 0 6 650 1349 0 14 Dtool_62HU8ADE 1560 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::extract_texture_data
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to retrieve
//               the texture memory image of the indicated texture and
//               store it in the texture's ram_image field.  The image
//               can then be written to disk via Texture::write(), or
//               otherwise manipulated on the CPU.
//
//               This is useful for retrieving the contents of a
//               texture that has been somehow generated on the
//               graphics card, instead of having been loaded the
//               normal way via Texture::read() or Texture::load().
//               It is particularly useful for getting the data
//               associated with a compressed texture image.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               If the texture has not yet been loaded to the GSG in
//               question, it will be loaded immediately.
//
//               The return value is true if the operation is
//               successful, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1414  3 tex 1 1396  3 gsg 1 1409  
648 14 Dtool_62HUFtSe 0 4 651 1343 0 14 Dtool_62HUFtSe 1071 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::dispatch_compute
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to dispatch
//               the compute shader in the given ShaderAttrib using
//               the given work group counts.  This can act as an
//               interface for running a one-off compute shader,
//               without having to store it in the scene graph using
//               a ComputeNode.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               The return value is true if the operation is
//               successful, false otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1414  11 work_groups 1 1478  5 sattr 1 1481  3 gsg 1 1409  
649 14 Dtool_62HUB52G 0 7 652 1414 0 14 Dtool_62HUB52G 237 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_global_ptr
//       Access: Published, Static
//  Description:
//////////////////////////////////////////////////////////////////// 0 
650 14 Dtool_62HUkGJV 0 6 654 1342 0 14 Dtool_62HUkGJV 382 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_pipe_types
//       Access: Published
//  Description: Returns the number of different types of
//               GraphicsPipes that are available to create through
//               this interface.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1484  
651 14 Dtool_62HUdWon 0 7 655 1340 0 14 Dtool_62HUdWon 323 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_pipe_type
//       Access: Published
//  Description: Returns the nth type of GraphicsPipe available
//               through this interface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1484  1 n 1 1342  
652 14 Dtool_62HUKhch 0 4 656 1343 0 14 Dtool_62HUKhch 348 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::print_pipe_types
//       Access: Published
//  Description: Writes a list of the currently known GraphicsPipe
//               types to nout, for the user's information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1484  
653 14 Dtool_62HUgtWV 0 7 657 1338 0 14 Dtool_62HUgtWV 456 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1486  4 type 1 1340  
654 14 Dtool_62HU_DWW 0 7 657 1338 0 14 Dtool_62HU_DWW 651 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1486  9 type_name 1 1346  11 module_name 1 1346  
655 14 Dtool_62HU053M 0 7 657 1338 0 14 Dtool_62HU053M 651 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1486  9 type_name 1 1346  
656 14 Dtool_62HU7Nor 0 7 658 1338 0 14 Dtool_62HU7Nor 430 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_module_pipe
//       Access: Published
//  Description: Returns a new GraphicsPipe of a type defined by the
//               indicated module.  Returns NULL if the module is not
//               found or does not properly recommend a GraphicsPipe.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1486  11 module_name 1 1346  
657 14 Dtool_62HUJlGM 0 7 659 1338 0 14 Dtool_62HUJlGM 426 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_default_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of some arbitrary type.
//               The user may specify a preference using the Configrc
//               file; otherwise, one will be chosen arbitrarily.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1486  
658 14 Dtool_62HUtQ2r 0 6 660 1342 0 14 Dtool_62HUtQ2r 472 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_aux_modules
//       Access: Published
//  Description: Returns the number of display modules that are still
//               to be loaded.  If this is nonzero, then calling
//               load_aux_modules() will likely increase the number of
//               GraphicsPipes available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1484  
659 14 Dtool_62HU4_4n 0 4 661 1343 0 14 Dtool_62HU4_4n 391 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::load_aux_modules
//       Access: Published
//  Description: Loads all the modules named in the aux-display
//               Configrc variable, making as many graphics pipes as
//               possible available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1486  
660 14 Dtool_62HUa86m 0 6 662 1486 0 14 Dtool_62HUa86m 327 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one global
//               GraphicsPipeSelection object.
//////////////////////////////////////////////////////////////////// 0 
661 14 Dtool_62HUzpWM 0 7 664 1359 0 14 Dtool_62HUzpWM 607 ////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_int
//       Access: Published, Static
//  Description: Constructs a new WindowHandle with an int value,
//               which is understood to be either an HWND or a Window,
//               cast to int.  This method exists for the convenience
//               of Python, which likes to deal with ints; C++ code
//               should use one of the more specific make_x11() or
//               make_win32() methods instead.
//////////////////////////////////////////////////////////////////// 1 6 window 1 1345  
662 14 Dtool_62HUP_i_ 0 7 665 1359 0 14 Dtool_62HUP_i_ 636 ////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_subprocess
//       Access: Published, Static
//  Description: Constructs a new WindowHandle that references a
//               SubprocessWindowBuffer read in another process, with
//               the named pipe filename that it uses for
//               communication.
//
//               This is (at present, and maybe always) useful only on
//               the OS X platform, where parenting child windows is
//               particularly problematic.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 1374  
663 14 Dtool_62HU9VjG 0 7 666 1340 0 14 Dtool_62HU9VjG 0 0 
664 14 Dtool_62HUvamu 0 4 669 1343 0 14 Dtool_62HUvamu 548 ////////////////////////////////////////////////////////////////////
//     Function: ParasiteBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1487  1 x 1 1342  1 y 1 1342  
665 14 Dtool_62HUKj4L 0 7 670 1340 0 14 Dtool_62HUKj4L 0 0 
200
1289 14 GraphicsDevice 0 75777 14 GraphicsDevice 14 GraphicsDevice 0 0 0 0 0 0 2 666 667 0 0 1 0 1290 0 0 0 0 499
////////////////////////////////////////////////////////////////////
//       Class : GraphicsDevice
// Description : An abstract device object that is part of Graphics
//               Pipe. This device is set to NULL for OpenGL. But 
//               DirectX uses it to take control of multiple windows
//               under single device or multiple devices (i.e. more
//               than one adapters in the machine).   
//
////////////////////////////////////////////////////////////////////

1290 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1291 18 DisplayInformation 0 26625 18 DisplayInformation 18 DisplayInformation 0 0 0 1 669 668 0 53 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 0 0 0 0 1 1292 0

1292 14 DetectionState 0 794624 34 DisplayInformation::DetectionState 34 DisplayInformation::DetectionState 1291 0 0 0 0 0 0 0 0 0 5 10 DS_unknown 30 DisplayInformation::DS_unknown 0
0 10 DS_success 30 DisplayInformation::DS_success 0
1 25 DS_direct_3d_create_error 45 DisplayInformation::DS_direct_3d_create_error 0
2 22 DS_create_window_error 42 DisplayInformation::DS_create_window_error 0
3 22 DS_create_device_error 42 DisplayInformation::DS_create_device_error 0
4 0 0

1293 12 GraphicsPipe 0 75777 12 GraphicsPipe 12 GraphicsPipe 0 0 0 0 0 0 9 723 724 725 726 727 728 729 730 731 0 0 1 0 1290 0 0 0 2 1294 1295 1126
////////////////////////////////////////////////////////////////////
//       Class : GraphicsPipe
// Description : An object to create GraphicsOutputs that share a
//               particular 3-D API.  Normally, there will only be one
//               GraphicsPipe in an application, although it is
//               possible to have multiple of these at once if there
//               are multiple different API's available in the same
//               machine.
//
//               Often, the GraphicsPipe corresponds to a physical
//               output device, hence the term "pipe", but this is not
//               necessarily the case.
//
//               The GraphicsPipe is used by the GraphicsEngine object
//               to create and destroy windows; it keeps ownership of
//               the windows it creates.
//
//               M. Asad added new/interim functionality where GraphicsPipe
//               now contains a device interface to directx/opengl which
//               will be used to handle multiple windows from same device.
//
////////////////////////////////////////////////////////////////////

1294 11 OutputTypes 0 794624 25 GraphicsPipe::OutputTypes 25 GraphicsPipe::OutputTypes 1293 0 0 0 0 0 0 0 0 0 4 9 OT_window 23 GraphicsPipe::OT_window 0
1 20 OT_fullscreen_window 34 GraphicsPipe::OT_fullscreen_window 0
2 9 OT_buffer 23 GraphicsPipe::OT_buffer 0
4 17 OT_texture_buffer 31 GraphicsPipe::OT_texture_buffer 0
8 0 0

1295 19 BufferCreationFlags 0 794624 33 GraphicsPipe::BufferCreationFlags 33 GraphicsPipe::BufferCreationFlags 1293 0 0 0 0 0 0 0 0 0 14 18 BF_refuse_parasite 32 GraphicsPipe::BF_refuse_parasite 54
// Flags that control what type of output is returned.
1 19 BF_require_parasite 33 GraphicsPipe::BF_require_parasite 0
2 16 BF_refuse_window 30 GraphicsPipe::BF_refuse_window 0
4 17 BF_require_window 31 GraphicsPipe::BF_require_window 0
8 26 BF_require_callback_window 40 GraphicsPipe::BF_require_callback_window 0
16 17 BF_can_bind_color 31 GraphicsPipe::BF_can_bind_color 53
// Need capability: bind the color bitplane to a tex.
64 17 BF_can_bind_every 31 GraphicsPipe::BF_can_bind_every 48
// Need capability: bind all bitplanes to a tex.
128 13 BF_resizeable 27 GraphicsPipe::BF_resizeable 32
// Buffer should allow set_size.
256 18 BF_size_track_host 32 GraphicsPipe::BF_size_track_host 37
// Buffer should track the host size.
512 17 BF_rtt_cumulative 31 GraphicsPipe::BF_rtt_cumulative 48
// Buffer supports cumulative render-to-texture.
1024 20 BF_fb_props_optional 34 GraphicsPipe::BF_fb_props_optional 40
// FrameBufferProperties can be ignored.
2048 14 BF_size_square 28 GraphicsPipe::BF_size_square 48
// x_size must equal y_size (e.g. for cube maps)
4096 15 BF_size_power_2 29 GraphicsPipe::BF_size_power_2 48
// x_size and y_size must each be a power of two
8192 19 BF_can_bind_layered 33 GraphicsPipe::BF_can_bind_layered 45
// Need capability: support RTM_bind_layered.
16384 0 0

1296 14 DrawableRegion 0 26625 14 DrawableRegion 14 DrawableRegion 0 0 0 0 732 0 23 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 0 0 0 0 1 1297 655
////////////////////////////////////////////////////////////////////
//       Class : DrawableRegion
// Description : This is a base class for GraphicsWindow (actually,
//               GraphicsOutput) and DisplayRegion, both of which are
//               conceptually rectangular regions into which drawing
//               commands may be issued.  Sometimes you want to deal
//               with a single display region, and sometimes you want
//               to deal with the whole window at once, particularly
//               for issuing clear commands and capturing screenshots.
////////////////////////////////////////////////////////////////////

1297 18 RenderTexturePlane 0 794624 34 DrawableRegion::RenderTexturePlane 34 DrawableRegion::RenderTexturePlane 1296 0 0 0 0 0 0 0 0 0 17 11 RTP_stencil 27 DrawableRegion::RTP_stencil 0
0 17 RTP_depth_stencil 33 DrawableRegion::RTP_depth_stencil 0
1 9 RTP_color 25 DrawableRegion::RTP_color 0
2 14 RTP_aux_rgba_0 30 DrawableRegion::RTP_aux_rgba_0 0
3 14 RTP_aux_rgba_1 30 DrawableRegion::RTP_aux_rgba_1 0
4 14 RTP_aux_rgba_2 30 DrawableRegion::RTP_aux_rgba_2 0
5 14 RTP_aux_rgba_3 30 DrawableRegion::RTP_aux_rgba_3 0
6 15 RTP_aux_hrgba_0 31 DrawableRegion::RTP_aux_hrgba_0 0
7 15 RTP_aux_hrgba_1 31 DrawableRegion::RTP_aux_hrgba_1 0
8 15 RTP_aux_hrgba_2 31 DrawableRegion::RTP_aux_hrgba_2 0
9 15 RTP_aux_hrgba_3 31 DrawableRegion::RTP_aux_hrgba_3 0
10 15 RTP_aux_float_0 31 DrawableRegion::RTP_aux_float_0 0
11 15 RTP_aux_float_1 31 DrawableRegion::RTP_aux_float_1 0
12 15 RTP_aux_float_2 31 DrawableRegion::RTP_aux_float_2 0
13 15 RTP_aux_float_3 31 DrawableRegion::RTP_aux_float_3 0
14 9 RTP_depth 25 DrawableRegion::RTP_depth 0
15 9 RTP_COUNT 25 DrawableRegion::RTP_COUNT 0
16 0 168
// It seems awkward to have this type, and also
// RenderBuffer::Type.  However, the fact that RenderBuffer::Type
// is a bitmask makes it awfully awkward to work with.

1298 12 WindowHandle 0 75777 12 WindowHandle 12 WindowHandle 0 0 0 1 756 0 0 6 757 758 759 760 761 765 0 0 1 0 1290 0 0 0 1 1299 859
////////////////////////////////////////////////////////////////////
//       Class : WindowHandle
// Description : This object represents a window on the desktop, not
//               necessarily a Panda window.  This structure can be
//               assigned to a WindowProperties to indicate a parent
//               window.
//
//               It also has callbacks so the Panda window can
//               communicate with its parent window, which is
//               particularly important when running embedded in a
//               browser.
//
//               To create a WindowHandle, you would usually call one
//               of the NativeWindowHandle::make_*() methods,
//               depending on the kind of native window handle object
//               you already have.
////////////////////////////////////////////////////////////////////

1299 8 OSHandle 0 337921 22 WindowHandle::OSHandle 22 WindowHandle::OSHandle 1298 0 0 0 0 0 3 762 763 764 0 0 1 0 1290 0 0 0 0 154
// This internal pointer within WindowHandle stores the actual
// OS-specific window handle type, whatever type that is.  It is
// subclassed for each OS.

1300 16 WindowProperties 0 26625 16 WindowProperties 16 WindowProperties 0 0 0 1 766 768 0 80 767 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 0 0 0 0 2 1301 1302 436
////////////////////////////////////////////////////////////////////
//       Class : WindowProperties
// Description : A container for the various kinds of properties we
//               might ask to have on a graphics window before we open
//               it.  This also serves to hold the current properties
//               for a window after it has been opened.
////////////////////////////////////////////////////////////////////

1301 6 ZOrder 0 794624 24 WindowProperties::ZOrder 24 WindowProperties::ZOrder 1300 0 0 0 0 0 0 0 0 0 3 8 Z_bottom 26 WindowProperties::Z_bottom 0
0 8 Z_normal 26 WindowProperties::Z_normal 0
1 5 Z_top 23 WindowProperties::Z_top 0
2 0 0

1302 9 MouseMode 0 794624 27 WindowProperties::MouseMode 27 WindowProperties::MouseMode 1300 0 0 0 0 0 0 0 0 0 2 10 M_absolute 28 WindowProperties::M_absolute 0
0 10 M_relative 28 WindowProperties::M_relative 0
1 0 0

1303 13 DisplayRegion 0 26625 13 DisplayRegion 13 DisplayRegion 0 0 0 0 852 0 49 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 0 0 2 3 1304 848 849 3 1296 850 851 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

1304 17 DisplayRegionBase 0 2049 17 DisplayRegionBase 17 DisplayRegionBase 0 0 0 0 0 0 0 0 0 0 0 0 307
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionBase
// Description : An abstract base class for DisplayRegion, mainly so
//               we can store DisplayRegion pointers in a Camera.
////////////////////////////////////////////////////////////////////

1305 19 StereoDisplayRegion 0 75777 19 StereoDisplayRegion 19 StereoDisplayRegion 0 0 0 0 852 0 3 902 903 904 0 0 1 0 1303 0 0 0 0 862
////////////////////////////////////////////////////////////////////
//       Class : StereoDisplayRegion
// Description : This is a special DisplayRegion wrapper that actually
//               includes a pair of DisplayRegions internally: the
//               left and right eyes.  The DisplayRegion represented
//               here does not have a physical association with the
//               window, but it pretends it does.  Instead, it
//               maintains a pointer to the left and right
//               DisplayRegions separately.
//
//               Operations on the StereoDisplayRegion object affect
//               both left and right eyes together.  To access the
//               left or right eyes independently, use get_left_eye()
//               and get_right_eye().
////////////////////////////////////////////////////////////////////

1306 21 FrameBufferProperties 0 26625 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 1 950 951 0 65 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 0 0 0 0 0 346
////////////////////////////////////////////////////////////////////
//       Class : FrameBufferProperties
// Description : A container for the various kinds of properties we
//               might ask to have on a graphics frameBuffer before we
//               create a GSG.
////////////////////////////////////////////////////////////////////

1307 22 GraphicsThreadingModel 0 141313 22 GraphicsThreadingModel 22 GraphicsThreadingModel 0 0 0 1 972 986 0 13 973 974 975 976 977 978 979 980 981 982 983 984 985 0 0 0 0 0 313
////////////////////////////////////////////////////////////////////
//       Class : GraphicsThreadingModel
// Description : This represents the user's specification of how a
//               particular frame is handled by the various threads.
////////////////////////////////////////////////////////////////////

1308 21 GraphicsStateGuardian 0 75777 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 84 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 0 0 1 0 1309 0 0 0 1 1310 564
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardian
// Description : Encapsulates all the communication with a particular
//               instance of a given rendering backend.  Tries to
//               guarantee that redundant state-change requests are
//               not issued (hence "state guardian").
//
//               There will be one of these objects for each different
//               graphics context active in the system.
////////////////////////////////////////////////////////////////////

1309 25 GraphicsStateGuardianBase 0 2049 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 1 1489 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

1310 11 ShaderModel 0 794624 34 GraphicsStateGuardian::ShaderModel 34 GraphicsStateGuardian::ShaderModel 1308 0 0 0 0 0 0 0 0 0 7 5 SM_00 28 GraphicsStateGuardian::SM_00 0
0 5 SM_11 28 GraphicsStateGuardian::SM_11 0
1 5 SM_20 28 GraphicsStateGuardian::SM_20 0
2 5 SM_2X 28 GraphicsStateGuardian::SM_2X 0
3 5 SM_30 28 GraphicsStateGuardian::SM_30 0
4 5 SM_40 28 GraphicsStateGuardian::SM_40 0
5 5 SM_50 28 GraphicsStateGuardian::SM_50 0
6 0 0

1311 14 GraphicsOutput 0 26625 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 1075 0 74 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 2 1490 1491 0 2 3 1312 1071 1072 3 1296 1073 1074 0 2 1313 1314 1111
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutput
// Description : This is a base class for the various different
//               classes that represent the result of a frame of
//               rendering.  The most common kind of GraphicsOutput is
//               a GraphicsWindow, which is a real-time window on the
//               desktop, but another example is GraphicsBuffer, which
//               is an offscreen buffer.
//
//               The actual rendering, and anything associated with
//               the graphics context itself, is managed by the
//               associated GraphicsStateGuardian (which might output
//               to multiple GraphicsOutput objects).
//
//               GraphicsOutputs are not actually writable to bam
//               files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

1312 18 GraphicsOutputBase 0 2049 18 GraphicsOutputBase 18 GraphicsOutputBase 0 0 0 0 0 0 0 0 0 0 0 0 277
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutputBase
// Description : An abstract base class for GraphicsOutput, for all
//               the usual reasons.
////////////////////////////////////////////////////////////////////

1313 17 RenderTextureMode 0 794624 33 GraphicsOutput::RenderTextureMode 33 GraphicsOutput::RenderTextureMode 1311 0 0 0 0 0 0 0 0 0 7 8 RTM_none 24 GraphicsOutput::RTM_none 0
0 16 RTM_bind_or_copy 32 GraphicsOutput::RTM_bind_or_copy 104
// Try to render to the texture directly, but if that is
// not possible, fall back to RTM_copy_texture.
1 16 RTM_copy_texture 32 GraphicsOutput::RTM_copy_texture 61
// Copy the image from the buffer to the texture every frame.
2 12 RTM_copy_ram 28 GraphicsOutput::RTM_copy_ram 60
// Copy the image from the buffer to system RAM every frame.
3 26 RTM_triggered_copy_texture 42 GraphicsOutput::RTM_triggered_copy_texture 83
// Copy the image from the buffer to the texture after a
// call to trigger_copy().
4 22 RTM_triggered_copy_ram 38 GraphicsOutput::RTM_triggered_copy_ram 82
// Copy the image from the buffer to system RAM after a
// call to trigger_copy().
5 16 RTM_bind_layered 32 GraphicsOutput::RTM_bind_layered 169
// Render directly to a layered texture, such as a cube map,
// 3D texture or 2D texture array.  The layer that is being
// rendered to is selected by a geometry shader.
6 0 0

1314 9 FrameMode 0 794624 25 GraphicsOutput::FrameMode 25 GraphicsOutput::FrameMode 1311 0 0 0 0 0 0 0 0 0 3 9 FM_render 25 GraphicsOutput::FM_render 28
// We are rendering a frame.
0 11 FM_parasite 27 GraphicsOutput::FM_parasite 42
// We are rendering a frame of a parasite.
1 10 FM_refresh 26 GraphicsOutput::FM_refresh 61
// We are just refreshing the display or exposing the window.
2 0 56
// There are many reasons to call begin_frame/end_frame.

1315 25 GraphicsWindowInputDevice 0 26625 25 GraphicsWindowInputDevice 25 GraphicsWindowInputDevice 0 0 0 0 1150 0 11 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 0 0 0 0 0 505
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindowInputDevice
// Description : This is a structure representing a single input
//               device that may be associated with a window.
//               Typically this will be a keyboard/mouse pair, and
//               there will be exactly one of these associated with
//               each window, but other variants are possible.
////////////////////////////////////////////////////////////////////

1316 9 TouchInfo 0 141313 9 TouchInfo 9 TouchInfo 0 0 0 0 1166 0 4 1162 1163 1164 1165 0 0 0 0 1 1317 226
////////////////////////////////////////////////////////////////////
//       Class : TouchInfo
// Description : Stores information for a single touch event.
////////////////////////////////////////////////////////////////////

1317 14 TouchInfoFlags 0 794624 25 TouchInfo::TouchInfoFlags 25 TouchInfo::TouchInfoFlags 1316 0 0 0 0 0 0 0 0 0 3 8 TIF_move 19 TouchInfo::TIF_move 0
1 8 TIF_down 19 TouchInfo::TIF_down 0
2 6 TIF_up 17 TouchInfo::TIF_up 0
4 0 0

1318 30 GraphicsWindowProcCallbackData 0 141313 30 GraphicsWindowProcCallbackData 30 GraphicsWindowProcCallbackData 0 0 0 0 1175 0 8 1167 1168 1169 1170 1171 1172 1173 1174 0 0 1 0 1319 0 0 0 0 408
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindowProcCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from from an implementation
//               of the GraphicsWindowProc class, such as PythonGraphicsWindowProc.
////////////////////////////////////////////////////////////////////

1319 12 CallbackData 0 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

1320 14 GraphicsWindow 0 75777 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 1075 0 27 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1 1492 0 1 0 1311 0 0 0 0 329
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindow
// Description : A window, fullscreen or on a desktop, into which a
//               graphics device sends its output for interactive
//               display.
////////////////////////////////////////////////////////////////////

1321 22 CallbackGraphicsWindow 0 75777 22 CallbackGraphicsWindow 22 CallbackGraphicsWindow 0 0 0 0 1075 0 12 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 0 0 1 0 1320 0 0 0 5 1322 1323 1324 1325 1326 545
////////////////////////////////////////////////////////////////////
//       Class : CallbackGraphicsWindow
// Description : This special window object doesn't represent a window
//               in its own right, but instead hooks into some
//               third-party API for creating and rendering to windows
//               via callbacks.  This can be used to allow Panda to
//               render into an already-created OpenGL context, for
//               instance.
////////////////////////////////////////////////////////////////////

1322 18 WindowCallbackData 0 403457 42 CallbackGraphicsWindow::WindowCallbackData 42 CallbackGraphicsWindow::WindowCallbackData 1321 0 0 0 1205 0 2 1203 1204 0 0 1 0 1319 0 0 0 0 0

1323 18 EventsCallbackData 0 403457 42 CallbackGraphicsWindow::EventsCallbackData 42 CallbackGraphicsWindow::EventsCallbackData 1321 0 0 0 1207 0 1 1206 0 0 1 0 1322 0 0 0 0 0

1324 22 PropertiesCallbackData 0 403457 46 CallbackGraphicsWindow::PropertiesCallbackData 46 CallbackGraphicsWindow::PropertiesCallbackData 1321 0 0 0 1210 0 2 1208 1209 0 0 1 0 1322 0 0 0 0 0

1325 18 RenderCallbackType 0 794624 42 CallbackGraphicsWindow::RenderCallbackType 42 CallbackGraphicsWindow::RenderCallbackType 1321 0 0 0 0 0 0 0 0 0 4 15 RCT_begin_frame 39 CallbackGraphicsWindow::RCT_begin_frame 0
0 13 RCT_end_frame 37 CallbackGraphicsWindow::RCT_end_frame 0
1 14 RCT_begin_flip 38 CallbackGraphicsWindow::RCT_begin_flip 0
2 12 RCT_end_flip 36 CallbackGraphicsWindow::RCT_end_flip 0
3 0 0

1326 18 RenderCallbackData 0 403457 42 CallbackGraphicsWindow::RenderCallbackData 42 CallbackGraphicsWindow::RenderCallbackData 1321 0 0 0 1216 0 5 1211 1212 1213 1214 1215 0 0 1 0 1322 0 0 0 0 0

1327 29 DisplayRegionCullCallbackData 0 141313 29 DisplayRegionCullCallbackData 29 DisplayRegionCullCallbackData 0 0 0 0 1232 0 3 1229 1230 1231 0 0 1 0 1319 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionCullCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from the cull traversal,
//               for a DisplayRegion.
////////////////////////////////////////////////////////////////////

1328 29 DisplayRegionDrawCallbackData 0 141313 29 DisplayRegionDrawCallbackData 29 DisplayRegionDrawCallbackData 0 0 0 0 1236 0 3 1233 1234 1235 0 0 1 0 1319 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionDrawCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from the draw traversal,
//               for a DisplayRegion.
////////////////////////////////////////////////////////////////////

1329 23 DisplaySearchParameters 0 26625 23 DisplaySearchParameters 23 DisplaySearchParameters 0 0 0 1 1237 1238 0 6 1239 1240 1241 1242 1243 1244 0 0 0 0 0 247
////////////////////////////////////////////////////////////////////
//       Class : DisplaySearchParameters
// Description : Parameters used for searching display capabilities.
////////////////////////////////////////////////////////////////////

1330 14 GraphicsBuffer 0 75777 14 GraphicsBuffer 14 GraphicsBuffer 0 0 0 0 1075 0 2 1245 1246 0 0 1 0 1311 0 0 0 0 361
////////////////////////////////////////////////////////////////////
//       Class : GraphicsBuffer
// Description : An offscreen buffer for rendering into.  This is
//               similar in function to a GraphicsWindow, except that
//               the output is not visible to the user.
////////////////////////////////////////////////////////////////////

1331 14 GraphicsEngine 0 75777 14 GraphicsEngine 14 GraphicsEngine 0 0 0 1 1247 0 0 26 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1 1493 0 1 0 1332 0 0 0 0 823
////////////////////////////////////////////////////////////////////
//       Class : GraphicsEngine
// Description : This class is the main interface to controlling the
//               render process.  There is typically only one
//               GraphicsEngine in an application, and it synchronizes
//               rendering to all all of the active windows; although
//               it is possible to have multiple GraphicsEngine
//               objects if multiple synchronicity groups are
//               required.
//
//               The GraphicsEngine is responsible for managing the
//               various cull and draw threads.  The application
//               simply calls engine->render_frame() and considers it
//               done.
////////////////////////////////////////////////////////////////////

1332 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

1333 21 GraphicsPipeSelection 0 43009 21 GraphicsPipeSelection 21 GraphicsPipeSelection 0 0 0 0 0 0 9 1274 1275 1276 1277 1278 1279 1280 1281 1282 1 1494 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : GraphicsPipeSelection
// Description : This maintains a list of GraphicsPipes by type that
//               are available for creation.  Normally there is one
//               default interactive GraphicsPipe, and possibly other
//               types available as well.
////////////////////////////////////////////////////////////////////

1334 18 NativeWindowHandle 0 141313 18 NativeWindowHandle 18 NativeWindowHandle 0 0 0 0 1286 0 3 1283 1284 1285 0 0 1 0 1298 0 0 0 0 510
////////////////////////////////////////////////////////////////////
//       Class : NativeWindowHandle
// Description : This subclass of WindowHandle exists to allow simple
//               creation of a WindowHandle of the appropriate type to
//               the current OS.
//
//               This class exists for name scoping only.  Don't use
//               the constructor directly; use one of the make_*
//               methods.
////////////////////////////////////////////////////////////////////

1335 14 ParasiteBuffer 0 75777 14 ParasiteBuffer 14 ParasiteBuffer 0 0 0 0 1075 0 2 1287 1288 0 0 1 0 1311 0 0 0 0 1508
////////////////////////////////////////////////////////////////////
//       Class : ParasiteBuffer
// Description : This is a special GraphicsOutput type that acts a lot
//               like a GraphicsBuffer, effectively allowing rendering
//               to an offscreen buffer, except it does not create any
//               framebuffer space for itself.  Instead, it renders
//               into the framebuffer owned by some other
//               GraphicsOutput.
//
//               The x_size and y_size must therefore fit within the
//               bounds of the source GraphicsOutput.
//
//               Since the framebuffer will be subsequently cleared
//               when the actual owner draws in it later, this only
//               makes sense if we are going to copy the contents of
//               the framebuffer to a texture immediately after we
//               draw it.  Thus, has_texture() is implicitly true for
//               a ParasiteBuffer.
//
//               This class is useful to render offscreen to a texture
//               while preventing the waste of framebuffer memory for
//               API's that are unable to render directly into a
//               texture (and must render into a separate framebuffer
//               first and then copy to texture).  It is also the only
//               way to render to a texture on API's that do not
//               support offscreen rendering.
////////////////////////////////////////////////////////////////////

1336 22 GraphicsDevice const * 0 8576 22 GraphicsDevice const * 22 GraphicsDevice const * 0 0 1337 0 0 0 0 0 0 0 0 0 0

1337 20 GraphicsDevice const 0 8832 20 GraphicsDevice const 20 GraphicsDevice const 0 0 1289 0 0 0 0 0 0 0 0 0 0

1338 14 GraphicsPipe * 0 8576 14 GraphicsPipe * 14 GraphicsPipe * 0 0 1293 0 0 0 0 0 0 0 0 0 0

1339 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1340 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1339 0 0 0 0 0 0 0 0 0 0

1341 20 DisplayInformation * 0 8576 20 DisplayInformation * 20 DisplayInformation * 0 0 1291 0 0 0 0 0 0 0 0 0 0

1342 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1343 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1344 16 unsigned __int64 0 8230 16 unsigned __int64 16 unsigned __int64 0 8 0 0 0 0 0 0 0 0 0 0 0

1345 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1346 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1347 20 GraphicsPipe const * 0 8576 20 GraphicsPipe const * 20 GraphicsPipe const * 0 0 1348 0 0 0 0 0 0 0 0 0 0

1348 18 GraphicsPipe const 0 8832 18 GraphicsPipe const 18 GraphicsPipe const 0 0 1293 0 0 0 0 0 0 0 0 0 0

1349 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1350 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1296 0 0 0 0 0 0 0 0 0 0

1351 22 DrawableRegion const * 0 8576 22 DrawableRegion const * 22 DrawableRegion const * 0 0 1352 0 0 0 0 0 0 0 0 0 0

1352 20 DrawableRegion const 0 8832 20 DrawableRegion const 20 DrawableRegion const 0 0 1296 0 0 0 0 0 0 0 0 0 0

1353 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1354 0 0 0 0 0 0 0 0 0 0

1354 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1355 0 0 0 0 0 0 0 0 0 0

1355 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1356 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1357 20 WindowHandle const * 0 8576 20 WindowHandle const * 20 WindowHandle const * 0 0 1358 0 0 0 0 0 0 0 0 0 0

1358 18 WindowHandle const 0 8832 18 WindowHandle const 18 WindowHandle const 0 0 1298 0 0 0 0 0 0 0 0 0 0

1359 14 WindowHandle * 0 8576 14 WindowHandle * 14 WindowHandle * 0 0 1298 0 0 0 0 0 0 0 0 0 0

1360 10 OSHandle * 0 8576 24 WindowHandle::OSHandle * 24 WindowHandle::OSHandle * 0 0 1299 0 0 0 0 0 0 0 0 0 0

1361 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1362 0 0 0 0 0 0 0 0 0 0

1362 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1363 16 OSHandle const * 0 8576 30 WindowHandle::OSHandle const * 30 WindowHandle::OSHandle const * 0 0 1364 0 0 0 0 0 0 0 0 0 0

1364 14 OSHandle const 0 8832 28 WindowHandle::OSHandle const 28 WindowHandle::OSHandle const 0 0 1299 0 0 0 0 0 0 0 0 0 0

1365 18 WindowProperties * 0 8576 18 WindowProperties * 18 WindowProperties * 0 0 1300 0 0 0 0 0 0 0 0 0 0

1366 24 WindowProperties const * 0 8576 24 WindowProperties const * 24 WindowProperties const * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1367 22 WindowProperties const 0 8832 22 WindowProperties const 22 WindowProperties const 0 0 1300 0 0 0 0 0 0 0 0 0 0

1368 16 LPoint2i const * 0 8576 16 LPoint2i const * 16 LPoint2i const * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1369 14 LPoint2i const 0 8832 14 LPoint2i const 14 LPoint2i const 0 0 1370 0 0 0 0 0 0 0 0 0 0

1370 8 LPoint2i 0 2048 8 LPoint2i 8 LPoint2i 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

1371 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1372 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1373 0 0 0 0 0 0 0 0 0 0

1373 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

1374 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1375 0 0 0 0 0 0 0 0 0 0

1375 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1376 0 0 0 0 0 0 0 0 0 0

1376 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1377 21 DisplayRegion const * 0 8576 21 DisplayRegion const * 21 DisplayRegion const * 0 0 1378 0 0 0 0 0 0 0 0 0 0

1378 19 DisplayRegion const 0 8832 19 DisplayRegion const 19 DisplayRegion const 0 0 1303 0 0 0 0 0 0 0 0 0 0

1379 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1303 0 0 0 0 0 0 0 0 0 0

1380 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 1355 0 0 0 0 0 0 0 0 0 0

1381 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 1311 0 0 0 0 0 0 0 0 0 0

1382 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1383 0 0 0 0 0 0 0 0 0 0

1383 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 1384 0 0 0 0 0 0 0 0 0 0

1384 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 1495 1496 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

1385 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 1386 0 0 0 0 0 0 0 0 0 0

1386 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

1387 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1384 0 0 0 0 0 0 0 0 0 0

1388 13 StereoChannel 0 794624 19 Lens::StereoChannel 19 Lens::StereoChannel 1389 0 0 0 0 0 0 0 0 0 4 7 SC_mono 13 Lens::SC_mono 0
0 7 SC_left 13 Lens::SC_left 0
1 8 SC_right 14 Lens::SC_right 0
2 9 SC_stereo 15 Lens::SC_stereo 24
// == SC_left | SC_right
3 0 0

1389 4 Lens 0 2048 4 Lens 4 Lens 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node,
//               which defines the fundamental interface to
//               point-of-view for rendering.  Lenses are also used in
//               other contexts, however; for instance, a Spotlight is
//               also defined using a lens.
////////////////////////////////////////////////////////////////////

1390 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1391 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 512
////////////////////////////////////////////////////////////////////
//       Class : CullTraverser
// Description : This object performs a depth-first traversal of the
//               scene graph, with optional view-frustum culling,
//               collecting CullState and searching for GeomNodes.
//               Each renderable Geom encountered is passed along with
//               its associated RenderState to the CullHandler object.
////////////////////////////////////////////////////////////////////

1392 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1393 0 0 0 0 0 0 0 0 0 0

1393 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

1394 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1395 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

1396 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1395 0 0 0 0 0 0 0 0 0 0

1397 10 PNMImage * 0 8576 10 PNMImage * 10 PNMImage * 0 0 1398 0 0 0 0 0 0 0 0 0 0

1398 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1506
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
////////////////////////////////////////////////////////////////////

1399 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 1497 1498 1499 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

1400 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 1399 0 0 0 0 0 0 0 0 0 0

1401 19 DisplayRegionBase * 0 8576 19 DisplayRegionBase * 19 DisplayRegionBase * 0 0 1304 0 0 0 0 0 0 0 0 0 0

1402 21 StereoDisplayRegion * 0 8576 21 StereoDisplayRegion * 21 StereoDisplayRegion * 0 0 1305 0 0 0 0 0 0 0 0 0 0

1403 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1306 0 0 0 0 0 0 0 0 0 0

1404 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1405 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1306 0 0 0 0 0 0 0 0 0 0

1406 30 GraphicsThreadingModel const * 0 8576 30 GraphicsThreadingModel const * 30 GraphicsThreadingModel const * 0 0 1407 0 0 0 0 0 0 0 0 0 0

1407 28 GraphicsThreadingModel const 0 8832 28 GraphicsThreadingModel const 28 GraphicsThreadingModel const 0 0 1307 0 0 0 0 0 0 0 0 0 0

1408 24 GraphicsThreadingModel * 0 8576 24 GraphicsThreadingModel * 24 GraphicsThreadingModel * 0 0 1307 0 0 0 0 0 0 0 0 0 0

1409 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 1308 0 0 0 0 0 0 0 0 0 0

1410 29 GraphicsStateGuardian const * 0 8576 29 GraphicsStateGuardian const * 29 GraphicsStateGuardian const * 0 0 1411 0 0 0 0 0 0 0 0 0 0

1411 27 GraphicsStateGuardian const 0 8832 27 GraphicsStateGuardian const 27 GraphicsStateGuardian const 0 0 1308 0 0 0 0 0 0 0 0 0 0

1412 8 Loader * 0 8576 8 Loader * 8 Loader * 0 0 1413 0 0 0 0 0 0 0 0 0 0

1413 6 Loader 0 2048 6 Loader 6 Loader 0 0 0 0 0 0 0 0 0 0 0 0 819
////////////////////////////////////////////////////////////////////
//       Class : Loader
// Description : A convenient class for loading models from disk, in
//               bam or egg format (or any of a number of other
//               formats implemented by a LoaderFileType, such as
//               ptloader).
//
//               This class supports synchronous as well as
//               asynchronous loading.  In asynchronous loading, the
//               model is loaded in the background by a thread, and an
//               event will be generated when the model is available.
//               If threading is not available, the asynchronous
//               loading interface may be used, but it loads
//               synchronously.
////////////////////////////////////////////////////////////////////

1414 16 GraphicsEngine * 0 8576 16 GraphicsEngine * 16 GraphicsEngine * 0 0 1331 0 0 0 0 0 0 0 0 0 0

1415 21 TextureAttrib const * 0 8576 21 TextureAttrib const * 21 TextureAttrib const * 0 0 1416 0 0 0 0 0 0 0 0 0 0

1416 19 TextureAttrib const 0 8832 19 TextureAttrib const 19 TextureAttrib const 0 0 1417 0 0 0 0 0 0 0 0 0 0

1417 13 TextureAttrib 0 2048 13 TextureAttrib 13 TextureAttrib 0 0 0 0 0 0 0 3 1500 1501 1502 0 0 0 0 336
////////////////////////////////////////////////////////////////////
//       Class : TextureAttrib
// Description : Indicates the set of TextureStages and their
//               associated Textures that should be applied to (or
//               removed from) a node.
////////////////////////////////////////////////////////////////////

1418 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 600
////////////////////////////////////////////////////////////////////
//       Class : TextureStage
// Description : Defines the properties of a named stage of the
//               multitexture pipeline.  The TextureAttrib will
//               associated a number of these stages with Texture
//               objects, and the GSG will render geometry by sorting
//               all of the currently active TextureStages in order
//               and then issuing the appropriate rendering calls to
//               activate them.
////////////////////////////////////////////////////////////////////

1419 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1420 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

1421 23 PreparedGraphicsObjects 0 2048 23 PreparedGraphicsObjects 23 PreparedGraphicsObjects 0 0 0 0 0 0 0 0 0 0 0 0 1037
////////////////////////////////////////////////////////////////////
//       Class : PreparedGraphicsObjects
// Description : A table of objects that are saved within the graphics
//               context for reference by handle later.  Generally,
//               this represents things like OpenGL texture objects or
//               display lists (or their equivalent on other
//               platforms).
//
//               This object simply records the pointers to the
//               context objects created by the individual GSG's;
//               these context objects will contain enough information
//               to reference or release the actual object stored
//               within the graphics context.
//
//               These tables may potentially be shared between
//               related graphics contexts, hence their storage here
//               in a separate object rather than as a part of the
//               GraphicsStateGuardian.
////////////////////////////////////////////////////////////////////

1422 25 PreparedGraphicsObjects * 0 8576 25 PreparedGraphicsObjects * 25 PreparedGraphicsObjects * 0 0 1421 0 0 0 0 0 0 0 0 0 0

1423 12 QualityLevel 0 794624 21 Texture::QualityLevel 21 Texture::QualityLevel 1395 0 0 0 0 0 0 0 0 0 4 10 QL_default 19 Texture::QL_default 37
// according to texture-quality-level
0 10 QL_fastest 19 Texture::QL_fastest 0
1 9 QL_normal 18 Texture::QL_normal 0
2 7 QL_best 16 Texture::QL_best 0
3 0 0

1424 9 _object * 0 8576 9 _object * 9 _object * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1425 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1426 12 SceneSetup * 0 8576 12 SceneSetup * 12 SceneSetup * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1427 10 SceneSetup 0 2048 10 SceneSetup 10 SceneSetup 0 0 0 0 0 0 0 0 0 0 0 0 331
////////////////////////////////////////////////////////////////////
//       Class : SceneSetup
// Description : This object holds the camera position, etc., and
//               other general setup information for rendering a
//               particular scene.
////////////////////////////////////////////////////////////////////

1428 22 GraphicsOutput const * 0 8576 22 GraphicsOutput const * 22 GraphicsOutput const * 0 0 1429 0 0 0 0 0 0 0 0 0 0

1429 20 GraphicsOutput const 0 8832 20 GraphicsOutput const 20 GraphicsOutput const 0 0 1311 0 0 0 0 0 0 0 0 0 0

1430 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 1431 0 0 0 0 0 0 0 0 0 0

1431 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 1432 0 0 0 0 0 0 0 0 0 0

1432 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1433 29 BitMask< unsigned int, 32 > * 0 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1434 9 BitMask32 0 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1435 20 GraphicsOutputBase * 0 8576 20 GraphicsOutputBase * 20 GraphicsOutputBase * 0 0 1312 0 0 0 0 0 0 0 0 0 0

1436 27 GraphicsWindowInputDevice * 0 8576 27 GraphicsWindowInputDevice * 27 GraphicsWindowInputDevice * 0 0 1315 0 0 0 0 0 0 0 0 0 0

1437 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1438 12 ButtonHandle 0 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

1439 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1440 11 TouchInfo * 0 8576 11 TouchInfo * 11 TouchInfo * 0 0 1316 0 0 0 0 0 0 0 0 0 0

1441 38 GraphicsWindowProcCallbackData const * 0 8576 38 GraphicsWindowProcCallbackData const * 38 GraphicsWindowProcCallbackData const * 0 0 1442 0 0 0 0 0 0 0 0 0 0

1442 36 GraphicsWindowProcCallbackData const 0 8832 36 GraphicsWindowProcCallbackData const 36 GraphicsWindowProcCallbackData const 0 0 1318 0 0 0 0 0 0 0 0 0 0

1443 32 GraphicsWindowProcCallbackData * 0 8576 32 GraphicsWindowProcCallbackData * 32 GraphicsWindowProcCallbackData * 0 0 1318 0 0 0 0 0 0 0 0 0 0

1444 22 GraphicsWindow const * 0 8576 22 GraphicsWindow const * 22 GraphicsWindow const * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1445 20 GraphicsWindow const 0 8832 20 GraphicsWindow const 20 GraphicsWindow const 0 0 1320 0 0 0 0 0 0 0 0 0 0

1446 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 1320 0 0 0 0 0 0 0 0 0 0

1447 9 ButtonMap 0 2048 9 ButtonMap 9 ButtonMap 0 0 0 0 0 0 0 0 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : ButtonMap
// Description : This class represents a map containing all of the
//               buttons of a (keyboard) device, though it can also
//               be used as a generic mapping between ButtonHandles.
//               It maps an underlying 'raw' button to a 'virtual'
//               button, which may optionally be associated with an
//               appropriate platform-specific name for the button.
////////////////////////////////////////////////////////////////////

1448 11 ButtonMap * 0 8576 11 ButtonMap * 11 ButtonMap * 0 0 1447 0 0 0 0 0 0 0 0 0 0

1449 9 MouseData 0 2048 9 MouseData 9 MouseData 0 0 0 0 0 0 0 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : MouseData
// Description : Holds the data that might be generated by a 2-d
//               pointer input device, such as the mouse in the
//               GraphicsWindow.
////////////////////////////////////////////////////////////////////

1450 11 MouseData * 0 8576 11 MouseData * 11 MouseData * 0 0 1449 0 0 0 0 0 0 0 0 0 0

1451 24 CallbackGraphicsWindow * 0 8576 24 CallbackGraphicsWindow * 24 CallbackGraphicsWindow * 0 0 1321 0 0 0 0 0 0 0 0 0 0

1452 30 CallbackGraphicsWindow const * 0 8576 30 CallbackGraphicsWindow const * 30 CallbackGraphicsWindow const * 0 0 1453 0 0 0 0 0 0 0 0 0 0

1453 28 CallbackGraphicsWindow const 0 8832 28 CallbackGraphicsWindow const 28 CallbackGraphicsWindow const 0 0 1321 0 0 0 0 0 0 0 0 0 0

1454 26 WindowCallbackData const * 0 8576 50 CallbackGraphicsWindow::WindowCallbackData const * 50 CallbackGraphicsWindow::WindowCallbackData const * 0 0 1455 0 0 0 0 0 0 0 0 0 0

1455 24 WindowCallbackData const 0 8832 48 CallbackGraphicsWindow::WindowCallbackData const 48 CallbackGraphicsWindow::WindowCallbackData const 0 0 1322 0 0 0 0 0 0 0 0 0 0

1456 30 PropertiesCallbackData const * 0 8576 54 CallbackGraphicsWindow::PropertiesCallbackData const * 54 CallbackGraphicsWindow::PropertiesCallbackData const * 0 0 1457 0 0 0 0 0 0 0 0 0 0

1457 28 PropertiesCallbackData const 0 8832 52 CallbackGraphicsWindow::PropertiesCallbackData const 52 CallbackGraphicsWindow::PropertiesCallbackData const 0 0 1324 0 0 0 0 0 0 0 0 0 0

1458 26 RenderCallbackData const * 0 8576 50 CallbackGraphicsWindow::RenderCallbackData const * 50 CallbackGraphicsWindow::RenderCallbackData const * 0 0 1459 0 0 0 0 0 0 0 0 0 0

1459 24 RenderCallbackData const 0 8832 48 CallbackGraphicsWindow::RenderCallbackData const 48 CallbackGraphicsWindow::RenderCallbackData const 0 0 1326 0 0 0 0 0 0 0 0 0 0

1460 20 RenderCallbackData * 0 8576 44 CallbackGraphicsWindow::RenderCallbackData * 44 CallbackGraphicsWindow::RenderCallbackData * 0 0 1326 0 0 0 0 0 0 0 0 0 0

1461 37 DisplayRegionCullCallbackData const * 0 8576 37 DisplayRegionCullCallbackData const * 37 DisplayRegionCullCallbackData const * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1462 35 DisplayRegionCullCallbackData const 0 8832 35 DisplayRegionCullCallbackData const 35 DisplayRegionCullCallbackData const 0 0 1327 0 0 0 0 0 0 0 0 0 0

1463 13 CullHandler * 0 8576 13 CullHandler * 13 CullHandler * 0 0 1464 0 0 0 0 0 0 0 0 0 0

1464 11 CullHandler 0 2048 11 CullHandler 11 CullHandler 0 0 0 0 0 0 0 0 0 0 0 0 0

1465 10 CullResult 0 2048 10 CullResult 10 CullResult 0 0 0 0 0 0 0 0 0 0 0 0 611
////////////////////////////////////////////////////////////////////
//       Class : CullResult
// Description : This stores the result of a BinCullHandler traversal:
//               an ordered collection of CullBins, each of which
//               holds a number of Geoms and RenderStates to be
//               rendered in some defined order.
//
//               This is also used to keep the results of last frame's
//               cull traversal around to make next frame's traversal
//               of the same scene a little easier.
////////////////////////////////////////////////////////////////////

1466 37 DisplayRegionDrawCallbackData const * 0 8576 37 DisplayRegionDrawCallbackData const * 37 DisplayRegionDrawCallbackData const * 0 0 1467 0 0 0 0 0 0 0 0 0 0

1467 35 DisplayRegionDrawCallbackData const 0 8832 35 DisplayRegionDrawCallbackData const 35 DisplayRegionDrawCallbackData const 0 0 1328 0 0 0 0 0 0 0 0 0 0

1468 12 CullResult * 0 8576 12 CullResult * 12 CullResult * 0 0 1465 0 0 0 0 0 0 0 0 0 0

1469 25 DisplaySearchParameters * 0 8576 25 DisplaySearchParameters * 25 DisplaySearchParameters * 0 0 1329 0 0 0 0 0 0 0 0 0 0

1470 16 GraphicsBuffer * 0 8576 16 GraphicsBuffer * 16 GraphicsBuffer * 0 0 1330 0 0 0 0 0 0 0 0 0 0

1471 10 Pipeline * 0 8576 10 Pipeline * 10 Pipeline * 0 0 1472 0 0 0 0 0 0 0 0 0 0

1472 8 Pipeline 0 2048 8 Pipeline 8 Pipeline 0 0 0 0 0 0 0 0 0 0 0 0 0

1473 22 GraphicsEngine const * 0 8576 22 GraphicsEngine const * 22 GraphicsEngine const * 0 0 1474 0 0 0 0 0 0 0 0 0 0

1474 20 GraphicsEngine const 0 8832 20 GraphicsEngine const 20 GraphicsEngine const 0 0 1331 0 0 0 0 0 0 0 0 0 0

1475 15 ReMutex const * 0 8576 15 ReMutex const * 15 ReMutex const * 0 0 1476 0 0 0 0 0 0 0 0 0 0

1476 13 ReMutex const 0 8832 13 ReMutex const 13 ReMutex const 0 0 1477 0 0 0 0 0 0 0 0 0 0

1477 7 ReMutex 0 2048 7 ReMutex 7 ReMutex 0 0 0 0 0 0 0 0 0 0 0 0 0

1478 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 1479 0 0 0 0 0 0 0 0 0 0

1479 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 1480 0 0 0 0 0 0 0 0 0 0

1480 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1481 20 ShaderAttrib const * 0 8576 20 ShaderAttrib const * 20 ShaderAttrib const * 0 0 1482 0 0 0 0 0 0 0 0 0 0

1482 18 ShaderAttrib const 0 8832 18 ShaderAttrib const 18 ShaderAttrib const 0 0 1483 0 0 0 0 0 0 0 0 0 0

1483 12 ShaderAttrib 0 2048 12 ShaderAttrib 12 ShaderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 184
////////////////////////////////////////////////////////////////////
//       Class : ShaderAttrib
// Description :
////////////////////////////////////////////////////////////////////

1484 29 GraphicsPipeSelection const * 0 8576 29 GraphicsPipeSelection const * 29 GraphicsPipeSelection const * 0 0 1485 0 0 0 0 0 0 0 0 0 0

1485 27 GraphicsPipeSelection const 0 8832 27 GraphicsPipeSelection const 27 GraphicsPipeSelection const 0 0 1333 0 0 0 0 0 0 0 0 0 0

1486 23 GraphicsPipeSelection * 0 8576 23 GraphicsPipeSelection * 23 GraphicsPipeSelection * 0 0 1333 0 0 0 0 0 0 0 0 0 0

1487 16 ParasiteBuffer * 0 8576 16 ParasiteBuffer * 16 ParasiteBuffer * 0 0 1335 0 0 0 0 0 0 0 0 0 0

1488 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
14
1489 0 0 342 8 get_gsgs 12 get_num_gsgs 7 get_gsg 
1490 0 0 428 19 get_display_regions 23 get_num_display_regions 18 get_display_region 
1491 0 0 428 26 get_active_display_regions 30 get_num_active_display_regions 25 get_active_display_region 
1492 0 0 542 22 get_input_device_names 21 get_num_input_devices 21 get_input_device_name 
1493 0 0 624 11 get_windows 15 get_num_windows 10 get_window 
1494 0 0 653 14 get_pipe_types 18 get_num_pipe_types 13 get_pipe_type 
1495 0 0 924 9 get_nodes 13 get_num_nodes 8 get_node 
1496 0 0 924 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
1497 0 0 981 11 get_parents 15 get_num_parents 10 get_parent 
1498 0 0 981 12 get_children 16 get_num_children 9 get_child 
1499 0 0 981 11 get_stashed 15 get_num_stashed 11 get_stashed 
1500 0 0 1148 13 get_on_stages 17 get_num_on_stages 12 get_on_stage 
1501 0 0 1148 16 get_on_ff_stages 20 get_num_on_ff_stages 15 get_on_ff_stage 
1502 0 0 1148 14 get_off_stages 18 get_num_off_stages 13 get_off_stage 
